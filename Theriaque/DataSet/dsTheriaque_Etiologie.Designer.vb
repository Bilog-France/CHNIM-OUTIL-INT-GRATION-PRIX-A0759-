'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Etiologie"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Etiologie
    Inherits Global.System.Data.DataSet
    
    Private tableFET_FICHEETIOLOGIE As FET_FICHEETIOLOGIEDataTable
    
    Private tableFETCPH_ETIOCPH As FETCPH_ETIOCPHDataTable
    
    Private tableFETCCH_ETIOCCH As FETCCH_ETIOCCHDataTable
    
    Private tableFETSAC_ETIOSUBAC As FETSAC_ETIOSUBACDataTable
    
    Private tableFETPR_ETIOPROD As FETPR_ETIOPRODDataTable
    
    Private tableFETSP_ETIOSPE As FETSP_ETIOSPEDataTable
    
    Private tableFETTXTI_TEXTINTRO_CMI As FETTXTI_TEXTINTRO_CMIDataTable
    
    Private tableFETHS_ETIOLOGIE_HABITU_SENSIB As FETHS_ETIOLOGIE_HABITU_SENSIBDataTable
    
    Private tableFETCHS_COMMENT_HABITU_SENSIBLE As FETCHS_COMMENT_HABITU_SENSIBLEDataTable
    
    Private tableFETTX1_ET_TXHS As FETTX1_ET_TXHSDataTable
    
    Private tableFETIS_ETIOLOGIE_INCONST_SENSIB As FETIS_ETIOLOGIE_INCONST_SENSIBDataTable
    
    Private tableFETCIS_COMMENT_INCONS_SENSIBLE As FETCIS_COMMENT_INCONS_SENSIBLEDataTable
    
    Private tableFETTX2_ET_TXIS As FETTX2_ET_TXISDataTable
    
    Private tableFETMS_ETIOLOGIE_MODEREM_SENSIB As FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable
    
    Private tableFETCMS_COMMENT_MODERE_SENSIBLE As FETCMS_COMMENT_MODERE_SENSIBLEDataTable
    
    Private tableFETTX3_ET_TXMS As FETTX3_ET_TXMSDataTable
    
    Private tableFETRE_ETIOLOGIE_RESISTANTES As FETRE_ETIOLOGIE_RESISTANTESDataTable
    
    Private tableFETCRE_COMMENT_RESISTANTE As FETCRE_COMMENT_RESISTANTEDataTable
    
    Private tableFETTX4_ET_TXRE As FETTX4_ET_TXREDataTable
    
    Private tableFETAFS_FET_AFSSAPS As FETAFS_FET_AFSSAPSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FET_FICHEETIOLOGIE")) Is Nothing) Then
                MyBase.Tables.Add(New FET_FICHEETIOLOGIEDataTable(ds.Tables("FET_FICHEETIOLOGIE")))
            End If
            If (Not (ds.Tables("FETCPH_ETIOCPH")) Is Nothing) Then
                MyBase.Tables.Add(New FETCPH_ETIOCPHDataTable(ds.Tables("FETCPH_ETIOCPH")))
            End If
            If (Not (ds.Tables("FETCCH_ETIOCCH")) Is Nothing) Then
                MyBase.Tables.Add(New FETCCH_ETIOCCHDataTable(ds.Tables("FETCCH_ETIOCCH")))
            End If
            If (Not (ds.Tables("FETSAC_ETIOSUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FETSAC_ETIOSUBACDataTable(ds.Tables("FETSAC_ETIOSUBAC")))
            End If
            If (Not (ds.Tables("FETPR_ETIOPROD")) Is Nothing) Then
                MyBase.Tables.Add(New FETPR_ETIOPRODDataTable(ds.Tables("FETPR_ETIOPROD")))
            End If
            If (Not (ds.Tables("FETSP_ETIOSPE")) Is Nothing) Then
                MyBase.Tables.Add(New FETSP_ETIOSPEDataTable(ds.Tables("FETSP_ETIOSPE")))
            End If
            If (Not (ds.Tables("FETTXTI_TEXTINTRO_CMI")) Is Nothing) Then
                MyBase.Tables.Add(New FETTXTI_TEXTINTRO_CMIDataTable(ds.Tables("FETTXTI_TEXTINTRO_CMI")))
            End If
            If (Not (ds.Tables("FETHS_ETIOLOGIE_HABITU_SENSIB")) Is Nothing) Then
                MyBase.Tables.Add(New FETHS_ETIOLOGIE_HABITU_SENSIBDataTable(ds.Tables("FETHS_ETIOLOGIE_HABITU_SENSIB")))
            End If
            If (Not (ds.Tables("FETCHS_COMMENT_HABITU_SENSIBLE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCHS_COMMENT_HABITU_SENSIBLEDataTable(ds.Tables("FETCHS_COMMENT_HABITU_SENSIBLE")))
            End If
            If (Not (ds.Tables("FETTX1_ET_TXHS")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX1_ET_TXHSDataTable(ds.Tables("FETTX1_ET_TXHS")))
            End If
            If (Not (ds.Tables("FETIS_ETIOLOGIE_INCONST_SENSIB")) Is Nothing) Then
                MyBase.Tables.Add(New FETIS_ETIOLOGIE_INCONST_SENSIBDataTable(ds.Tables("FETIS_ETIOLOGIE_INCONST_SENSIB")))
            End If
            If (Not (ds.Tables("FETCIS_COMMENT_INCONS_SENSIBLE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCIS_COMMENT_INCONS_SENSIBLEDataTable(ds.Tables("FETCIS_COMMENT_INCONS_SENSIBLE")))
            End If
            If (Not (ds.Tables("FETTX2_ET_TXIS")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX2_ET_TXISDataTable(ds.Tables("FETTX2_ET_TXIS")))
            End If
            If (Not (ds.Tables("FETMS_ETIOLOGIE_MODEREM_SENSIB")) Is Nothing) Then
                MyBase.Tables.Add(New FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable(ds.Tables("FETMS_ETIOLOGIE_MODEREM_SENSIB")))
            End If
            If (Not (ds.Tables("FETCMS_COMMENT_MODERE_SENSIBLE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCMS_COMMENT_MODERE_SENSIBLEDataTable(ds.Tables("FETCMS_COMMENT_MODERE_SENSIBLE")))
            End If
            If (Not (ds.Tables("FETTX3_ET_TXMS")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX3_ET_TXMSDataTable(ds.Tables("FETTX3_ET_TXMS")))
            End If
            If (Not (ds.Tables("FETRE_ETIOLOGIE_RESISTANTES")) Is Nothing) Then
                MyBase.Tables.Add(New FETRE_ETIOLOGIE_RESISTANTESDataTable(ds.Tables("FETRE_ETIOLOGIE_RESISTANTES")))
            End If
            If (Not (ds.Tables("FETCRE_COMMENT_RESISTANTE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCRE_COMMENT_RESISTANTEDataTable(ds.Tables("FETCRE_COMMENT_RESISTANTE")))
            End If
            If (Not (ds.Tables("FETTX4_ET_TXRE")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX4_ET_TXREDataTable(ds.Tables("FETTX4_ET_TXRE")))
            End If
            If (Not (ds.Tables("FETAFS_FET_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FETAFS_FET_AFSSAPSDataTable(ds.Tables("FETAFS_FET_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FET_FICHEETIOLOGIE() As FET_FICHEETIOLOGIEDataTable
        Get
            Return Me.tableFET_FICHEETIOLOGIE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETCPH_ETIOCPH() As FETCPH_ETIOCPHDataTable
        Get
            Return Me.tableFETCPH_ETIOCPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETCCH_ETIOCCH() As FETCCH_ETIOCCHDataTable
        Get
            Return Me.tableFETCCH_ETIOCCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETSAC_ETIOSUBAC() As FETSAC_ETIOSUBACDataTable
        Get
            Return Me.tableFETSAC_ETIOSUBAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETPR_ETIOPROD() As FETPR_ETIOPRODDataTable
        Get
            Return Me.tableFETPR_ETIOPROD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETSP_ETIOSPE() As FETSP_ETIOSPEDataTable
        Get
            Return Me.tableFETSP_ETIOSPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETTXTI_TEXTINTRO_CMI() As FETTXTI_TEXTINTRO_CMIDataTable
        Get
            Return Me.tableFETTXTI_TEXTINTRO_CMI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETHS_ETIOLOGIE_HABITU_SENSIB() As FETHS_ETIOLOGIE_HABITU_SENSIBDataTable
        Get
            Return Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETCHS_COMMENT_HABITU_SENSIBLE() As FETCHS_COMMENT_HABITU_SENSIBLEDataTable
        Get
            Return Me.tableFETCHS_COMMENT_HABITU_SENSIBLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETTX1_ET_TXHS() As FETTX1_ET_TXHSDataTable
        Get
            Return Me.tableFETTX1_ET_TXHS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETIS_ETIOLOGIE_INCONST_SENSIB() As FETIS_ETIOLOGIE_INCONST_SENSIBDataTable
        Get
            Return Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETCIS_COMMENT_INCONS_SENSIBLE() As FETCIS_COMMENT_INCONS_SENSIBLEDataTable
        Get
            Return Me.tableFETCIS_COMMENT_INCONS_SENSIBLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETTX2_ET_TXIS() As FETTX2_ET_TXISDataTable
        Get
            Return Me.tableFETTX2_ET_TXIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETMS_ETIOLOGIE_MODEREM_SENSIB() As FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable
        Get
            Return Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETCMS_COMMENT_MODERE_SENSIBLE() As FETCMS_COMMENT_MODERE_SENSIBLEDataTable
        Get
            Return Me.tableFETCMS_COMMENT_MODERE_SENSIBLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETTX3_ET_TXMS() As FETTX3_ET_TXMSDataTable
        Get
            Return Me.tableFETTX3_ET_TXMS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETRE_ETIOLOGIE_RESISTANTES() As FETRE_ETIOLOGIE_RESISTANTESDataTable
        Get
            Return Me.tableFETRE_ETIOLOGIE_RESISTANTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETCRE_COMMENT_RESISTANTE() As FETCRE_COMMENT_RESISTANTEDataTable
        Get
            Return Me.tableFETCRE_COMMENT_RESISTANTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETTX4_ET_TXRE() As FETTX4_ET_TXREDataTable
        Get
            Return Me.tableFETTX4_ET_TXRE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FETAFS_FET_AFSSAPS() As FETAFS_FET_AFSSAPSDataTable
        Get
            Return Me.tableFETAFS_FET_AFSSAPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Etiologie = CType(MyBase.Clone,dsTheriaque_Etiologie)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("FET_FICHEETIOLOGIE")) Is Nothing) Then
                MyBase.Tables.Add(New FET_FICHEETIOLOGIEDataTable(ds.Tables("FET_FICHEETIOLOGIE")))
            End If
            If (Not (ds.Tables("FETCPH_ETIOCPH")) Is Nothing) Then
                MyBase.Tables.Add(New FETCPH_ETIOCPHDataTable(ds.Tables("FETCPH_ETIOCPH")))
            End If
            If (Not (ds.Tables("FETCCH_ETIOCCH")) Is Nothing) Then
                MyBase.Tables.Add(New FETCCH_ETIOCCHDataTable(ds.Tables("FETCCH_ETIOCCH")))
            End If
            If (Not (ds.Tables("FETSAC_ETIOSUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FETSAC_ETIOSUBACDataTable(ds.Tables("FETSAC_ETIOSUBAC")))
            End If
            If (Not (ds.Tables("FETPR_ETIOPROD")) Is Nothing) Then
                MyBase.Tables.Add(New FETPR_ETIOPRODDataTable(ds.Tables("FETPR_ETIOPROD")))
            End If
            If (Not (ds.Tables("FETSP_ETIOSPE")) Is Nothing) Then
                MyBase.Tables.Add(New FETSP_ETIOSPEDataTable(ds.Tables("FETSP_ETIOSPE")))
            End If
            If (Not (ds.Tables("FETTXTI_TEXTINTRO_CMI")) Is Nothing) Then
                MyBase.Tables.Add(New FETTXTI_TEXTINTRO_CMIDataTable(ds.Tables("FETTXTI_TEXTINTRO_CMI")))
            End If
            If (Not (ds.Tables("FETHS_ETIOLOGIE_HABITU_SENSIB")) Is Nothing) Then
                MyBase.Tables.Add(New FETHS_ETIOLOGIE_HABITU_SENSIBDataTable(ds.Tables("FETHS_ETIOLOGIE_HABITU_SENSIB")))
            End If
            If (Not (ds.Tables("FETCHS_COMMENT_HABITU_SENSIBLE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCHS_COMMENT_HABITU_SENSIBLEDataTable(ds.Tables("FETCHS_COMMENT_HABITU_SENSIBLE")))
            End If
            If (Not (ds.Tables("FETTX1_ET_TXHS")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX1_ET_TXHSDataTable(ds.Tables("FETTX1_ET_TXHS")))
            End If
            If (Not (ds.Tables("FETIS_ETIOLOGIE_INCONST_SENSIB")) Is Nothing) Then
                MyBase.Tables.Add(New FETIS_ETIOLOGIE_INCONST_SENSIBDataTable(ds.Tables("FETIS_ETIOLOGIE_INCONST_SENSIB")))
            End If
            If (Not (ds.Tables("FETCIS_COMMENT_INCONS_SENSIBLE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCIS_COMMENT_INCONS_SENSIBLEDataTable(ds.Tables("FETCIS_COMMENT_INCONS_SENSIBLE")))
            End If
            If (Not (ds.Tables("FETTX2_ET_TXIS")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX2_ET_TXISDataTable(ds.Tables("FETTX2_ET_TXIS")))
            End If
            If (Not (ds.Tables("FETMS_ETIOLOGIE_MODEREM_SENSIB")) Is Nothing) Then
                MyBase.Tables.Add(New FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable(ds.Tables("FETMS_ETIOLOGIE_MODEREM_SENSIB")))
            End If
            If (Not (ds.Tables("FETCMS_COMMENT_MODERE_SENSIBLE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCMS_COMMENT_MODERE_SENSIBLEDataTable(ds.Tables("FETCMS_COMMENT_MODERE_SENSIBLE")))
            End If
            If (Not (ds.Tables("FETTX3_ET_TXMS")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX3_ET_TXMSDataTable(ds.Tables("FETTX3_ET_TXMS")))
            End If
            If (Not (ds.Tables("FETRE_ETIOLOGIE_RESISTANTES")) Is Nothing) Then
                MyBase.Tables.Add(New FETRE_ETIOLOGIE_RESISTANTESDataTable(ds.Tables("FETRE_ETIOLOGIE_RESISTANTES")))
            End If
            If (Not (ds.Tables("FETCRE_COMMENT_RESISTANTE")) Is Nothing) Then
                MyBase.Tables.Add(New FETCRE_COMMENT_RESISTANTEDataTable(ds.Tables("FETCRE_COMMENT_RESISTANTE")))
            End If
            If (Not (ds.Tables("FETTX4_ET_TXRE")) Is Nothing) Then
                MyBase.Tables.Add(New FETTX4_ET_TXREDataTable(ds.Tables("FETTX4_ET_TXRE")))
            End If
            If (Not (ds.Tables("FETAFS_FET_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FETAFS_FET_AFSSAPSDataTable(ds.Tables("FETAFS_FET_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFET_FICHEETIOLOGIE = CType(MyBase.Tables("FET_FICHEETIOLOGIE"),FET_FICHEETIOLOGIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFET_FICHEETIOLOGIE) Is Nothing) Then
                Me.tableFET_FICHEETIOLOGIE.InitVars
            End If
        End If
        Me.tableFETCPH_ETIOCPH = CType(MyBase.Tables("FETCPH_ETIOCPH"),FETCPH_ETIOCPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETCPH_ETIOCPH) Is Nothing) Then
                Me.tableFETCPH_ETIOCPH.InitVars
            End If
        End If
        Me.tableFETCCH_ETIOCCH = CType(MyBase.Tables("FETCCH_ETIOCCH"),FETCCH_ETIOCCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETCCH_ETIOCCH) Is Nothing) Then
                Me.tableFETCCH_ETIOCCH.InitVars
            End If
        End If
        Me.tableFETSAC_ETIOSUBAC = CType(MyBase.Tables("FETSAC_ETIOSUBAC"),FETSAC_ETIOSUBACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETSAC_ETIOSUBAC) Is Nothing) Then
                Me.tableFETSAC_ETIOSUBAC.InitVars
            End If
        End If
        Me.tableFETPR_ETIOPROD = CType(MyBase.Tables("FETPR_ETIOPROD"),FETPR_ETIOPRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETPR_ETIOPROD) Is Nothing) Then
                Me.tableFETPR_ETIOPROD.InitVars
            End If
        End If
        Me.tableFETSP_ETIOSPE = CType(MyBase.Tables("FETSP_ETIOSPE"),FETSP_ETIOSPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETSP_ETIOSPE) Is Nothing) Then
                Me.tableFETSP_ETIOSPE.InitVars
            End If
        End If
        Me.tableFETTXTI_TEXTINTRO_CMI = CType(MyBase.Tables("FETTXTI_TEXTINTRO_CMI"),FETTXTI_TEXTINTRO_CMIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETTXTI_TEXTINTRO_CMI) Is Nothing) Then
                Me.tableFETTXTI_TEXTINTRO_CMI.InitVars
            End If
        End If
        Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB = CType(MyBase.Tables("FETHS_ETIOLOGIE_HABITU_SENSIB"),FETHS_ETIOLOGIE_HABITU_SENSIBDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB) Is Nothing) Then
                Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.InitVars
            End If
        End If
        Me.tableFETCHS_COMMENT_HABITU_SENSIBLE = CType(MyBase.Tables("FETCHS_COMMENT_HABITU_SENSIBLE"),FETCHS_COMMENT_HABITU_SENSIBLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETCHS_COMMENT_HABITU_SENSIBLE) Is Nothing) Then
                Me.tableFETCHS_COMMENT_HABITU_SENSIBLE.InitVars
            End If
        End If
        Me.tableFETTX1_ET_TXHS = CType(MyBase.Tables("FETTX1_ET_TXHS"),FETTX1_ET_TXHSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETTX1_ET_TXHS) Is Nothing) Then
                Me.tableFETTX1_ET_TXHS.InitVars
            End If
        End If
        Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB = CType(MyBase.Tables("FETIS_ETIOLOGIE_INCONST_SENSIB"),FETIS_ETIOLOGIE_INCONST_SENSIBDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB) Is Nothing) Then
                Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.InitVars
            End If
        End If
        Me.tableFETCIS_COMMENT_INCONS_SENSIBLE = CType(MyBase.Tables("FETCIS_COMMENT_INCONS_SENSIBLE"),FETCIS_COMMENT_INCONS_SENSIBLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETCIS_COMMENT_INCONS_SENSIBLE) Is Nothing) Then
                Me.tableFETCIS_COMMENT_INCONS_SENSIBLE.InitVars
            End If
        End If
        Me.tableFETTX2_ET_TXIS = CType(MyBase.Tables("FETTX2_ET_TXIS"),FETTX2_ET_TXISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETTX2_ET_TXIS) Is Nothing) Then
                Me.tableFETTX2_ET_TXIS.InitVars
            End If
        End If
        Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB = CType(MyBase.Tables("FETMS_ETIOLOGIE_MODEREM_SENSIB"),FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB) Is Nothing) Then
                Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.InitVars
            End If
        End If
        Me.tableFETCMS_COMMENT_MODERE_SENSIBLE = CType(MyBase.Tables("FETCMS_COMMENT_MODERE_SENSIBLE"),FETCMS_COMMENT_MODERE_SENSIBLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETCMS_COMMENT_MODERE_SENSIBLE) Is Nothing) Then
                Me.tableFETCMS_COMMENT_MODERE_SENSIBLE.InitVars
            End If
        End If
        Me.tableFETTX3_ET_TXMS = CType(MyBase.Tables("FETTX3_ET_TXMS"),FETTX3_ET_TXMSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETTX3_ET_TXMS) Is Nothing) Then
                Me.tableFETTX3_ET_TXMS.InitVars
            End If
        End If
        Me.tableFETRE_ETIOLOGIE_RESISTANTES = CType(MyBase.Tables("FETRE_ETIOLOGIE_RESISTANTES"),FETRE_ETIOLOGIE_RESISTANTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETRE_ETIOLOGIE_RESISTANTES) Is Nothing) Then
                Me.tableFETRE_ETIOLOGIE_RESISTANTES.InitVars
            End If
        End If
        Me.tableFETCRE_COMMENT_RESISTANTE = CType(MyBase.Tables("FETCRE_COMMENT_RESISTANTE"),FETCRE_COMMENT_RESISTANTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETCRE_COMMENT_RESISTANTE) Is Nothing) Then
                Me.tableFETCRE_COMMENT_RESISTANTE.InitVars
            End If
        End If
        Me.tableFETTX4_ET_TXRE = CType(MyBase.Tables("FETTX4_ET_TXRE"),FETTX4_ET_TXREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETTX4_ET_TXRE) Is Nothing) Then
                Me.tableFETTX4_ET_TXRE.InitVars
            End If
        End If
        Me.tableFETAFS_FET_AFSSAPS = CType(MyBase.Tables("FETAFS_FET_AFSSAPS"),FETAFS_FET_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFETAFS_FET_AFSSAPS) Is Nothing) Then
                Me.tableFETAFS_FET_AFSSAPS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Etiologie"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Etiologie.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFET_FICHEETIOLOGIE = New FET_FICHEETIOLOGIEDataTable()
        MyBase.Tables.Add(Me.tableFET_FICHEETIOLOGIE)
        Me.tableFETCPH_ETIOCPH = New FETCPH_ETIOCPHDataTable()
        MyBase.Tables.Add(Me.tableFETCPH_ETIOCPH)
        Me.tableFETCCH_ETIOCCH = New FETCCH_ETIOCCHDataTable()
        MyBase.Tables.Add(Me.tableFETCCH_ETIOCCH)
        Me.tableFETSAC_ETIOSUBAC = New FETSAC_ETIOSUBACDataTable()
        MyBase.Tables.Add(Me.tableFETSAC_ETIOSUBAC)
        Me.tableFETPR_ETIOPROD = New FETPR_ETIOPRODDataTable()
        MyBase.Tables.Add(Me.tableFETPR_ETIOPROD)
        Me.tableFETSP_ETIOSPE = New FETSP_ETIOSPEDataTable()
        MyBase.Tables.Add(Me.tableFETSP_ETIOSPE)
        Me.tableFETTXTI_TEXTINTRO_CMI = New FETTXTI_TEXTINTRO_CMIDataTable()
        MyBase.Tables.Add(Me.tableFETTXTI_TEXTINTRO_CMI)
        Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB = New FETHS_ETIOLOGIE_HABITU_SENSIBDataTable()
        MyBase.Tables.Add(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB)
        Me.tableFETCHS_COMMENT_HABITU_SENSIBLE = New FETCHS_COMMENT_HABITU_SENSIBLEDataTable()
        MyBase.Tables.Add(Me.tableFETCHS_COMMENT_HABITU_SENSIBLE)
        Me.tableFETTX1_ET_TXHS = New FETTX1_ET_TXHSDataTable()
        MyBase.Tables.Add(Me.tableFETTX1_ET_TXHS)
        Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB = New FETIS_ETIOLOGIE_INCONST_SENSIBDataTable()
        MyBase.Tables.Add(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB)
        Me.tableFETCIS_COMMENT_INCONS_SENSIBLE = New FETCIS_COMMENT_INCONS_SENSIBLEDataTable()
        MyBase.Tables.Add(Me.tableFETCIS_COMMENT_INCONS_SENSIBLE)
        Me.tableFETTX2_ET_TXIS = New FETTX2_ET_TXISDataTable()
        MyBase.Tables.Add(Me.tableFETTX2_ET_TXIS)
        Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB = New FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable()
        MyBase.Tables.Add(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB)
        Me.tableFETCMS_COMMENT_MODERE_SENSIBLE = New FETCMS_COMMENT_MODERE_SENSIBLEDataTable()
        MyBase.Tables.Add(Me.tableFETCMS_COMMENT_MODERE_SENSIBLE)
        Me.tableFETTX3_ET_TXMS = New FETTX3_ET_TXMSDataTable()
        MyBase.Tables.Add(Me.tableFETTX3_ET_TXMS)
        Me.tableFETRE_ETIOLOGIE_RESISTANTES = New FETRE_ETIOLOGIE_RESISTANTESDataTable()
        MyBase.Tables.Add(Me.tableFETRE_ETIOLOGIE_RESISTANTES)
        Me.tableFETCRE_COMMENT_RESISTANTE = New FETCRE_COMMENT_RESISTANTEDataTable()
        MyBase.Tables.Add(Me.tableFETCRE_COMMENT_RESISTANTE)
        Me.tableFETTX4_ET_TXRE = New FETTX4_ET_TXREDataTable()
        MyBase.Tables.Add(Me.tableFETTX4_ET_TXRE)
        Me.tableFETAFS_FET_AFSSAPS = New FETAFS_FET_AFSSAPSDataTable()
        MyBase.Tables.Add(Me.tableFETAFS_FET_AFSSAPS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFET_FICHEETIOLOGIE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETCPH_ETIOCPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETCCH_ETIOCCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETSAC_ETIOSUBAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETPR_ETIOPROD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETSP_ETIOSPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETTXTI_TEXTINTRO_CMI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETHS_ETIOLOGIE_HABITU_SENSIB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETCHS_COMMENT_HABITU_SENSIBLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETTX1_ET_TXHS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETIS_ETIOLOGIE_INCONST_SENSIB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETCIS_COMMENT_INCONS_SENSIBLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETTX2_ET_TXIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETMS_ETIOLOGIE_MODEREM_SENSIB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETCMS_COMMENT_MODERE_SENSIBLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETTX3_ET_TXMS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETRE_ETIOLOGIE_RESISTANTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETCRE_COMMENT_RESISTANTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETTX4_ET_TXRE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeFETAFS_FET_AFSSAPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FET_FICHEETIOLOGIERowChangeEventHandler(ByVal sender As Object, ByVal e As FET_FICHEETIOLOGIERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETCPH_ETIOCPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FETCPH_ETIOCPHRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETCCH_ETIOCCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FETCCH_ETIOCCHRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETSAC_ETIOSUBACRowChangeEventHandler(ByVal sender As Object, ByVal e As FETSAC_ETIOSUBACRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETPR_ETIOPRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FETPR_ETIOPRODRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETSP_ETIOSPERowChangeEventHandler(ByVal sender As Object, ByVal e As FETSP_ETIOSPERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETTXTI_TEXTINTRO_CMIRowChangeEventHandler(ByVal sender As Object, ByVal e As FETTXTI_TEXTINTRO_CMIRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEventHandler(ByVal sender As Object, ByVal e As FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETCHS_COMMENT_HABITU_SENSIBLERowChangeEventHandler(ByVal sender As Object, ByVal e As FETCHS_COMMENT_HABITU_SENSIBLERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETTX1_ET_TXHSRowChangeEventHandler(ByVal sender As Object, ByVal e As FETTX1_ET_TXHSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEventHandler(ByVal sender As Object, ByVal e As FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETCIS_COMMENT_INCONS_SENSIBLERowChangeEventHandler(ByVal sender As Object, ByVal e As FETCIS_COMMENT_INCONS_SENSIBLERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETTX2_ET_TXISRowChangeEventHandler(ByVal sender As Object, ByVal e As FETTX2_ET_TXISRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEventHandler(ByVal sender As Object, ByVal e As FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETCMS_COMMENT_MODERE_SENSIBLERowChangeEventHandler(ByVal sender As Object, ByVal e As FETCMS_COMMENT_MODERE_SENSIBLERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETTX3_ET_TXMSRowChangeEventHandler(ByVal sender As Object, ByVal e As FETTX3_ET_TXMSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETRE_ETIOLOGIE_RESISTANTESRowChangeEventHandler(ByVal sender As Object, ByVal e As FETRE_ETIOLOGIE_RESISTANTESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETCRE_COMMENT_RESISTANTERowChangeEventHandler(ByVal sender As Object, ByVal e As FETCRE_COMMENT_RESISTANTERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETTX4_ET_TXRERowChangeEventHandler(ByVal sender As Object, ByVal e As FETTX4_ET_TXRERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub FETAFS_FET_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FETAFS_FET_AFSSAPSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FET_FICHEETIOLOGIEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFET_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFET_CMIHS As Global.System.Data.DataColumn
        
        Private columnFET_CDF_UDHS_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFET_CMIIS As Global.System.Data.DataColumn
        
        Private columnFET_CDF_UDIS_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFET_CMIMS As Global.System.Data.DataColumn
        
        Private columnFET_CDF_UDMS_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFET_CMIRE As Global.System.Data.DataColumn
        
        Private columnFET_CDF_UDRE_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFET_DATECR As Global.System.Data.DataColumn
        
        Private columnFET_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FET_FICHEETIOLOGIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CMIHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CMIHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CDF_UDHS_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CDF_UDHS_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CMIISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CMIIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CDF_UDIS_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CDF_UDIS_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CMIMSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CMIMS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CDF_UDMS_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CDF_UDMS_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CMIREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CMIRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_CDF_UDRE_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_CDF_UDRE_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FET_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFET_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FET_FICHEETIOLOGIERow
            Get
                Return CType(Me.Rows(index),FET_FICHEETIOLOGIERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FET_FICHEETIOLOGIERowChanging As FET_FICHEETIOLOGIERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FET_FICHEETIOLOGIERowChanged As FET_FICHEETIOLOGIERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FET_FICHEETIOLOGIERowDeleting As FET_FICHEETIOLOGIERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FET_FICHEETIOLOGIERowDeleted As FET_FICHEETIOLOGIERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFET_FICHEETIOLOGIERow(ByVal row As FET_FICHEETIOLOGIERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFET_FICHEETIOLOGIERow(ByVal FET_CODE_SQ_PK As Integer, ByVal FET_CMIHS As Decimal, ByVal FET_CDF_UDHS_CODE_FK As String, ByVal FET_CMIIS As Decimal, ByVal FET_CDF_UDIS_CODE_FK As String, ByVal FET_CMIMS As Decimal, ByVal FET_CDF_UDMS_CODE_FK As String, ByVal FET_CMIRE As Decimal, ByVal FET_CDF_UDRE_CODE_FK As String, ByVal FET_DATECR As Date, ByVal FET_DATEMJ As Date) As FET_FICHEETIOLOGIERow
            Dim rowFET_FICHEETIOLOGIERow As FET_FICHEETIOLOGIERow = CType(Me.NewRow,FET_FICHEETIOLOGIERow)
            Dim columnValuesArray() As Object = New Object() {FET_CODE_SQ_PK, FET_CMIHS, FET_CDF_UDHS_CODE_FK, FET_CMIIS, FET_CDF_UDIS_CODE_FK, FET_CMIMS, FET_CDF_UDMS_CODE_FK, FET_CMIRE, FET_CDF_UDRE_CODE_FK, FET_DATECR, FET_DATEMJ}
            rowFET_FICHEETIOLOGIERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFET_FICHEETIOLOGIERow)
            Return rowFET_FICHEETIOLOGIERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFET_CODE_SQ_PK(ByVal FET_CODE_SQ_PK As Integer) As FET_FICHEETIOLOGIERow
            Return CType(Me.Rows.Find(New Object() {FET_CODE_SQ_PK}),FET_FICHEETIOLOGIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FET_FICHEETIOLOGIEDataTable = CType(MyBase.Clone,FET_FICHEETIOLOGIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FET_FICHEETIOLOGIEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFET_CODE_SQ_PK = MyBase.Columns("FET_CODE_SQ_PK")
            Me.columnFET_CMIHS = MyBase.Columns("FET_CMIHS")
            Me.columnFET_CDF_UDHS_CODE_FK = MyBase.Columns("FET_CDF_UDHS_CODE_FK")
            Me.columnFET_CMIIS = MyBase.Columns("FET_CMIIS")
            Me.columnFET_CDF_UDIS_CODE_FK = MyBase.Columns("FET_CDF_UDIS_CODE_FK")
            Me.columnFET_CMIMS = MyBase.Columns("FET_CMIMS")
            Me.columnFET_CDF_UDMS_CODE_FK = MyBase.Columns("FET_CDF_UDMS_CODE_FK")
            Me.columnFET_CMIRE = MyBase.Columns("FET_CMIRE")
            Me.columnFET_CDF_UDRE_CODE_FK = MyBase.Columns("FET_CDF_UDRE_CODE_FK")
            Me.columnFET_DATECR = MyBase.Columns("FET_DATECR")
            Me.columnFET_DATEMJ = MyBase.Columns("FET_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFET_CODE_SQ_PK = New Global.System.Data.DataColumn("FET_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CODE_SQ_PK)
            Me.columnFET_CMIHS = New Global.System.Data.DataColumn("FET_CMIHS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CMIHS)
            Me.columnFET_CDF_UDHS_CODE_FK = New Global.System.Data.DataColumn("FET_CDF_UDHS_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CDF_UDHS_CODE_FK)
            Me.columnFET_CMIIS = New Global.System.Data.DataColumn("FET_CMIIS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CMIIS)
            Me.columnFET_CDF_UDIS_CODE_FK = New Global.System.Data.DataColumn("FET_CDF_UDIS_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CDF_UDIS_CODE_FK)
            Me.columnFET_CMIMS = New Global.System.Data.DataColumn("FET_CMIMS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CMIMS)
            Me.columnFET_CDF_UDMS_CODE_FK = New Global.System.Data.DataColumn("FET_CDF_UDMS_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CDF_UDMS_CODE_FK)
            Me.columnFET_CMIRE = New Global.System.Data.DataColumn("FET_CMIRE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CMIRE)
            Me.columnFET_CDF_UDRE_CODE_FK = New Global.System.Data.DataColumn("FET_CDF_UDRE_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_CDF_UDRE_CODE_FK)
            Me.columnFET_DATECR = New Global.System.Data.DataColumn("FET_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_DATECR)
            Me.columnFET_DATEMJ = New Global.System.Data.DataColumn("FET_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFET_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFET_CODE_SQ_PK}, true))
            Me.columnFET_CODE_SQ_PK.AllowDBNull = false
            Me.columnFET_CODE_SQ_PK.Unique = true
            Me.columnFET_CDF_UDHS_CODE_FK.MaxLength = 10
            Me.columnFET_CDF_UDIS_CODE_FK.MaxLength = 10
            Me.columnFET_CDF_UDMS_CODE_FK.MaxLength = 10
            Me.columnFET_CDF_UDRE_CODE_FK.MaxLength = 10
            Me.columnFET_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFET_FICHEETIOLOGIERow() As FET_FICHEETIOLOGIERow
            Return CType(Me.NewRow,FET_FICHEETIOLOGIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FET_FICHEETIOLOGIERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FET_FICHEETIOLOGIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FET_FICHEETIOLOGIERowChangedEvent) Is Nothing) Then
                RaiseEvent FET_FICHEETIOLOGIERowChanged(Me, New FET_FICHEETIOLOGIERowChangeEvent(CType(e.Row,FET_FICHEETIOLOGIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FET_FICHEETIOLOGIERowChangingEvent) Is Nothing) Then
                RaiseEvent FET_FICHEETIOLOGIERowChanging(Me, New FET_FICHEETIOLOGIERowChangeEvent(CType(e.Row,FET_FICHEETIOLOGIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FET_FICHEETIOLOGIERowDeletedEvent) Is Nothing) Then
                RaiseEvent FET_FICHEETIOLOGIERowDeleted(Me, New FET_FICHEETIOLOGIERowChangeEvent(CType(e.Row,FET_FICHEETIOLOGIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FET_FICHEETIOLOGIERowDeletingEvent) Is Nothing) Then
                RaiseEvent FET_FICHEETIOLOGIERowDeleting(Me, New FET_FICHEETIOLOGIERowChangeEvent(CType(e.Row,FET_FICHEETIOLOGIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFET_FICHEETIOLOGIERow(ByVal row As FET_FICHEETIOLOGIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FET_FICHEETIOLOGIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETCPH_ETIOCPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETCPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETCPH_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETCPH_ETIOCPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCPH_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCPH_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETCPH_ETIOCPHRow
            Get
                Return CType(Me.Rows(index),FETCPH_ETIOCPHRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCPH_ETIOCPHRowChanging As FETCPH_ETIOCPHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCPH_ETIOCPHRowChanged As FETCPH_ETIOCPHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCPH_ETIOCPHRowDeleting As FETCPH_ETIOCPHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCPH_ETIOCPHRowDeleted As FETCPH_ETIOCPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETCPH_ETIOCPHRow(ByVal row As FETCPH_ETIOCPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETCPH_ETIOCPHRow(ByVal FETCPH_CPH_CODE_FK_PK As String, ByVal FETCPH_FET_CODE_FK_PK As Integer) As FETCPH_ETIOCPHRow
            Dim rowFETCPH_ETIOCPHRow As FETCPH_ETIOCPHRow = CType(Me.NewRow,FETCPH_ETIOCPHRow)
            Dim columnValuesArray() As Object = New Object() {FETCPH_CPH_CODE_FK_PK, FETCPH_FET_CODE_FK_PK}
            rowFETCPH_ETIOCPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETCPH_ETIOCPHRow)
            Return rowFETCPH_ETIOCPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETCPH_CPH_CODE_FK_PKFETCPH_FET_CODE_FK_PK(ByVal FETCPH_CPH_CODE_FK_PK As String, ByVal FETCPH_FET_CODE_FK_PK As Integer) As FETCPH_ETIOCPHRow
            Return CType(Me.Rows.Find(New Object() {FETCPH_CPH_CODE_FK_PK, FETCPH_FET_CODE_FK_PK}),FETCPH_ETIOCPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETCPH_ETIOCPHDataTable = CType(MyBase.Clone,FETCPH_ETIOCPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETCPH_ETIOCPHDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETCPH_CPH_CODE_FK_PK = MyBase.Columns("FETCPH_CPH_CODE_FK_PK")
            Me.columnFETCPH_FET_CODE_FK_PK = MyBase.Columns("FETCPH_FET_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETCPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("FETCPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCPH_CPH_CODE_FK_PK)
            Me.columnFETCPH_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETCPH_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCPH_FET_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETCPH_CPH_CODE_FK_PK, Me.columnFETCPH_FET_CODE_FK_PK}, true))
            Me.columnFETCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCPH_CPH_CODE_FK_PK.MaxLength = 10
            Me.columnFETCPH_FET_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETCPH_ETIOCPHRow() As FETCPH_ETIOCPHRow
            Return CType(Me.NewRow,FETCPH_ETIOCPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETCPH_ETIOCPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETCPH_ETIOCPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETCPH_ETIOCPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FETCPH_ETIOCPHRowChanged(Me, New FETCPH_ETIOCPHRowChangeEvent(CType(e.Row,FETCPH_ETIOCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETCPH_ETIOCPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FETCPH_ETIOCPHRowChanging(Me, New FETCPH_ETIOCPHRowChangeEvent(CType(e.Row,FETCPH_ETIOCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETCPH_ETIOCPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETCPH_ETIOCPHRowDeleted(Me, New FETCPH_ETIOCPHRowChangeEvent(CType(e.Row,FETCPH_ETIOCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETCPH_ETIOCPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETCPH_ETIOCPHRowDeleting(Me, New FETCPH_ETIOCPHRowChangeEvent(CType(e.Row,FETCPH_ETIOCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETCPH_ETIOCPHRow(ByVal row As FETCPH_ETIOCPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETCPH_ETIOCPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETCCH_ETIOCCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETCCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETCCH_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETCCH_ETIOCCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCCH_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCCH_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETCCH_ETIOCCHRow
            Get
                Return CType(Me.Rows(index),FETCCH_ETIOCCHRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCCH_ETIOCCHRowChanging As FETCCH_ETIOCCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCCH_ETIOCCHRowChanged As FETCCH_ETIOCCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCCH_ETIOCCHRowDeleting As FETCCH_ETIOCCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCCH_ETIOCCHRowDeleted As FETCCH_ETIOCCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETCCH_ETIOCCHRow(ByVal row As FETCCH_ETIOCCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETCCH_ETIOCCHRow(ByVal FETCCH_CCH_CODE_FK_PK As String, ByVal FETCCH_FET_CODE_FK_PK As Integer) As FETCCH_ETIOCCHRow
            Dim rowFETCCH_ETIOCCHRow As FETCCH_ETIOCCHRow = CType(Me.NewRow,FETCCH_ETIOCCHRow)
            Dim columnValuesArray() As Object = New Object() {FETCCH_CCH_CODE_FK_PK, FETCCH_FET_CODE_FK_PK}
            rowFETCCH_ETIOCCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETCCH_ETIOCCHRow)
            Return rowFETCCH_ETIOCCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETCCH_CCH_CODE_FK_PKFETCCH_FET_CODE_FK_PK(ByVal FETCCH_CCH_CODE_FK_PK As String, ByVal FETCCH_FET_CODE_FK_PK As Integer) As FETCCH_ETIOCCHRow
            Return CType(Me.Rows.Find(New Object() {FETCCH_CCH_CODE_FK_PK, FETCCH_FET_CODE_FK_PK}),FETCCH_ETIOCCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETCCH_ETIOCCHDataTable = CType(MyBase.Clone,FETCCH_ETIOCCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETCCH_ETIOCCHDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETCCH_CCH_CODE_FK_PK = MyBase.Columns("FETCCH_CCH_CODE_FK_PK")
            Me.columnFETCCH_FET_CODE_FK_PK = MyBase.Columns("FETCCH_FET_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETCCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("FETCCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCCH_CCH_CODE_FK_PK)
            Me.columnFETCCH_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETCCH_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCCH_FET_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETCCH_CCH_CODE_FK_PK, Me.columnFETCCH_FET_CODE_FK_PK}, true))
            Me.columnFETCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCCH_CCH_CODE_FK_PK.MaxLength = 10
            Me.columnFETCCH_FET_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETCCH_ETIOCCHRow() As FETCCH_ETIOCCHRow
            Return CType(Me.NewRow,FETCCH_ETIOCCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETCCH_ETIOCCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETCCH_ETIOCCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETCCH_ETIOCCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FETCCH_ETIOCCHRowChanged(Me, New FETCCH_ETIOCCHRowChangeEvent(CType(e.Row,FETCCH_ETIOCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETCCH_ETIOCCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FETCCH_ETIOCCHRowChanging(Me, New FETCCH_ETIOCCHRowChangeEvent(CType(e.Row,FETCCH_ETIOCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETCCH_ETIOCCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETCCH_ETIOCCHRowDeleted(Me, New FETCCH_ETIOCCHRowChangeEvent(CType(e.Row,FETCCH_ETIOCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETCCH_ETIOCCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETCCH_ETIOCCHRowDeleting(Me, New FETCCH_ETIOCCHRowChangeEvent(CType(e.Row,FETCCH_ETIOCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETCCH_ETIOCCHRow(ByVal row As FETCCH_ETIOCCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETCCH_ETIOCCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETSAC_ETIOSUBACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETSAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETSAC_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETSAC_ETIOSUBAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETSAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETSAC_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETSAC_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETSAC_ETIOSUBACRow
            Get
                Return CType(Me.Rows(index),FETSAC_ETIOSUBACRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSAC_ETIOSUBACRowChanging As FETSAC_ETIOSUBACRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSAC_ETIOSUBACRowChanged As FETSAC_ETIOSUBACRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSAC_ETIOSUBACRowDeleting As FETSAC_ETIOSUBACRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSAC_ETIOSUBACRowDeleted As FETSAC_ETIOSUBACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETSAC_ETIOSUBACRow(ByVal row As FETSAC_ETIOSUBACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETSAC_ETIOSUBACRow(ByVal FETSAC_SAC_CODE_FK_PK As Integer, ByVal FETSAC_FET_CODE_FK_PK As Integer) As FETSAC_ETIOSUBACRow
            Dim rowFETSAC_ETIOSUBACRow As FETSAC_ETIOSUBACRow = CType(Me.NewRow,FETSAC_ETIOSUBACRow)
            Dim columnValuesArray() As Object = New Object() {FETSAC_SAC_CODE_FK_PK, FETSAC_FET_CODE_FK_PK}
            rowFETSAC_ETIOSUBACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETSAC_ETIOSUBACRow)
            Return rowFETSAC_ETIOSUBACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETSAC_SAC_CODE_FK_PKFETSAC_FET_CODE_FK_PK(ByVal FETSAC_SAC_CODE_FK_PK As Integer, ByVal FETSAC_FET_CODE_FK_PK As Integer) As FETSAC_ETIOSUBACRow
            Return CType(Me.Rows.Find(New Object() {FETSAC_SAC_CODE_FK_PK, FETSAC_FET_CODE_FK_PK}),FETSAC_ETIOSUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETSAC_ETIOSUBACDataTable = CType(MyBase.Clone,FETSAC_ETIOSUBACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETSAC_ETIOSUBACDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETSAC_SAC_CODE_FK_PK = MyBase.Columns("FETSAC_SAC_CODE_FK_PK")
            Me.columnFETSAC_FET_CODE_FK_PK = MyBase.Columns("FETSAC_FET_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETSAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("FETSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETSAC_SAC_CODE_FK_PK)
            Me.columnFETSAC_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETSAC_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETSAC_FET_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETSAC_SAC_CODE_FK_PK, Me.columnFETSAC_FET_CODE_FK_PK}, true))
            Me.columnFETSAC_SAC_CODE_FK_PK.AllowDBNull = false
            Me.columnFETSAC_FET_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETSAC_ETIOSUBACRow() As FETSAC_ETIOSUBACRow
            Return CType(Me.NewRow,FETSAC_ETIOSUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETSAC_ETIOSUBACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETSAC_ETIOSUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETSAC_ETIOSUBACRowChangedEvent) Is Nothing) Then
                RaiseEvent FETSAC_ETIOSUBACRowChanged(Me, New FETSAC_ETIOSUBACRowChangeEvent(CType(e.Row,FETSAC_ETIOSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETSAC_ETIOSUBACRowChangingEvent) Is Nothing) Then
                RaiseEvent FETSAC_ETIOSUBACRowChanging(Me, New FETSAC_ETIOSUBACRowChangeEvent(CType(e.Row,FETSAC_ETIOSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETSAC_ETIOSUBACRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETSAC_ETIOSUBACRowDeleted(Me, New FETSAC_ETIOSUBACRowChangeEvent(CType(e.Row,FETSAC_ETIOSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETSAC_ETIOSUBACRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETSAC_ETIOSUBACRowDeleting(Me, New FETSAC_ETIOSUBACRowChangeEvent(CType(e.Row,FETSAC_ETIOSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETSAC_ETIOSUBACRow(ByVal row As FETSAC_ETIOSUBACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETSAC_ETIOSUBACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETPR_ETIOPRODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETPR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETPR_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETPR_ETIOPROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETPR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETPR_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETPR_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETPR_ETIOPRODRow
            Get
                Return CType(Me.Rows(index),FETPR_ETIOPRODRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETPR_ETIOPRODRowChanging As FETPR_ETIOPRODRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETPR_ETIOPRODRowChanged As FETPR_ETIOPRODRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETPR_ETIOPRODRowDeleting As FETPR_ETIOPRODRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETPR_ETIOPRODRowDeleted As FETPR_ETIOPRODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETPR_ETIOPRODRow(ByVal row As FETPR_ETIOPRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETPR_ETIOPRODRow(ByVal FETPR_PR_CODE_FK_PK As Integer, ByVal FETPR_FET_CODE_FK_PK As Integer) As FETPR_ETIOPRODRow
            Dim rowFETPR_ETIOPRODRow As FETPR_ETIOPRODRow = CType(Me.NewRow,FETPR_ETIOPRODRow)
            Dim columnValuesArray() As Object = New Object() {FETPR_PR_CODE_FK_PK, FETPR_FET_CODE_FK_PK}
            rowFETPR_ETIOPRODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETPR_ETIOPRODRow)
            Return rowFETPR_ETIOPRODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETPR_PR_CODE_FK_PKFETPR_FET_CODE_FK_PK(ByVal FETPR_PR_CODE_FK_PK As Integer, ByVal FETPR_FET_CODE_FK_PK As Integer) As FETPR_ETIOPRODRow
            Return CType(Me.Rows.Find(New Object() {FETPR_PR_CODE_FK_PK, FETPR_FET_CODE_FK_PK}),FETPR_ETIOPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETPR_ETIOPRODDataTable = CType(MyBase.Clone,FETPR_ETIOPRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETPR_ETIOPRODDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETPR_PR_CODE_FK_PK = MyBase.Columns("FETPR_PR_CODE_FK_PK")
            Me.columnFETPR_FET_CODE_FK_PK = MyBase.Columns("FETPR_FET_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETPR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("FETPR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETPR_PR_CODE_FK_PK)
            Me.columnFETPR_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETPR_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETPR_FET_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETPR_PR_CODE_FK_PK, Me.columnFETPR_FET_CODE_FK_PK}, true))
            Me.columnFETPR_PR_CODE_FK_PK.AllowDBNull = false
            Me.columnFETPR_FET_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETPR_ETIOPRODRow() As FETPR_ETIOPRODRow
            Return CType(Me.NewRow,FETPR_ETIOPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETPR_ETIOPRODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETPR_ETIOPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETPR_ETIOPRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FETPR_ETIOPRODRowChanged(Me, New FETPR_ETIOPRODRowChangeEvent(CType(e.Row,FETPR_ETIOPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETPR_ETIOPRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FETPR_ETIOPRODRowChanging(Me, New FETPR_ETIOPRODRowChangeEvent(CType(e.Row,FETPR_ETIOPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETPR_ETIOPRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETPR_ETIOPRODRowDeleted(Me, New FETPR_ETIOPRODRowChangeEvent(CType(e.Row,FETPR_ETIOPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETPR_ETIOPRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETPR_ETIOPRODRowDeleting(Me, New FETPR_ETIOPRODRowChangeEvent(CType(e.Row,FETPR_ETIOPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETPR_ETIOPRODRow(ByVal row As FETPR_ETIOPRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETPR_ETIOPRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETSP_ETIOSPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETSP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETSP_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETSP_ETIOSPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETSP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETSP_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETSP_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETSP_ETIOSPERow
            Get
                Return CType(Me.Rows(index),FETSP_ETIOSPERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSP_ETIOSPERowChanging As FETSP_ETIOSPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSP_ETIOSPERowChanged As FETSP_ETIOSPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSP_ETIOSPERowDeleting As FETSP_ETIOSPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETSP_ETIOSPERowDeleted As FETSP_ETIOSPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETSP_ETIOSPERow(ByVal row As FETSP_ETIOSPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETSP_ETIOSPERow(ByVal FETSP_SP_CODE_FK_PK As Integer, ByVal FETSP_FET_CODE_FK_PK As Integer) As FETSP_ETIOSPERow
            Dim rowFETSP_ETIOSPERow As FETSP_ETIOSPERow = CType(Me.NewRow,FETSP_ETIOSPERow)
            Dim columnValuesArray() As Object = New Object() {FETSP_SP_CODE_FK_PK, FETSP_FET_CODE_FK_PK}
            rowFETSP_ETIOSPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETSP_ETIOSPERow)
            Return rowFETSP_ETIOSPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETSP_SP_CODE_FK_PKFETSP_FET_CODE_FK_PK(ByVal FETSP_SP_CODE_FK_PK As Integer, ByVal FETSP_FET_CODE_FK_PK As Integer) As FETSP_ETIOSPERow
            Return CType(Me.Rows.Find(New Object() {FETSP_SP_CODE_FK_PK, FETSP_FET_CODE_FK_PK}),FETSP_ETIOSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETSP_ETIOSPEDataTable = CType(MyBase.Clone,FETSP_ETIOSPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETSP_ETIOSPEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETSP_SP_CODE_FK_PK = MyBase.Columns("FETSP_SP_CODE_FK_PK")
            Me.columnFETSP_FET_CODE_FK_PK = MyBase.Columns("FETSP_FET_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETSP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FETSP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETSP_SP_CODE_FK_PK)
            Me.columnFETSP_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETSP_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETSP_FET_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETSP_SP_CODE_FK_PK, Me.columnFETSP_FET_CODE_FK_PK}, true))
            Me.columnFETSP_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFETSP_FET_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETSP_ETIOSPERow() As FETSP_ETIOSPERow
            Return CType(Me.NewRow,FETSP_ETIOSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETSP_ETIOSPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETSP_ETIOSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETSP_ETIOSPERowChangedEvent) Is Nothing) Then
                RaiseEvent FETSP_ETIOSPERowChanged(Me, New FETSP_ETIOSPERowChangeEvent(CType(e.Row,FETSP_ETIOSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETSP_ETIOSPERowChangingEvent) Is Nothing) Then
                RaiseEvent FETSP_ETIOSPERowChanging(Me, New FETSP_ETIOSPERowChangeEvent(CType(e.Row,FETSP_ETIOSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETSP_ETIOSPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FETSP_ETIOSPERowDeleted(Me, New FETSP_ETIOSPERowChangeEvent(CType(e.Row,FETSP_ETIOSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETSP_ETIOSPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FETSP_ETIOSPERowDeleting(Me, New FETSP_ETIOSPERowChangeEvent(CType(e.Row,FETSP_ETIOSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETSP_ETIOSPERow(ByVal row As FETSP_ETIOSPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETSP_ETIOSPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETTXTI_TEXTINTRO_CMIDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETTXTI_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETTXTI_TXT_INTRO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETTXTI_TEXTINTRO_CMI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTXTI_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTXTI_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTXTI_TXT_INTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTXTI_TXT_INTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETTXTI_TEXTINTRO_CMIRow
            Get
                Return CType(Me.Rows(index),FETTXTI_TEXTINTRO_CMIRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTXTI_TEXTINTRO_CMIRowChanging As FETTXTI_TEXTINTRO_CMIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTXTI_TEXTINTRO_CMIRowChanged As FETTXTI_TEXTINTRO_CMIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTXTI_TEXTINTRO_CMIRowDeleting As FETTXTI_TEXTINTRO_CMIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTXTI_TEXTINTRO_CMIRowDeleted As FETTXTI_TEXTINTRO_CMIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETTXTI_TEXTINTRO_CMIRow(ByVal row As FETTXTI_TEXTINTRO_CMIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETTXTI_TEXTINTRO_CMIRow(ByVal FETTXTI_FET_CODE_FK_PK As Integer, ByVal FETTXTI_TXT_INTRO As String) As FETTXTI_TEXTINTRO_CMIRow
            Dim rowFETTXTI_TEXTINTRO_CMIRow As FETTXTI_TEXTINTRO_CMIRow = CType(Me.NewRow,FETTXTI_TEXTINTRO_CMIRow)
            Dim columnValuesArray() As Object = New Object() {FETTXTI_FET_CODE_FK_PK, FETTXTI_TXT_INTRO}
            rowFETTXTI_TEXTINTRO_CMIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETTXTI_TEXTINTRO_CMIRow)
            Return rowFETTXTI_TEXTINTRO_CMIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETTXTI_FET_CODE_FK_PK(ByVal FETTXTI_FET_CODE_FK_PK As Integer) As FETTXTI_TEXTINTRO_CMIRow
            Return CType(Me.Rows.Find(New Object() {FETTXTI_FET_CODE_FK_PK}),FETTXTI_TEXTINTRO_CMIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETTXTI_TEXTINTRO_CMIDataTable = CType(MyBase.Clone,FETTXTI_TEXTINTRO_CMIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETTXTI_TEXTINTRO_CMIDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETTXTI_FET_CODE_FK_PK = MyBase.Columns("FETTXTI_FET_CODE_FK_PK")
            Me.columnFETTXTI_TXT_INTRO = MyBase.Columns("FETTXTI_TXT_INTRO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETTXTI_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETTXTI_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTXTI_FET_CODE_FK_PK)
            Me.columnFETTXTI_TXT_INTRO = New Global.System.Data.DataColumn("FETTXTI_TXT_INTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTXTI_TXT_INTRO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETTXTI_FET_CODE_FK_PK}, true))
            Me.columnFETTXTI_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETTXTI_FET_CODE_FK_PK.Unique = true
            Me.columnFETTXTI_TXT_INTRO.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETTXTI_TEXTINTRO_CMIRow() As FETTXTI_TEXTINTRO_CMIRow
            Return CType(Me.NewRow,FETTXTI_TEXTINTRO_CMIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETTXTI_TEXTINTRO_CMIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETTXTI_TEXTINTRO_CMIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETTXTI_TEXTINTRO_CMIRowChangedEvent) Is Nothing) Then
                RaiseEvent FETTXTI_TEXTINTRO_CMIRowChanged(Me, New FETTXTI_TEXTINTRO_CMIRowChangeEvent(CType(e.Row,FETTXTI_TEXTINTRO_CMIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETTXTI_TEXTINTRO_CMIRowChangingEvent) Is Nothing) Then
                RaiseEvent FETTXTI_TEXTINTRO_CMIRowChanging(Me, New FETTXTI_TEXTINTRO_CMIRowChangeEvent(CType(e.Row,FETTXTI_TEXTINTRO_CMIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETTXTI_TEXTINTRO_CMIRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETTXTI_TEXTINTRO_CMIRowDeleted(Me, New FETTXTI_TEXTINTRO_CMIRowChangeEvent(CType(e.Row,FETTXTI_TEXTINTRO_CMIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETTXTI_TEXTINTRO_CMIRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETTXTI_TEXTINTRO_CMIRowDeleting(Me, New FETTXTI_TEXTINTRO_CMIRowChangeEvent(CType(e.Row,FETTXTI_TEXTINTRO_CMIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETTXTI_TEXTINTRO_CMIRow(ByVal row As FETTXTI_TEXTINTRO_CMIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETTXTI_TEXTINTRO_CMIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETHS_ETIOLOGIE_HABITU_SENSIBDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETHS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETHS_CDF_ETIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETHS_POURCENTAGE_RESISTANCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETHS_ETIOLOGIE_HABITU_SENSIB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETHS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETHS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETHS_CDF_ETIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETHS_CDF_ETIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETHS_POURCENTAGE_RESISTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETHS_POURCENTAGE_RESISTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETHS_ETIOLOGIE_HABITU_SENSIBRow
            Get
                Return CType(Me.Rows(index),FETHS_ETIOLOGIE_HABITU_SENSIBRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETHS_ETIOLOGIE_HABITU_SENSIBRowChanging As FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETHS_ETIOLOGIE_HABITU_SENSIBRowChanged As FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETHS_ETIOLOGIE_HABITU_SENSIBRowDeleting As FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETHS_ETIOLOGIE_HABITU_SENSIBRowDeleted As FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETHS_ETIOLOGIE_HABITU_SENSIBRow(ByVal row As FETHS_ETIOLOGIE_HABITU_SENSIBRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETHS_ETIOLOGIE_HABITU_SENSIBRow(ByVal FETHS_FET_CODE_FK_PK As Integer, ByVal FETHS_CDF_ETIN_CODE_FK_PK As String, ByVal FETHS_POURCENTAGE_RESISTANCE As String) As FETHS_ETIOLOGIE_HABITU_SENSIBRow
            Dim rowFETHS_ETIOLOGIE_HABITU_SENSIBRow As FETHS_ETIOLOGIE_HABITU_SENSIBRow = CType(Me.NewRow,FETHS_ETIOLOGIE_HABITU_SENSIBRow)
            Dim columnValuesArray() As Object = New Object() {FETHS_FET_CODE_FK_PK, FETHS_CDF_ETIN_CODE_FK_PK, FETHS_POURCENTAGE_RESISTANCE}
            rowFETHS_ETIOLOGIE_HABITU_SENSIBRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETHS_ETIOLOGIE_HABITU_SENSIBRow)
            Return rowFETHS_ETIOLOGIE_HABITU_SENSIBRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETHS_FET_CODE_FK_PKFETHS_CDF_ETIN_CODE_FK_PK(ByVal FETHS_FET_CODE_FK_PK As Integer, ByVal FETHS_CDF_ETIN_CODE_FK_PK As String) As FETHS_ETIOLOGIE_HABITU_SENSIBRow
            Return CType(Me.Rows.Find(New Object() {FETHS_FET_CODE_FK_PK, FETHS_CDF_ETIN_CODE_FK_PK}),FETHS_ETIOLOGIE_HABITU_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETHS_ETIOLOGIE_HABITU_SENSIBDataTable = CType(MyBase.Clone,FETHS_ETIOLOGIE_HABITU_SENSIBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETHS_ETIOLOGIE_HABITU_SENSIBDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETHS_FET_CODE_FK_PK = MyBase.Columns("FETHS_FET_CODE_FK_PK")
            Me.columnFETHS_CDF_ETIN_CODE_FK_PK = MyBase.Columns("FETHS_CDF_ETIN_CODE_FK_PK")
            Me.columnFETHS_POURCENTAGE_RESISTANCE = MyBase.Columns("FETHS_POURCENTAGE_RESISTANCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETHS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETHS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETHS_FET_CODE_FK_PK)
            Me.columnFETHS_CDF_ETIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETHS_CDF_ETIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETHS_CDF_ETIN_CODE_FK_PK)
            Me.columnFETHS_POURCENTAGE_RESISTANCE = New Global.System.Data.DataColumn("FETHS_POURCENTAGE_RESISTANCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETHS_POURCENTAGE_RESISTANCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETHS_FET_CODE_FK_PK, Me.columnFETHS_CDF_ETIN_CODE_FK_PK}, true))
            Me.columnFETHS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETHS_CDF_ETIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETHS_CDF_ETIN_CODE_FK_PK.MaxLength = 10
            Me.columnFETHS_POURCENTAGE_RESISTANCE.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETHS_ETIOLOGIE_HABITU_SENSIBRow() As FETHS_ETIOLOGIE_HABITU_SENSIBRow
            Return CType(Me.NewRow,FETHS_ETIOLOGIE_HABITU_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETHS_ETIOLOGIE_HABITU_SENSIBRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETHS_ETIOLOGIE_HABITU_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETHS_ETIOLOGIE_HABITU_SENSIBRowChangedEvent) Is Nothing) Then
                RaiseEvent FETHS_ETIOLOGIE_HABITU_SENSIBRowChanged(Me, New FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEvent(CType(e.Row,FETHS_ETIOLOGIE_HABITU_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETHS_ETIOLOGIE_HABITU_SENSIBRowChangingEvent) Is Nothing) Then
                RaiseEvent FETHS_ETIOLOGIE_HABITU_SENSIBRowChanging(Me, New FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEvent(CType(e.Row,FETHS_ETIOLOGIE_HABITU_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETHS_ETIOLOGIE_HABITU_SENSIBRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETHS_ETIOLOGIE_HABITU_SENSIBRowDeleted(Me, New FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEvent(CType(e.Row,FETHS_ETIOLOGIE_HABITU_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETHS_ETIOLOGIE_HABITU_SENSIBRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETHS_ETIOLOGIE_HABITU_SENSIBRowDeleting(Me, New FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEvent(CType(e.Row,FETHS_ETIOLOGIE_HABITU_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETHS_ETIOLOGIE_HABITU_SENSIBRow(ByVal row As FETHS_ETIOLOGIE_HABITU_SENSIBRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETHS_ETIOLOGIE_HABITU_SENSIBDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETCHS_COMMENT_HABITU_SENSIBLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETCHS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETCHS_CDF_COIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETCHS_COMMENT_HABITU_SENSIBLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCHS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCHS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCHS_CDF_COIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCHS_CDF_COIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETCHS_COMMENT_HABITU_SENSIBLERow
            Get
                Return CType(Me.Rows(index),FETCHS_COMMENT_HABITU_SENSIBLERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCHS_COMMENT_HABITU_SENSIBLERowChanging As FETCHS_COMMENT_HABITU_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCHS_COMMENT_HABITU_SENSIBLERowChanged As FETCHS_COMMENT_HABITU_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCHS_COMMENT_HABITU_SENSIBLERowDeleting As FETCHS_COMMENT_HABITU_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCHS_COMMENT_HABITU_SENSIBLERowDeleted As FETCHS_COMMENT_HABITU_SENSIBLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETCHS_COMMENT_HABITU_SENSIBLERow(ByVal row As FETCHS_COMMENT_HABITU_SENSIBLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETCHS_COMMENT_HABITU_SENSIBLERow(ByVal FETCHS_FET_CODE_FK_PK As Integer, ByVal FETCHS_CDF_COIN_CODE_FK_PK As String) As FETCHS_COMMENT_HABITU_SENSIBLERow
            Dim rowFETCHS_COMMENT_HABITU_SENSIBLERow As FETCHS_COMMENT_HABITU_SENSIBLERow = CType(Me.NewRow,FETCHS_COMMENT_HABITU_SENSIBLERow)
            Dim columnValuesArray() As Object = New Object() {FETCHS_FET_CODE_FK_PK, FETCHS_CDF_COIN_CODE_FK_PK}
            rowFETCHS_COMMENT_HABITU_SENSIBLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETCHS_COMMENT_HABITU_SENSIBLERow)
            Return rowFETCHS_COMMENT_HABITU_SENSIBLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETCHS_FET_CODE_FK_PKFETCHS_CDF_COIN_CODE_FK_PK(ByVal FETCHS_FET_CODE_FK_PK As Integer, ByVal FETCHS_CDF_COIN_CODE_FK_PK As String) As FETCHS_COMMENT_HABITU_SENSIBLERow
            Return CType(Me.Rows.Find(New Object() {FETCHS_FET_CODE_FK_PK, FETCHS_CDF_COIN_CODE_FK_PK}),FETCHS_COMMENT_HABITU_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETCHS_COMMENT_HABITU_SENSIBLEDataTable = CType(MyBase.Clone,FETCHS_COMMENT_HABITU_SENSIBLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETCHS_COMMENT_HABITU_SENSIBLEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETCHS_FET_CODE_FK_PK = MyBase.Columns("FETCHS_FET_CODE_FK_PK")
            Me.columnFETCHS_CDF_COIN_CODE_FK_PK = MyBase.Columns("FETCHS_CDF_COIN_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETCHS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETCHS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCHS_FET_CODE_FK_PK)
            Me.columnFETCHS_CDF_COIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETCHS_CDF_COIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCHS_CDF_COIN_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETCHS_FET_CODE_FK_PK, Me.columnFETCHS_CDF_COIN_CODE_FK_PK}, true))
            Me.columnFETCHS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCHS_CDF_COIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCHS_CDF_COIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETCHS_COMMENT_HABITU_SENSIBLERow() As FETCHS_COMMENT_HABITU_SENSIBLERow
            Return CType(Me.NewRow,FETCHS_COMMENT_HABITU_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETCHS_COMMENT_HABITU_SENSIBLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETCHS_COMMENT_HABITU_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETCHS_COMMENT_HABITU_SENSIBLERowChangedEvent) Is Nothing) Then
                RaiseEvent FETCHS_COMMENT_HABITU_SENSIBLERowChanged(Me, New FETCHS_COMMENT_HABITU_SENSIBLERowChangeEvent(CType(e.Row,FETCHS_COMMENT_HABITU_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETCHS_COMMENT_HABITU_SENSIBLERowChangingEvent) Is Nothing) Then
                RaiseEvent FETCHS_COMMENT_HABITU_SENSIBLERowChanging(Me, New FETCHS_COMMENT_HABITU_SENSIBLERowChangeEvent(CType(e.Row,FETCHS_COMMENT_HABITU_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETCHS_COMMENT_HABITU_SENSIBLERowDeletedEvent) Is Nothing) Then
                RaiseEvent FETCHS_COMMENT_HABITU_SENSIBLERowDeleted(Me, New FETCHS_COMMENT_HABITU_SENSIBLERowChangeEvent(CType(e.Row,FETCHS_COMMENT_HABITU_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETCHS_COMMENT_HABITU_SENSIBLERowDeletingEvent) Is Nothing) Then
                RaiseEvent FETCHS_COMMENT_HABITU_SENSIBLERowDeleting(Me, New FETCHS_COMMENT_HABITU_SENSIBLERowChangeEvent(CType(e.Row,FETCHS_COMMENT_HABITU_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETCHS_COMMENT_HABITU_SENSIBLERow(ByVal row As FETCHS_COMMENT_HABITU_SENSIBLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETCHS_COMMENT_HABITU_SENSIBLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETTX1_ET_TXHSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETTX1_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETTX1_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETTX1_ET_TXHS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX1_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX1_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX1_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX1_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETTX1_ET_TXHSRow
            Get
                Return CType(Me.Rows(index),FETTX1_ET_TXHSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX1_ET_TXHSRowChanging As FETTX1_ET_TXHSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX1_ET_TXHSRowChanged As FETTX1_ET_TXHSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX1_ET_TXHSRowDeleting As FETTX1_ET_TXHSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX1_ET_TXHSRowDeleted As FETTX1_ET_TXHSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETTX1_ET_TXHSRow(ByVal row As FETTX1_ET_TXHSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETTX1_ET_TXHSRow(ByVal FETTX1_FET_CODE_FK_PK As Integer, ByVal FETTX1_TEXTE As String) As FETTX1_ET_TXHSRow
            Dim rowFETTX1_ET_TXHSRow As FETTX1_ET_TXHSRow = CType(Me.NewRow,FETTX1_ET_TXHSRow)
            Dim columnValuesArray() As Object = New Object() {FETTX1_FET_CODE_FK_PK, FETTX1_TEXTE}
            rowFETTX1_ET_TXHSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETTX1_ET_TXHSRow)
            Return rowFETTX1_ET_TXHSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETTX1_FET_CODE_FK_PK(ByVal FETTX1_FET_CODE_FK_PK As Integer) As FETTX1_ET_TXHSRow
            Return CType(Me.Rows.Find(New Object() {FETTX1_FET_CODE_FK_PK}),FETTX1_ET_TXHSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETTX1_ET_TXHSDataTable = CType(MyBase.Clone,FETTX1_ET_TXHSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETTX1_ET_TXHSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETTX1_FET_CODE_FK_PK = MyBase.Columns("FETTX1_FET_CODE_FK_PK")
            Me.columnFETTX1_TEXTE = MyBase.Columns("FETTX1_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETTX1_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETTX1_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX1_FET_CODE_FK_PK)
            Me.columnFETTX1_TEXTE = New Global.System.Data.DataColumn("FETTX1_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX1_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETTX1_FET_CODE_FK_PK}, true))
            Me.columnFETTX1_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETTX1_FET_CODE_FK_PK.Unique = true
            Me.columnFETTX1_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETTX1_ET_TXHSRow() As FETTX1_ET_TXHSRow
            Return CType(Me.NewRow,FETTX1_ET_TXHSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETTX1_ET_TXHSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETTX1_ET_TXHSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETTX1_ET_TXHSRowChangedEvent) Is Nothing) Then
                RaiseEvent FETTX1_ET_TXHSRowChanged(Me, New FETTX1_ET_TXHSRowChangeEvent(CType(e.Row,FETTX1_ET_TXHSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETTX1_ET_TXHSRowChangingEvent) Is Nothing) Then
                RaiseEvent FETTX1_ET_TXHSRowChanging(Me, New FETTX1_ET_TXHSRowChangeEvent(CType(e.Row,FETTX1_ET_TXHSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETTX1_ET_TXHSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETTX1_ET_TXHSRowDeleted(Me, New FETTX1_ET_TXHSRowChangeEvent(CType(e.Row,FETTX1_ET_TXHSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETTX1_ET_TXHSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETTX1_ET_TXHSRowDeleting(Me, New FETTX1_ET_TXHSRowChangeEvent(CType(e.Row,FETTX1_ET_TXHSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETTX1_ET_TXHSRow(ByVal row As FETTX1_ET_TXHSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETTX1_ET_TXHSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETIS_ETIOLOGIE_INCONST_SENSIBDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETIS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETIS_CDF_ETIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETIS_POURCENTAGE_RESISTANCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETIS_ETIOLOGIE_INCONST_SENSIB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETIS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETIS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETIS_CDF_ETIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETIS_CDF_ETIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETIS_POURCENTAGE_RESISTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETIS_POURCENTAGE_RESISTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETIS_ETIOLOGIE_INCONST_SENSIBRow
            Get
                Return CType(Me.Rows(index),FETIS_ETIOLOGIE_INCONST_SENSIBRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETIS_ETIOLOGIE_INCONST_SENSIBRowChanging As FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETIS_ETIOLOGIE_INCONST_SENSIBRowChanged As FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETIS_ETIOLOGIE_INCONST_SENSIBRowDeleting As FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETIS_ETIOLOGIE_INCONST_SENSIBRowDeleted As FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETIS_ETIOLOGIE_INCONST_SENSIBRow(ByVal row As FETIS_ETIOLOGIE_INCONST_SENSIBRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETIS_ETIOLOGIE_INCONST_SENSIBRow(ByVal FETIS_FET_CODE_FK_PK As Integer, ByVal FETIS_CDF_ETIN_CODE_FK_PK As String, ByVal FETIS_POURCENTAGE_RESISTANCE As String) As FETIS_ETIOLOGIE_INCONST_SENSIBRow
            Dim rowFETIS_ETIOLOGIE_INCONST_SENSIBRow As FETIS_ETIOLOGIE_INCONST_SENSIBRow = CType(Me.NewRow,FETIS_ETIOLOGIE_INCONST_SENSIBRow)
            Dim columnValuesArray() As Object = New Object() {FETIS_FET_CODE_FK_PK, FETIS_CDF_ETIN_CODE_FK_PK, FETIS_POURCENTAGE_RESISTANCE}
            rowFETIS_ETIOLOGIE_INCONST_SENSIBRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETIS_ETIOLOGIE_INCONST_SENSIBRow)
            Return rowFETIS_ETIOLOGIE_INCONST_SENSIBRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETIS_FET_CODE_FK_PKFETIS_CDF_ETIN_CODE_FK_PK(ByVal FETIS_FET_CODE_FK_PK As Integer, ByVal FETIS_CDF_ETIN_CODE_FK_PK As String) As FETIS_ETIOLOGIE_INCONST_SENSIBRow
            Return CType(Me.Rows.Find(New Object() {FETIS_FET_CODE_FK_PK, FETIS_CDF_ETIN_CODE_FK_PK}),FETIS_ETIOLOGIE_INCONST_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETIS_ETIOLOGIE_INCONST_SENSIBDataTable = CType(MyBase.Clone,FETIS_ETIOLOGIE_INCONST_SENSIBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETIS_ETIOLOGIE_INCONST_SENSIBDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETIS_FET_CODE_FK_PK = MyBase.Columns("FETIS_FET_CODE_FK_PK")
            Me.columnFETIS_CDF_ETIN_CODE_FK_PK = MyBase.Columns("FETIS_CDF_ETIN_CODE_FK_PK")
            Me.columnFETIS_POURCENTAGE_RESISTANCE = MyBase.Columns("FETIS_POURCENTAGE_RESISTANCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETIS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETIS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETIS_FET_CODE_FK_PK)
            Me.columnFETIS_CDF_ETIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETIS_CDF_ETIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETIS_CDF_ETIN_CODE_FK_PK)
            Me.columnFETIS_POURCENTAGE_RESISTANCE = New Global.System.Data.DataColumn("FETIS_POURCENTAGE_RESISTANCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETIS_POURCENTAGE_RESISTANCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETIS_FET_CODE_FK_PK, Me.columnFETIS_CDF_ETIN_CODE_FK_PK}, true))
            Me.columnFETIS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETIS_CDF_ETIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETIS_CDF_ETIN_CODE_FK_PK.MaxLength = 10
            Me.columnFETIS_POURCENTAGE_RESISTANCE.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETIS_ETIOLOGIE_INCONST_SENSIBRow() As FETIS_ETIOLOGIE_INCONST_SENSIBRow
            Return CType(Me.NewRow,FETIS_ETIOLOGIE_INCONST_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETIS_ETIOLOGIE_INCONST_SENSIBRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETIS_ETIOLOGIE_INCONST_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETIS_ETIOLOGIE_INCONST_SENSIBRowChangedEvent) Is Nothing) Then
                RaiseEvent FETIS_ETIOLOGIE_INCONST_SENSIBRowChanged(Me, New FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEvent(CType(e.Row,FETIS_ETIOLOGIE_INCONST_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETIS_ETIOLOGIE_INCONST_SENSIBRowChangingEvent) Is Nothing) Then
                RaiseEvent FETIS_ETIOLOGIE_INCONST_SENSIBRowChanging(Me, New FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEvent(CType(e.Row,FETIS_ETIOLOGIE_INCONST_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETIS_ETIOLOGIE_INCONST_SENSIBRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETIS_ETIOLOGIE_INCONST_SENSIBRowDeleted(Me, New FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEvent(CType(e.Row,FETIS_ETIOLOGIE_INCONST_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETIS_ETIOLOGIE_INCONST_SENSIBRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETIS_ETIOLOGIE_INCONST_SENSIBRowDeleting(Me, New FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEvent(CType(e.Row,FETIS_ETIOLOGIE_INCONST_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETIS_ETIOLOGIE_INCONST_SENSIBRow(ByVal row As FETIS_ETIOLOGIE_INCONST_SENSIBRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETIS_ETIOLOGIE_INCONST_SENSIBDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETCIS_COMMENT_INCONS_SENSIBLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETCIS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETCIS_CDF_COIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETCIS_COMMENT_INCONS_SENSIBLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCIS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCIS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCIS_CDF_COIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCIS_CDF_COIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETCIS_COMMENT_INCONS_SENSIBLERow
            Get
                Return CType(Me.Rows(index),FETCIS_COMMENT_INCONS_SENSIBLERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCIS_COMMENT_INCONS_SENSIBLERowChanging As FETCIS_COMMENT_INCONS_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCIS_COMMENT_INCONS_SENSIBLERowChanged As FETCIS_COMMENT_INCONS_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCIS_COMMENT_INCONS_SENSIBLERowDeleting As FETCIS_COMMENT_INCONS_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCIS_COMMENT_INCONS_SENSIBLERowDeleted As FETCIS_COMMENT_INCONS_SENSIBLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETCIS_COMMENT_INCONS_SENSIBLERow(ByVal row As FETCIS_COMMENT_INCONS_SENSIBLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETCIS_COMMENT_INCONS_SENSIBLERow(ByVal FETCIS_FET_CODE_FK_PK As Integer, ByVal FETCIS_CDF_COIN_CODE_FK_PK As String) As FETCIS_COMMENT_INCONS_SENSIBLERow
            Dim rowFETCIS_COMMENT_INCONS_SENSIBLERow As FETCIS_COMMENT_INCONS_SENSIBLERow = CType(Me.NewRow,FETCIS_COMMENT_INCONS_SENSIBLERow)
            Dim columnValuesArray() As Object = New Object() {FETCIS_FET_CODE_FK_PK, FETCIS_CDF_COIN_CODE_FK_PK}
            rowFETCIS_COMMENT_INCONS_SENSIBLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETCIS_COMMENT_INCONS_SENSIBLERow)
            Return rowFETCIS_COMMENT_INCONS_SENSIBLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETCIS_FET_CODE_FK_PKFETCIS_CDF_COIN_CODE_FK_PK(ByVal FETCIS_FET_CODE_FK_PK As Integer, ByVal FETCIS_CDF_COIN_CODE_FK_PK As String) As FETCIS_COMMENT_INCONS_SENSIBLERow
            Return CType(Me.Rows.Find(New Object() {FETCIS_FET_CODE_FK_PK, FETCIS_CDF_COIN_CODE_FK_PK}),FETCIS_COMMENT_INCONS_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETCIS_COMMENT_INCONS_SENSIBLEDataTable = CType(MyBase.Clone,FETCIS_COMMENT_INCONS_SENSIBLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETCIS_COMMENT_INCONS_SENSIBLEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETCIS_FET_CODE_FK_PK = MyBase.Columns("FETCIS_FET_CODE_FK_PK")
            Me.columnFETCIS_CDF_COIN_CODE_FK_PK = MyBase.Columns("FETCIS_CDF_COIN_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETCIS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETCIS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCIS_FET_CODE_FK_PK)
            Me.columnFETCIS_CDF_COIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETCIS_CDF_COIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCIS_CDF_COIN_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETCIS_FET_CODE_FK_PK, Me.columnFETCIS_CDF_COIN_CODE_FK_PK}, true))
            Me.columnFETCIS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCIS_CDF_COIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCIS_CDF_COIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETCIS_COMMENT_INCONS_SENSIBLERow() As FETCIS_COMMENT_INCONS_SENSIBLERow
            Return CType(Me.NewRow,FETCIS_COMMENT_INCONS_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETCIS_COMMENT_INCONS_SENSIBLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETCIS_COMMENT_INCONS_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETCIS_COMMENT_INCONS_SENSIBLERowChangedEvent) Is Nothing) Then
                RaiseEvent FETCIS_COMMENT_INCONS_SENSIBLERowChanged(Me, New FETCIS_COMMENT_INCONS_SENSIBLERowChangeEvent(CType(e.Row,FETCIS_COMMENT_INCONS_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETCIS_COMMENT_INCONS_SENSIBLERowChangingEvent) Is Nothing) Then
                RaiseEvent FETCIS_COMMENT_INCONS_SENSIBLERowChanging(Me, New FETCIS_COMMENT_INCONS_SENSIBLERowChangeEvent(CType(e.Row,FETCIS_COMMENT_INCONS_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETCIS_COMMENT_INCONS_SENSIBLERowDeletedEvent) Is Nothing) Then
                RaiseEvent FETCIS_COMMENT_INCONS_SENSIBLERowDeleted(Me, New FETCIS_COMMENT_INCONS_SENSIBLERowChangeEvent(CType(e.Row,FETCIS_COMMENT_INCONS_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETCIS_COMMENT_INCONS_SENSIBLERowDeletingEvent) Is Nothing) Then
                RaiseEvent FETCIS_COMMENT_INCONS_SENSIBLERowDeleting(Me, New FETCIS_COMMENT_INCONS_SENSIBLERowChangeEvent(CType(e.Row,FETCIS_COMMENT_INCONS_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETCIS_COMMENT_INCONS_SENSIBLERow(ByVal row As FETCIS_COMMENT_INCONS_SENSIBLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETCIS_COMMENT_INCONS_SENSIBLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETTX2_ET_TXISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETTX2_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETTX2_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETTX2_ET_TXIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX2_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX2_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX2_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX2_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETTX2_ET_TXISRow
            Get
                Return CType(Me.Rows(index),FETTX2_ET_TXISRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX2_ET_TXISRowChanging As FETTX2_ET_TXISRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX2_ET_TXISRowChanged As FETTX2_ET_TXISRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX2_ET_TXISRowDeleting As FETTX2_ET_TXISRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX2_ET_TXISRowDeleted As FETTX2_ET_TXISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETTX2_ET_TXISRow(ByVal row As FETTX2_ET_TXISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETTX2_ET_TXISRow(ByVal FETTX2_FET_CODE_FK_PK As Integer, ByVal FETTX2_TEXTE As String) As FETTX2_ET_TXISRow
            Dim rowFETTX2_ET_TXISRow As FETTX2_ET_TXISRow = CType(Me.NewRow,FETTX2_ET_TXISRow)
            Dim columnValuesArray() As Object = New Object() {FETTX2_FET_CODE_FK_PK, FETTX2_TEXTE}
            rowFETTX2_ET_TXISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETTX2_ET_TXISRow)
            Return rowFETTX2_ET_TXISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETTX2_FET_CODE_FK_PK(ByVal FETTX2_FET_CODE_FK_PK As Integer) As FETTX2_ET_TXISRow
            Return CType(Me.Rows.Find(New Object() {FETTX2_FET_CODE_FK_PK}),FETTX2_ET_TXISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETTX2_ET_TXISDataTable = CType(MyBase.Clone,FETTX2_ET_TXISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETTX2_ET_TXISDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETTX2_FET_CODE_FK_PK = MyBase.Columns("FETTX2_FET_CODE_FK_PK")
            Me.columnFETTX2_TEXTE = MyBase.Columns("FETTX2_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETTX2_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETTX2_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX2_FET_CODE_FK_PK)
            Me.columnFETTX2_TEXTE = New Global.System.Data.DataColumn("FETTX2_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX2_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETTX2_FET_CODE_FK_PK}, true))
            Me.columnFETTX2_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETTX2_FET_CODE_FK_PK.Unique = true
            Me.columnFETTX2_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETTX2_ET_TXISRow() As FETTX2_ET_TXISRow
            Return CType(Me.NewRow,FETTX2_ET_TXISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETTX2_ET_TXISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETTX2_ET_TXISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETTX2_ET_TXISRowChangedEvent) Is Nothing) Then
                RaiseEvent FETTX2_ET_TXISRowChanged(Me, New FETTX2_ET_TXISRowChangeEvent(CType(e.Row,FETTX2_ET_TXISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETTX2_ET_TXISRowChangingEvent) Is Nothing) Then
                RaiseEvent FETTX2_ET_TXISRowChanging(Me, New FETTX2_ET_TXISRowChangeEvent(CType(e.Row,FETTX2_ET_TXISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETTX2_ET_TXISRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETTX2_ET_TXISRowDeleted(Me, New FETTX2_ET_TXISRowChangeEvent(CType(e.Row,FETTX2_ET_TXISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETTX2_ET_TXISRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETTX2_ET_TXISRowDeleting(Me, New FETTX2_ET_TXISRowChangeEvent(CType(e.Row,FETTX2_ET_TXISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETTX2_ET_TXISRow(ByVal row As FETTX2_ET_TXISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETTX2_ET_TXISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETMS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETMS_CDF_ETIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETMS_POURCENTAGE_RESISTANCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETMS_ETIOLOGIE_MODEREM_SENSIB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETMS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETMS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETMS_CDF_ETIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETMS_CDF_ETIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETMS_POURCENTAGE_RESISTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETMS_POURCENTAGE_RESISTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETMS_ETIOLOGIE_MODEREM_SENSIBRow
            Get
                Return CType(Me.Rows(index),FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETMS_ETIOLOGIE_MODEREM_SENSIBRowChanging As FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETMS_ETIOLOGIE_MODEREM_SENSIBRowChanged As FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETMS_ETIOLOGIE_MODEREM_SENSIBRowDeleting As FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETMS_ETIOLOGIE_MODEREM_SENSIBRowDeleted As FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETMS_ETIOLOGIE_MODEREM_SENSIBRow(ByVal row As FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETMS_ETIOLOGIE_MODEREM_SENSIBRow(ByVal FETMS_FET_CODE_FK_PK As Integer, ByVal FETMS_CDF_ETIN_CODE_FK_PK As String, ByVal FETMS_POURCENTAGE_RESISTANCE As String) As FETMS_ETIOLOGIE_MODEREM_SENSIBRow
            Dim rowFETMS_ETIOLOGIE_MODEREM_SENSIBRow As FETMS_ETIOLOGIE_MODEREM_SENSIBRow = CType(Me.NewRow,FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
            Dim columnValuesArray() As Object = New Object() {FETMS_FET_CODE_FK_PK, FETMS_CDF_ETIN_CODE_FK_PK, FETMS_POURCENTAGE_RESISTANCE}
            rowFETMS_ETIOLOGIE_MODEREM_SENSIBRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETMS_ETIOLOGIE_MODEREM_SENSIBRow)
            Return rowFETMS_ETIOLOGIE_MODEREM_SENSIBRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETMS_FET_CODE_FK_PKFETMS_CDF_ETIN_CODE_FK_PK(ByVal FETMS_FET_CODE_FK_PK As Integer, ByVal FETMS_CDF_ETIN_CODE_FK_PK As String) As FETMS_ETIOLOGIE_MODEREM_SENSIBRow
            Return CType(Me.Rows.Find(New Object() {FETMS_FET_CODE_FK_PK, FETMS_CDF_ETIN_CODE_FK_PK}),FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable = CType(MyBase.Clone,FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETMS_FET_CODE_FK_PK = MyBase.Columns("FETMS_FET_CODE_FK_PK")
            Me.columnFETMS_CDF_ETIN_CODE_FK_PK = MyBase.Columns("FETMS_CDF_ETIN_CODE_FK_PK")
            Me.columnFETMS_POURCENTAGE_RESISTANCE = MyBase.Columns("FETMS_POURCENTAGE_RESISTANCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETMS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETMS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETMS_FET_CODE_FK_PK)
            Me.columnFETMS_CDF_ETIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETMS_CDF_ETIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETMS_CDF_ETIN_CODE_FK_PK)
            Me.columnFETMS_POURCENTAGE_RESISTANCE = New Global.System.Data.DataColumn("FETMS_POURCENTAGE_RESISTANCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETMS_POURCENTAGE_RESISTANCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETMS_FET_CODE_FK_PK, Me.columnFETMS_CDF_ETIN_CODE_FK_PK}, true))
            Me.columnFETMS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETMS_CDF_ETIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETMS_CDF_ETIN_CODE_FK_PK.MaxLength = 10
            Me.columnFETMS_POURCENTAGE_RESISTANCE.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETMS_ETIOLOGIE_MODEREM_SENSIBRow() As FETMS_ETIOLOGIE_MODEREM_SENSIBRow
            Return CType(Me.NewRow,FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETMS_ETIOLOGIE_MODEREM_SENSIBRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangedEvent) Is Nothing) Then
                RaiseEvent FETMS_ETIOLOGIE_MODEREM_SENSIBRowChanged(Me, New FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEvent(CType(e.Row,FETMS_ETIOLOGIE_MODEREM_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangingEvent) Is Nothing) Then
                RaiseEvent FETMS_ETIOLOGIE_MODEREM_SENSIBRowChanging(Me, New FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEvent(CType(e.Row,FETMS_ETIOLOGIE_MODEREM_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETMS_ETIOLOGIE_MODEREM_SENSIBRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETMS_ETIOLOGIE_MODEREM_SENSIBRowDeleted(Me, New FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEvent(CType(e.Row,FETMS_ETIOLOGIE_MODEREM_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETMS_ETIOLOGIE_MODEREM_SENSIBRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETMS_ETIOLOGIE_MODEREM_SENSIBRowDeleting(Me, New FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEvent(CType(e.Row,FETMS_ETIOLOGIE_MODEREM_SENSIBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETMS_ETIOLOGIE_MODEREM_SENSIBRow(ByVal row As FETMS_ETIOLOGIE_MODEREM_SENSIBRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETCMS_COMMENT_MODERE_SENSIBLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETCMS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETCMS_CDF_COIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETCMS_COMMENT_MODERE_SENSIBLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCMS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCMS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCMS_CDF_COIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCMS_CDF_COIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETCMS_COMMENT_MODERE_SENSIBLERow
            Get
                Return CType(Me.Rows(index),FETCMS_COMMENT_MODERE_SENSIBLERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCMS_COMMENT_MODERE_SENSIBLERowChanging As FETCMS_COMMENT_MODERE_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCMS_COMMENT_MODERE_SENSIBLERowChanged As FETCMS_COMMENT_MODERE_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCMS_COMMENT_MODERE_SENSIBLERowDeleting As FETCMS_COMMENT_MODERE_SENSIBLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCMS_COMMENT_MODERE_SENSIBLERowDeleted As FETCMS_COMMENT_MODERE_SENSIBLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETCMS_COMMENT_MODERE_SENSIBLERow(ByVal row As FETCMS_COMMENT_MODERE_SENSIBLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETCMS_COMMENT_MODERE_SENSIBLERow(ByVal FETCMS_FET_CODE_FK_PK As Integer, ByVal FETCMS_CDF_COIN_CODE_FK_PK As String) As FETCMS_COMMENT_MODERE_SENSIBLERow
            Dim rowFETCMS_COMMENT_MODERE_SENSIBLERow As FETCMS_COMMENT_MODERE_SENSIBLERow = CType(Me.NewRow,FETCMS_COMMENT_MODERE_SENSIBLERow)
            Dim columnValuesArray() As Object = New Object() {FETCMS_FET_CODE_FK_PK, FETCMS_CDF_COIN_CODE_FK_PK}
            rowFETCMS_COMMENT_MODERE_SENSIBLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETCMS_COMMENT_MODERE_SENSIBLERow)
            Return rowFETCMS_COMMENT_MODERE_SENSIBLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETCMS_FET_CODE_FK_PKFETCMS_CDF_COIN_CODE_FK_PK(ByVal FETCMS_FET_CODE_FK_PK As Integer, ByVal FETCMS_CDF_COIN_CODE_FK_PK As String) As FETCMS_COMMENT_MODERE_SENSIBLERow
            Return CType(Me.Rows.Find(New Object() {FETCMS_FET_CODE_FK_PK, FETCMS_CDF_COIN_CODE_FK_PK}),FETCMS_COMMENT_MODERE_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETCMS_COMMENT_MODERE_SENSIBLEDataTable = CType(MyBase.Clone,FETCMS_COMMENT_MODERE_SENSIBLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETCMS_COMMENT_MODERE_SENSIBLEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETCMS_FET_CODE_FK_PK = MyBase.Columns("FETCMS_FET_CODE_FK_PK")
            Me.columnFETCMS_CDF_COIN_CODE_FK_PK = MyBase.Columns("FETCMS_CDF_COIN_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETCMS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETCMS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCMS_FET_CODE_FK_PK)
            Me.columnFETCMS_CDF_COIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETCMS_CDF_COIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCMS_CDF_COIN_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETCMS_FET_CODE_FK_PK, Me.columnFETCMS_CDF_COIN_CODE_FK_PK}, true))
            Me.columnFETCMS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCMS_CDF_COIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCMS_CDF_COIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETCMS_COMMENT_MODERE_SENSIBLERow() As FETCMS_COMMENT_MODERE_SENSIBLERow
            Return CType(Me.NewRow,FETCMS_COMMENT_MODERE_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETCMS_COMMENT_MODERE_SENSIBLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETCMS_COMMENT_MODERE_SENSIBLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETCMS_COMMENT_MODERE_SENSIBLERowChangedEvent) Is Nothing) Then
                RaiseEvent FETCMS_COMMENT_MODERE_SENSIBLERowChanged(Me, New FETCMS_COMMENT_MODERE_SENSIBLERowChangeEvent(CType(e.Row,FETCMS_COMMENT_MODERE_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETCMS_COMMENT_MODERE_SENSIBLERowChangingEvent) Is Nothing) Then
                RaiseEvent FETCMS_COMMENT_MODERE_SENSIBLERowChanging(Me, New FETCMS_COMMENT_MODERE_SENSIBLERowChangeEvent(CType(e.Row,FETCMS_COMMENT_MODERE_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETCMS_COMMENT_MODERE_SENSIBLERowDeletedEvent) Is Nothing) Then
                RaiseEvent FETCMS_COMMENT_MODERE_SENSIBLERowDeleted(Me, New FETCMS_COMMENT_MODERE_SENSIBLERowChangeEvent(CType(e.Row,FETCMS_COMMENT_MODERE_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETCMS_COMMENT_MODERE_SENSIBLERowDeletingEvent) Is Nothing) Then
                RaiseEvent FETCMS_COMMENT_MODERE_SENSIBLERowDeleting(Me, New FETCMS_COMMENT_MODERE_SENSIBLERowChangeEvent(CType(e.Row,FETCMS_COMMENT_MODERE_SENSIBLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETCMS_COMMENT_MODERE_SENSIBLERow(ByVal row As FETCMS_COMMENT_MODERE_SENSIBLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETCMS_COMMENT_MODERE_SENSIBLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETTX3_ET_TXMSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETTX3_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETTX3_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETTX3_ET_TXMS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX3_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX3_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX3_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX3_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETTX3_ET_TXMSRow
            Get
                Return CType(Me.Rows(index),FETTX3_ET_TXMSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX3_ET_TXMSRowChanging As FETTX3_ET_TXMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX3_ET_TXMSRowChanged As FETTX3_ET_TXMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX3_ET_TXMSRowDeleting As FETTX3_ET_TXMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX3_ET_TXMSRowDeleted As FETTX3_ET_TXMSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETTX3_ET_TXMSRow(ByVal row As FETTX3_ET_TXMSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETTX3_ET_TXMSRow(ByVal FETTX3_FET_CODE_FK_PK As Integer, ByVal FETTX3_TEXTE As String) As FETTX3_ET_TXMSRow
            Dim rowFETTX3_ET_TXMSRow As FETTX3_ET_TXMSRow = CType(Me.NewRow,FETTX3_ET_TXMSRow)
            Dim columnValuesArray() As Object = New Object() {FETTX3_FET_CODE_FK_PK, FETTX3_TEXTE}
            rowFETTX3_ET_TXMSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETTX3_ET_TXMSRow)
            Return rowFETTX3_ET_TXMSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETTX3_FET_CODE_FK_PK(ByVal FETTX3_FET_CODE_FK_PK As Integer) As FETTX3_ET_TXMSRow
            Return CType(Me.Rows.Find(New Object() {FETTX3_FET_CODE_FK_PK}),FETTX3_ET_TXMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETTX3_ET_TXMSDataTable = CType(MyBase.Clone,FETTX3_ET_TXMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETTX3_ET_TXMSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETTX3_FET_CODE_FK_PK = MyBase.Columns("FETTX3_FET_CODE_FK_PK")
            Me.columnFETTX3_TEXTE = MyBase.Columns("FETTX3_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETTX3_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETTX3_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX3_FET_CODE_FK_PK)
            Me.columnFETTX3_TEXTE = New Global.System.Data.DataColumn("FETTX3_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX3_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETTX3_FET_CODE_FK_PK}, true))
            Me.columnFETTX3_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETTX3_FET_CODE_FK_PK.Unique = true
            Me.columnFETTX3_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETTX3_ET_TXMSRow() As FETTX3_ET_TXMSRow
            Return CType(Me.NewRow,FETTX3_ET_TXMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETTX3_ET_TXMSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETTX3_ET_TXMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETTX3_ET_TXMSRowChangedEvent) Is Nothing) Then
                RaiseEvent FETTX3_ET_TXMSRowChanged(Me, New FETTX3_ET_TXMSRowChangeEvent(CType(e.Row,FETTX3_ET_TXMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETTX3_ET_TXMSRowChangingEvent) Is Nothing) Then
                RaiseEvent FETTX3_ET_TXMSRowChanging(Me, New FETTX3_ET_TXMSRowChangeEvent(CType(e.Row,FETTX3_ET_TXMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETTX3_ET_TXMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETTX3_ET_TXMSRowDeleted(Me, New FETTX3_ET_TXMSRowChangeEvent(CType(e.Row,FETTX3_ET_TXMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETTX3_ET_TXMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETTX3_ET_TXMSRowDeleting(Me, New FETTX3_ET_TXMSRowChangeEvent(CType(e.Row,FETTX3_ET_TXMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETTX3_ET_TXMSRow(ByVal row As FETTX3_ET_TXMSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETTX3_ET_TXMSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETRE_ETIOLOGIE_RESISTANTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETRE_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETRE_CDF_ETIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETRE_POURCENTAGE_RESISTANCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETRE_ETIOLOGIE_RESISTANTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETRE_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETRE_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETRE_CDF_ETIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETRE_CDF_ETIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETRE_POURCENTAGE_RESISTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETRE_POURCENTAGE_RESISTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETRE_ETIOLOGIE_RESISTANTESRow
            Get
                Return CType(Me.Rows(index),FETRE_ETIOLOGIE_RESISTANTESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETRE_ETIOLOGIE_RESISTANTESRowChanging As FETRE_ETIOLOGIE_RESISTANTESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETRE_ETIOLOGIE_RESISTANTESRowChanged As FETRE_ETIOLOGIE_RESISTANTESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETRE_ETIOLOGIE_RESISTANTESRowDeleting As FETRE_ETIOLOGIE_RESISTANTESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETRE_ETIOLOGIE_RESISTANTESRowDeleted As FETRE_ETIOLOGIE_RESISTANTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETRE_ETIOLOGIE_RESISTANTESRow(ByVal row As FETRE_ETIOLOGIE_RESISTANTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETRE_ETIOLOGIE_RESISTANTESRow(ByVal FETRE_FET_CODE_FK_PK As Integer, ByVal FETRE_CDF_ETIN_CODE_FK_PK As String, ByVal FETRE_POURCENTAGE_RESISTANCE As String) As FETRE_ETIOLOGIE_RESISTANTESRow
            Dim rowFETRE_ETIOLOGIE_RESISTANTESRow As FETRE_ETIOLOGIE_RESISTANTESRow = CType(Me.NewRow,FETRE_ETIOLOGIE_RESISTANTESRow)
            Dim columnValuesArray() As Object = New Object() {FETRE_FET_CODE_FK_PK, FETRE_CDF_ETIN_CODE_FK_PK, FETRE_POURCENTAGE_RESISTANCE}
            rowFETRE_ETIOLOGIE_RESISTANTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETRE_ETIOLOGIE_RESISTANTESRow)
            Return rowFETRE_ETIOLOGIE_RESISTANTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETRE_FET_CODE_FK_PKFETRE_CDF_ETIN_CODE_FK_PK(ByVal FETRE_FET_CODE_FK_PK As Integer, ByVal FETRE_CDF_ETIN_CODE_FK_PK As String) As FETRE_ETIOLOGIE_RESISTANTESRow
            Return CType(Me.Rows.Find(New Object() {FETRE_FET_CODE_FK_PK, FETRE_CDF_ETIN_CODE_FK_PK}),FETRE_ETIOLOGIE_RESISTANTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETRE_ETIOLOGIE_RESISTANTESDataTable = CType(MyBase.Clone,FETRE_ETIOLOGIE_RESISTANTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETRE_ETIOLOGIE_RESISTANTESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETRE_FET_CODE_FK_PK = MyBase.Columns("FETRE_FET_CODE_FK_PK")
            Me.columnFETRE_CDF_ETIN_CODE_FK_PK = MyBase.Columns("FETRE_CDF_ETIN_CODE_FK_PK")
            Me.columnFETRE_POURCENTAGE_RESISTANCE = MyBase.Columns("FETRE_POURCENTAGE_RESISTANCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETRE_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETRE_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETRE_FET_CODE_FK_PK)
            Me.columnFETRE_CDF_ETIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETRE_CDF_ETIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETRE_CDF_ETIN_CODE_FK_PK)
            Me.columnFETRE_POURCENTAGE_RESISTANCE = New Global.System.Data.DataColumn("FETRE_POURCENTAGE_RESISTANCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETRE_POURCENTAGE_RESISTANCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETRE_FET_CODE_FK_PK, Me.columnFETRE_CDF_ETIN_CODE_FK_PK}, true))
            Me.columnFETRE_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETRE_CDF_ETIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETRE_CDF_ETIN_CODE_FK_PK.MaxLength = 10
            Me.columnFETRE_POURCENTAGE_RESISTANCE.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETRE_ETIOLOGIE_RESISTANTESRow() As FETRE_ETIOLOGIE_RESISTANTESRow
            Return CType(Me.NewRow,FETRE_ETIOLOGIE_RESISTANTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETRE_ETIOLOGIE_RESISTANTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETRE_ETIOLOGIE_RESISTANTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETRE_ETIOLOGIE_RESISTANTESRowChangedEvent) Is Nothing) Then
                RaiseEvent FETRE_ETIOLOGIE_RESISTANTESRowChanged(Me, New FETRE_ETIOLOGIE_RESISTANTESRowChangeEvent(CType(e.Row,FETRE_ETIOLOGIE_RESISTANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETRE_ETIOLOGIE_RESISTANTESRowChangingEvent) Is Nothing) Then
                RaiseEvent FETRE_ETIOLOGIE_RESISTANTESRowChanging(Me, New FETRE_ETIOLOGIE_RESISTANTESRowChangeEvent(CType(e.Row,FETRE_ETIOLOGIE_RESISTANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETRE_ETIOLOGIE_RESISTANTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETRE_ETIOLOGIE_RESISTANTESRowDeleted(Me, New FETRE_ETIOLOGIE_RESISTANTESRowChangeEvent(CType(e.Row,FETRE_ETIOLOGIE_RESISTANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETRE_ETIOLOGIE_RESISTANTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETRE_ETIOLOGIE_RESISTANTESRowDeleting(Me, New FETRE_ETIOLOGIE_RESISTANTESRowChangeEvent(CType(e.Row,FETRE_ETIOLOGIE_RESISTANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETRE_ETIOLOGIE_RESISTANTESRow(ByVal row As FETRE_ETIOLOGIE_RESISTANTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETRE_ETIOLOGIE_RESISTANTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETCRE_COMMENT_RESISTANTEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETCRE_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETCRE_CDF_COIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETCRE_COMMENT_RESISTANTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCRE_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCRE_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETCRE_CDF_COIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETCRE_CDF_COIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETCRE_COMMENT_RESISTANTERow
            Get
                Return CType(Me.Rows(index),FETCRE_COMMENT_RESISTANTERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCRE_COMMENT_RESISTANTERowChanging As FETCRE_COMMENT_RESISTANTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCRE_COMMENT_RESISTANTERowChanged As FETCRE_COMMENT_RESISTANTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCRE_COMMENT_RESISTANTERowDeleting As FETCRE_COMMENT_RESISTANTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETCRE_COMMENT_RESISTANTERowDeleted As FETCRE_COMMENT_RESISTANTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETCRE_COMMENT_RESISTANTERow(ByVal row As FETCRE_COMMENT_RESISTANTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETCRE_COMMENT_RESISTANTERow(ByVal FETCRE_FET_CODE_FK_PK As Integer, ByVal FETCRE_CDF_COIN_CODE_FK_PK As String) As FETCRE_COMMENT_RESISTANTERow
            Dim rowFETCRE_COMMENT_RESISTANTERow As FETCRE_COMMENT_RESISTANTERow = CType(Me.NewRow,FETCRE_COMMENT_RESISTANTERow)
            Dim columnValuesArray() As Object = New Object() {FETCRE_FET_CODE_FK_PK, FETCRE_CDF_COIN_CODE_FK_PK}
            rowFETCRE_COMMENT_RESISTANTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETCRE_COMMENT_RESISTANTERow)
            Return rowFETCRE_COMMENT_RESISTANTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETCRE_FET_CODE_FK_PKFETCRE_CDF_COIN_CODE_FK_PK(ByVal FETCRE_FET_CODE_FK_PK As Integer, ByVal FETCRE_CDF_COIN_CODE_FK_PK As String) As FETCRE_COMMENT_RESISTANTERow
            Return CType(Me.Rows.Find(New Object() {FETCRE_FET_CODE_FK_PK, FETCRE_CDF_COIN_CODE_FK_PK}),FETCRE_COMMENT_RESISTANTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETCRE_COMMENT_RESISTANTEDataTable = CType(MyBase.Clone,FETCRE_COMMENT_RESISTANTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETCRE_COMMENT_RESISTANTEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETCRE_FET_CODE_FK_PK = MyBase.Columns("FETCRE_FET_CODE_FK_PK")
            Me.columnFETCRE_CDF_COIN_CODE_FK_PK = MyBase.Columns("FETCRE_CDF_COIN_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETCRE_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETCRE_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCRE_FET_CODE_FK_PK)
            Me.columnFETCRE_CDF_COIN_CODE_FK_PK = New Global.System.Data.DataColumn("FETCRE_CDF_COIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETCRE_CDF_COIN_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETCRE_FET_CODE_FK_PK, Me.columnFETCRE_CDF_COIN_CODE_FK_PK}, true))
            Me.columnFETCRE_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCRE_CDF_COIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFETCRE_CDF_COIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETCRE_COMMENT_RESISTANTERow() As FETCRE_COMMENT_RESISTANTERow
            Return CType(Me.NewRow,FETCRE_COMMENT_RESISTANTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETCRE_COMMENT_RESISTANTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETCRE_COMMENT_RESISTANTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETCRE_COMMENT_RESISTANTERowChangedEvent) Is Nothing) Then
                RaiseEvent FETCRE_COMMENT_RESISTANTERowChanged(Me, New FETCRE_COMMENT_RESISTANTERowChangeEvent(CType(e.Row,FETCRE_COMMENT_RESISTANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETCRE_COMMENT_RESISTANTERowChangingEvent) Is Nothing) Then
                RaiseEvent FETCRE_COMMENT_RESISTANTERowChanging(Me, New FETCRE_COMMENT_RESISTANTERowChangeEvent(CType(e.Row,FETCRE_COMMENT_RESISTANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETCRE_COMMENT_RESISTANTERowDeletedEvent) Is Nothing) Then
                RaiseEvent FETCRE_COMMENT_RESISTANTERowDeleted(Me, New FETCRE_COMMENT_RESISTANTERowChangeEvent(CType(e.Row,FETCRE_COMMENT_RESISTANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETCRE_COMMENT_RESISTANTERowDeletingEvent) Is Nothing) Then
                RaiseEvent FETCRE_COMMENT_RESISTANTERowDeleting(Me, New FETCRE_COMMENT_RESISTANTERowChangeEvent(CType(e.Row,FETCRE_COMMENT_RESISTANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETCRE_COMMENT_RESISTANTERow(ByVal row As FETCRE_COMMENT_RESISTANTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETCRE_COMMENT_RESISTANTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETTX4_ET_TXREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETTX4_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETTX4_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETTX4_ET_TXRE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX4_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX4_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETTX4_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETTX4_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETTX4_ET_TXRERow
            Get
                Return CType(Me.Rows(index),FETTX4_ET_TXRERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX4_ET_TXRERowChanging As FETTX4_ET_TXRERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX4_ET_TXRERowChanged As FETTX4_ET_TXRERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX4_ET_TXRERowDeleting As FETTX4_ET_TXRERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETTX4_ET_TXRERowDeleted As FETTX4_ET_TXRERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETTX4_ET_TXRERow(ByVal row As FETTX4_ET_TXRERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETTX4_ET_TXRERow(ByVal FETTX4_FET_CODE_FK_PK As Integer, ByVal FETTX4_TEXTE As String) As FETTX4_ET_TXRERow
            Dim rowFETTX4_ET_TXRERow As FETTX4_ET_TXRERow = CType(Me.NewRow,FETTX4_ET_TXRERow)
            Dim columnValuesArray() As Object = New Object() {FETTX4_FET_CODE_FK_PK, FETTX4_TEXTE}
            rowFETTX4_ET_TXRERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETTX4_ET_TXRERow)
            Return rowFETTX4_ET_TXRERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETTX4_FET_CODE_FK_PK(ByVal FETTX4_FET_CODE_FK_PK As Integer) As FETTX4_ET_TXRERow
            Return CType(Me.Rows.Find(New Object() {FETTX4_FET_CODE_FK_PK}),FETTX4_ET_TXRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETTX4_ET_TXREDataTable = CType(MyBase.Clone,FETTX4_ET_TXREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETTX4_ET_TXREDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETTX4_FET_CODE_FK_PK = MyBase.Columns("FETTX4_FET_CODE_FK_PK")
            Me.columnFETTX4_TEXTE = MyBase.Columns("FETTX4_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETTX4_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETTX4_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX4_FET_CODE_FK_PK)
            Me.columnFETTX4_TEXTE = New Global.System.Data.DataColumn("FETTX4_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETTX4_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETTX4_FET_CODE_FK_PK}, true))
            Me.columnFETTX4_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETTX4_FET_CODE_FK_PK.Unique = true
            Me.columnFETTX4_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETTX4_ET_TXRERow() As FETTX4_ET_TXRERow
            Return CType(Me.NewRow,FETTX4_ET_TXRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETTX4_ET_TXRERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETTX4_ET_TXRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETTX4_ET_TXRERowChangedEvent) Is Nothing) Then
                RaiseEvent FETTX4_ET_TXRERowChanged(Me, New FETTX4_ET_TXRERowChangeEvent(CType(e.Row,FETTX4_ET_TXRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETTX4_ET_TXRERowChangingEvent) Is Nothing) Then
                RaiseEvent FETTX4_ET_TXRERowChanging(Me, New FETTX4_ET_TXRERowChangeEvent(CType(e.Row,FETTX4_ET_TXRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETTX4_ET_TXRERowDeletedEvent) Is Nothing) Then
                RaiseEvent FETTX4_ET_TXRERowDeleted(Me, New FETTX4_ET_TXRERowChangeEvent(CType(e.Row,FETTX4_ET_TXRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETTX4_ET_TXRERowDeletingEvent) Is Nothing) Then
                RaiseEvent FETTX4_ET_TXRERowDeleting(Me, New FETTX4_ET_TXRERowChangeEvent(CType(e.Row,FETTX4_ET_TXRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETTX4_ET_TXRERow(ByVal row As FETTX4_ET_TXRERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETTX4_ET_TXREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FETAFS_FET_AFSSAPSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFETAFS_FET_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETAFS_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFETAFS_DATE_PK As Global.System.Data.DataColumn
        
        Private columnFETAFS_CDF_DOCUMENT_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FETAFS_FET_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETAFS_FET_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETAFS_FET_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETAFS_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETAFS_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETAFS_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FETAFS_CDF_DOCUMENT_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFETAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FETAFS_FET_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FETAFS_FET_AFSSAPSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETAFS_FET_AFSSAPSRowChanging As FETAFS_FET_AFSSAPSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETAFS_FET_AFSSAPSRowChanged As FETAFS_FET_AFSSAPSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETAFS_FET_AFSSAPSRowDeleting As FETAFS_FET_AFSSAPSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event FETAFS_FET_AFSSAPSRowDeleted As FETAFS_FET_AFSSAPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddFETAFS_FET_AFSSAPSRow(ByVal row As FETAFS_FET_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddFETAFS_FET_AFSSAPSRow(ByVal FETAFS_FET_CODE_FK_PK As Integer, ByVal FETAFS_SP_CODE_FK_PK As Integer, ByVal FETAFS_DATE_PK As Date, ByVal FETAFS_CDF_DOCUMENT_FK_PK As String) As FETAFS_FET_AFSSAPSRow
            Dim rowFETAFS_FET_AFSSAPSRow As FETAFS_FET_AFSSAPSRow = CType(Me.NewRow,FETAFS_FET_AFSSAPSRow)
            Dim columnValuesArray() As Object = New Object() {FETAFS_FET_CODE_FK_PK, FETAFS_SP_CODE_FK_PK, FETAFS_DATE_PK, FETAFS_CDF_DOCUMENT_FK_PK}
            rowFETAFS_FET_AFSSAPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFETAFS_FET_AFSSAPSRow)
            Return rowFETAFS_FET_AFSSAPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFETAFS_FET_CODE_FK_PKFETAFS_SP_CODE_FK_PKFETAFS_DATE_PKFETAFS_CDF_DOCUMENT_FK_PK(ByVal FETAFS_FET_CODE_FK_PK As Integer, ByVal FETAFS_SP_CODE_FK_PK As Integer, ByVal FETAFS_DATE_PK As Date, ByVal FETAFS_CDF_DOCUMENT_FK_PK As String) As FETAFS_FET_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FETAFS_FET_CODE_FK_PK, FETAFS_SP_CODE_FK_PK, FETAFS_DATE_PK, FETAFS_CDF_DOCUMENT_FK_PK}),FETAFS_FET_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FETAFS_FET_AFSSAPSDataTable = CType(MyBase.Clone,FETAFS_FET_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FETAFS_FET_AFSSAPSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFETAFS_FET_CODE_FK_PK = MyBase.Columns("FETAFS_FET_CODE_FK_PK")
            Me.columnFETAFS_SP_CODE_FK_PK = MyBase.Columns("FETAFS_SP_CODE_FK_PK")
            Me.columnFETAFS_DATE_PK = MyBase.Columns("FETAFS_DATE_PK")
            Me.columnFETAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FETAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFETAFS_FET_CODE_FK_PK = New Global.System.Data.DataColumn("FETAFS_FET_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETAFS_FET_CODE_FK_PK)
            Me.columnFETAFS_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FETAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETAFS_SP_CODE_FK_PK)
            Me.columnFETAFS_DATE_PK = New Global.System.Data.DataColumn("FETAFS_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETAFS_DATE_PK)
            Me.columnFETAFS_CDF_DOCUMENT_FK_PK = New Global.System.Data.DataColumn("FETAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFETAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFETAFS_FET_CODE_FK_PK, Me.columnFETAFS_SP_CODE_FK_PK, Me.columnFETAFS_DATE_PK, Me.columnFETAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFETAFS_FET_CODE_FK_PK.AllowDBNull = false
            Me.columnFETAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFETAFS_DATE_PK.AllowDBNull = false
            Me.columnFETAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFETAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewFETAFS_FET_AFSSAPSRow() As FETAFS_FET_AFSSAPSRow
            Return CType(Me.NewRow,FETAFS_FET_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FETAFS_FET_AFSSAPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FETAFS_FET_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FETAFS_FET_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FETAFS_FET_AFSSAPSRowChanged(Me, New FETAFS_FET_AFSSAPSRowChangeEvent(CType(e.Row,FETAFS_FET_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FETAFS_FET_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FETAFS_FET_AFSSAPSRowChanging(Me, New FETAFS_FET_AFSSAPSRowChangeEvent(CType(e.Row,FETAFS_FET_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FETAFS_FET_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FETAFS_FET_AFSSAPSRowDeleted(Me, New FETAFS_FET_AFSSAPSRowChangeEvent(CType(e.Row,FETAFS_FET_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FETAFS_FET_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FETAFS_FET_AFSSAPSRowDeleting(Me, New FETAFS_FET_AFSSAPSRowChangeEvent(CType(e.Row,FETAFS_FET_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveFETAFS_FET_AFSSAPSRow(ByVal row As FETAFS_FET_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsTheriaque_Etiologie = New dsTheriaque_Etiologie()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FETAFS_FET_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FET_FICHEETIOLOGIERow
        Inherits Global.System.Data.DataRow
        
        Private tableFET_FICHEETIOLOGIE As FET_FICHEETIOLOGIEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFET_FICHEETIOLOGIE = CType(Me.Table,FET_FICHEETIOLOGIEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CMIHS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIHSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CMIHS' in table 'FET_FICHEETIOLOGIE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CDF_UDHS_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDHS_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CDF_UDHS_CODE_FK' in table 'FET_FICHEETIOLOGIE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDHS_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CMIIS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIISColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CMIIS' in table 'FET_FICHEETIOLOGIE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CDF_UDIS_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDIS_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CDF_UDIS_CODE_FK' in table 'FET_FICHEETIOLOGIE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDIS_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CMIMS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIMSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CMIMS' in table 'FET_FICHEETIOLOGIE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIMSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CDF_UDMS_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDMS_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CDF_UDMS_CODE_FK' in table 'FET_FICHEETIOLOGIE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDMS_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CMIRE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CMIRE' in table 'FET_FICHEETIOLOGIE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_CDF_UDRE_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDRE_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_CDF_UDRE_CODE_FK' in table 'FET_FICHEETIOLOGIE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDRE_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_DATECR() As Date
            Get
                Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FET_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFET_FICHEETIOLOGIE.FET_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FET_DATEMJ' in table 'FET_FICHEETIOLOGIE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFET_FICHEETIOLOGIE.FET_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CMIHSNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CMIHSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CMIHSNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIHSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CDF_UDHS_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDHS_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CDF_UDHS_CODE_FKNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDHS_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CMIISNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CMIISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CMIISNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CDF_UDIS_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDIS_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CDF_UDIS_CODE_FKNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDIS_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CMIMSNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CMIMSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CMIMSNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIMSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CDF_UDMS_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDMS_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CDF_UDMS_CODE_FKNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDMS_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CMIRENull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CMIREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CMIRENull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CMIREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_CDF_UDRE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDRE_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_CDF_UDRE_CODE_FKNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_CDF_UDRE_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFET_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFET_FICHEETIOLOGIE.FET_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFET_DATEMJNull()
            Me(Me.tableFET_FICHEETIOLOGIE.FET_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETCPH_ETIOCPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETCPH_ETIOCPH As FETCPH_ETIOCPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETCPH_ETIOCPH = CType(Me.Table,FETCPH_ETIOCPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETCPH_ETIOCPH.FETCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETCPH_ETIOCPH.FETCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCPH_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETCPH_ETIOCPH.FETCPH_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETCPH_ETIOCPH.FETCPH_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETCCH_ETIOCCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETCCH_ETIOCCH As FETCCH_ETIOCCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETCCH_ETIOCCH = CType(Me.Table,FETCCH_ETIOCCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETCCH_ETIOCCH.FETCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETCCH_ETIOCCH.FETCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCCH_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETCCH_ETIOCCH.FETCCH_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETCCH_ETIOCCH.FETCCH_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETSAC_ETIOSUBACRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETSAC_ETIOSUBAC As FETSAC_ETIOSUBACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETSAC_ETIOSUBAC = CType(Me.Table,FETSAC_ETIOSUBACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETSAC_ETIOSUBAC.FETSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETSAC_ETIOSUBAC.FETSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETSAC_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETSAC_ETIOSUBAC.FETSAC_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETSAC_ETIOSUBAC.FETSAC_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETPR_ETIOPRODRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETPR_ETIOPROD As FETPR_ETIOPRODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETPR_ETIOPROD = CType(Me.Table,FETPR_ETIOPRODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETPR_ETIOPROD.FETPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETPR_ETIOPROD.FETPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETPR_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETPR_ETIOPROD.FETPR_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETPR_ETIOPROD.FETPR_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETSP_ETIOSPERow
        Inherits Global.System.Data.DataRow
        
        Private tableFETSP_ETIOSPE As FETSP_ETIOSPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETSP_ETIOSPE = CType(Me.Table,FETSP_ETIOSPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETSP_ETIOSPE.FETSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETSP_ETIOSPE.FETSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETSP_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETSP_ETIOSPE.FETSP_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETSP_ETIOSPE.FETSP_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETTXTI_TEXTINTRO_CMIRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETTXTI_TEXTINTRO_CMI As FETTXTI_TEXTINTRO_CMIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETTXTI_TEXTINTRO_CMI = CType(Me.Table,FETTXTI_TEXTINTRO_CMIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTXTI_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETTXTI_TEXTINTRO_CMI.FETTXTI_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETTXTI_TEXTINTRO_CMI.FETTXTI_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTXTI_TXT_INTRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETTXTI_TEXTINTRO_CMI.FETTXTI_TXT_INTROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETTXTI_TXT_INTRO' in table 'FETTXTI_TEXTINTRO_CMI' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETTXTI_TEXTINTRO_CMI.FETTXTI_TXT_INTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETTXTI_TXT_INTRONull() As Boolean
            Return Me.IsNull(Me.tableFETTXTI_TEXTINTRO_CMI.FETTXTI_TXT_INTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETTXTI_TXT_INTRONull()
            Me(Me.tableFETTXTI_TEXTINTRO_CMI.FETTXTI_TXT_INTROColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETHS_ETIOLOGIE_HABITU_SENSIBRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETHS_ETIOLOGIE_HABITU_SENSIB As FETHS_ETIOLOGIE_HABITU_SENSIBDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB = CType(Me.Table,FETHS_ETIOLOGIE_HABITU_SENSIBDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETHS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETHS_CDF_ETIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_CDF_ETIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_CDF_ETIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETHS_POURCENTAGE_RESISTANCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_POURCENTAGE_RESISTANCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETHS_POURCENTAGE_RESISTANCE' in table 'FETHS_ETIOLOGIE_HAB"& _ 
                            "ITU_SENSIB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_POURCENTAGE_RESISTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETHS_POURCENTAGE_RESISTANCENull() As Boolean
            Return Me.IsNull(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_POURCENTAGE_RESISTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETHS_POURCENTAGE_RESISTANCENull()
            Me(Me.tableFETHS_ETIOLOGIE_HABITU_SENSIB.FETHS_POURCENTAGE_RESISTANCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETCHS_COMMENT_HABITU_SENSIBLERow
        Inherits Global.System.Data.DataRow
        
        Private tableFETCHS_COMMENT_HABITU_SENSIBLE As FETCHS_COMMENT_HABITU_SENSIBLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETCHS_COMMENT_HABITU_SENSIBLE = CType(Me.Table,FETCHS_COMMENT_HABITU_SENSIBLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCHS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETCHS_COMMENT_HABITU_SENSIBLE.FETCHS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETCHS_COMMENT_HABITU_SENSIBLE.FETCHS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCHS_CDF_COIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETCHS_COMMENT_HABITU_SENSIBLE.FETCHS_CDF_COIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETCHS_COMMENT_HABITU_SENSIBLE.FETCHS_CDF_COIN_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETTX1_ET_TXHSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETTX1_ET_TXHS As FETTX1_ET_TXHSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETTX1_ET_TXHS = CType(Me.Table,FETTX1_ET_TXHSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX1_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETTX1_ET_TXHS.FETTX1_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETTX1_ET_TXHS.FETTX1_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX1_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETTX1_ET_TXHS.FETTX1_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETTX1_TEXTE' in table 'FETTX1_ET_TXHS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETTX1_ET_TXHS.FETTX1_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETTX1_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFETTX1_ET_TXHS.FETTX1_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETTX1_TEXTENull()
            Me(Me.tableFETTX1_ET_TXHS.FETTX1_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETIS_ETIOLOGIE_INCONST_SENSIBRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETIS_ETIOLOGIE_INCONST_SENSIB As FETIS_ETIOLOGIE_INCONST_SENSIBDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB = CType(Me.Table,FETIS_ETIOLOGIE_INCONST_SENSIBDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETIS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETIS_CDF_ETIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_CDF_ETIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_CDF_ETIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETIS_POURCENTAGE_RESISTANCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_POURCENTAGE_RESISTANCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETIS_POURCENTAGE_RESISTANCE' in table 'FETIS_ETIOLOGIE_INC"& _ 
                            "ONST_SENSIB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_POURCENTAGE_RESISTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETIS_POURCENTAGE_RESISTANCENull() As Boolean
            Return Me.IsNull(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_POURCENTAGE_RESISTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETIS_POURCENTAGE_RESISTANCENull()
            Me(Me.tableFETIS_ETIOLOGIE_INCONST_SENSIB.FETIS_POURCENTAGE_RESISTANCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETCIS_COMMENT_INCONS_SENSIBLERow
        Inherits Global.System.Data.DataRow
        
        Private tableFETCIS_COMMENT_INCONS_SENSIBLE As FETCIS_COMMENT_INCONS_SENSIBLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETCIS_COMMENT_INCONS_SENSIBLE = CType(Me.Table,FETCIS_COMMENT_INCONS_SENSIBLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCIS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETCIS_COMMENT_INCONS_SENSIBLE.FETCIS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETCIS_COMMENT_INCONS_SENSIBLE.FETCIS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCIS_CDF_COIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETCIS_COMMENT_INCONS_SENSIBLE.FETCIS_CDF_COIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETCIS_COMMENT_INCONS_SENSIBLE.FETCIS_CDF_COIN_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETTX2_ET_TXISRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETTX2_ET_TXIS As FETTX2_ET_TXISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETTX2_ET_TXIS = CType(Me.Table,FETTX2_ET_TXISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX2_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETTX2_ET_TXIS.FETTX2_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETTX2_ET_TXIS.FETTX2_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX2_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETTX2_ET_TXIS.FETTX2_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETTX2_TEXTE' in table 'FETTX2_ET_TXIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETTX2_ET_TXIS.FETTX2_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETTX2_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFETTX2_ET_TXIS.FETTX2_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETTX2_TEXTENull()
            Me(Me.tableFETTX2_ET_TXIS.FETTX2_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETMS_ETIOLOGIE_MODEREM_SENSIBRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETMS_ETIOLOGIE_MODEREM_SENSIB As FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB = CType(Me.Table,FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETMS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETMS_CDF_ETIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_CDF_ETIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_CDF_ETIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETMS_POURCENTAGE_RESISTANCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_POURCENTAGE_RESISTANCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETMS_POURCENTAGE_RESISTANCE' in table 'FETMS_ETIOLOGIE_MOD"& _ 
                            "EREM_SENSIB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_POURCENTAGE_RESISTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETMS_POURCENTAGE_RESISTANCENull() As Boolean
            Return Me.IsNull(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_POURCENTAGE_RESISTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETMS_POURCENTAGE_RESISTANCENull()
            Me(Me.tableFETMS_ETIOLOGIE_MODEREM_SENSIB.FETMS_POURCENTAGE_RESISTANCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETCMS_COMMENT_MODERE_SENSIBLERow
        Inherits Global.System.Data.DataRow
        
        Private tableFETCMS_COMMENT_MODERE_SENSIBLE As FETCMS_COMMENT_MODERE_SENSIBLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETCMS_COMMENT_MODERE_SENSIBLE = CType(Me.Table,FETCMS_COMMENT_MODERE_SENSIBLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCMS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETCMS_COMMENT_MODERE_SENSIBLE.FETCMS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETCMS_COMMENT_MODERE_SENSIBLE.FETCMS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCMS_CDF_COIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETCMS_COMMENT_MODERE_SENSIBLE.FETCMS_CDF_COIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETCMS_COMMENT_MODERE_SENSIBLE.FETCMS_CDF_COIN_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETTX3_ET_TXMSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETTX3_ET_TXMS As FETTX3_ET_TXMSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETTX3_ET_TXMS = CType(Me.Table,FETTX3_ET_TXMSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX3_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETTX3_ET_TXMS.FETTX3_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETTX3_ET_TXMS.FETTX3_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX3_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETTX3_ET_TXMS.FETTX3_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETTX3_TEXTE' in table 'FETTX3_ET_TXMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETTX3_ET_TXMS.FETTX3_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETTX3_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFETTX3_ET_TXMS.FETTX3_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETTX3_TEXTENull()
            Me(Me.tableFETTX3_ET_TXMS.FETTX3_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETRE_ETIOLOGIE_RESISTANTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETRE_ETIOLOGIE_RESISTANTES As FETRE_ETIOLOGIE_RESISTANTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETRE_ETIOLOGIE_RESISTANTES = CType(Me.Table,FETRE_ETIOLOGIE_RESISTANTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETRE_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETRE_CDF_ETIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_CDF_ETIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_CDF_ETIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETRE_POURCENTAGE_RESISTANCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_POURCENTAGE_RESISTANCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETRE_POURCENTAGE_RESISTANCE' in table 'FETRE_ETIOLOGIE_RES"& _ 
                            "ISTANTES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_POURCENTAGE_RESISTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETRE_POURCENTAGE_RESISTANCENull() As Boolean
            Return Me.IsNull(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_POURCENTAGE_RESISTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETRE_POURCENTAGE_RESISTANCENull()
            Me(Me.tableFETRE_ETIOLOGIE_RESISTANTES.FETRE_POURCENTAGE_RESISTANCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETCRE_COMMENT_RESISTANTERow
        Inherits Global.System.Data.DataRow
        
        Private tableFETCRE_COMMENT_RESISTANTE As FETCRE_COMMENT_RESISTANTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETCRE_COMMENT_RESISTANTE = CType(Me.Table,FETCRE_COMMENT_RESISTANTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCRE_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETCRE_COMMENT_RESISTANTE.FETCRE_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETCRE_COMMENT_RESISTANTE.FETCRE_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETCRE_CDF_COIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETCRE_COMMENT_RESISTANTE.FETCRE_CDF_COIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETCRE_COMMENT_RESISTANTE.FETCRE_CDF_COIN_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETTX4_ET_TXRERow
        Inherits Global.System.Data.DataRow
        
        Private tableFETTX4_ET_TXRE As FETTX4_ET_TXREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETTX4_ET_TXRE = CType(Me.Table,FETTX4_ET_TXREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX4_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETTX4_ET_TXRE.FETTX4_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETTX4_ET_TXRE.FETTX4_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETTX4_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFETTX4_ET_TXRE.FETTX4_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FETTX4_TEXTE' in table 'FETTX4_ET_TXRE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFETTX4_ET_TXRE.FETTX4_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFETTX4_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFETTX4_ET_TXRE.FETTX4_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFETTX4_TEXTENull()
            Me(Me.tableFETTX4_ET_TXRE.FETTX4_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FETAFS_FET_AFSSAPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFETAFS_FET_AFSSAPS As FETAFS_FET_AFSSAPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFETAFS_FET_AFSSAPS = CType(Me.Table,FETAFS_FET_AFSSAPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETAFS_FET_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_FET_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_FET_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FETAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFETAFS_FET_AFSSAPS.FETAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FET_FICHEETIOLOGIERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FET_FICHEETIOLOGIERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FET_FICHEETIOLOGIERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FET_FICHEETIOLOGIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETCPH_ETIOCPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETCPH_ETIOCPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETCPH_ETIOCPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETCPH_ETIOCPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETCCH_ETIOCCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETCCH_ETIOCCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETCCH_ETIOCCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETCCH_ETIOCCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETSAC_ETIOSUBACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETSAC_ETIOSUBACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETSAC_ETIOSUBACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETSAC_ETIOSUBACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETPR_ETIOPRODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETPR_ETIOPRODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETPR_ETIOPRODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETPR_ETIOPRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETSP_ETIOSPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETSP_ETIOSPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETSP_ETIOSPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETSP_ETIOSPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETTXTI_TEXTINTRO_CMIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETTXTI_TEXTINTRO_CMIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETTXTI_TEXTINTRO_CMIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETTXTI_TEXTINTRO_CMIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETHS_ETIOLOGIE_HABITU_SENSIBRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETHS_ETIOLOGIE_HABITU_SENSIBRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETHS_ETIOLOGIE_HABITU_SENSIBRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETHS_ETIOLOGIE_HABITU_SENSIBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETCHS_COMMENT_HABITU_SENSIBLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETCHS_COMMENT_HABITU_SENSIBLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETCHS_COMMENT_HABITU_SENSIBLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETCHS_COMMENT_HABITU_SENSIBLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETTX1_ET_TXHSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETTX1_ET_TXHSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETTX1_ET_TXHSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETTX1_ET_TXHSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETIS_ETIOLOGIE_INCONST_SENSIBRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETIS_ETIOLOGIE_INCONST_SENSIBRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETIS_ETIOLOGIE_INCONST_SENSIBRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETIS_ETIOLOGIE_INCONST_SENSIBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETCIS_COMMENT_INCONS_SENSIBLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETCIS_COMMENT_INCONS_SENSIBLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETCIS_COMMENT_INCONS_SENSIBLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETCIS_COMMENT_INCONS_SENSIBLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETTX2_ET_TXISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETTX2_ET_TXISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETTX2_ET_TXISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETTX2_ET_TXISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETMS_ETIOLOGIE_MODEREM_SENSIBRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETMS_ETIOLOGIE_MODEREM_SENSIBRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETMS_ETIOLOGIE_MODEREM_SENSIBRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETMS_ETIOLOGIE_MODEREM_SENSIBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETCMS_COMMENT_MODERE_SENSIBLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETCMS_COMMENT_MODERE_SENSIBLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETCMS_COMMENT_MODERE_SENSIBLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETCMS_COMMENT_MODERE_SENSIBLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETTX3_ET_TXMSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETTX3_ET_TXMSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETTX3_ET_TXMSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETTX3_ET_TXMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETRE_ETIOLOGIE_RESISTANTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETRE_ETIOLOGIE_RESISTANTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETRE_ETIOLOGIE_RESISTANTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETRE_ETIOLOGIE_RESISTANTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETCRE_COMMENT_RESISTANTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETCRE_COMMENT_RESISTANTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETCRE_COMMENT_RESISTANTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETCRE_COMMENT_RESISTANTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETTX4_ET_TXRERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETTX4_ET_TXRERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETTX4_ET_TXRERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETTX4_ET_TXRERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class FETAFS_FET_AFSSAPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FETAFS_FET_AFSSAPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As FETAFS_FET_AFSSAPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As FETAFS_FET_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_EtiologieTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FET_FICHEETIOLOGIETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FET_FICHEETIOLOGIE"
            tableMapping.ColumnMappings.Add("FET_CODE_SQ_PK", "FET_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FET_CMIHS", "FET_CMIHS")
            tableMapping.ColumnMappings.Add("FET_CDF_UDHS_CODE_FK", "FET_CDF_UDHS_CODE_FK")
            tableMapping.ColumnMappings.Add("FET_CMIIS", "FET_CMIIS")
            tableMapping.ColumnMappings.Add("FET_CDF_UDIS_CODE_FK", "FET_CDF_UDIS_CODE_FK")
            tableMapping.ColumnMappings.Add("FET_CMIMS", "FET_CMIMS")
            tableMapping.ColumnMappings.Add("FET_CDF_UDMS_CODE_FK", "FET_CDF_UDMS_CODE_FK")
            tableMapping.ColumnMappings.Add("FET_CMIRE", "FET_CMIRE")
            tableMapping.ColumnMappings.Add("FET_CDF_UDRE_CODE_FK", "FET_CDF_UDRE_CODE_FK")
            tableMapping.ColumnMappings.Add("FET_DATECR", "FET_DATECR")
            tableMapping.ColumnMappings.Add("FET_DATEMJ", "FET_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FET_FICHEETIOLOGIE] WHERE (([FET_CODE_SQ_PK] = @Original"& _ 
                "_FET_CODE_SQ_PK) AND ((@IsNull_FET_CMIHS = 1 AND [FET_CMIHS] IS NULL) OR ([FET_C"& _ 
                "MIHS] = @Original_FET_CMIHS)) AND ((@IsNull_FET_CDF_UDHS_CODE_FK = 1 AND [FET_CD"& _ 
                "F_UDHS_CODE_FK] IS NULL) OR ([FET_CDF_UDHS_CODE_FK] = @Original_FET_CDF_UDHS_COD"& _ 
                "E_FK)) AND ((@IsNull_FET_CMIIS = 1 AND [FET_CMIIS] IS NULL) OR ([FET_CMIIS] = @O"& _ 
                "riginal_FET_CMIIS)) AND ((@IsNull_FET_CDF_UDIS_CODE_FK = 1 AND [FET_CDF_UDIS_COD"& _ 
                "E_FK] IS NULL) OR ([FET_CDF_UDIS_CODE_FK] = @Original_FET_CDF_UDIS_CODE_FK)) AND"& _ 
                " ((@IsNull_FET_CMIMS = 1 AND [FET_CMIMS] IS NULL) OR ([FET_CMIMS] = @Original_FE"& _ 
                "T_CMIMS)) AND ((@IsNull_FET_CDF_UDMS_CODE_FK = 1 AND [FET_CDF_UDMS_CODE_FK] IS N"& _ 
                "ULL) OR ([FET_CDF_UDMS_CODE_FK] = @Original_FET_CDF_UDMS_CODE_FK)) AND ((@IsNull"& _ 
                "_FET_CMIRE = 1 AND [FET_CMIRE] IS NULL) OR ([FET_CMIRE] = @Original_FET_CMIRE)) "& _ 
                "AND ((@IsNull_FET_CDF_UDRE_CODE_FK = 1 AND [FET_CDF_UDRE_CODE_FK] IS NULL) OR (["& _ 
                "FET_CDF_UDRE_CODE_FK] = @Original_FET_CDF_UDRE_CODE_FK)) AND ([FET_DATECR] = @Or"& _ 
                "iginal_FET_DATECR) AND ((@IsNull_FET_DATEMJ = 1 AND [FET_DATEMJ] IS NULL) OR ([F"& _ 
                "ET_DATEMJ] = @Original_FET_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIHS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIHS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIHS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIHS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDHS_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDHS_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDHS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDHS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIIS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDIS_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDIS_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDIS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDIS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIMS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIMS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIMS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIMS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDMS_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDMS_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDMS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDMS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIRE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDRE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDRE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDRE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDRE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FET_FICHEETIOLOGIE] ([FET_CODE_SQ_PK], [FET_CMIHS], [FET"& _ 
                "_CDF_UDHS_CODE_FK], [FET_CMIIS], [FET_CDF_UDIS_CODE_FK], [FET_CMIMS], [FET_CDF_U"& _ 
                "DMS_CODE_FK], [FET_CMIRE], [FET_CDF_UDRE_CODE_FK], [FET_DATECR], [FET_DATEMJ]) V"& _ 
                "ALUES (@FET_CODE_SQ_PK, @FET_CMIHS, @FET_CDF_UDHS_CODE_FK, @FET_CMIIS, @FET_CDF_"& _ 
                "UDIS_CODE_FK, @FET_CMIMS, @FET_CDF_UDMS_CODE_FK, @FET_CMIRE, @FET_CDF_UDRE_CODE_"& _ 
                "FK, @FET_DATECR, @FET_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FET_CODE_SQ_PK, FET_CMIHS, FET_CDF_UDHS_C"& _ 
                "ODE_FK, FET_CMIIS, FET_CDF_UDIS_CODE_FK, FET_CMIMS, FET_CDF_UDMS_CODE_FK, FET_CM"& _ 
                "IRE, FET_CDF_UDRE_CODE_FK, FET_DATECR, FET_DATEMJ FROM THERIAQUE.FET_FICHEETIOLO"& _ 
                "GIE WHERE (FET_CODE_SQ_PK = @FET_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIHS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIHS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDHS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDHS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIIS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDIS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDIS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIMS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIMS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDMS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDMS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIRE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDRE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDRE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FET_FICHEETIOLOGIE] SET [FET_CODE_SQ_PK] = @FET_CODE_SQ_PK, ["& _ 
                "FET_CMIHS] = @FET_CMIHS, [FET_CDF_UDHS_CODE_FK] = @FET_CDF_UDHS_CODE_FK, [FET_CM"& _ 
                "IIS] = @FET_CMIIS, [FET_CDF_UDIS_CODE_FK] = @FET_CDF_UDIS_CODE_FK, [FET_CMIMS] ="& _ 
                " @FET_CMIMS, [FET_CDF_UDMS_CODE_FK] = @FET_CDF_UDMS_CODE_FK, [FET_CMIRE] = @FET_"& _ 
                "CMIRE, [FET_CDF_UDRE_CODE_FK] = @FET_CDF_UDRE_CODE_FK, [FET_DATECR] = @FET_DATEC"& _ 
                "R, [FET_DATEMJ] = @FET_DATEMJ WHERE (([FET_CODE_SQ_PK] = @Original_FET_CODE_SQ_P"& _ 
                "K) AND ((@IsNull_FET_CMIHS = 1 AND [FET_CMIHS] IS NULL) OR ([FET_CMIHS] = @Origi"& _ 
                "nal_FET_CMIHS)) AND ((@IsNull_FET_CDF_UDHS_CODE_FK = 1 AND [FET_CDF_UDHS_CODE_FK"& _ 
                "] IS NULL) OR ([FET_CDF_UDHS_CODE_FK] = @Original_FET_CDF_UDHS_CODE_FK)) AND ((@"& _ 
                "IsNull_FET_CMIIS = 1 AND [FET_CMIIS] IS NULL) OR ([FET_CMIIS] = @Original_FET_CM"& _ 
                "IIS)) AND ((@IsNull_FET_CDF_UDIS_CODE_FK = 1 AND [FET_CDF_UDIS_CODE_FK] IS NULL)"& _ 
                " OR ([FET_CDF_UDIS_CODE_FK] = @Original_FET_CDF_UDIS_CODE_FK)) AND ((@IsNull_FET"& _ 
                "_CMIMS = 1 AND [FET_CMIMS] IS NULL) OR ([FET_CMIMS] = @Original_FET_CMIMS)) AND "& _ 
                "((@IsNull_FET_CDF_UDMS_CODE_FK = 1 AND [FET_CDF_UDMS_CODE_FK] IS NULL) OR ([FET_"& _ 
                "CDF_UDMS_CODE_FK] = @Original_FET_CDF_UDMS_CODE_FK)) AND ((@IsNull_FET_CMIRE = 1"& _ 
                " AND [FET_CMIRE] IS NULL) OR ([FET_CMIRE] = @Original_FET_CMIRE)) AND ((@IsNull_"& _ 
                "FET_CDF_UDRE_CODE_FK = 1 AND [FET_CDF_UDRE_CODE_FK] IS NULL) OR ([FET_CDF_UDRE_C"& _ 
                "ODE_FK] = @Original_FET_CDF_UDRE_CODE_FK)) AND ([FET_DATECR] = @Original_FET_DAT"& _ 
                "ECR) AND ((@IsNull_FET_DATEMJ = 1 AND [FET_DATEMJ] IS NULL) OR ([FET_DATEMJ] = @"& _ 
                "Original_FET_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FET_CODE_SQ_PK, FET_CMIHS, FET_CDF_UDHS_CODE_FK,"& _ 
                " FET_CMIIS, FET_CDF_UDIS_CODE_FK, FET_CMIMS, FET_CDF_UDMS_CODE_FK, FET_CMIRE, FE"& _ 
                "T_CDF_UDRE_CODE_FK, FET_DATECR, FET_DATEMJ FROM THERIAQUE.FET_FICHEETIOLOGIE WHE"& _ 
                "RE (FET_CODE_SQ_PK = @FET_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIHS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIHS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDHS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDHS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIIS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDIS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDIS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIMS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIMS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDMS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDMS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CMIRE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CDF_UDRE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDRE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIHS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIHS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIHS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIHS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDHS_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDHS_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDHS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDHS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIIS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDIS_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDIS_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDIS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDIS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIMS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIMS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIMS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIMS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDMS_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDMS_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDMS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDMS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CMIRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CMIRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CMIRE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FET_CMIRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_CDF_UDRE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDRE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_CDF_UDRE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CDF_UDRE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FET_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FET_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FET_CODE_SQ_PK, FET_CMIHS, FET_CDF_UDHS_CODE_FK, FET_CMIIS, FET_CDF_UDIS_C"& _ 
                "ODE_FK, FET_CMIMS, FET_CDF_UDMS_CODE_FK, FET_CMIRE, FET_CDF_UDRE_CODE_FK, FET_DA"& _ 
                "TECR, FET_DATEMJ FROM THERIAQUE.FET_FICHEETIOLOGIE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FET_CODE_SQ_PK, FET_CMIHS, FET_CDF_UDHS_CODE_FK, FET_CMIIS, FET_CDF_UDIS_C"& _ 
                "ODE_FK, FET_CMIMS, FET_CDF_UDMS_CODE_FK, FET_CMIRE, FET_CDF_UDRE_CODE_FK, FET_DA"& _ 
                "TECR, FET_DATEMJ FROM THERIAQUE.FET_FICHEETIOLOGIE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FET_CODE_SQ_PK = @FET_"& _ 
                "CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FET_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FET_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable = New dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable, ByVal FET_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FET_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FET_CODE_SQ_PK As Integer) As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FET_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable = New dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FET_FICHEETIOLOGIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FET_FICHEETIOLOGIE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FET_CODE_SQ_PK As Integer, ByVal Original_FET_CMIHS As Global.System.Nullable(Of Decimal), ByVal Original_FET_CDF_UDHS_CODE_FK As String, ByVal Original_FET_CMIIS As Global.System.Nullable(Of Decimal), ByVal Original_FET_CDF_UDIS_CODE_FK As String, ByVal Original_FET_CMIMS As Global.System.Nullable(Of Decimal), ByVal Original_FET_CDF_UDMS_CODE_FK As String, ByVal Original_FET_CMIRE As Global.System.Nullable(Of Decimal), ByVal Original_FET_CDF_UDRE_CODE_FK As String, ByVal Original_FET_DATECR As Date, ByVal Original_FET_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FET_CODE_SQ_PK,Integer)
            If (Original_FET_CMIHS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FET_CMIHS.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDHS_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FET_CDF_UDHS_CODE_FK,String)
            End If
            If (Original_FET_CMIIS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FET_CMIIS.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDIS_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FET_CDF_UDIS_CODE_FK,String)
            End If
            If (Original_FET_CMIMS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FET_CMIMS.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDMS_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FET_CDF_UDMS_CODE_FK,String)
            End If
            If (Original_FET_CMIRE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_FET_CMIRE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDRE_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FET_CDF_UDRE_CODE_FK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_FET_DATECR,Date)
            If (Original_FET_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_FET_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FET_CODE_SQ_PK As Integer, ByVal FET_CMIHS As Global.System.Nullable(Of Decimal), ByVal FET_CDF_UDHS_CODE_FK As String, ByVal FET_CMIIS As Global.System.Nullable(Of Decimal), ByVal FET_CDF_UDIS_CODE_FK As String, ByVal FET_CMIMS As Global.System.Nullable(Of Decimal), ByVal FET_CDF_UDMS_CODE_FK As String, ByVal FET_CMIRE As Global.System.Nullable(Of Decimal), ByVal FET_CDF_UDRE_CODE_FK As String, ByVal FET_DATECR As Date, ByVal FET_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FET_CODE_SQ_PK,Integer)
            If (FET_CMIHS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FET_CMIHS.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDHS_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FET_CDF_UDHS_CODE_FK,String)
            End If
            If (FET_CMIIS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FET_CMIIS.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDIS_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FET_CDF_UDIS_CODE_FK,String)
            End If
            If (FET_CMIMS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FET_CMIMS.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDMS_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FET_CDF_UDMS_CODE_FK,String)
            End If
            If (FET_CMIRE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FET_CMIRE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDRE_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FET_CDF_UDRE_CODE_FK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(FET_DATECR,Date)
            If (FET_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FET_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FET_CODE_SQ_PK As Integer,  _
                    ByVal FET_CMIHS As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDHS_CODE_FK As String,  _
                    ByVal FET_CMIIS As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDIS_CODE_FK As String,  _
                    ByVal FET_CMIMS As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDMS_CODE_FK As String,  _
                    ByVal FET_CMIRE As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDRE_CODE_FK As String,  _
                    ByVal FET_DATECR As Date,  _
                    ByVal FET_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_FET_CODE_SQ_PK As Integer,  _
                    ByVal Original_FET_CMIHS As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDHS_CODE_FK As String,  _
                    ByVal Original_FET_CMIIS As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDIS_CODE_FK As String,  _
                    ByVal Original_FET_CMIMS As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDMS_CODE_FK As String,  _
                    ByVal Original_FET_CMIRE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDRE_CODE_FK As String,  _
                    ByVal Original_FET_DATECR As Date,  _
                    ByVal Original_FET_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FET_CODE_SQ_PK,Integer)
            If (FET_CMIHS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FET_CMIHS.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDHS_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FET_CDF_UDHS_CODE_FK,String)
            End If
            If (FET_CMIIS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FET_CMIIS.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDIS_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FET_CDF_UDIS_CODE_FK,String)
            End If
            If (FET_CMIMS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FET_CMIMS.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDMS_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FET_CDF_UDMS_CODE_FK,String)
            End If
            If (FET_CMIRE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FET_CMIRE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (FET_CDF_UDRE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FET_CDF_UDRE_CODE_FK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FET_DATECR,Date)
            If (FET_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FET_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FET_CODE_SQ_PK,Integer)
            If (Original_FET_CMIHS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FET_CMIHS.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDHS_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FET_CDF_UDHS_CODE_FK,String)
            End If
            If (Original_FET_CMIIS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FET_CMIIS.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDIS_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FET_CDF_UDIS_CODE_FK,String)
            End If
            If (Original_FET_CMIMS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FET_CMIMS.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDMS_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_FET_CDF_UDMS_CODE_FK,String)
            End If
            If (Original_FET_CMIRE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_FET_CMIRE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_FET_CDF_UDRE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_FET_CDF_UDRE_CODE_FK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_FET_DATECR,Date)
            If (Original_FET_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_FET_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FET_CMIHS As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDHS_CODE_FK As String,  _
                    ByVal FET_CMIIS As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDIS_CODE_FK As String,  _
                    ByVal FET_CMIMS As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDMS_CODE_FK As String,  _
                    ByVal FET_CMIRE As Global.System.Nullable(Of Decimal),  _
                    ByVal FET_CDF_UDRE_CODE_FK As String,  _
                    ByVal FET_DATECR As Date,  _
                    ByVal FET_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_FET_CODE_SQ_PK As Integer,  _
                    ByVal Original_FET_CMIHS As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDHS_CODE_FK As String,  _
                    ByVal Original_FET_CMIIS As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDIS_CODE_FK As String,  _
                    ByVal Original_FET_CMIMS As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDMS_CODE_FK As String,  _
                    ByVal Original_FET_CMIRE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FET_CDF_UDRE_CODE_FK As String,  _
                    ByVal Original_FET_DATECR As Date,  _
                    ByVal Original_FET_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FET_CODE_SQ_PK, FET_CMIHS, FET_CDF_UDHS_CODE_FK, FET_CMIIS, FET_CDF_UDIS_CODE_FK, FET_CMIMS, FET_CDF_UDMS_CODE_FK, FET_CMIRE, FET_CDF_UDRE_CODE_FK, FET_DATECR, FET_DATEMJ, Original_FET_CODE_SQ_PK, Original_FET_CMIHS, Original_FET_CDF_UDHS_CODE_FK, Original_FET_CMIIS, Original_FET_CDF_UDIS_CODE_FK, Original_FET_CMIMS, Original_FET_CDF_UDMS_CODE_FK, Original_FET_CMIRE, Original_FET_CDF_UDRE_CODE_FK, Original_FET_DATECR, Original_FET_DATEMJ)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETCPH_ETIOCPHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETCPH_ETIOCPH"
            tableMapping.ColumnMappings.Add("FETCPH_CPH_CODE_FK_PK", "FETCPH_CPH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETCPH_FET_CODE_FK_PK", "FETCPH_FET_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETCPH_ETIOCPH] WHERE (([FETCPH_CPH_CODE_FK_PK] = @Origi"& _ 
                "nal_FETCPH_CPH_CODE_FK_PK) AND ([FETCPH_FET_CODE_FK_PK] = @Original_FETCPH_FET_C"& _ 
                "ODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCPH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETCPH_ETIOCPH] ([FETCPH_CPH_CODE_FK_PK], [FETCPH_FET_CO"& _ 
                "DE_FK_PK]) VALUES (@FETCPH_CPH_CODE_FK_PK, @FETCPH_FET_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETC"& _ 
                "PH_CPH_CODE_FK_PK, FETCPH_FET_CODE_FK_PK FROM THERIAQUE.FETCPH_ETIOCPH WHERE (FE"& _ 
                "TCPH_CPH_CODE_FK_PK = @FETCPH_CPH_CODE_FK_PK) AND (FETCPH_FET_CODE_FK_PK = @FETC"& _ 
                "PH_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCPH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETCPH_ETIOCPH] SET [FETCPH_CPH_CODE_FK_PK] = @FETCPH_CPH_COD"& _ 
                "E_FK_PK, [FETCPH_FET_CODE_FK_PK] = @FETCPH_FET_CODE_FK_PK WHERE (([FETCPH_CPH_CO"& _ 
                "DE_FK_PK] = @Original_FETCPH_CPH_CODE_FK_PK) AND ([FETCPH_FET_CODE_FK_PK] = @Ori"& _ 
                "ginal_FETCPH_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCPH_CPH_CODE_FK_PK, FETCPH_FET_CODE_FK"& _ 
                "_PK FROM THERIAQUE.FETCPH_ETIOCPH WHERE (FETCPH_CPH_CODE_FK_PK = @FETCPH_CPH_COD"& _ 
                "E_FK_PK) AND (FETCPH_FET_CODE_FK_PK = @FETCPH_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCPH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCPH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETCPH_CPH_CODE_FK_PK, FETCPH_FET_CODE_FK_PK FROM THERIAQUE.FETCPH_ETIOCPH"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETCPH_CPH_CODE_FK_PK, FETCPH_FET_CODE_FK_PK FROM THERIAQUE.FETCPH_ETIOCPH"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETCPH_FET_CODE_FK_PK = @FETCPH_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCPH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCPH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable = New dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable, ByVal FETCPH_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCPH_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETCPH_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCPH_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable = New dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETCPH_ETIOCPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETCPH_ETIOCPH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETCPH_CPH_CODE_FK_PK As String, ByVal Original_FETCPH_FET_CODE_FK_PK As Integer) As Integer
            If (Original_FETCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETCPH_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETCPH_CPH_CODE_FK_PK As String, ByVal FETCPH_FET_CODE_FK_PK As Integer) As Integer
            If (FETCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETCPH_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETCPH_CPH_CODE_FK_PK As String, ByVal FETCPH_FET_CODE_FK_PK As Integer, ByVal Original_FETCPH_CPH_CODE_FK_PK As String, ByVal Original_FETCPH_FET_CODE_FK_PK As Integer) As Integer
            If (FETCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETCPH_FET_CODE_FK_PK,Integer)
            If (Original_FETCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETCPH_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETCPH_CPH_CODE_FK_PK As String, ByVal Original_FETCPH_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETCPH_CPH_CODE_FK_PK, Original_FETCPH_FET_CODE_FK_PK, Original_FETCPH_CPH_CODE_FK_PK, Original_FETCPH_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETCCH_ETIOCCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETCCH_ETIOCCH"
            tableMapping.ColumnMappings.Add("FETCCH_CCH_CODE_FK_PK", "FETCCH_CCH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETCCH_FET_CODE_FK_PK", "FETCCH_FET_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETCCH_ETIOCCH] WHERE (([FETCCH_CCH_CODE_FK_PK] = @Origi"& _ 
                "nal_FETCCH_CCH_CODE_FK_PK) AND ([FETCCH_FET_CODE_FK_PK] = @Original_FETCCH_FET_C"& _ 
                "ODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCCH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETCCH_ETIOCCH] ([FETCCH_CCH_CODE_FK_PK], [FETCCH_FET_CO"& _ 
                "DE_FK_PK]) VALUES (@FETCCH_CCH_CODE_FK_PK, @FETCCH_FET_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETC"& _ 
                "CH_CCH_CODE_FK_PK, FETCCH_FET_CODE_FK_PK FROM THERIAQUE.FETCCH_ETIOCCH WHERE (FE"& _ 
                "TCCH_CCH_CODE_FK_PK = @FETCCH_CCH_CODE_FK_PK) AND (FETCCH_FET_CODE_FK_PK = @FETC"& _ 
                "CH_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCCH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETCCH_ETIOCCH] SET [FETCCH_CCH_CODE_FK_PK] = @FETCCH_CCH_COD"& _ 
                "E_FK_PK, [FETCCH_FET_CODE_FK_PK] = @FETCCH_FET_CODE_FK_PK WHERE (([FETCCH_CCH_CO"& _ 
                "DE_FK_PK] = @Original_FETCCH_CCH_CODE_FK_PK) AND ([FETCCH_FET_CODE_FK_PK] = @Ori"& _ 
                "ginal_FETCCH_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCCH_CCH_CODE_FK_PK, FETCCH_FET_CODE_FK"& _ 
                "_PK FROM THERIAQUE.FETCCH_ETIOCCH WHERE (FETCCH_CCH_CODE_FK_PK = @FETCCH_CCH_COD"& _ 
                "E_FK_PK) AND (FETCCH_FET_CODE_FK_PK = @FETCCH_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCCH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCCH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETCCH_CCH_CODE_FK_PK, FETCCH_FET_CODE_FK_PK FROM THERIAQUE.FETCCH_ETIOCCH"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETCCH_CCH_CODE_FK_PK, FETCCH_FET_CODE_FK_PK FROM THERIAQUE.FETCCH_ETIOCCH"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETCCH_FET_CODE_FK_PK = @FETCCH_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCCH_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCCH_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable = New dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable, ByVal FETCCH_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCCH_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETCCH_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCCH_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable = New dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETCCH_ETIOCCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETCCH_ETIOCCH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETCCH_CCH_CODE_FK_PK As String, ByVal Original_FETCCH_FET_CODE_FK_PK As Integer) As Integer
            If (Original_FETCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETCCH_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETCCH_CCH_CODE_FK_PK As String, ByVal FETCCH_FET_CODE_FK_PK As Integer) As Integer
            If (FETCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETCCH_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETCCH_CCH_CODE_FK_PK As String, ByVal FETCCH_FET_CODE_FK_PK As Integer, ByVal Original_FETCCH_CCH_CODE_FK_PK As String, ByVal Original_FETCCH_FET_CODE_FK_PK As Integer) As Integer
            If (FETCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETCCH_FET_CODE_FK_PK,Integer)
            If (Original_FETCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETCCH_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETCCH_CCH_CODE_FK_PK As String, ByVal Original_FETCCH_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETCCH_CCH_CODE_FK_PK, Original_FETCCH_FET_CODE_FK_PK, Original_FETCCH_CCH_CODE_FK_PK, Original_FETCCH_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETSAC_ETIOSUBACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETSAC_ETIOSUBAC"
            tableMapping.ColumnMappings.Add("FETSAC_SAC_CODE_FK_PK", "FETSAC_SAC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETSAC_FET_CODE_FK_PK", "FETSAC_FET_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETSAC_ETIOSUBAC] WHERE (([FETSAC_SAC_CODE_FK_PK] = @Ori"& _ 
                "ginal_FETSAC_SAC_CODE_FK_PK) AND ([FETSAC_FET_CODE_FK_PK] = @Original_FETSAC_FET"& _ 
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSAC_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETSAC_ETIOSUBAC] ([FETSAC_SAC_CODE_FK_PK], [FETSAC_FET_"& _ 
                "CODE_FK_PK]) VALUES (@FETSAC_SAC_CODE_FK_PK, @FETSAC_FET_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FE"& _ 
                "TSAC_SAC_CODE_FK_PK, FETSAC_FET_CODE_FK_PK FROM THERIAQUE.FETSAC_ETIOSUBAC WHERE"& _ 
                " (FETSAC_FET_CODE_FK_PK = @FETSAC_FET_CODE_FK_PK) AND (FETSAC_SAC_CODE_FK_PK = @"& _ 
                "FETSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSAC_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETSAC_ETIOSUBAC] SET [FETSAC_SAC_CODE_FK_PK] = @FETSAC_SAC_C"& _ 
                "ODE_FK_PK, [FETSAC_FET_CODE_FK_PK] = @FETSAC_FET_CODE_FK_PK WHERE (([FETSAC_SAC_"& _ 
                "CODE_FK_PK] = @Original_FETSAC_SAC_CODE_FK_PK) AND ([FETSAC_FET_CODE_FK_PK] = @O"& _ 
                "riginal_FETSAC_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETSAC_SAC_CODE_FK_PK, FETSAC_FET_CODE_"& _ 
                "FK_PK FROM THERIAQUE.FETSAC_ETIOSUBAC WHERE (FETSAC_FET_CODE_FK_PK = @FETSAC_FET"& _ 
                "_CODE_FK_PK) AND (FETSAC_SAC_CODE_FK_PK = @FETSAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSAC_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSAC_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETSAC_SAC_CODE_FK_PK, FETSAC_FET_CODE_FK_PK FROM THERIAQUE.FETSAC_ETIOSUB"& _ 
                "AC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETSAC_SAC_CODE_FK_PK, FETSAC_FET_CODE_FK_PK FROM THERIAQUE.FETSAC_ETIOSUB"& _ 
                "AC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETSAC_FET_CODE_FK_PK  = @FETSAC_FET_CODE_FK_PK "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSAC_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSAC_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable = New dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable, ByVal FETSAC_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETSAC_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETSAC_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETSAC_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable = New dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETSAC_ETIOSUBACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETSAC_ETIOSUBAC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FETSAC_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETSAC_SAC_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETSAC_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETSAC_SAC_CODE_FK_PK As Integer, ByVal FETSAC_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETSAC_SAC_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETSAC_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETSAC_SAC_CODE_FK_PK As Integer, ByVal FETSAC_FET_CODE_FK_PK As Integer, ByVal Original_FETSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FETSAC_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETSAC_SAC_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETSAC_FET_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETSAC_SAC_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETSAC_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FETSAC_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETSAC_SAC_CODE_FK_PK, Original_FETSAC_FET_CODE_FK_PK, Original_FETSAC_SAC_CODE_FK_PK, Original_FETSAC_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETPR_ETIOPRODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETPR_ETIOPROD"
            tableMapping.ColumnMappings.Add("FETPR_PR_CODE_FK_PK", "FETPR_PR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETPR_FET_CODE_FK_PK", "FETPR_FET_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETPR_ETIOPROD] WHERE (([FETPR_PR_CODE_FK_PK] = @Origina"& _ 
                "l_FETPR_PR_CODE_FK_PK) AND ([FETPR_FET_CODE_FK_PK] = @Original_FETPR_FET_CODE_FK"& _ 
                "_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETPR_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETPR_ETIOPROD] ([FETPR_PR_CODE_FK_PK], [FETPR_FET_CODE_"& _ 
                "FK_PK]) VALUES (@FETPR_PR_CODE_FK_PK, @FETPR_FET_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETPR_PR_C"& _ 
                "ODE_FK_PK, FETPR_FET_CODE_FK_PK FROM THERIAQUE.FETPR_ETIOPROD WHERE (FETPR_FET_C"& _ 
                "ODE_FK_PK = @FETPR_FET_CODE_FK_PK) AND (FETPR_PR_CODE_FK_PK = @FETPR_PR_CODE_FK_"& _ 
                "PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETPR_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETPR_ETIOPROD] SET [FETPR_PR_CODE_FK_PK] = @FETPR_PR_CODE_FK"& _ 
                "_PK, [FETPR_FET_CODE_FK_PK] = @FETPR_FET_CODE_FK_PK WHERE (([FETPR_PR_CODE_FK_PK"& _ 
                "] = @Original_FETPR_PR_CODE_FK_PK) AND ([FETPR_FET_CODE_FK_PK] = @Original_FETPR"& _ 
                "_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETPR_PR_CODE_FK_PK, FETPR_FET_CODE_FK_PK FROM THERIA"& _ 
                "QUE.FETPR_ETIOPROD WHERE (FETPR_FET_CODE_FK_PK = @FETPR_FET_CODE_FK_PK) AND (FET"& _ 
                "PR_PR_CODE_FK_PK = @FETPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETPR_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETPR_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETPR_PR_CODE_FK_PK, FETPR_FET_CODE_FK_PK FROM THERIAQUE.FETPR_ETIOPROD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETPR_PR_CODE_FK_PK, FETPR_FET_CODE_FK_PK FROM THERIAQUE.FETPR_ETIOPROD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE FETPR_FET_CODE_FK_PK  = @FETPR_FET_CODE_FK_PK "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETPR_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETPR_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable = New dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable, ByVal FETPR_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETPR_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETPR_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETPR_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable = New dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETPR_ETIOPRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETPR_ETIOPROD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETPR_PR_CODE_FK_PK As Integer, ByVal Original_FETPR_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETPR_PR_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETPR_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETPR_PR_CODE_FK_PK As Integer, ByVal FETPR_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETPR_PR_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETPR_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETPR_PR_CODE_FK_PK As Integer, ByVal FETPR_FET_CODE_FK_PK As Integer, ByVal Original_FETPR_PR_CODE_FK_PK As Integer, ByVal Original_FETPR_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETPR_PR_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETPR_FET_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETPR_PR_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETPR_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETPR_PR_CODE_FK_PK As Integer, ByVal Original_FETPR_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETPR_PR_CODE_FK_PK, Original_FETPR_FET_CODE_FK_PK, Original_FETPR_PR_CODE_FK_PK, Original_FETPR_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETSP_ETIOSPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETSP_ETIOSPE"
            tableMapping.ColumnMappings.Add("FETSP_SP_CODE_FK_PK", "FETSP_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETSP_FET_CODE_FK_PK", "FETSP_FET_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETSP_ETIOSPE] WHERE (([FETSP_SP_CODE_FK_PK] = @Original"& _ 
                "_FETSP_SP_CODE_FK_PK) AND ([FETSP_FET_CODE_FK_PK] = @Original_FETSP_FET_CODE_FK_"& _ 
                "PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSP_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETSP_ETIOSPE] ([FETSP_SP_CODE_FK_PK], [FETSP_FET_CODE_F"& _ 
                "K_PK]) VALUES (@FETSP_SP_CODE_FK_PK, @FETSP_FET_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETSP_SP_CO"& _ 
                "DE_FK_PK, FETSP_FET_CODE_FK_PK FROM THERIAQUE.FETSP_ETIOSPE WHERE (FETSP_FET_COD"& _ 
                "E_FK_PK = @FETSP_FET_CODE_FK_PK) AND (FETSP_SP_CODE_FK_PK = @FETSP_SP_CODE_FK_PK"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSP_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETSP_ETIOSPE] SET [FETSP_SP_CODE_FK_PK] = @FETSP_SP_CODE_FK_"& _ 
                "PK, [FETSP_FET_CODE_FK_PK] = @FETSP_FET_CODE_FK_PK WHERE (([FETSP_SP_CODE_FK_PK]"& _ 
                " = @Original_FETSP_SP_CODE_FK_PK) AND ([FETSP_FET_CODE_FK_PK] = @Original_FETSP_"& _ 
                "FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETSP_SP_CODE_FK_PK, FETSP_FET_CODE_FK_PK FROM THERIAQ"& _ 
                "UE.FETSP_ETIOSPE WHERE (FETSP_FET_CODE_FK_PK = @FETSP_FET_CODE_FK_PK) AND (FETSP"& _ 
                "_SP_CODE_FK_PK = @FETSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSP_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETSP_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETSP_SP_CODE_FK_PK, FETSP_FET_CODE_FK_PK FROM THERIAQUE.FETSP_ETIOSPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETSP_SP_CODE_FK_PK, FETSP_FET_CODE_FK_PK FROM THERIAQUE.FETSP_ETIOSPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE FETSP_FET_CODE_FK_PK = @FETSP_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETSP_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETSP_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable = New dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable, ByVal FETSP_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETSP_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETSP_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETSP_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable = New dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETSP_ETIOSPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETSP_ETIOSPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETSP_SP_CODE_FK_PK As Integer, ByVal Original_FETSP_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETSP_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETSP_SP_CODE_FK_PK As Integer, ByVal FETSP_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETSP_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETSP_SP_CODE_FK_PK As Integer, ByVal FETSP_FET_CODE_FK_PK As Integer, ByVal Original_FETSP_SP_CODE_FK_PK As Integer, ByVal Original_FETSP_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETSP_FET_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETSP_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETSP_SP_CODE_FK_PK As Integer, ByVal Original_FETSP_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETSP_SP_CODE_FK_PK, Original_FETSP_FET_CODE_FK_PK, Original_FETSP_SP_CODE_FK_PK, Original_FETSP_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETTXTI_TEXTINTRO_CMITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETTXTI_TEXTINTRO_CMI"
            tableMapping.ColumnMappings.Add("FETTXTI_FET_CODE_FK_PK", "FETTXTI_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETTXTI_TXT_INTRO", "FETTXTI_TXT_INTRO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETTXTI_TEXTINTRO_CMI] WHERE (([FETTXTI_FET_CODE_FK_PK] "& _ 
                "= @Original_FETTXTI_FET_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTXTI_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETTXTI_TEXTINTRO_CMI] ([FETTXTI_FET_CODE_FK_PK], [FETTX"& _ 
                "TI_TXT_INTRO]) VALUES (@FETTXTI_FET_CODE_FK_PK, @FETTXTI_TXT_INTRO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FET"& _ 
                "TXTI_FET_CODE_FK_PK, FETTXTI_TXT_INTRO FROM THERIAQUE.FETTXTI_TEXTINTRO_CMI WHER"& _ 
                "E (FETTXTI_FET_CODE_FK_PK = @FETTXTI_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTXTI_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTXTI_TXT_INTRO", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_TXT_INTRO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETTXTI_TEXTINTRO_CMI] SET [FETTXTI_FET_CODE_FK_PK] = @FETTXT"& _ 
                "I_FET_CODE_FK_PK, [FETTXTI_TXT_INTRO] = @FETTXTI_TXT_INTRO WHERE (([FETTXTI_FET_"& _ 
                "CODE_FK_PK] = @Original_FETTXTI_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTXTI_FET_CODE_FK_PK"& _ 
                ", FETTXTI_TXT_INTRO FROM THERIAQUE.FETTXTI_TEXTINTRO_CMI WHERE (FETTXTI_FET_CODE"& _ 
                "_FK_PK = @FETTXTI_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTXTI_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTXTI_TXT_INTRO", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_TXT_INTRO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTXTI_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETTXTI_FET_CODE_FK_PK, FETTXTI_TXT_INTRO FROM THERIAQUE.FETTXTI_TEXTINTRO"& _ 
                "_CMI"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETTXTI_FET_CODE_FK_PK, FETTXTI_TXT_INTRO FROM THERIAQUE.FETTXTI_TEXTINTRO"& _ 
                "_CMI"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETTXTI_FET_CODE_FK_PK = @FETTXTI_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTXTI_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTXTI_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable = New dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable, ByVal FETTXTI_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTXTI_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETTXTI_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTXTI_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable = New dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETTXTI_TEXTINTRO_CMIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETTXTI_TEXTINTRO_CMI")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETTXTI_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETTXTI_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETTXTI_FET_CODE_FK_PK As Integer, ByVal FETTXTI_TXT_INTRO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETTXTI_FET_CODE_FK_PK,Integer)
            If (FETTXTI_TXT_INTRO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETTXTI_TXT_INTRO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTXTI_FET_CODE_FK_PK As Integer, ByVal FETTXTI_TXT_INTRO As String, ByVal Original_FETTXTI_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETTXTI_FET_CODE_FK_PK,Integer)
            If (FETTXTI_TXT_INTRO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETTXTI_TXT_INTRO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETTXTI_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTXTI_TXT_INTRO As String, ByVal Original_FETTXTI_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETTXTI_FET_CODE_FK_PK, FETTXTI_TXT_INTRO, Original_FETTXTI_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETHS_ETIOLOGIE_HABITU_SENSIBTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETHS_ETIOLOGIE_HABITU_SENSIB"
            tableMapping.ColumnMappings.Add("FETHS_FET_CODE_FK_PK", "FETHS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETHS_CDF_ETIN_CODE_FK_PK", "FETHS_CDF_ETIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETHS_POURCENTAGE_RESISTANCE", "FETHS_POURCENTAGE_RESISTANCE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETHS_ETIOLOGIE_HABITU_SENSIB] WHERE (([FETHS_FET_CODE_F"& _ 
                "K_PK] = @Original_FETHS_FET_CODE_FK_PK) AND ([FETHS_CDF_ETIN_CODE_FK_PK] = @Orig"& _ 
                "inal_FETHS_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETHS_POURCENTAGE_RESISTANCE = 1 A"& _ 
                "ND [FETHS_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETHS_POURCENTAGE_RESISTANCE] = "& _ 
                "@Original_FETHS_POURCENTAGE_RESISTANCE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETHS_ETIOLOGIE_HABITU_SENSIB] ([FETHS_FET_CODE_FK_PK], "& _ 
                "[FETHS_CDF_ETIN_CODE_FK_PK], [FETHS_POURCENTAGE_RESISTANCE]) VALUES (@FETHS_FET_"& _ 
                "CODE_FK_PK, @FETHS_CDF_ETIN_CODE_FK_PK, @FETHS_POURCENTAGE_RESISTANCE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "FETHS_FET_CODE_FK_PK, FETHS_CDF_ETIN_CODE_FK_PK, FETHS_POURCENTAGE_RESISTANCE FR"& _ 
                "OM THERIAQUE.FETHS_ETIOLOGIE_HABITU_SENSIB WHERE (FETHS_CDF_ETIN_CODE_FK_PK = @F"& _ 
                "ETHS_CDF_ETIN_CODE_FK_PK) AND (FETHS_FET_CODE_FK_PK = @FETHS_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETHS_ETIOLOGIE_HABITU_SENSIB] SET [FETHS_FET_CODE_FK_PK] = @"& _ 
                "FETHS_FET_CODE_FK_PK, [FETHS_CDF_ETIN_CODE_FK_PK] = @FETHS_CDF_ETIN_CODE_FK_PK, "& _ 
                "[FETHS_POURCENTAGE_RESISTANCE] = @FETHS_POURCENTAGE_RESISTANCE WHERE (([FETHS_FE"& _ 
                "T_CODE_FK_PK] = @Original_FETHS_FET_CODE_FK_PK) AND ([FETHS_CDF_ETIN_CODE_FK_PK]"& _ 
                " = @Original_FETHS_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETHS_POURCENTAGE_RESISTAN"& _ 
                "CE = 1 AND [FETHS_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETHS_POURCENTAGE_RESIST"& _ 
                "ANCE] = @Original_FETHS_POURCENTAGE_RESISTANCE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETHS_FET_CODE_FK_PK,"& _ 
                " FETHS_CDF_ETIN_CODE_FK_PK, FETHS_POURCENTAGE_RESISTANCE FROM THERIAQUE.FETHS_ET"& _ 
                "IOLOGIE_HABITU_SENSIB WHERE (FETHS_CDF_ETIN_CODE_FK_PK = @FETHS_CDF_ETIN_CODE_FK"& _ 
                "_PK) AND (FETHS_FET_CODE_FK_PK = @FETHS_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETHS_FET_CODE_FK_PK, FETHS_CDF_ETIN_CODE_FK_PK, FETHS_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETHS_ETIOLOGIE_HABITU_SENSIB"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETHS_FET_CODE_FK_PK, FETHS_CDF_ETIN_CODE_FK_PK, FETHS_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETHS_ETIOLOGIE_HABITU_SENSIB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETHS_FET_CODE_FK_PK = @"& _ 
                "FETHS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable = New dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable, ByVal FETHS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETHS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETHS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETHS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable = New dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETHS_ETIOLOGIE_HABITU_SENSIBDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETHS_ETIOLOGIE_HABITU_SENSIB")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETHS_FET_CODE_FK_PK As Integer, ByVal Original_FETHS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETHS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETHS_FET_CODE_FK_PK,Integer)
            If (Original_FETHS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETHS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETHS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETHS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FETHS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETHS_FET_CODE_FK_PK As Integer, ByVal FETHS_CDF_ETIN_CODE_FK_PK As String, ByVal FETHS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETHS_FET_CODE_FK_PK,Integer)
            If (FETHS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETHS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETHS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETHS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FETHS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETHS_FET_CODE_FK_PK As Integer, ByVal FETHS_CDF_ETIN_CODE_FK_PK As String, ByVal FETHS_POURCENTAGE_RESISTANCE As String, ByVal Original_FETHS_FET_CODE_FK_PK As Integer, ByVal Original_FETHS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETHS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETHS_FET_CODE_FK_PK,Integer)
            If (FETHS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETHS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETHS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETHS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FETHS_POURCENTAGE_RESISTANCE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETHS_FET_CODE_FK_PK,Integer)
            If (Original_FETHS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETHS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FETHS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETHS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FETHS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETHS_POURCENTAGE_RESISTANCE As String, ByVal Original_FETHS_FET_CODE_FK_PK As Integer, ByVal Original_FETHS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETHS_POURCENTAGE_RESISTANCE As String) As Integer
            Return Me.Update(Original_FETHS_FET_CODE_FK_PK, Original_FETHS_CDF_ETIN_CODE_FK_PK, FETHS_POURCENTAGE_RESISTANCE, Original_FETHS_FET_CODE_FK_PK, Original_FETHS_CDF_ETIN_CODE_FK_PK, Original_FETHS_POURCENTAGE_RESISTANCE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETCHS_COMMENT_HABITU_SENSIBLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETCHS_COMMENT_HABITU_SENSIBLE"
            tableMapping.ColumnMappings.Add("FETCHS_FET_CODE_FK_PK", "FETCHS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETCHS_CDF_COIN_CODE_FK_PK", "FETCHS_CDF_COIN_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETCHS_COMMENT_HABITU_SENSIBLE] WHERE (([FETCHS_FET_CODE"& _ 
                "_FK_PK] = @Original_FETCHS_FET_CODE_FK_PK) AND ([FETCHS_CDF_COIN_CODE_FK_PK] = @"& _ 
                "Original_FETCHS_CDF_COIN_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETCHS_COMMENT_HABITU_SENSIBLE] ([FETCHS_FET_CODE_FK_PK]"& _ 
                ", [FETCHS_CDF_COIN_CODE_FK_PK]) VALUES (@FETCHS_FET_CODE_FK_PK, @FETCHS_CDF_COIN"& _ 
                "_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCHS_FET_CODE_FK_PK, FETCHS_CDF_COIN_CODE_FK_PK FROM THE"& _ 
                "RIAQUE.FETCHS_COMMENT_HABITU_SENSIBLE WHERE (FETCHS_CDF_COIN_CODE_FK_PK = @FETCH"& _ 
                "S_CDF_COIN_CODE_FK_PK) AND (FETCHS_FET_CODE_FK_PK = @FETCHS_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETCHS_COMMENT_HABITU_SENSIBLE] SET [FETCHS_FET_CODE_FK_PK] ="& _ 
                " @FETCHS_FET_CODE_FK_PK, [FETCHS_CDF_COIN_CODE_FK_PK] = @FETCHS_CDF_COIN_CODE_FK"& _ 
                "_PK WHERE (([FETCHS_FET_CODE_FK_PK] = @Original_FETCHS_FET_CODE_FK_PK) AND ([FET"& _ 
                "CHS_CDF_COIN_CODE_FK_PK] = @Original_FETCHS_CDF_COIN_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCH"& _ 
                "S_FET_CODE_FK_PK, FETCHS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCHS_COMMENT_HABIT"& _ 
                "U_SENSIBLE WHERE (FETCHS_CDF_COIN_CODE_FK_PK = @FETCHS_CDF_COIN_CODE_FK_PK) AND "& _ 
                "(FETCHS_FET_CODE_FK_PK = @FETCHS_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETCHS_FET_CODE_FK_PK, FETCHS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCHS_CO"& _ 
                "MMENT_HABITU_SENSIBLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETCHS_FET_CODE_FK_PK, FETCHS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCHS_CO"& _ 
                "MMENT_HABITU_SENSIBLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETCHS_FET_CODE_FK_PK = @FETCHS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCHS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCHS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable = New dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable, ByVal FETCHS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCHS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETCHS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCHS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable = New dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETCHS_COMMENT_HABITU_SENSIBLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETCHS_COMMENT_HABITU_SENSIBLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETCHS_FET_CODE_FK_PK As Integer, ByVal Original_FETCHS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETCHS_FET_CODE_FK_PK,Integer)
            If (Original_FETCHS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCHS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETCHS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETCHS_FET_CODE_FK_PK As Integer, ByVal FETCHS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETCHS_FET_CODE_FK_PK,Integer)
            If (FETCHS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCHS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETCHS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETCHS_FET_CODE_FK_PK As Integer, ByVal FETCHS_CDF_COIN_CODE_FK_PK As String, ByVal Original_FETCHS_FET_CODE_FK_PK As Integer, ByVal Original_FETCHS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETCHS_FET_CODE_FK_PK,Integer)
            If (FETCHS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCHS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETCHS_CDF_COIN_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETCHS_FET_CODE_FK_PK,Integer)
            If (Original_FETCHS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCHS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETCHS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETCHS_FET_CODE_FK_PK As Integer, ByVal Original_FETCHS_CDF_COIN_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FETCHS_FET_CODE_FK_PK, Original_FETCHS_CDF_COIN_CODE_FK_PK, Original_FETCHS_FET_CODE_FK_PK, Original_FETCHS_CDF_COIN_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETTX1_ET_TXHSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETTX1_ET_TXHS"
            tableMapping.ColumnMappings.Add("FETTX1_FET_CODE_FK_PK", "FETTX1_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETTX1_TEXTE", "FETTX1_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETTX1_ET_TXHS] WHERE (([FETTX1_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX1_FET_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX1_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETTX1_ET_TXHS] ([FETTX1_FET_CODE_FK_PK], [FETTX1_TEXTE]"& _ 
                ") VALUES (@FETTX1_FET_CODE_FK_PK, @FETTX1_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX1_FET_CODE_FK_PK,"& _ 
                " FETTX1_TEXTE FROM THERIAQUE.FETTX1_ET_TXHS WHERE (FETTX1_FET_CODE_FK_PK = @FETT"& _ 
                "X1_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX1_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX1_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETTX1_ET_TXHS] SET [FETTX1_FET_CODE_FK_PK] = @FETTX1_FET_COD"& _ 
                "E_FK_PK, [FETTX1_TEXTE] = @FETTX1_TEXTE WHERE (([FETTX1_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX1_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX1_FET_CODE_FK_PK, FETTX1_TEXTE FROM TH"& _ 
                "ERIAQUE.FETTX1_ET_TXHS WHERE (FETTX1_FET_CODE_FK_PK = @FETTX1_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX1_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX1_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX1_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETTX1_FET_CODE_FK_PK, FETTX1_TEXTE FROM THERIAQUE.FETTX1_ET_TXHS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETTX1_FET_CODE_FK_PK, FETTX1_TEXTE FROM THERIAQUE.FETTX1_ET_TXHS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE F"& _ 
                "ETTX1_FET_CODE_FK_PK = @FETTX1_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX1_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX1_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable = New dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable, ByVal FETTX1_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX1_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETTX1_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX1_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable = New dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETTX1_ET_TXHSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETTX1_ET_TXHS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETTX1_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETTX1_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETTX1_FET_CODE_FK_PK As Integer, ByVal FETTX1_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETTX1_FET_CODE_FK_PK,Integer)
            If (FETTX1_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETTX1_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX1_FET_CODE_FK_PK As Integer, ByVal FETTX1_TEXTE As String, ByVal Original_FETTX1_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETTX1_FET_CODE_FK_PK,Integer)
            If (FETTX1_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETTX1_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETTX1_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX1_TEXTE As String, ByVal Original_FETTX1_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETTX1_FET_CODE_FK_PK, FETTX1_TEXTE, Original_FETTX1_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETIS_ETIOLOGIE_INCONST_SENSIBTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETIS_ETIOLOGIE_INCONST_SENSIB"
            tableMapping.ColumnMappings.Add("FETIS_FET_CODE_FK_PK", "FETIS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETIS_CDF_ETIN_CODE_FK_PK", "FETIS_CDF_ETIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETIS_POURCENTAGE_RESISTANCE", "FETIS_POURCENTAGE_RESISTANCE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETIS_ETIOLOGIE_INCONST_SENSIB] WHERE (([FETIS_FET_CODE_"& _ 
                "FK_PK] = @Original_FETIS_FET_CODE_FK_PK) AND ([FETIS_CDF_ETIN_CODE_FK_PK] = @Ori"& _ 
                "ginal_FETIS_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETIS_POURCENTAGE_RESISTANCE = 1 "& _ 
                "AND [FETIS_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETIS_POURCENTAGE_RESISTANCE] ="& _ 
                " @Original_FETIS_POURCENTAGE_RESISTANCE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETIS_ETIOLOGIE_INCONST_SENSIB] ([FETIS_FET_CODE_FK_PK],"& _ 
                " [FETIS_CDF_ETIN_CODE_FK_PK], [FETIS_POURCENTAGE_RESISTANCE]) VALUES (@FETIS_FET"& _ 
                "_CODE_FK_PK, @FETIS_CDF_ETIN_CODE_FK_PK, @FETIS_POURCENTAGE_RESISTANCE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " FETIS_FET_CODE_FK_PK, FETIS_CDF_ETIN_CODE_FK_PK, FETIS_POURCENTAGE_RESISTANCE F"& _ 
                "ROM THERIAQUE.FETIS_ETIOLOGIE_INCONST_SENSIB WHERE (FETIS_CDF_ETIN_CODE_FK_PK = "& _ 
                "@FETIS_CDF_ETIN_CODE_FK_PK) AND (FETIS_FET_CODE_FK_PK = @FETIS_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETIS_ETIOLOGIE_INCONST_SENSIB] SET [FETIS_FET_CODE_FK_PK] = "& _ 
                "@FETIS_FET_CODE_FK_PK, [FETIS_CDF_ETIN_CODE_FK_PK] = @FETIS_CDF_ETIN_CODE_FK_PK,"& _ 
                " [FETIS_POURCENTAGE_RESISTANCE] = @FETIS_POURCENTAGE_RESISTANCE WHERE (([FETIS_F"& _ 
                "ET_CODE_FK_PK] = @Original_FETIS_FET_CODE_FK_PK) AND ([FETIS_CDF_ETIN_CODE_FK_PK"& _ 
                "] = @Original_FETIS_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETIS_POURCENTAGE_RESISTA"& _ 
                "NCE = 1 AND [FETIS_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETIS_POURCENTAGE_RESIS"& _ 
                "TANCE] = @Original_FETIS_POURCENTAGE_RESISTANCE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETIS_FET_CODE_FK_PK"& _ 
                ", FETIS_CDF_ETIN_CODE_FK_PK, FETIS_POURCENTAGE_RESISTANCE FROM THERIAQUE.FETIS_E"& _ 
                "TIOLOGIE_INCONST_SENSIB WHERE (FETIS_CDF_ETIN_CODE_FK_PK = @FETIS_CDF_ETIN_CODE_"& _ 
                "FK_PK) AND (FETIS_FET_CODE_FK_PK = @FETIS_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETIS_FET_CODE_FK_PK, FETIS_CDF_ETIN_CODE_FK_PK, FETIS_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETIS_ETIOLOGIE_INCONST_SENSIB"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETIS_FET_CODE_FK_PK, FETIS_CDF_ETIN_CODE_FK_PK, FETIS_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETIS_ETIOLOGIE_INCONST_SENSIB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETIS_FET_CODE_FK_PK = "& _ 
                "@FETIS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable = New dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable, ByVal FETIS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETIS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETIS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETIS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable = New dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETIS_ETIOLOGIE_INCONST_SENSIBDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETIS_ETIOLOGIE_INCONST_SENSIB")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETIS_FET_CODE_FK_PK As Integer, ByVal Original_FETIS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETIS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETIS_FET_CODE_FK_PK,Integer)
            If (Original_FETIS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETIS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETIS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETIS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FETIS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETIS_FET_CODE_FK_PK As Integer, ByVal FETIS_CDF_ETIN_CODE_FK_PK As String, ByVal FETIS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETIS_FET_CODE_FK_PK,Integer)
            If (FETIS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETIS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETIS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETIS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FETIS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETIS_FET_CODE_FK_PK As Integer, ByVal FETIS_CDF_ETIN_CODE_FK_PK As String, ByVal FETIS_POURCENTAGE_RESISTANCE As String, ByVal Original_FETIS_FET_CODE_FK_PK As Integer, ByVal Original_FETIS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETIS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETIS_FET_CODE_FK_PK,Integer)
            If (FETIS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETIS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETIS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETIS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FETIS_POURCENTAGE_RESISTANCE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETIS_FET_CODE_FK_PK,Integer)
            If (Original_FETIS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETIS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FETIS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETIS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FETIS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETIS_POURCENTAGE_RESISTANCE As String, ByVal Original_FETIS_FET_CODE_FK_PK As Integer, ByVal Original_FETIS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETIS_POURCENTAGE_RESISTANCE As String) As Integer
            Return Me.Update(Original_FETIS_FET_CODE_FK_PK, Original_FETIS_CDF_ETIN_CODE_FK_PK, FETIS_POURCENTAGE_RESISTANCE, Original_FETIS_FET_CODE_FK_PK, Original_FETIS_CDF_ETIN_CODE_FK_PK, Original_FETIS_POURCENTAGE_RESISTANCE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETCIS_COMMENT_INCONS_SENSIBLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETCIS_COMMENT_INCONS_SENSIBLE"
            tableMapping.ColumnMappings.Add("FETCIS_FET_CODE_FK_PK", "FETCIS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETCIS_CDF_COIN_CODE_FK_PK", "FETCIS_CDF_COIN_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETCIS_COMMENT_INCONS_SENSIBLE] WHERE (([FETCIS_FET_CODE"& _ 
                "_FK_PK] = @Original_FETCIS_FET_CODE_FK_PK) AND ([FETCIS_CDF_COIN_CODE_FK_PK] = @"& _ 
                "Original_FETCIS_CDF_COIN_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETCIS_COMMENT_INCONS_SENSIBLE] ([FETCIS_FET_CODE_FK_PK]"& _ 
                ", [FETCIS_CDF_COIN_CODE_FK_PK]) VALUES (@FETCIS_FET_CODE_FK_PK, @FETCIS_CDF_COIN"& _ 
                "_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCIS_FET_CODE_FK_PK, FETCIS_CDF_COIN_CODE_FK_PK FROM THE"& _ 
                "RIAQUE.FETCIS_COMMENT_INCONS_SENSIBLE WHERE (FETCIS_CDF_COIN_CODE_FK_PK = @FETCI"& _ 
                "S_CDF_COIN_CODE_FK_PK) AND (FETCIS_FET_CODE_FK_PK = @FETCIS_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETCIS_COMMENT_INCONS_SENSIBLE] SET [FETCIS_FET_CODE_FK_PK] ="& _ 
                " @FETCIS_FET_CODE_FK_PK, [FETCIS_CDF_COIN_CODE_FK_PK] = @FETCIS_CDF_COIN_CODE_FK"& _ 
                "_PK WHERE (([FETCIS_FET_CODE_FK_PK] = @Original_FETCIS_FET_CODE_FK_PK) AND ([FET"& _ 
                "CIS_CDF_COIN_CODE_FK_PK] = @Original_FETCIS_CDF_COIN_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCI"& _ 
                "S_FET_CODE_FK_PK, FETCIS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCIS_COMMENT_INCON"& _ 
                "S_SENSIBLE WHERE (FETCIS_CDF_COIN_CODE_FK_PK = @FETCIS_CDF_COIN_CODE_FK_PK) AND "& _ 
                "(FETCIS_FET_CODE_FK_PK = @FETCIS_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETCIS_FET_CODE_FK_PK, FETCIS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCIS_CO"& _ 
                "MMENT_INCONS_SENSIBLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETCIS_FET_CODE_FK_PK, FETCIS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCIS_CO"& _ 
                "MMENT_INCONS_SENSIBLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETCIS_FET_CODE_FK_PK = @FETCIS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCIS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCIS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable = New dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable, ByVal FETCIS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCIS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETCIS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCIS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable = New dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETCIS_COMMENT_INCONS_SENSIBLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETCIS_COMMENT_INCONS_SENSIBLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETCIS_FET_CODE_FK_PK As Integer, ByVal Original_FETCIS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETCIS_FET_CODE_FK_PK,Integer)
            If (Original_FETCIS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCIS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETCIS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETCIS_FET_CODE_FK_PK As Integer, ByVal FETCIS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETCIS_FET_CODE_FK_PK,Integer)
            If (FETCIS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCIS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETCIS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETCIS_FET_CODE_FK_PK As Integer, ByVal FETCIS_CDF_COIN_CODE_FK_PK As String, ByVal Original_FETCIS_FET_CODE_FK_PK As Integer, ByVal Original_FETCIS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETCIS_FET_CODE_FK_PK,Integer)
            If (FETCIS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCIS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETCIS_CDF_COIN_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETCIS_FET_CODE_FK_PK,Integer)
            If (Original_FETCIS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCIS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETCIS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETCIS_FET_CODE_FK_PK As Integer, ByVal Original_FETCIS_CDF_COIN_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FETCIS_FET_CODE_FK_PK, Original_FETCIS_CDF_COIN_CODE_FK_PK, Original_FETCIS_FET_CODE_FK_PK, Original_FETCIS_CDF_COIN_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETTX2_ET_TXISTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETTX2_ET_TXIS"
            tableMapping.ColumnMappings.Add("FETTX2_FET_CODE_FK_PK", "FETTX2_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETTX2_TEXTE", "FETTX2_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETTX2_ET_TXIS] WHERE (([FETTX2_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX2_FET_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX2_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETTX2_ET_TXIS] ([FETTX2_FET_CODE_FK_PK], [FETTX2_TEXTE]"& _ 
                ") VALUES (@FETTX2_FET_CODE_FK_PK, @FETTX2_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX2_FET_CODE_FK_PK,"& _ 
                " FETTX2_TEXTE FROM THERIAQUE.FETTX2_ET_TXIS WHERE (FETTX2_FET_CODE_FK_PK = @FETT"& _ 
                "X2_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX2_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX2_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETTX2_ET_TXIS] SET [FETTX2_FET_CODE_FK_PK] = @FETTX2_FET_COD"& _ 
                "E_FK_PK, [FETTX2_TEXTE] = @FETTX2_TEXTE WHERE (([FETTX2_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX2_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX2_FET_CODE_FK_PK, FETTX2_TEXTE FROM TH"& _ 
                "ERIAQUE.FETTX2_ET_TXIS WHERE (FETTX2_FET_CODE_FK_PK = @FETTX2_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX2_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX2_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX2_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETTX2_FET_CODE_FK_PK, FETTX2_TEXTE FROM THERIAQUE.FETTX2_ET_TXIS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETTX2_FET_CODE_FK_PK, FETTX2_TEXTE FROM THERIAQUE.FETTX2_ET_TXIS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE F"& _ 
                "ETTX2_FET_CODE_FK_PK = @FETTX2_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX2_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX2_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable = New dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable, ByVal FETTX2_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX2_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETTX2_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX2_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable = New dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETTX2_ET_TXISDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETTX2_ET_TXIS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETTX2_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETTX2_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETTX2_FET_CODE_FK_PK As Integer, ByVal FETTX2_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETTX2_FET_CODE_FK_PK,Integer)
            If (FETTX2_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETTX2_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX2_FET_CODE_FK_PK As Integer, ByVal FETTX2_TEXTE As String, ByVal Original_FETTX2_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETTX2_FET_CODE_FK_PK,Integer)
            If (FETTX2_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETTX2_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETTX2_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX2_TEXTE As String, ByVal Original_FETTX2_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETTX2_FET_CODE_FK_PK, FETTX2_TEXTE, Original_FETTX2_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETMS_ETIOLOGIE_MODEREM_SENSIBTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETMS_ETIOLOGIE_MODEREM_SENSIB"
            tableMapping.ColumnMappings.Add("FETMS_FET_CODE_FK_PK", "FETMS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETMS_CDF_ETIN_CODE_FK_PK", "FETMS_CDF_ETIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETMS_POURCENTAGE_RESISTANCE", "FETMS_POURCENTAGE_RESISTANCE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETMS_ETIOLOGIE_MODEREM_SENSIB] WHERE (([FETMS_FET_CODE_"& _ 
                "FK_PK] = @Original_FETMS_FET_CODE_FK_PK) AND ([FETMS_CDF_ETIN_CODE_FK_PK] = @Ori"& _ 
                "ginal_FETMS_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETMS_POURCENTAGE_RESISTANCE = 1 "& _ 
                "AND [FETMS_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETMS_POURCENTAGE_RESISTANCE] ="& _ 
                " @Original_FETMS_POURCENTAGE_RESISTANCE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETMS_ETIOLOGIE_MODEREM_SENSIB] ([FETMS_FET_CODE_FK_PK],"& _ 
                " [FETMS_CDF_ETIN_CODE_FK_PK], [FETMS_POURCENTAGE_RESISTANCE]) VALUES (@FETMS_FET"& _ 
                "_CODE_FK_PK, @FETMS_CDF_ETIN_CODE_FK_PK, @FETMS_POURCENTAGE_RESISTANCE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " FETMS_FET_CODE_FK_PK, FETMS_CDF_ETIN_CODE_FK_PK, FETMS_POURCENTAGE_RESISTANCE F"& _ 
                "ROM THERIAQUE.FETMS_ETIOLOGIE_MODEREM_SENSIB WHERE (FETMS_CDF_ETIN_CODE_FK_PK = "& _ 
                "@FETMS_CDF_ETIN_CODE_FK_PK) AND (FETMS_FET_CODE_FK_PK = @FETMS_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETMS_ETIOLOGIE_MODEREM_SENSIB] SET [FETMS_FET_CODE_FK_PK] = "& _ 
                "@FETMS_FET_CODE_FK_PK, [FETMS_CDF_ETIN_CODE_FK_PK] = @FETMS_CDF_ETIN_CODE_FK_PK,"& _ 
                " [FETMS_POURCENTAGE_RESISTANCE] = @FETMS_POURCENTAGE_RESISTANCE WHERE (([FETMS_F"& _ 
                "ET_CODE_FK_PK] = @Original_FETMS_FET_CODE_FK_PK) AND ([FETMS_CDF_ETIN_CODE_FK_PK"& _ 
                "] = @Original_FETMS_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETMS_POURCENTAGE_RESISTA"& _ 
                "NCE = 1 AND [FETMS_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETMS_POURCENTAGE_RESIS"& _ 
                "TANCE] = @Original_FETMS_POURCENTAGE_RESISTANCE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETMS_FET_CODE_FK_PK"& _ 
                ", FETMS_CDF_ETIN_CODE_FK_PK, FETMS_POURCENTAGE_RESISTANCE FROM THERIAQUE.FETMS_E"& _ 
                "TIOLOGIE_MODEREM_SENSIB WHERE (FETMS_CDF_ETIN_CODE_FK_PK = @FETMS_CDF_ETIN_CODE_"& _ 
                "FK_PK) AND (FETMS_FET_CODE_FK_PK = @FETMS_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETMS_FET_CODE_FK_PK, FETMS_CDF_ETIN_CODE_FK_PK, FETMS_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETMS_ETIOLOGIE_MODEREM_SENSIB"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETMS_FET_CODE_FK_PK, FETMS_CDF_ETIN_CODE_FK_PK, FETMS_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETMS_ETIOLOGIE_MODEREM_SENSIB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETMS_FET_CODE_FK_PK = "& _ 
                "@FETMS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable = New dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable, ByVal FETMS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETMS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETMS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETMS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable = New dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETMS_ETIOLOGIE_MODEREM_SENSIBDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETMS_ETIOLOGIE_MODEREM_SENSIB")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETMS_FET_CODE_FK_PK As Integer, ByVal Original_FETMS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETMS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETMS_FET_CODE_FK_PK,Integer)
            If (Original_FETMS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETMS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETMS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETMS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FETMS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETMS_FET_CODE_FK_PK As Integer, ByVal FETMS_CDF_ETIN_CODE_FK_PK As String, ByVal FETMS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETMS_FET_CODE_FK_PK,Integer)
            If (FETMS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETMS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETMS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETMS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FETMS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETMS_FET_CODE_FK_PK As Integer, ByVal FETMS_CDF_ETIN_CODE_FK_PK As String, ByVal FETMS_POURCENTAGE_RESISTANCE As String, ByVal Original_FETMS_FET_CODE_FK_PK As Integer, ByVal Original_FETMS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETMS_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETMS_FET_CODE_FK_PK,Integer)
            If (FETMS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETMS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETMS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETMS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FETMS_POURCENTAGE_RESISTANCE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETMS_FET_CODE_FK_PK,Integer)
            If (Original_FETMS_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETMS_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FETMS_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETMS_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FETMS_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETMS_POURCENTAGE_RESISTANCE As String, ByVal Original_FETMS_FET_CODE_FK_PK As Integer, ByVal Original_FETMS_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETMS_POURCENTAGE_RESISTANCE As String) As Integer
            Return Me.Update(Original_FETMS_FET_CODE_FK_PK, Original_FETMS_CDF_ETIN_CODE_FK_PK, FETMS_POURCENTAGE_RESISTANCE, Original_FETMS_FET_CODE_FK_PK, Original_FETMS_CDF_ETIN_CODE_FK_PK, Original_FETMS_POURCENTAGE_RESISTANCE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETCMS_COMMENT_MODERE_SENSIBLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETCMS_COMMENT_MODERE_SENSIBLE"
            tableMapping.ColumnMappings.Add("FETCMS_FET_CODE_FK_PK", "FETCMS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETCMS_CDF_COIN_CODE_FK_PK", "FETCMS_CDF_COIN_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETCMS_COMMENT_MODERE_SENSIBLE] WHERE (([FETCMS_FET_CODE"& _ 
                "_FK_PK] = @Original_FETCMS_FET_CODE_FK_PK) AND ([FETCMS_CDF_COIN_CODE_FK_PK] = @"& _ 
                "Original_FETCMS_CDF_COIN_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETCMS_COMMENT_MODERE_SENSIBLE] ([FETCMS_FET_CODE_FK_PK]"& _ 
                ", [FETCMS_CDF_COIN_CODE_FK_PK]) VALUES (@FETCMS_FET_CODE_FK_PK, @FETCMS_CDF_COIN"& _ 
                "_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCMS_FET_CODE_FK_PK, FETCMS_CDF_COIN_CODE_FK_PK FROM THE"& _ 
                "RIAQUE.FETCMS_COMMENT_MODERE_SENSIBLE WHERE (FETCMS_CDF_COIN_CODE_FK_PK = @FETCM"& _ 
                "S_CDF_COIN_CODE_FK_PK) AND (FETCMS_FET_CODE_FK_PK = @FETCMS_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETCMS_COMMENT_MODERE_SENSIBLE] SET [FETCMS_FET_CODE_FK_PK] ="& _ 
                " @FETCMS_FET_CODE_FK_PK, [FETCMS_CDF_COIN_CODE_FK_PK] = @FETCMS_CDF_COIN_CODE_FK"& _ 
                "_PK WHERE (([FETCMS_FET_CODE_FK_PK] = @Original_FETCMS_FET_CODE_FK_PK) AND ([FET"& _ 
                "CMS_CDF_COIN_CODE_FK_PK] = @Original_FETCMS_CDF_COIN_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCM"& _ 
                "S_FET_CODE_FK_PK, FETCMS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCMS_COMMENT_MODER"& _ 
                "E_SENSIBLE WHERE (FETCMS_CDF_COIN_CODE_FK_PK = @FETCMS_CDF_COIN_CODE_FK_PK) AND "& _ 
                "(FETCMS_FET_CODE_FK_PK = @FETCMS_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETCMS_FET_CODE_FK_PK, FETCMS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCMS_CO"& _ 
                "MMENT_MODERE_SENSIBLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETCMS_FET_CODE_FK_PK, FETCMS_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCMS_CO"& _ 
                "MMENT_MODERE_SENSIBLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETCMS_FET_CODE_FK_PK = @FETCMS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCMS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCMS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable = New dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable, ByVal FETCMS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCMS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETCMS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCMS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable = New dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETCMS_COMMENT_MODERE_SENSIBLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETCMS_COMMENT_MODERE_SENSIBLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETCMS_FET_CODE_FK_PK As Integer, ByVal Original_FETCMS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETCMS_FET_CODE_FK_PK,Integer)
            If (Original_FETCMS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCMS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETCMS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETCMS_FET_CODE_FK_PK As Integer, ByVal FETCMS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETCMS_FET_CODE_FK_PK,Integer)
            If (FETCMS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCMS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETCMS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETCMS_FET_CODE_FK_PK As Integer, ByVal FETCMS_CDF_COIN_CODE_FK_PK As String, ByVal Original_FETCMS_FET_CODE_FK_PK As Integer, ByVal Original_FETCMS_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETCMS_FET_CODE_FK_PK,Integer)
            If (FETCMS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCMS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETCMS_CDF_COIN_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETCMS_FET_CODE_FK_PK,Integer)
            If (Original_FETCMS_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCMS_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETCMS_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETCMS_FET_CODE_FK_PK As Integer, ByVal Original_FETCMS_CDF_COIN_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FETCMS_FET_CODE_FK_PK, Original_FETCMS_CDF_COIN_CODE_FK_PK, Original_FETCMS_FET_CODE_FK_PK, Original_FETCMS_CDF_COIN_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETTX3_ET_TXMSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETTX3_ET_TXMS"
            tableMapping.ColumnMappings.Add("FETTX3_FET_CODE_FK_PK", "FETTX3_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETTX3_TEXTE", "FETTX3_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETTX3_ET_TXMS] WHERE (([FETTX3_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX3_FET_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX3_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETTX3_ET_TXMS] ([FETTX3_FET_CODE_FK_PK], [FETTX3_TEXTE]"& _ 
                ") VALUES (@FETTX3_FET_CODE_FK_PK, @FETTX3_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX3_FET_CODE_FK_PK,"& _ 
                " FETTX3_TEXTE FROM THERIAQUE.FETTX3_ET_TXMS WHERE (FETTX3_FET_CODE_FK_PK = @FETT"& _ 
                "X3_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX3_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX3_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETTX3_ET_TXMS] SET [FETTX3_FET_CODE_FK_PK] = @FETTX3_FET_COD"& _ 
                "E_FK_PK, [FETTX3_TEXTE] = @FETTX3_TEXTE WHERE (([FETTX3_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX3_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX3_FET_CODE_FK_PK, FETTX3_TEXTE FROM TH"& _ 
                "ERIAQUE.FETTX3_ET_TXMS WHERE (FETTX3_FET_CODE_FK_PK = @FETTX3_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX3_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX3_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX3_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETTX3_FET_CODE_FK_PK, FETTX3_TEXTE FROM THERIAQUE.FETTX3_ET_TXMS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETTX3_FET_CODE_FK_PK, FETTX3_TEXTE FROM THERIAQUE.FETTX3_ET_TXMS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE F"& _ 
                "ETTX3_FET_CODE_FK_PK = @FETTX3_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX3_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX3_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable = New dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable, ByVal FETTX3_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX3_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETTX3_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX3_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable = New dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETTX3_ET_TXMSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETTX3_ET_TXMS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETTX3_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETTX3_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETTX3_FET_CODE_FK_PK As Integer, ByVal FETTX3_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETTX3_FET_CODE_FK_PK,Integer)
            If (FETTX3_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETTX3_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX3_FET_CODE_FK_PK As Integer, ByVal FETTX3_TEXTE As String, ByVal Original_FETTX3_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETTX3_FET_CODE_FK_PK,Integer)
            If (FETTX3_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETTX3_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETTX3_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX3_TEXTE As String, ByVal Original_FETTX3_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETTX3_FET_CODE_FK_PK, FETTX3_TEXTE, Original_FETTX3_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETRE_ETIOLOGIE_RESISTANTESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETRE_ETIOLOGIE_RESISTANTES"
            tableMapping.ColumnMappings.Add("FETRE_FET_CODE_FK_PK", "FETRE_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETRE_CDF_ETIN_CODE_FK_PK", "FETRE_CDF_ETIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETRE_POURCENTAGE_RESISTANCE", "FETRE_POURCENTAGE_RESISTANCE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETRE_ETIOLOGIE_RESISTANTES] WHERE (([FETRE_FET_CODE_FK_"& _ 
                "PK] = @Original_FETRE_FET_CODE_FK_PK) AND ([FETRE_CDF_ETIN_CODE_FK_PK] = @Origin"& _ 
                "al_FETRE_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETRE_POURCENTAGE_RESISTANCE = 1 AND"& _ 
                " [FETRE_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETRE_POURCENTAGE_RESISTANCE] = @O"& _ 
                "riginal_FETRE_POURCENTAGE_RESISTANCE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETRE_ETIOLOGIE_RESISTANTES] ([FETRE_FET_CODE_FK_PK], [F"& _ 
                "ETRE_CDF_ETIN_CODE_FK_PK], [FETRE_POURCENTAGE_RESISTANCE]) VALUES (@FETRE_FET_CO"& _ 
                "DE_FK_PK, @FETRE_CDF_ETIN_CODE_FK_PK, @FETRE_POURCENTAGE_RESISTANCE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FE"& _ 
                "TRE_FET_CODE_FK_PK, FETRE_CDF_ETIN_CODE_FK_PK, FETRE_POURCENTAGE_RESISTANCE FROM"& _ 
                " THERIAQUE.FETRE_ETIOLOGIE_RESISTANTES WHERE (FETRE_CDF_ETIN_CODE_FK_PK = @FETRE"& _ 
                "_CDF_ETIN_CODE_FK_PK) AND (FETRE_FET_CODE_FK_PK = @FETRE_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETRE_ETIOLOGIE_RESISTANTES] SET [FETRE_FET_CODE_FK_PK] = @FE"& _ 
                "TRE_FET_CODE_FK_PK, [FETRE_CDF_ETIN_CODE_FK_PK] = @FETRE_CDF_ETIN_CODE_FK_PK, [F"& _ 
                "ETRE_POURCENTAGE_RESISTANCE] = @FETRE_POURCENTAGE_RESISTANCE WHERE (([FETRE_FET_"& _ 
                "CODE_FK_PK] = @Original_FETRE_FET_CODE_FK_PK) AND ([FETRE_CDF_ETIN_CODE_FK_PK] ="& _ 
                " @Original_FETRE_CDF_ETIN_CODE_FK_PK) AND ((@IsNull_FETRE_POURCENTAGE_RESISTANCE"& _ 
                " = 1 AND [FETRE_POURCENTAGE_RESISTANCE] IS NULL) OR ([FETRE_POURCENTAGE_RESISTAN"& _ 
                "CE] = @Original_FETRE_POURCENTAGE_RESISTANCE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETRE_FET_CODE_FK_PK, F"& _ 
                "ETRE_CDF_ETIN_CODE_FK_PK, FETRE_POURCENTAGE_RESISTANCE FROM THERIAQUE.FETRE_ETIO"& _ 
                "LOGIE_RESISTANTES WHERE (FETRE_CDF_ETIN_CODE_FK_PK = @FETRE_CDF_ETIN_CODE_FK_PK)"& _ 
                " AND (FETRE_FET_CODE_FK_PK = @FETRE_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_POURCENTAGE_RESISTANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETRE_FET_CODE_FK_PK, FETRE_CDF_ETIN_CODE_FK_PK, FETRE_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETRE_ETIOLOGIE_RESISTANTES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETRE_FET_CODE_FK_PK, FETRE_CDF_ETIN_CODE_FK_PK, FETRE_POURCENTAGE_RESISTA"& _ 
                "NCE FROM THERIAQUE.FETRE_ETIOLOGIE_RESISTANTES"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETRE_FET_CODE_FK_PK = @FE"& _ 
                "TRE_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable = New dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable, ByVal FETRE_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETRE_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETRE_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETRE_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable = New dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETRE_ETIOLOGIE_RESISTANTESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETRE_ETIOLOGIE_RESISTANTES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETRE_FET_CODE_FK_PK As Integer, ByVal Original_FETRE_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETRE_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETRE_FET_CODE_FK_PK,Integer)
            If (Original_FETRE_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETRE_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETRE_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETRE_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FETRE_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETRE_FET_CODE_FK_PK As Integer, ByVal FETRE_CDF_ETIN_CODE_FK_PK As String, ByVal FETRE_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETRE_FET_CODE_FK_PK,Integer)
            If (FETRE_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETRE_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETRE_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETRE_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FETRE_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETRE_FET_CODE_FK_PK As Integer, ByVal FETRE_CDF_ETIN_CODE_FK_PK As String, ByVal FETRE_POURCENTAGE_RESISTANCE As String, ByVal Original_FETRE_FET_CODE_FK_PK As Integer, ByVal Original_FETRE_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETRE_POURCENTAGE_RESISTANCE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETRE_FET_CODE_FK_PK,Integer)
            If (FETRE_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETRE_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETRE_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FETRE_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FETRE_POURCENTAGE_RESISTANCE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETRE_FET_CODE_FK_PK,Integer)
            If (Original_FETRE_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETRE_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FETRE_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FETRE_POURCENTAGE_RESISTANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FETRE_POURCENTAGE_RESISTANCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETRE_POURCENTAGE_RESISTANCE As String, ByVal Original_FETRE_FET_CODE_FK_PK As Integer, ByVal Original_FETRE_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FETRE_POURCENTAGE_RESISTANCE As String) As Integer
            Return Me.Update(Original_FETRE_FET_CODE_FK_PK, Original_FETRE_CDF_ETIN_CODE_FK_PK, FETRE_POURCENTAGE_RESISTANCE, Original_FETRE_FET_CODE_FK_PK, Original_FETRE_CDF_ETIN_CODE_FK_PK, Original_FETRE_POURCENTAGE_RESISTANCE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETCRE_COMMENT_RESISTANTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETCRE_COMMENT_RESISTANTE"
            tableMapping.ColumnMappings.Add("FETCRE_FET_CODE_FK_PK", "FETCRE_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETCRE_CDF_COIN_CODE_FK_PK", "FETCRE_CDF_COIN_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETCRE_COMMENT_RESISTANTE] WHERE (([FETCRE_FET_CODE_FK_P"& _ 
                "K] = @Original_FETCRE_FET_CODE_FK_PK) AND ([FETCRE_CDF_COIN_CODE_FK_PK] = @Origi"& _ 
                "nal_FETCRE_CDF_COIN_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETCRE_COMMENT_RESISTANTE] ([FETCRE_FET_CODE_FK_PK], [FE"& _ 
                "TCRE_CDF_COIN_CODE_FK_PK]) VALUES (@FETCRE_FET_CODE_FK_PK, @FETCRE_CDF_COIN_CODE"& _ 
                "_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCRE_FET_CODE_FK_PK, FETCRE_CDF_COIN_CODE_FK_PK FROM THERIAQU"& _ 
                "E.FETCRE_COMMENT_RESISTANTE WHERE (FETCRE_CDF_COIN_CODE_FK_PK = @FETCRE_CDF_COIN"& _ 
                "_CODE_FK_PK) AND (FETCRE_FET_CODE_FK_PK = @FETCRE_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETCRE_COMMENT_RESISTANTE] SET [FETCRE_FET_CODE_FK_PK] = @FET"& _ 
                "CRE_FET_CODE_FK_PK, [FETCRE_CDF_COIN_CODE_FK_PK] = @FETCRE_CDF_COIN_CODE_FK_PK W"& _ 
                "HERE (([FETCRE_FET_CODE_FK_PK] = @Original_FETCRE_FET_CODE_FK_PK) AND ([FETCRE_C"& _ 
                "DF_COIN_CODE_FK_PK] = @Original_FETCRE_CDF_COIN_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETCRE_FET"& _ 
                "_CODE_FK_PK, FETCRE_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCRE_COMMENT_RESISTANTE"& _ 
                " WHERE (FETCRE_CDF_COIN_CODE_FK_PK = @FETCRE_CDF_COIN_CODE_FK_PK) AND (FETCRE_FE"& _ 
                "T_CODE_FK_PK = @FETCRE_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETCRE_FET_CODE_FK_PK, FETCRE_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCRE_CO"& _ 
                "MMENT_RESISTANTE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETCRE_FET_CODE_FK_PK, FETCRE_CDF_COIN_CODE_FK_PK FROM THERIAQUE.FETCRE_CO"& _ 
                "MMENT_RESISTANTE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETCRE_FET_CODE_FK_PK = @FETCRE_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETCRE_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETCRE_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable = New dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable, ByVal FETCRE_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCRE_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETCRE_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETCRE_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable = New dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETCRE_COMMENT_RESISTANTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETCRE_COMMENT_RESISTANTE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETCRE_FET_CODE_FK_PK As Integer, ByVal Original_FETCRE_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETCRE_FET_CODE_FK_PK,Integer)
            If (Original_FETCRE_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCRE_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETCRE_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETCRE_FET_CODE_FK_PK As Integer, ByVal FETCRE_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETCRE_FET_CODE_FK_PK,Integer)
            If (FETCRE_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCRE_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETCRE_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETCRE_FET_CODE_FK_PK As Integer, ByVal FETCRE_CDF_COIN_CODE_FK_PK As String, ByVal Original_FETCRE_FET_CODE_FK_PK As Integer, ByVal Original_FETCRE_CDF_COIN_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETCRE_FET_CODE_FK_PK,Integer)
            If (FETCRE_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETCRE_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETCRE_CDF_COIN_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETCRE_FET_CODE_FK_PK,Integer)
            If (Original_FETCRE_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETCRE_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FETCRE_CDF_COIN_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETCRE_FET_CODE_FK_PK As Integer, ByVal Original_FETCRE_CDF_COIN_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FETCRE_FET_CODE_FK_PK, Original_FETCRE_CDF_COIN_CODE_FK_PK, Original_FETCRE_FET_CODE_FK_PK, Original_FETCRE_CDF_COIN_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETTX4_ET_TXRETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETTX4_ET_TXRE"
            tableMapping.ColumnMappings.Add("FETTX4_FET_CODE_FK_PK", "FETTX4_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETTX4_TEXTE", "FETTX4_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETTX4_ET_TXRE] WHERE (([FETTX4_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX4_FET_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX4_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETTX4_ET_TXRE] ([FETTX4_FET_CODE_FK_PK], [FETTX4_TEXTE]"& _ 
                ") VALUES (@FETTX4_FET_CODE_FK_PK, @FETTX4_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX4_FET_CODE_FK_PK,"& _ 
                " FETTX4_TEXTE FROM THERIAQUE.FETTX4_ET_TXRE WHERE (FETTX4_FET_CODE_FK_PK = @FETT"& _ 
                "X4_FET_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX4_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX4_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETTX4_ET_TXRE] SET [FETTX4_FET_CODE_FK_PK] = @FETTX4_FET_COD"& _ 
                "E_FK_PK, [FETTX4_TEXTE] = @FETTX4_TEXTE WHERE (([FETTX4_FET_CODE_FK_PK] = @Origi"& _ 
                "nal_FETTX4_FET_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETTX4_FET_CODE_FK_PK, FETTX4_TEXTE FROM TH"& _ 
                "ERIAQUE.FETTX4_ET_TXRE WHERE (FETTX4_FET_CODE_FK_PK = @FETTX4_FET_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX4_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX4_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETTX4_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETTX4_FET_CODE_FK_PK, FETTX4_TEXTE FROM THERIAQUE.FETTX4_ET_TXRE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETTX4_FET_CODE_FK_PK, FETTX4_TEXTE FROM THERIAQUE.FETTX4_ET_TXRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE F"& _ 
                "ETTX4_FET_CODE_FK_PK = @FETTX4_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETTX4_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETTX4_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable = New dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable, ByVal FETTX4_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX4_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETTX4_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETTX4_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable = New dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETTX4_ET_TXREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETTX4_ET_TXRE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETTX4_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETTX4_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETTX4_FET_CODE_FK_PK As Integer, ByVal FETTX4_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETTX4_FET_CODE_FK_PK,Integer)
            If (FETTX4_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETTX4_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX4_FET_CODE_FK_PK As Integer, ByVal FETTX4_TEXTE As String, ByVal Original_FETTX4_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETTX4_FET_CODE_FK_PK,Integer)
            If (FETTX4_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETTX4_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FETTX4_FET_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETTX4_TEXTE As String, ByVal Original_FETTX4_FET_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FETTX4_FET_CODE_FK_PK, FETTX4_TEXTE, Original_FETTX4_FET_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FETAFS_FET_AFSSAPSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FETAFS_FET_AFSSAPS"
            tableMapping.ColumnMappings.Add("FETAFS_FET_CODE_FK_PK", "FETAFS_FET_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETAFS_SP_CODE_FK_PK", "FETAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FETAFS_DATE_PK", "FETAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FETAFS_CDF_DOCUMENT_FK_PK", "FETAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FETAFS_FET_AFSSAPS] WHERE (([FETAFS_FET_CODE_FK_PK] = @O"& _ 
                "riginal_FETAFS_FET_CODE_FK_PK) AND ([FETAFS_SP_CODE_FK_PK] = @Original_FETAFS_SP"& _ 
                "_CODE_FK_PK) AND ([FETAFS_DATE_PK] = @Original_FETAFS_DATE_PK) AND ([FETAFS_CDF_"& _ 
                "DOCUMENT_FK_PK] = @Original_FETAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FETAFS_FET_AFSSAPS] ([FETAFS_FET_CODE_FK_PK], [FETAFS_SP"& _ 
                "_CODE_FK_PK], [FETAFS_DATE_PK], [FETAFS_CDF_DOCUMENT_FK_PK]) VALUES (@FETAFS_FET"& _ 
                "_CODE_FK_PK, @FETAFS_SP_CODE_FK_PK, @FETAFS_DATE_PK, @FETAFS_CDF_DOCUMENT_FK_PK)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETAFS_FET_CODE_FK_PK, FETAFS_SP_CODE_FK_PK, FETAFS_DATE_PK, FETAFS_CD"& _ 
                "F_DOCUMENT_FK_PK FROM THERIAQUE.FETAFS_FET_AFSSAPS WHERE (FETAFS_CDF_DOCUMENT_FK"& _ 
                "_PK = @FETAFS_CDF_DOCUMENT_FK_PK) AND (FETAFS_DATE_PK = @FETAFS_DATE_PK) AND (FE"& _ 
                "TAFS_FET_CODE_FK_PK = @FETAFS_FET_CODE_FK_PK) AND (FETAFS_SP_CODE_FK_PK = @FETAF"& _ 
                "S_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FETAFS_FET_AFSSAPS] SET [FETAFS_FET_CODE_FK_PK] = @FETAFS_FET"& _ 
                "_CODE_FK_PK, [FETAFS_SP_CODE_FK_PK] = @FETAFS_SP_CODE_FK_PK, [FETAFS_DATE_PK] = "& _ 
                "@FETAFS_DATE_PK, [FETAFS_CDF_DOCUMENT_FK_PK] = @FETAFS_CDF_DOCUMENT_FK_PK WHERE "& _ 
                "(([FETAFS_FET_CODE_FK_PK] = @Original_FETAFS_FET_CODE_FK_PK) AND ([FETAFS_SP_COD"& _ 
                "E_FK_PK] = @Original_FETAFS_SP_CODE_FK_PK) AND ([FETAFS_DATE_PK] = @Original_FET"& _ 
                "AFS_DATE_PK) AND ([FETAFS_CDF_DOCUMENT_FK_PK] = @Original_FETAFS_CDF_DOCUMENT_FK"& _ 
                "_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FETAFS_FET_CODE_FK_PK, FETAFS_SP_CODE_FK_PK, FETAFS_DATE_PK, FETA"& _ 
                "FS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FETAFS_FET_AFSSAPS WHERE (FETAFS_CDF_DOCUME"& _ 
                "NT_FK_PK = @FETAFS_CDF_DOCUMENT_FK_PK) AND (FETAFS_DATE_PK = @FETAFS_DATE_PK) AN"& _ 
                "D (FETAFS_FET_CODE_FK_PK = @FETAFS_FET_CODE_FK_PK) AND (FETAFS_SP_CODE_FK_PK = @"& _ 
                "FETAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FETAFS_FET_CODE_FK_PK, FETAFS_SP_CODE_FK_PK, FETAFS_DATE_PK, FETAFS_CDF_DO"& _ 
                "CUMENT_FK_PK FROM THERIAQUE.FETAFS_FET_AFSSAPS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FETAFS_FET_CODE_FK_PK, FETAFS_SP_CODE_FK_PK, FETAFS_DATE_PK, FETAFS_CDF_DO"& _ 
                "CUMENT_FK_PK FROM THERIAQUE.FETAFS_FET_AFSSAPS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FETAFS_FET_CODE_FK_PK = @F"& _ 
                "ETAFS_FET_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FETAFS_FET_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FETAFS_FET_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable = New dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable, ByVal FETAFS_FET_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETAFS_FET_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FETAFS_FET_CODE_FK_PK As Integer) As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FETAFS_FET_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable = New dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Etiologie.FETAFS_FET_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Etiologie) As Integer
            Return Me.Adapter.Update(dataSet, "FETAFS_FET_AFSSAPS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FETAFS_FET_CODE_FK_PK As Integer, ByVal Original_FETAFS_SP_CODE_FK_PK As Integer, ByVal Original_FETAFS_DATE_PK As Date, ByVal Original_FETAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FETAFS_FET_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FETAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FETAFS_DATE_PK,Date)
            If (Original_FETAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FETAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FETAFS_FET_CODE_FK_PK As Integer, ByVal FETAFS_SP_CODE_FK_PK As Integer, ByVal FETAFS_DATE_PK As Date, ByVal FETAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FETAFS_FET_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FETAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FETAFS_DATE_PK,Date)
            If (FETAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FETAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FETAFS_FET_CODE_FK_PK As Integer, ByVal FETAFS_SP_CODE_FK_PK As Integer, ByVal FETAFS_DATE_PK As Date, ByVal FETAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FETAFS_FET_CODE_FK_PK As Integer, ByVal Original_FETAFS_SP_CODE_FK_PK As Integer, ByVal Original_FETAFS_DATE_PK As Date, ByVal Original_FETAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FETAFS_FET_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FETAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FETAFS_DATE_PK,Date)
            If (FETAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FETAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FETAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FETAFS_FET_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FETAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FETAFS_DATE_PK,Date)
            If (Original_FETAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FETAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FETAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FETAFS_FET_CODE_FK_PK As Integer, ByVal Original_FETAFS_SP_CODE_FK_PK As Integer, ByVal Original_FETAFS_DATE_PK As Date, ByVal Original_FETAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Return Me.Update(Original_FETAFS_FET_CODE_FK_PK, Original_FETAFS_SP_CODE_FK_PK, Original_FETAFS_DATE_PK, Original_FETAFS_CDF_DOCUMENT_FK_PK, Original_FETAFS_FET_CODE_FK_PK, Original_FETAFS_SP_CODE_FK_PK, Original_FETAFS_DATE_PK, Original_FETAFS_CDF_DOCUMENT_FK_PK)
        End Function
    End Class
End Namespace
