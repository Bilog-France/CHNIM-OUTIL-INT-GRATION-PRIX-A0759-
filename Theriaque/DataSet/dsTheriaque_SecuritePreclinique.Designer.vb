'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.312
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_SecuritePreclinique"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_SecuritePreclinique
    Inherits System.Data.DataSet
    
    Private tableFPRCL_SECPRECLIN As FPRCL_SECPRECLINDataTable
    
    Private tableFPRCLCCH_FPRCL_CLCH As FPRCLCCH_FPRCL_CLCHDataTable
    
    Private tableFPRCLCPH_FPRCL_CLPH As FPRCLCPH_FPRCL_CLPHDataTable
    
    Private tableFPRCLPR_FPRCL_PROD As FPRCLPR_FPRCL_PRODDataTable
    
    Private tableFPRCLSAC_FPRCL_SUBACT As FPRCLSAC_FPRCL_SUBACTDataTable
    
    Private tableFPRCLSAU_FPRCL_SUBAUX As FPRCLSAU_FPRCL_SUBAUXDataTable
    
    Private tableFPRCLSP_SECPRECLIN_SPEC As FPRCLSP_SECPRECLIN_SPECDataTable
    
    Private tableFPRCLAFS_FPRCL_AFSSAPS As FPRCLAFS_FPRCL_AFSSAPSDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FPRCL_SECPRECLIN")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCL_SECPRECLINDataTable(ds.Tables("FPRCL_SECPRECLIN")))
            End If
            If (Not (ds.Tables("FPRCLCCH_FPRCL_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLCCH_FPRCL_CLCHDataTable(ds.Tables("FPRCLCCH_FPRCL_CLCH")))
            End If
            If (Not (ds.Tables("FPRCLCPH_FPRCL_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLCPH_FPRCL_CLPHDataTable(ds.Tables("FPRCLCPH_FPRCL_CLPH")))
            End If
            If (Not (ds.Tables("FPRCLPR_FPRCL_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLPR_FPRCL_PRODDataTable(ds.Tables("FPRCLPR_FPRCL_PROD")))
            End If
            If (Not (ds.Tables("FPRCLSAC_FPRCL_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLSAC_FPRCL_SUBACTDataTable(ds.Tables("FPRCLSAC_FPRCL_SUBACT")))
            End If
            If (Not (ds.Tables("FPRCLSAU_FPRCL_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLSAU_FPRCL_SUBAUXDataTable(ds.Tables("FPRCLSAU_FPRCL_SUBAUX")))
            End If
            If (Not (ds.Tables("FPRCLSP_SECPRECLIN_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLSP_SECPRECLIN_SPECDataTable(ds.Tables("FPRCLSP_SECPRECLIN_SPEC")))
            End If
            If (Not (ds.Tables("FPRCLAFS_FPRCL_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLAFS_FPRCL_AFSSAPSDataTable(ds.Tables("FPRCLAFS_FPRCL_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCL_SECPRECLIN() As FPRCL_SECPRECLINDataTable
        Get
            Return Me.tableFPRCL_SECPRECLIN
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLCCH_FPRCL_CLCH() As FPRCLCCH_FPRCL_CLCHDataTable
        Get
            Return Me.tableFPRCLCCH_FPRCL_CLCH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLCPH_FPRCL_CLPH() As FPRCLCPH_FPRCL_CLPHDataTable
        Get
            Return Me.tableFPRCLCPH_FPRCL_CLPH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLPR_FPRCL_PROD() As FPRCLPR_FPRCL_PRODDataTable
        Get
            Return Me.tableFPRCLPR_FPRCL_PROD
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLSAC_FPRCL_SUBACT() As FPRCLSAC_FPRCL_SUBACTDataTable
        Get
            Return Me.tableFPRCLSAC_FPRCL_SUBACT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLSAU_FPRCL_SUBAUX() As FPRCLSAU_FPRCL_SUBAUXDataTable
        Get
            Return Me.tableFPRCLSAU_FPRCL_SUBAUX
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLSP_SECPRECLIN_SPEC() As FPRCLSP_SECPRECLIN_SPECDataTable
        Get
            Return Me.tableFPRCLSP_SECPRECLIN_SPEC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLAFS_FPRCL_AFSSAPS() As FPRCLAFS_FPRCL_AFSSAPSDataTable
        Get
            Return Me.tableFPRCLAFS_FPRCL_AFSSAPS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_SecuritePreclinique = CType(MyBase.Clone,dsTheriaque_SecuritePreclinique)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FPRCL_SECPRECLIN")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCL_SECPRECLINDataTable(ds.Tables("FPRCL_SECPRECLIN")))
            End If
            If (Not (ds.Tables("FPRCLCCH_FPRCL_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLCCH_FPRCL_CLCHDataTable(ds.Tables("FPRCLCCH_FPRCL_CLCH")))
            End If
            If (Not (ds.Tables("FPRCLCPH_FPRCL_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLCPH_FPRCL_CLPHDataTable(ds.Tables("FPRCLCPH_FPRCL_CLPH")))
            End If
            If (Not (ds.Tables("FPRCLPR_FPRCL_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLPR_FPRCL_PRODDataTable(ds.Tables("FPRCLPR_FPRCL_PROD")))
            End If
            If (Not (ds.Tables("FPRCLSAC_FPRCL_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLSAC_FPRCL_SUBACTDataTable(ds.Tables("FPRCLSAC_FPRCL_SUBACT")))
            End If
            If (Not (ds.Tables("FPRCLSAU_FPRCL_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLSAU_FPRCL_SUBAUXDataTable(ds.Tables("FPRCLSAU_FPRCL_SUBAUX")))
            End If
            If (Not (ds.Tables("FPRCLSP_SECPRECLIN_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLSP_SECPRECLIN_SPECDataTable(ds.Tables("FPRCLSP_SECPRECLIN_SPEC")))
            End If
            If (Not (ds.Tables("FPRCLAFS_FPRCL_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLAFS_FPRCL_AFSSAPSDataTable(ds.Tables("FPRCLAFS_FPRCL_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFPRCL_SECPRECLIN = CType(MyBase.Tables("FPRCL_SECPRECLIN"),FPRCL_SECPRECLINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCL_SECPRECLIN) Is Nothing) Then
                Me.tableFPRCL_SECPRECLIN.InitVars
            End If
        End If
        Me.tableFPRCLCCH_FPRCL_CLCH = CType(MyBase.Tables("FPRCLCCH_FPRCL_CLCH"),FPRCLCCH_FPRCL_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLCCH_FPRCL_CLCH) Is Nothing) Then
                Me.tableFPRCLCCH_FPRCL_CLCH.InitVars
            End If
        End If
        Me.tableFPRCLCPH_FPRCL_CLPH = CType(MyBase.Tables("FPRCLCPH_FPRCL_CLPH"),FPRCLCPH_FPRCL_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLCPH_FPRCL_CLPH) Is Nothing) Then
                Me.tableFPRCLCPH_FPRCL_CLPH.InitVars
            End If
        End If
        Me.tableFPRCLPR_FPRCL_PROD = CType(MyBase.Tables("FPRCLPR_FPRCL_PROD"),FPRCLPR_FPRCL_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLPR_FPRCL_PROD) Is Nothing) Then
                Me.tableFPRCLPR_FPRCL_PROD.InitVars
            End If
        End If
        Me.tableFPRCLSAC_FPRCL_SUBACT = CType(MyBase.Tables("FPRCLSAC_FPRCL_SUBACT"),FPRCLSAC_FPRCL_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLSAC_FPRCL_SUBACT) Is Nothing) Then
                Me.tableFPRCLSAC_FPRCL_SUBACT.InitVars
            End If
        End If
        Me.tableFPRCLSAU_FPRCL_SUBAUX = CType(MyBase.Tables("FPRCLSAU_FPRCL_SUBAUX"),FPRCLSAU_FPRCL_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLSAU_FPRCL_SUBAUX) Is Nothing) Then
                Me.tableFPRCLSAU_FPRCL_SUBAUX.InitVars
            End If
        End If
        Me.tableFPRCLSP_SECPRECLIN_SPEC = CType(MyBase.Tables("FPRCLSP_SECPRECLIN_SPEC"),FPRCLSP_SECPRECLIN_SPECDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLSP_SECPRECLIN_SPEC) Is Nothing) Then
                Me.tableFPRCLSP_SECPRECLIN_SPEC.InitVars
            End If
        End If
        Me.tableFPRCLAFS_FPRCL_AFSSAPS = CType(MyBase.Tables("FPRCLAFS_FPRCL_AFSSAPS"),FPRCLAFS_FPRCL_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLAFS_FPRCL_AFSSAPS) Is Nothing) Then
                Me.tableFPRCLAFS_FPRCL_AFSSAPS.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_SecuritePreclinique"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_SecuritePreclinique.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFPRCL_SECPRECLIN = New FPRCL_SECPRECLINDataTable
        MyBase.Tables.Add(Me.tableFPRCL_SECPRECLIN)
        Me.tableFPRCLCCH_FPRCL_CLCH = New FPRCLCCH_FPRCL_CLCHDataTable
        MyBase.Tables.Add(Me.tableFPRCLCCH_FPRCL_CLCH)
        Me.tableFPRCLCPH_FPRCL_CLPH = New FPRCLCPH_FPRCL_CLPHDataTable
        MyBase.Tables.Add(Me.tableFPRCLCPH_FPRCL_CLPH)
        Me.tableFPRCLPR_FPRCL_PROD = New FPRCLPR_FPRCL_PRODDataTable
        MyBase.Tables.Add(Me.tableFPRCLPR_FPRCL_PROD)
        Me.tableFPRCLSAC_FPRCL_SUBACT = New FPRCLSAC_FPRCL_SUBACTDataTable
        MyBase.Tables.Add(Me.tableFPRCLSAC_FPRCL_SUBACT)
        Me.tableFPRCLSAU_FPRCL_SUBAUX = New FPRCLSAU_FPRCL_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableFPRCLSAU_FPRCL_SUBAUX)
        Me.tableFPRCLSP_SECPRECLIN_SPEC = New FPRCLSP_SECPRECLIN_SPECDataTable
        MyBase.Tables.Add(Me.tableFPRCLSP_SECPRECLIN_SPEC)
        Me.tableFPRCLAFS_FPRCL_AFSSAPS = New FPRCLAFS_FPRCL_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFPRCLAFS_FPRCL_AFSSAPS)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCL_SECPRECLIN() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLCCH_FPRCL_CLCH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLCPH_FPRCL_CLPH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLPR_FPRCL_PROD() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLSAC_FPRCL_SUBACT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLSAU_FPRCL_SUBAUX() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLSP_SECPRECLIN_SPEC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLAFS_FPRCL_AFSSAPS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub FPRCL_SECPRECLINRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCL_SECPRECLINRowChangeEvent)
    
    Public Delegate Sub FPRCLCCH_FPRCL_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLCCH_FPRCL_CLCHRowChangeEvent)
    
    Public Delegate Sub FPRCLCPH_FPRCL_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLCPH_FPRCL_CLPHRowChangeEvent)
    
    Public Delegate Sub FPRCLPR_FPRCL_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLPR_FPRCL_PRODRowChangeEvent)
    
    Public Delegate Sub FPRCLSAC_FPRCL_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLSAC_FPRCL_SUBACTRowChangeEvent)
    
    Public Delegate Sub FPRCLSAU_FPRCL_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLSAU_FPRCL_SUBAUXRowChangeEvent)
    
    Public Delegate Sub FPRCLSP_SECPRECLIN_SPECRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLSP_SECPRECLIN_SPECRowChangeEvent)
    
    Public Delegate Sub FPRCLAFS_FPRCL_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLAFS_FPRCL_AFSSAPSRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCL_SECPRECLINDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCL_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnFPRCL_TXT As System.Data.DataColumn
        
        Private columnFPRCL_DATECR As System.Data.DataColumn
        
        Private columnFPRCL_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCL_SECPRECLIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_TXTColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_TXT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCL_SECPRECLINRow
            Get
                Return CType(Me.Rows(index),FPRCL_SECPRECLINRow)
            End Get
        End Property
        
        Public Event FPRCL_SECPRECLINRowChanging As FPRCL_SECPRECLINRowChangeEventHandler
        
        Public Event FPRCL_SECPRECLINRowChanged As FPRCL_SECPRECLINRowChangeEventHandler
        
        Public Event FPRCL_SECPRECLINRowDeleting As FPRCL_SECPRECLINRowChangeEventHandler
        
        Public Event FPRCL_SECPRECLINRowDeleted As FPRCL_SECPRECLINRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCL_SECPRECLINRow(ByVal row As FPRCL_SECPRECLINRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCL_SECPRECLINRow(ByVal FPRCL_CODE_SQ_PK As Integer, ByVal FPRCL_TXT As String, ByVal FPRCL_DATECR As Date, ByVal FPRCL_DATEMJ As Date) As FPRCL_SECPRECLINRow
            Dim rowFPRCL_SECPRECLINRow As FPRCL_SECPRECLINRow = CType(Me.NewRow,FPRCL_SECPRECLINRow)
            rowFPRCL_SECPRECLINRow.ItemArray = New Object() {FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEMJ}
            Me.Rows.Add(rowFPRCL_SECPRECLINRow)
            Return rowFPRCL_SECPRECLINRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCL_CODE_SQ_PK(ByVal FPRCL_CODE_SQ_PK As Integer) As FPRCL_SECPRECLINRow
            Return CType(Me.Rows.Find(New Object() {FPRCL_CODE_SQ_PK}),FPRCL_SECPRECLINRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCL_SECPRECLINDataTable = CType(MyBase.Clone,FPRCL_SECPRECLINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCL_SECPRECLINDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCL_CODE_SQ_PK = MyBase.Columns("FPRCL_CODE_SQ_PK")
            Me.columnFPRCL_TXT = MyBase.Columns("FPRCL_TXT")
            Me.columnFPRCL_DATECR = MyBase.Columns("FPRCL_DATECR")
            Me.columnFPRCL_DATEMJ = MyBase.Columns("FPRCL_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCL_CODE_SQ_PK = New System.Data.DataColumn("FPRCL_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_CODE_SQ_PK)
            Me.columnFPRCL_TXT = New System.Data.DataColumn("FPRCL_TXT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_TXT)
            Me.columnFPRCL_DATECR = New System.Data.DataColumn("FPRCL_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_DATECR)
            Me.columnFPRCL_DATEMJ = New System.Data.DataColumn("FPRCL_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCL_CODE_SQ_PK}, true))
            Me.columnFPRCL_CODE_SQ_PK.AllowDBNull = false
            Me.columnFPRCL_CODE_SQ_PK.Unique = true
            Me.columnFPRCL_TXT.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCL_SECPRECLINRow() As FPRCL_SECPRECLINRow
            Return CType(Me.NewRow,FPRCL_SECPRECLINRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCL_SECPRECLINRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCL_SECPRECLINRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCL_SECPRECLINRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowChanged(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCL_SECPRECLINRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowChanging(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCL_SECPRECLINRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowDeleted(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCL_SECPRECLINRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowDeleting(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCL_SECPRECLINRow(ByVal row As FPRCL_SECPRECLINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCL_SECPRECLINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLCCH_FPRCL_CLCHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLCCH_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLCCH_CCH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLCCH_FPRCL_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLCCH_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLCCH_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLCCH_CCH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLCCH_FPRCL_CLCHRow
            Get
                Return CType(Me.Rows(index),FPRCLCCH_FPRCL_CLCHRow)
            End Get
        End Property
        
        Public Event FPRCLCCH_FPRCL_CLCHRowChanging As FPRCLCCH_FPRCL_CLCHRowChangeEventHandler
        
        Public Event FPRCLCCH_FPRCL_CLCHRowChanged As FPRCLCCH_FPRCL_CLCHRowChangeEventHandler
        
        Public Event FPRCLCCH_FPRCL_CLCHRowDeleting As FPRCLCCH_FPRCL_CLCHRowChangeEventHandler
        
        Public Event FPRCLCCH_FPRCL_CLCHRowDeleted As FPRCLCCH_FPRCL_CLCHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLCCH_FPRCL_CLCHRow(ByVal row As FPRCLCCH_FPRCL_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLCCH_FPRCL_CLCHRow(ByVal FPRCLCCH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCCH_CCH_CODE_FK_PK As String) As FPRCLCCH_FPRCL_CLCHRow
            Dim rowFPRCLCCH_FPRCL_CLCHRow As FPRCLCCH_FPRCL_CLCHRow = CType(Me.NewRow,FPRCLCCH_FPRCL_CLCHRow)
            rowFPRCLCCH_FPRCL_CLCHRow.ItemArray = New Object() {FPRCLCCH_FPRCL_CODE_FK_PK, FPRCLCCH_CCH_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLCCH_FPRCL_CLCHRow)
            Return rowFPRCLCCH_FPRCL_CLCHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLCCH_FPRCL_CODE_FK_PKFPRCLCCH_CCH_CODE_FK_PK(ByVal FPRCLCCH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCCH_CCH_CODE_FK_PK As String) As FPRCLCCH_FPRCL_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FPRCLCCH_FPRCL_CODE_FK_PK, FPRCLCCH_CCH_CODE_FK_PK}),FPRCLCCH_FPRCL_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLCCH_FPRCL_CLCHDataTable = CType(MyBase.Clone,FPRCLCCH_FPRCL_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLCCH_FPRCL_CLCHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLCCH_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLCCH_FPRCL_CODE_FK_PK")
            Me.columnFPRCLCCH_CCH_CODE_FK_PK = MyBase.Columns("FPRCLCCH_CCH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLCCH_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLCCH_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLCCH_FPRCL_CODE_FK_PK)
            Me.columnFPRCLCCH_CCH_CODE_FK_PK = New System.Data.DataColumn("FPRCLCCH_CCH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLCCH_FPRCL_CODE_FK_PK, Me.columnFPRCLCCH_CCH_CODE_FK_PK}, true))
            Me.columnFPRCLCCH_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLCCH_FPRCL_CLCHRow() As FPRCLCCH_FPRCL_CLCHRow
            Return CType(Me.NewRow,FPRCLCCH_FPRCL_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLCCH_FPRCL_CLCHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLCCH_FPRCL_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLCCH_FPRCL_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLCCH_FPRCL_CLCHRowChanged(Me, New FPRCLCCH_FPRCL_CLCHRowChangeEvent(CType(e.Row,FPRCLCCH_FPRCL_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLCCH_FPRCL_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLCCH_FPRCL_CLCHRowChanging(Me, New FPRCLCCH_FPRCL_CLCHRowChangeEvent(CType(e.Row,FPRCLCCH_FPRCL_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLCCH_FPRCL_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLCCH_FPRCL_CLCHRowDeleted(Me, New FPRCLCCH_FPRCL_CLCHRowChangeEvent(CType(e.Row,FPRCLCCH_FPRCL_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLCCH_FPRCL_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLCCH_FPRCL_CLCHRowDeleting(Me, New FPRCLCCH_FPRCL_CLCHRowChangeEvent(CType(e.Row,FPRCLCCH_FPRCL_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLCCH_FPRCL_CLCHRow(ByVal row As FPRCLCCH_FPRCL_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLCCH_FPRCL_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLCPH_FPRCL_CLPHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLCPH_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLCPH_CPH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLCPH_FPRCL_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLCPH_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLCPH_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLCPH_CPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLCPH_FPRCL_CLPHRow
            Get
                Return CType(Me.Rows(index),FPRCLCPH_FPRCL_CLPHRow)
            End Get
        End Property
        
        Public Event FPRCLCPH_FPRCL_CLPHRowChanging As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        Public Event FPRCLCPH_FPRCL_CLPHRowChanged As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        Public Event FPRCLCPH_FPRCL_CLPHRowDeleting As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        Public Event FPRCLCPH_FPRCL_CLPHRowDeleted As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLCPH_FPRCL_CLPHRow(ByVal row As FPRCLCPH_FPRCL_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLCPH_FPRCL_CLPHRow(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String) As FPRCLCPH_FPRCL_CLPHRow
            Dim rowFPRCLCPH_FPRCL_CLPHRow As FPRCLCPH_FPRCL_CLPHRow = CType(Me.NewRow,FPRCLCPH_FPRCL_CLPHRow)
            rowFPRCLCPH_FPRCL_CLPHRow.ItemArray = New Object() {FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLCPH_FPRCL_CLPHRow)
            Return rowFPRCLCPH_FPRCL_CLPHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLCPH_FPRCL_CODE_FK_PKFPRCLCPH_CPH_CODE_FK_PK(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String) As FPRCLCPH_FPRCL_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK}),FPRCLCPH_FPRCL_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLCPH_FPRCL_CLPHDataTable = CType(MyBase.Clone,FPRCLCPH_FPRCL_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLCPH_FPRCL_CLPHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLCPH_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLCPH_FPRCL_CODE_FK_PK")
            Me.columnFPRCLCPH_CPH_CODE_FK_PK = MyBase.Columns("FPRCLCPH_CPH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLCPH_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLCPH_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLCPH_FPRCL_CODE_FK_PK)
            Me.columnFPRCLCPH_CPH_CODE_FK_PK = New System.Data.DataColumn("FPRCLCPH_CPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLCPH_FPRCL_CODE_FK_PK, Me.columnFPRCLCPH_CPH_CODE_FK_PK}, true))
            Me.columnFPRCLCPH_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLCPH_FPRCL_CLPHRow() As FPRCLCPH_FPRCL_CLPHRow
            Return CType(Me.NewRow,FPRCLCPH_FPRCL_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLCPH_FPRCL_CLPHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLCPH_FPRCL_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowChanged(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowChanging(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowDeleted(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowDeleting(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLCPH_FPRCL_CLPHRow(ByVal row As FPRCLCPH_FPRCL_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLCPH_FPRCL_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLPR_FPRCL_PRODDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLPR_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLPR_PR_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLPR_FPRCL_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLPR_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLPR_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLPR_PR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLPR_FPRCL_PRODRow
            Get
                Return CType(Me.Rows(index),FPRCLPR_FPRCL_PRODRow)
            End Get
        End Property
        
        Public Event FPRCLPR_FPRCL_PRODRowChanging As FPRCLPR_FPRCL_PRODRowChangeEventHandler
        
        Public Event FPRCLPR_FPRCL_PRODRowChanged As FPRCLPR_FPRCL_PRODRowChangeEventHandler
        
        Public Event FPRCLPR_FPRCL_PRODRowDeleting As FPRCLPR_FPRCL_PRODRowChangeEventHandler
        
        Public Event FPRCLPR_FPRCL_PRODRowDeleted As FPRCLPR_FPRCL_PRODRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLPR_FPRCL_PRODRow(ByVal row As FPRCLPR_FPRCL_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLPR_FPRCL_PRODRow(ByVal FPRCLPR_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLPR_PR_CODE_FK_PK As Integer) As FPRCLPR_FPRCL_PRODRow
            Dim rowFPRCLPR_FPRCL_PRODRow As FPRCLPR_FPRCL_PRODRow = CType(Me.NewRow,FPRCLPR_FPRCL_PRODRow)
            rowFPRCLPR_FPRCL_PRODRow.ItemArray = New Object() {FPRCLPR_FPRCL_CODE_FK_PK, FPRCLPR_PR_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLPR_FPRCL_PRODRow)
            Return rowFPRCLPR_FPRCL_PRODRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLPR_FPRCL_CODE_FK_PKFPRCLPR_PR_CODE_FK_PK(ByVal FPRCLPR_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLPR_PR_CODE_FK_PK As Integer) As FPRCLPR_FPRCL_PRODRow
            Return CType(Me.Rows.Find(New Object() {FPRCLPR_FPRCL_CODE_FK_PK, FPRCLPR_PR_CODE_FK_PK}),FPRCLPR_FPRCL_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLPR_FPRCL_PRODDataTable = CType(MyBase.Clone,FPRCLPR_FPRCL_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLPR_FPRCL_PRODDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLPR_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLPR_FPRCL_CODE_FK_PK")
            Me.columnFPRCLPR_PR_CODE_FK_PK = MyBase.Columns("FPRCLPR_PR_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLPR_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLPR_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLPR_FPRCL_CODE_FK_PK)
            Me.columnFPRCLPR_PR_CODE_FK_PK = New System.Data.DataColumn("FPRCLPR_PR_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLPR_FPRCL_CODE_FK_PK, Me.columnFPRCLPR_PR_CODE_FK_PK}, true))
            Me.columnFPRCLPR_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLPR_FPRCL_PRODRow() As FPRCLPR_FPRCL_PRODRow
            Return CType(Me.NewRow,FPRCLPR_FPRCL_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLPR_FPRCL_PRODRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLPR_FPRCL_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLPR_FPRCL_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLPR_FPRCL_PRODRowChanged(Me, New FPRCLPR_FPRCL_PRODRowChangeEvent(CType(e.Row,FPRCLPR_FPRCL_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLPR_FPRCL_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLPR_FPRCL_PRODRowChanging(Me, New FPRCLPR_FPRCL_PRODRowChangeEvent(CType(e.Row,FPRCLPR_FPRCL_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLPR_FPRCL_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLPR_FPRCL_PRODRowDeleted(Me, New FPRCLPR_FPRCL_PRODRowChangeEvent(CType(e.Row,FPRCLPR_FPRCL_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLPR_FPRCL_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLPR_FPRCL_PRODRowDeleting(Me, New FPRCLPR_FPRCL_PRODRowChangeEvent(CType(e.Row,FPRCLPR_FPRCL_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLPR_FPRCL_PRODRow(ByVal row As FPRCLPR_FPRCL_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLPR_FPRCL_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLSAC_FPRCL_SUBACTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLSAC_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLSAC_SAC_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLSAC_FPRCL_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLSAC_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLSAC_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLSAC_SAC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLSAC_FPRCL_SUBACTRow
            Get
                Return CType(Me.Rows(index),FPRCLSAC_FPRCL_SUBACTRow)
            End Get
        End Property
        
        Public Event FPRCLSAC_FPRCL_SUBACTRowChanging As FPRCLSAC_FPRCL_SUBACTRowChangeEventHandler
        
        Public Event FPRCLSAC_FPRCL_SUBACTRowChanged As FPRCLSAC_FPRCL_SUBACTRowChangeEventHandler
        
        Public Event FPRCLSAC_FPRCL_SUBACTRowDeleting As FPRCLSAC_FPRCL_SUBACTRowChangeEventHandler
        
        Public Event FPRCLSAC_FPRCL_SUBACTRowDeleted As FPRCLSAC_FPRCL_SUBACTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLSAC_FPRCL_SUBACTRow(ByVal row As FPRCLSAC_FPRCL_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLSAC_FPRCL_SUBACTRow(ByVal FPRCLSAC_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAC_SAC_CODE_FK_PK As Integer) As FPRCLSAC_FPRCL_SUBACTRow
            Dim rowFPRCLSAC_FPRCL_SUBACTRow As FPRCLSAC_FPRCL_SUBACTRow = CType(Me.NewRow,FPRCLSAC_FPRCL_SUBACTRow)
            rowFPRCLSAC_FPRCL_SUBACTRow.ItemArray = New Object() {FPRCLSAC_FPRCL_CODE_FK_PK, FPRCLSAC_SAC_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLSAC_FPRCL_SUBACTRow)
            Return rowFPRCLSAC_FPRCL_SUBACTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLSAC_FPRCL_CODE_FK_PKFPRCLSAC_SAC_CODE_FK_PK(ByVal FPRCLSAC_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAC_SAC_CODE_FK_PK As Integer) As FPRCLSAC_FPRCL_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {FPRCLSAC_FPRCL_CODE_FK_PK, FPRCLSAC_SAC_CODE_FK_PK}),FPRCLSAC_FPRCL_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLSAC_FPRCL_SUBACTDataTable = CType(MyBase.Clone,FPRCLSAC_FPRCL_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLSAC_FPRCL_SUBACTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLSAC_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLSAC_FPRCL_CODE_FK_PK")
            Me.columnFPRCLSAC_SAC_CODE_FK_PK = MyBase.Columns("FPRCLSAC_SAC_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLSAC_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLSAC_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLSAC_FPRCL_CODE_FK_PK)
            Me.columnFPRCLSAC_SAC_CODE_FK_PK = New System.Data.DataColumn("FPRCLSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLSAC_FPRCL_CODE_FK_PK, Me.columnFPRCLSAC_SAC_CODE_FK_PK}, true))
            Me.columnFPRCLSAC_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLSAC_FPRCL_SUBACTRow() As FPRCLSAC_FPRCL_SUBACTRow
            Return CType(Me.NewRow,FPRCLSAC_FPRCL_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLSAC_FPRCL_SUBACTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLSAC_FPRCL_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLSAC_FPRCL_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLSAC_FPRCL_SUBACTRowChanged(Me, New FPRCLSAC_FPRCL_SUBACTRowChangeEvent(CType(e.Row,FPRCLSAC_FPRCL_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLSAC_FPRCL_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLSAC_FPRCL_SUBACTRowChanging(Me, New FPRCLSAC_FPRCL_SUBACTRowChangeEvent(CType(e.Row,FPRCLSAC_FPRCL_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLSAC_FPRCL_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLSAC_FPRCL_SUBACTRowDeleted(Me, New FPRCLSAC_FPRCL_SUBACTRowChangeEvent(CType(e.Row,FPRCLSAC_FPRCL_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLSAC_FPRCL_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLSAC_FPRCL_SUBACTRowDeleting(Me, New FPRCLSAC_FPRCL_SUBACTRowChangeEvent(CType(e.Row,FPRCLSAC_FPRCL_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLSAC_FPRCL_SUBACTRow(ByVal row As FPRCLSAC_FPRCL_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLSAC_FPRCL_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLSAU_FPRCL_SUBAUXDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLSAU_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLSAU_SAU_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLSAU_FPRCL_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLSAU_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLSAU_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLSAU_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLSAU_FPRCL_SUBAUXRow
            Get
                Return CType(Me.Rows(index),FPRCLSAU_FPRCL_SUBAUXRow)
            End Get
        End Property
        
        Public Event FPRCLSAU_FPRCL_SUBAUXRowChanging As FPRCLSAU_FPRCL_SUBAUXRowChangeEventHandler
        
        Public Event FPRCLSAU_FPRCL_SUBAUXRowChanged As FPRCLSAU_FPRCL_SUBAUXRowChangeEventHandler
        
        Public Event FPRCLSAU_FPRCL_SUBAUXRowDeleting As FPRCLSAU_FPRCL_SUBAUXRowChangeEventHandler
        
        Public Event FPRCLSAU_FPRCL_SUBAUXRowDeleted As FPRCLSAU_FPRCL_SUBAUXRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLSAU_FPRCL_SUBAUXRow(ByVal row As FPRCLSAU_FPRCL_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLSAU_FPRCL_SUBAUXRow(ByVal FPRCLSAU_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAU_SAU_CODE_FK_PK As Integer) As FPRCLSAU_FPRCL_SUBAUXRow
            Dim rowFPRCLSAU_FPRCL_SUBAUXRow As FPRCLSAU_FPRCL_SUBAUXRow = CType(Me.NewRow,FPRCLSAU_FPRCL_SUBAUXRow)
            rowFPRCLSAU_FPRCL_SUBAUXRow.ItemArray = New Object() {FPRCLSAU_FPRCL_CODE_FK_PK, FPRCLSAU_SAU_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLSAU_FPRCL_SUBAUXRow)
            Return rowFPRCLSAU_FPRCL_SUBAUXRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLSAU_FPRCL_CODE_FK_PKFPRCLSAU_SAU_CODE_FK_PK(ByVal FPRCLSAU_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAU_SAU_CODE_FK_PK As Integer) As FPRCLSAU_FPRCL_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {FPRCLSAU_FPRCL_CODE_FK_PK, FPRCLSAU_SAU_CODE_FK_PK}),FPRCLSAU_FPRCL_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLSAU_FPRCL_SUBAUXDataTable = CType(MyBase.Clone,FPRCLSAU_FPRCL_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLSAU_FPRCL_SUBAUXDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLSAU_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLSAU_FPRCL_CODE_FK_PK")
            Me.columnFPRCLSAU_SAU_CODE_FK_PK = MyBase.Columns("FPRCLSAU_SAU_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLSAU_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLSAU_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLSAU_FPRCL_CODE_FK_PK)
            Me.columnFPRCLSAU_SAU_CODE_FK_PK = New System.Data.DataColumn("FPRCLSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLSAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLSAU_FPRCL_CODE_FK_PK, Me.columnFPRCLSAU_SAU_CODE_FK_PK}, true))
            Me.columnFPRCLSAU_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLSAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLSAU_FPRCL_SUBAUXRow() As FPRCLSAU_FPRCL_SUBAUXRow
            Return CType(Me.NewRow,FPRCLSAU_FPRCL_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLSAU_FPRCL_SUBAUXRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLSAU_FPRCL_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLSAU_FPRCL_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLSAU_FPRCL_SUBAUXRowChanged(Me, New FPRCLSAU_FPRCL_SUBAUXRowChangeEvent(CType(e.Row,FPRCLSAU_FPRCL_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLSAU_FPRCL_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLSAU_FPRCL_SUBAUXRowChanging(Me, New FPRCLSAU_FPRCL_SUBAUXRowChangeEvent(CType(e.Row,FPRCLSAU_FPRCL_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLSAU_FPRCL_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLSAU_FPRCL_SUBAUXRowDeleted(Me, New FPRCLSAU_FPRCL_SUBAUXRowChangeEvent(CType(e.Row,FPRCLSAU_FPRCL_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLSAU_FPRCL_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLSAU_FPRCL_SUBAUXRowDeleting(Me, New FPRCLSAU_FPRCL_SUBAUXRowChangeEvent(CType(e.Row,FPRCLSAU_FPRCL_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLSAU_FPRCL_SUBAUXRow(ByVal row As FPRCLSAU_FPRCL_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLSAU_FPRCL_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLSP_SECPRECLIN_SPECDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLSP_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLSP_SP_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLSP_SECPRECLIN_SPEC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLSP_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLSP_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLSP_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLSP_SECPRECLIN_SPECRow
            Get
                Return CType(Me.Rows(index),FPRCLSP_SECPRECLIN_SPECRow)
            End Get
        End Property
        
        Public Event FPRCLSP_SECPRECLIN_SPECRowChanging As FPRCLSP_SECPRECLIN_SPECRowChangeEventHandler
        
        Public Event FPRCLSP_SECPRECLIN_SPECRowChanged As FPRCLSP_SECPRECLIN_SPECRowChangeEventHandler
        
        Public Event FPRCLSP_SECPRECLIN_SPECRowDeleting As FPRCLSP_SECPRECLIN_SPECRowChangeEventHandler
        
        Public Event FPRCLSP_SECPRECLIN_SPECRowDeleted As FPRCLSP_SECPRECLIN_SPECRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLSP_SECPRECLIN_SPECRow(ByVal row As FPRCLSP_SECPRECLIN_SPECRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLSP_SECPRECLIN_SPECRow(ByVal FPRCLSP_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSP_SP_CODE_FK_PK As Integer) As FPRCLSP_SECPRECLIN_SPECRow
            Dim rowFPRCLSP_SECPRECLIN_SPECRow As FPRCLSP_SECPRECLIN_SPECRow = CType(Me.NewRow,FPRCLSP_SECPRECLIN_SPECRow)
            rowFPRCLSP_SECPRECLIN_SPECRow.ItemArray = New Object() {FPRCLSP_FPRCL_CODE_FK_PK, FPRCLSP_SP_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLSP_SECPRECLIN_SPECRow)
            Return rowFPRCLSP_SECPRECLIN_SPECRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLSP_FPRCL_CODE_FK_PKFPRCLSP_SP_CODE_FK_PK(ByVal FPRCLSP_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSP_SP_CODE_FK_PK As Integer) As FPRCLSP_SECPRECLIN_SPECRow
            Return CType(Me.Rows.Find(New Object() {FPRCLSP_FPRCL_CODE_FK_PK, FPRCLSP_SP_CODE_FK_PK}),FPRCLSP_SECPRECLIN_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLSP_SECPRECLIN_SPECDataTable = CType(MyBase.Clone,FPRCLSP_SECPRECLIN_SPECDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLSP_SECPRECLIN_SPECDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLSP_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLSP_FPRCL_CODE_FK_PK")
            Me.columnFPRCLSP_SP_CODE_FK_PK = MyBase.Columns("FPRCLSP_SP_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLSP_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLSP_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLSP_FPRCL_CODE_FK_PK)
            Me.columnFPRCLSP_SP_CODE_FK_PK = New System.Data.DataColumn("FPRCLSP_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLSP_FPRCL_CODE_FK_PK, Me.columnFPRCLSP_SP_CODE_FK_PK}, true))
            Me.columnFPRCLSP_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLSP_SECPRECLIN_SPECRow() As FPRCLSP_SECPRECLIN_SPECRow
            Return CType(Me.NewRow,FPRCLSP_SECPRECLIN_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLSP_SECPRECLIN_SPECRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLSP_SECPRECLIN_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLSP_SECPRECLIN_SPECRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLSP_SECPRECLIN_SPECRowChanged(Me, New FPRCLSP_SECPRECLIN_SPECRowChangeEvent(CType(e.Row,FPRCLSP_SECPRECLIN_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLSP_SECPRECLIN_SPECRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLSP_SECPRECLIN_SPECRowChanging(Me, New FPRCLSP_SECPRECLIN_SPECRowChangeEvent(CType(e.Row,FPRCLSP_SECPRECLIN_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLSP_SECPRECLIN_SPECRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLSP_SECPRECLIN_SPECRowDeleted(Me, New FPRCLSP_SECPRECLIN_SPECRowChangeEvent(CType(e.Row,FPRCLSP_SECPRECLIN_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLSP_SECPRECLIN_SPECRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLSP_SECPRECLIN_SPECRowDeleting(Me, New FPRCLSP_SECPRECLIN_SPECRowChangeEvent(CType(e.Row,FPRCLSP_SECPRECLIN_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLSP_SECPRECLIN_SPECRow(ByVal row As FPRCLSP_SECPRECLIN_SPECRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLSP_SECPRECLIN_SPECDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLAFS_FPRCL_AFSSAPSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLAFS_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLAFS_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLAFS_DATE_PK As System.Data.DataColumn
        
        Private columnFPRCLAFS_CDF_DOCUMENT_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLAFS_FPRCL_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLAFS_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLAFS_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLAFS_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLAFS_DATE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLAFS_DATE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLAFS_CDF_DOCUMENT_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLAFS_FPRCL_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FPRCLAFS_FPRCL_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FPRCLAFS_FPRCL_AFSSAPSRowChanging As FPRCLAFS_FPRCL_AFSSAPSRowChangeEventHandler
        
        Public Event FPRCLAFS_FPRCL_AFSSAPSRowChanged As FPRCLAFS_FPRCL_AFSSAPSRowChangeEventHandler
        
        Public Event FPRCLAFS_FPRCL_AFSSAPSRowDeleting As FPRCLAFS_FPRCL_AFSSAPSRowChangeEventHandler
        
        Public Event FPRCLAFS_FPRCL_AFSSAPSRowDeleted As FPRCLAFS_FPRCL_AFSSAPSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLAFS_FPRCL_AFSSAPSRow(ByVal row As FPRCLAFS_FPRCL_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLAFS_FPRCL_AFSSAPSRow(ByVal FPRCLAFS_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLAFS_SP_CODE_FK_PK As Integer, ByVal FPRCLAFS_DATE_PK As Date, ByVal FPRCLAFS_CDF_DOCUMENT_FK_PK As String) As FPRCLAFS_FPRCL_AFSSAPSRow
            Dim rowFPRCLAFS_FPRCL_AFSSAPSRow As FPRCLAFS_FPRCL_AFSSAPSRow = CType(Me.NewRow,FPRCLAFS_FPRCL_AFSSAPSRow)
            rowFPRCLAFS_FPRCL_AFSSAPSRow.ItemArray = New Object() {FPRCLAFS_FPRCL_CODE_FK_PK, FPRCLAFS_SP_CODE_FK_PK, FPRCLAFS_DATE_PK, FPRCLAFS_CDF_DOCUMENT_FK_PK}
            Me.Rows.Add(rowFPRCLAFS_FPRCL_AFSSAPSRow)
            Return rowFPRCLAFS_FPRCL_AFSSAPSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLAFS_FPRCL_CODE_FK_PKFPRCLAFS_SP_CODE_FK_PKFPRCLAFS_DATE_PKFPRCLAFS_CDF_DOCUMENT_FK_PK(ByVal FPRCLAFS_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLAFS_SP_CODE_FK_PK As Integer, ByVal FPRCLAFS_DATE_PK As Date, ByVal FPRCLAFS_CDF_DOCUMENT_FK_PK As String) As FPRCLAFS_FPRCL_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FPRCLAFS_FPRCL_CODE_FK_PK, FPRCLAFS_SP_CODE_FK_PK, FPRCLAFS_DATE_PK, FPRCLAFS_CDF_DOCUMENT_FK_PK}),FPRCLAFS_FPRCL_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLAFS_FPRCL_AFSSAPSDataTable = CType(MyBase.Clone,FPRCLAFS_FPRCL_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLAFS_FPRCL_AFSSAPSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLAFS_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLAFS_FPRCL_CODE_FK_PK")
            Me.columnFPRCLAFS_SP_CODE_FK_PK = MyBase.Columns("FPRCLAFS_SP_CODE_FK_PK")
            Me.columnFPRCLAFS_DATE_PK = MyBase.Columns("FPRCLAFS_DATE_PK")
            Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FPRCLAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLAFS_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLAFS_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLAFS_FPRCL_CODE_FK_PK)
            Me.columnFPRCLAFS_SP_CODE_FK_PK = New System.Data.DataColumn("FPRCLAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLAFS_SP_CODE_FK_PK)
            Me.columnFPRCLAFS_DATE_PK = New System.Data.DataColumn("FPRCLAFS_DATE_PK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLAFS_DATE_PK)
            Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK = New System.Data.DataColumn("FPRCLAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLAFS_FPRCL_CODE_FK_PK, Me.columnFPRCLAFS_SP_CODE_FK_PK, Me.columnFPRCLAFS_DATE_PK, Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFPRCLAFS_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLAFS_DATE_PK.AllowDBNull = false
            Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFPRCLAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLAFS_FPRCL_AFSSAPSRow() As FPRCLAFS_FPRCL_AFSSAPSRow
            Return CType(Me.NewRow,FPRCLAFS_FPRCL_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLAFS_FPRCL_AFSSAPSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLAFS_FPRCL_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLAFS_FPRCL_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLAFS_FPRCL_AFSSAPSRowChanged(Me, New FPRCLAFS_FPRCL_AFSSAPSRowChangeEvent(CType(e.Row,FPRCLAFS_FPRCL_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLAFS_FPRCL_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLAFS_FPRCL_AFSSAPSRowChanging(Me, New FPRCLAFS_FPRCL_AFSSAPSRowChangeEvent(CType(e.Row,FPRCLAFS_FPRCL_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLAFS_FPRCL_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLAFS_FPRCL_AFSSAPSRowDeleted(Me, New FPRCLAFS_FPRCL_AFSSAPSRowChangeEvent(CType(e.Row,FPRCLAFS_FPRCL_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLAFS_FPRCL_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLAFS_FPRCL_AFSSAPSRowDeleting(Me, New FPRCLAFS_FPRCL_AFSSAPSRowChangeEvent(CType(e.Row,FPRCLAFS_FPRCL_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLAFS_FPRCL_AFSSAPSRow(ByVal row As FPRCLAFS_FPRCL_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_SecuritePreclinique = New dsTheriaque_SecuritePreclinique
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLAFS_FPRCL_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCL_SECPRECLINRow
        Inherits System.Data.DataRow
        
        Private tableFPRCL_SECPRECLIN As FPRCL_SECPRECLINDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCL_SECPRECLIN = CType(Me.Table,FPRCL_SECPRECLINDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_TXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FPRCL_TXT' dans la table 'FPRCL_SECPRECLIN' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_DATECR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FPRCL_DATECR' dans la table 'FPRCL_SECPRECLIN' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FPRCL_DATEMJ' dans la table 'FPRCL_SECPRECLIN' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPRCL_TXTNull() As Boolean
            Return Me.IsNull(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPRCL_TXTNull()
            Me(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPRCL_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPRCL_DATECRNull()
            Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPRCL_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPRCL_DATEMJNull()
            Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLCCH_FPRCL_CLCHRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLCCH_FPRCL_CLCH As FPRCLCCH_FPRCL_CLCHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLCCH_FPRCL_CLCH = CType(Me.Table,FPRCLCCH_FPRCL_CLCHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLCCH_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLCCH_FPRCL_CLCH.FPRCLCCH_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLCCH_FPRCL_CLCH.FPRCLCCH_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPRCLCCH_FPRCL_CLCH.FPRCLCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPRCLCCH_FPRCL_CLCH.FPRCLCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLCPH_FPRCL_CLPHRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLCPH_FPRCL_CLPH As FPRCLCPH_FPRCL_CLPHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLCPH_FPRCL_CLPH = CType(Me.Table,FPRCLCPH_FPRCL_CLPHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLCPH_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLPR_FPRCL_PRODRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLPR_FPRCL_PROD As FPRCLPR_FPRCL_PRODDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLPR_FPRCL_PROD = CType(Me.Table,FPRCLPR_FPRCL_PRODDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLPR_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLPR_FPRCL_PROD.FPRCLPR_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLPR_FPRCL_PROD.FPRCLPR_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLPR_FPRCL_PROD.FPRCLPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLPR_FPRCL_PROD.FPRCLPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLSAC_FPRCL_SUBACTRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLSAC_FPRCL_SUBACT As FPRCLSAC_FPRCL_SUBACTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLSAC_FPRCL_SUBACT = CType(Me.Table,FPRCLSAC_FPRCL_SUBACTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLSAC_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLSAC_FPRCL_SUBACT.FPRCLSAC_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLSAC_FPRCL_SUBACT.FPRCLSAC_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLSAC_FPRCL_SUBACT.FPRCLSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLSAC_FPRCL_SUBACT.FPRCLSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLSAU_FPRCL_SUBAUXRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLSAU_FPRCL_SUBAUX As FPRCLSAU_FPRCL_SUBAUXDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLSAU_FPRCL_SUBAUX = CType(Me.Table,FPRCLSAU_FPRCL_SUBAUXDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLSAU_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLSAU_FPRCL_SUBAUX.FPRCLSAU_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLSAU_FPRCL_SUBAUX.FPRCLSAU_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLSAU_FPRCL_SUBAUX.FPRCLSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLSAU_FPRCL_SUBAUX.FPRCLSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLSP_SECPRECLIN_SPECRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLSP_SECPRECLIN_SPEC As FPRCLSP_SECPRECLIN_SPECDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLSP_SECPRECLIN_SPEC = CType(Me.Table,FPRCLSP_SECPRECLIN_SPECDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLSP_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLSP_SECPRECLIN_SPEC.FPRCLSP_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLSP_SECPRECLIN_SPEC.FPRCLSP_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLSP_SECPRECLIN_SPEC.FPRCLSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLSP_SECPRECLIN_SPEC.FPRCLSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLAFS_FPRCL_AFSSAPSRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLAFS_FPRCL_AFSSAPS As FPRCLAFS_FPRCL_AFSSAPSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLAFS_FPRCL_AFSSAPS = CType(Me.Table,FPRCLAFS_FPRCL_AFSSAPSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLAFS_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPRCLAFS_FPRCL_AFSSAPS.FPRCLAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCL_SECPRECLINRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCL_SECPRECLINRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCL_SECPRECLINRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCL_SECPRECLINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLCCH_FPRCL_CLCHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLCCH_FPRCL_CLCHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLCCH_FPRCL_CLCHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLCCH_FPRCL_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLCPH_FPRCL_CLPHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLCPH_FPRCL_CLPHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLCPH_FPRCL_CLPHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLCPH_FPRCL_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLPR_FPRCL_PRODRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLPR_FPRCL_PRODRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLPR_FPRCL_PRODRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLPR_FPRCL_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLSAC_FPRCL_SUBACTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLSAC_FPRCL_SUBACTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLSAC_FPRCL_SUBACTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLSAC_FPRCL_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLSAU_FPRCL_SUBAUXRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLSAU_FPRCL_SUBAUXRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLSAU_FPRCL_SUBAUXRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLSAU_FPRCL_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLSP_SECPRECLIN_SPECRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLSP_SECPRECLIN_SPECRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLSP_SECPRECLIN_SPECRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLSP_SECPRECLIN_SPECRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLAFS_FPRCL_AFSSAPSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLAFS_FPRCL_AFSSAPSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLAFS_FPRCL_AFSSAPSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLAFS_FPRCL_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_SecuritePrecliniqueTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPRCL_SECPRECLINTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCL_SECPRECLIN"
            tableMapping.ColumnMappings.Add("FPRCL_CODE_SQ_PK", "FPRCL_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FPRCL_TXT", "FPRCL_TXT")
            tableMapping.ColumnMappings.Add("FPRCL_DATECR", "FPRCL_DATECR")
            tableMapping.ColumnMappings.Add("FPRCL_DATEMJ", "FPRCL_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCL_SECPRECLIN] WHERE (([FPRCL_CODE_SQ_PK] = @Original"& _ 
                "_FPRCL_CODE_SQ_PK) AND ((@IsNull_FPRCL_DATECR = 1 AND [FPRCL_DATECR] IS NULL) OR"& _ 
                " ([FPRCL_DATECR] = @Original_FPRCL_DATECR)) AND ((@IsNull_FPRCL_DATEMJ = 1 AND ["& _ 
                "FPRCL_DATEMJ] IS NULL) OR ([FPRCL_DATEMJ] = @Original_FPRCL_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCL_SECPRECLIN] ([FPRCL_CODE_SQ_PK], [FPRCL_TXT], [FPR"& _ 
                "CL_DATECR], [FPRCL_DATEMJ]) VALUES (@FPRCL_CODE_SQ_PK, @FPRCL_TXT, @FPRCL_DATECR"& _ 
                ", @FPRCL_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEM"& _ 
                "J FROM THERIAQUE.FPRCL_SECPRECLIN WHERE (FPRCL_CODE_SQ_PK = @FPRCL_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_TXT", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_TXT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCL_SECPRECLIN] SET [FPRCL_CODE_SQ_PK] = @FPRCL_CODE_SQ_PK,"& _ 
                " [FPRCL_TXT] = @FPRCL_TXT, [FPRCL_DATECR] = @FPRCL_DATECR, [FPRCL_DATEMJ] = @FPR"& _ 
                "CL_DATEMJ WHERE (([FPRCL_CODE_SQ_PK] = @Original_FPRCL_CODE_SQ_PK) AND ((@IsNull"& _ 
                "_FPRCL_DATECR = 1 AND [FPRCL_DATECR] IS NULL) OR ([FPRCL_DATECR] = @Original_FPR"& _ 
                "CL_DATECR)) AND ((@IsNull_FPRCL_DATEMJ = 1 AND [FPRCL_DATEMJ] IS NULL) OR ([FPRC"& _ 
                "L_DATEMJ] = @Original_FPRCL_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRC"& _ 
                "L_DATECR, FPRCL_DATEMJ FROM THERIAQUE.FPRCL_SECPRECLIN WHERE (FPRCL_CODE_SQ_PK ="& _ 
                " @FPRCL_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_TXT", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_TXT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEMJ FROM THERIAQUE.FPR" & _
                "CL_SECPRECLIN"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEMJ FROM THERIAQUE.FPR" & _
                "CL_SECPRECLIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCL_CODE_SQ_PK = @FPRCL_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable = New dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable, ByVal FPRCL_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCL_CODE_SQ_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable = New dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCL_SECPRECLINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCL_SECPRECLIN")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCL_CODE_SQ_PK As Integer, ByVal Original_FPRCL_DATECR As System.Nullable(Of Date), ByVal Original_FPRCL_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCL_CODE_SQ_PK, Integer)
            If (Original_FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCL_CODE_SQ_PK As Integer, ByVal FPRCL_TXT As String, ByVal FPRCL_DATECR As System.Nullable(Of Date), ByVal FPRCL_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            If (FPRCL_TXT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCL_TXT, String)
            End If
            If (FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCL_CODE_SQ_PK As Integer, ByVal FPRCL_TXT As String, ByVal FPRCL_DATECR As System.Nullable(Of Date), ByVal FPRCL_DATEMJ As System.Nullable(Of Date), ByVal Original_FPRCL_CODE_SQ_PK As Integer, ByVal Original_FPRCL_DATECR As System.Nullable(Of Date), ByVal Original_FPRCL_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            If (FPRCL_TXT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCL_TXT, String)
            End If
            If (FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPRCL_CODE_SQ_PK, Integer)
            If (Original_FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPRCLCCH_FPRCL_CLCHTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLCCH_FPRCL_CLCH"
            tableMapping.ColumnMappings.Add("FPRCLCCH_FPRCL_CODE_FK_PK", "FPRCLCCH_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLCCH_CCH_CODE_FK_PK", "FPRCLCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLCCH_FPRCL_CLCH] WHERE (([FPRCLCCH_FPRCL_CODE_FK_PK]" & _
                " = @Original_FPRCLCCH_FPRCL_CODE_FK_PK) AND ([FPRCLCCH_CCH_CODE_FK_PK] = @Origin" & _
                "al_FPRCLCCH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLCCH_FPRCL_CLCH] ([FPRCLCCH_FPRCL_CODE_FK_PK], [FPRC" & _
                "LCCH_CCH_CODE_FK_PK]) VALUES (@FPRCLCCH_FPRCL_CODE_FK_PK, @FPRCLCCH_CCH_CODE_FK_" & _
                "PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLCCH_FPRCL_CODE_FK_PK, FPRCLCCH_CCH_CODE_FK_PK FROM THERIAQUE.F" & _
                "PRCLCCH_FPRCL_CLCH WHERE (FPRCLCCH_CCH_CODE_FK_PK = @FPRCLCCH_CCH_CODE_FK_PK) AN" & _
                "D (FPRCLCCH_FPRCL_CODE_FK_PK = @FPRCLCCH_FPRCL_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLCCH_FPRCL_CLCH] SET [FPRCLCCH_FPRCL_CODE_FK_PK] = @FPRCL" & _
                "CCH_FPRCL_CODE_FK_PK, [FPRCLCCH_CCH_CODE_FK_PK] = @FPRCLCCH_CCH_CODE_FK_PK WHERE" & _
                " (([FPRCLCCH_FPRCL_CODE_FK_PK] = @Original_FPRCLCCH_FPRCL_CODE_FK_PK) AND ([FPRC" & _
                "LCCH_CCH_CODE_FK_PK] = @Original_FPRCLCCH_CCH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLCCH_FPR" & _
                "CL_CODE_FK_PK, FPRCLCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPRCLCCH_FPRCL_CLCH WHERE " & _
                "(FPRCLCCH_CCH_CODE_FK_PK = @FPRCLCCH_CCH_CODE_FK_PK) AND (FPRCLCCH_FPRCL_CODE_FK" & _
                "_PK = @FPRCLCCH_FPRCL_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLCCH_FPRCL_CODE_FK_PK, FPRCLCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPRCLCCH" & _
                "_FPRCL_CLCH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLCCH_FPRCL_CODE_FK_PK, FPRCLCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPRCLCCH" & _
                "_FPRCL_CLCH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLCCH_FPRCL_CODE_FK_PK = @FPRCLCCH_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCCH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable = New dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable, ByVal FPRCLCCH_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLCCH_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLCCH_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLCCH_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable = New dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLCCH_FPRCL_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLCCH_FPRCL_CLCH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLCCH_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLCCH_FPRCL_CODE_FK_PK, Integer)
            If (Original_FPRCLCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLCCH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLCCH_FPRCL_CODE_FK_PK, Integer)
            If (FPRCLCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLCCH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCCH_CCH_CODE_FK_PK As String, ByVal Original_FPRCLCCH_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLCCH_FPRCL_CODE_FK_PK, Integer)
            If (FPRCLCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLCCH_FPRCL_CODE_FK_PK, Integer)
            If (Original_FPRCLCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPRCLCPH_FPRCL_CLPHTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLCPH_FPRCL_CLPH"
            tableMapping.ColumnMappings.Add("FPRCLCPH_FPRCL_CODE_FK_PK", "FPRCLCPH_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLCPH_CPH_CODE_FK_PK", "FPRCLCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLCPH_FPRCL_CLPH] WHERE (([FPRCLCPH_FPRCL_CODE_FK_PK]"& _ 
                " = @Original_FPRCLCPH_FPRCL_CODE_FK_PK) AND ([FPRCLCPH_CPH_CODE_FK_PK] = @Origin"& _ 
                "al_FPRCLCPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLCPH_FPRCL_CLPH] ([FPRCLCPH_FPRCL_CODE_FK_PK], [FPRC"& _ 
                "LCPH_CPH_CODE_FK_PK]) VALUES (@FPRCLCPH_FPRCL_CODE_FK_PK, @FPRCLCPH_CPH_CODE_FK_"& _ 
                "PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.F"& _ 
                "PRCLCPH_FPRCL_CLPH WHERE (FPRCLCPH_CPH_CODE_FK_PK = @FPRCLCPH_CPH_CODE_FK_PK) AN"& _ 
                "D (FPRCLCPH_FPRCL_CODE_FK_PK = @FPRCLCPH_FPRCL_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLCPH_FPRCL_CLPH] SET [FPRCLCPH_FPRCL_CODE_FK_PK] = @FPRCL"& _ 
                "CPH_FPRCL_CODE_FK_PK, [FPRCLCPH_CPH_CODE_FK_PK] = @FPRCLCPH_CPH_CODE_FK_PK WHERE"& _ 
                " (([FPRCLCPH_FPRCL_CODE_FK_PK] = @Original_FPRCLCPH_FPRCL_CODE_FK_PK) AND ([FPRC"& _ 
                "LCPH_CPH_CODE_FK_PK] = @Original_FPRCLCPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCLCPH_FPR"& _ 
                "CL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPRCLCPH_FPRCL_CLPH WHERE "& _ 
                "(FPRCLCPH_CPH_CODE_FK_PK = @FPRCLCPH_CPH_CODE_FK_PK) AND (FPRCLCPH_FPRCL_CODE_FK"& _ 
                "_PK = @FPRCLCPH_FPRCL_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPRCLCPH" & _
                "_FPRCL_CLPH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPRCLCPH" & _
                "_FPRCL_CLPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLCPH_FPRCL_CODE_FK_PK = @FPRCLCPH_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable = New dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable, ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable = New dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLCPH_FPRCL_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLCPH_FPRCL_CLPH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (Original_FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String, ByVal Original_FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (Original_FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPRCLPR_FPRCL_PRODTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLPR_FPRCL_PROD"
            tableMapping.ColumnMappings.Add("FPRCLPR_FPRCL_CODE_FK_PK", "FPRCLPR_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLPR_PR_CODE_FK_PK", "FPRCLPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLPR_FPRCL_PROD] WHERE (([FPRCLPR_FPRCL_CODE_FK_PK] =" & _
                " @Original_FPRCLPR_FPRCL_CODE_FK_PK) AND ([FPRCLPR_PR_CODE_FK_PK] = @Original_FP" & _
                "RCLPR_PR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLPR_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLPR_FPRCL_PROD] ([FPRCLPR_FPRCL_CODE_FK_PK], [FPRCLP" & _
                "R_PR_CODE_FK_PK]) VALUES (@FPRCLPR_FPRCL_CODE_FK_PK, @FPRCLPR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S" & _
                "ELECT FPRCLPR_FPRCL_CODE_FK_PK, FPRCLPR_PR_CODE_FK_PK FROM THERIAQUE.FPRCLPR_FPR" & _
                "CL_PROD WHERE (FPRCLPR_FPRCL_CODE_FK_PK = @FPRCLPR_FPRCL_CODE_FK_PK) AND (FPRCLP" & _
                "R_PR_CODE_FK_PK = @FPRCLPR_PR_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLPR_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLPR_FPRCL_PROD] SET [FPRCLPR_FPRCL_CODE_FK_PK] = @FPRCLPR" & _
                "_FPRCL_CODE_FK_PK, [FPRCLPR_PR_CODE_FK_PK] = @FPRCLPR_PR_CODE_FK_PK WHERE (([FPR" & _
                "CLPR_FPRCL_CODE_FK_PK] = @Original_FPRCLPR_FPRCL_CODE_FK_PK) AND ([FPRCLPR_PR_CO" & _
                "DE_FK_PK] = @Original_FPRCLPR_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLPR_FPRCL_CODE_FK_PK," & _
                " FPRCLPR_PR_CODE_FK_PK FROM THERIAQUE.FPRCLPR_FPRCL_PROD WHERE (FPRCLPR_FPRCL_CO" & _
                "DE_FK_PK = @FPRCLPR_FPRCL_CODE_FK_PK) AND (FPRCLPR_PR_CODE_FK_PK = @FPRCLPR_PR_C" & _
                "ODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLPR_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLPR_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLPR_FPRCL_CODE_FK_PK, FPRCLPR_PR_CODE_FK_PK FROM THERIAQUE.FPRCLPR_FPR" & _
                "CL_PROD"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLPR_FPRCL_CODE_FK_PK, FPRCLPR_PR_CODE_FK_PK FROM THERIAQUE.FPRCLPR_FPR" & _
                "CL_PROD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLPR_FPRCL_CODE_FK_PK = @FPRCLPR_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLPR_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLPR_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable = New dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable, ByVal FPRCLPR_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLPR_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLPR_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLPR_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable = New dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLPR_FPRCL_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLPR_FPRCL_PROD")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLPR_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLPR_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLPR_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLPR_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLPR_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLPR_PR_CODE_FK_PK As Integer, ByVal Original_FPRCLPR_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLPR_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLPR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLPR_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPRCLSAC_FPRCL_SUBACTTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLSAC_FPRCL_SUBACT"
            tableMapping.ColumnMappings.Add("FPRCLSAC_FPRCL_CODE_FK_PK", "FPRCLSAC_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLSAC_SAC_CODE_FK_PK", "FPRCLSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLSAC_FPRCL_SUBACT] WHERE (([FPRCLSAC_FPRCL_CODE_FK_P"& _ 
                "K] = @Original_FPRCLSAC_FPRCL_CODE_FK_PK) AND ([FPRCLSAC_SAC_CODE_FK_PK] = @Orig"& _ 
                "inal_FPRCLSAC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLSAC_FPRCL_SUBACT] ([FPRCLSAC_FPRCL_CODE_FK_PK], [FP"& _ 
                "RCLSAC_SAC_CODE_FK_PK]) VALUES (@FPRCLSAC_FPRCL_CODE_FK_PK, @FPRCLSAC_SAC_CODE_F"& _ 
                "K_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCLSAC_FPRCL_CODE_FK_PK, FPRCLSAC_SAC_CODE_FK_PK FROM THERIAQUE"& _ 
                ".FPRCLSAC_FPRCL_SUBACT WHERE (FPRCLSAC_FPRCL_CODE_FK_PK = @FPRCLSAC_FPRCL_CODE_F"& _ 
                "K_PK) AND (FPRCLSAC_SAC_CODE_FK_PK = @FPRCLSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLSAC_FPRCL_SUBACT] SET [FPRCLSAC_FPRCL_CODE_FK_PK] = @FPR"& _ 
                "CLSAC_FPRCL_CODE_FK_PK, [FPRCLSAC_SAC_CODE_FK_PK] = @FPRCLSAC_SAC_CODE_FK_PK WHE"& _ 
                "RE (([FPRCLSAC_FPRCL_CODE_FK_PK] = @Original_FPRCLSAC_FPRCL_CODE_FK_PK) AND ([FP"& _ 
                "RCLSAC_SAC_CODE_FK_PK] = @Original_FPRCLSAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCLSAC_F"& _ 
                "PRCL_CODE_FK_PK, FPRCLSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPRCLSAC_FPRCL_SUBACT WH"& _ 
                "ERE (FPRCLSAC_FPRCL_CODE_FK_PK = @FPRCLSAC_FPRCL_CODE_FK_PK) AND (FPRCLSAC_SAC_C"& _ 
                "ODE_FK_PK = @FPRCLSAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLSAC_FPRCL_CODE_FK_PK, FPRCLSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPRCLSAC" & _
                "_FPRCL_SUBACT"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLSAC_FPRCL_CODE_FK_PK, FPRCLSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPRCLSAC" & _
                "_FPRCL_SUBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLSAC_FPRCL_CODE_FK_PK = @FPRCLSAC_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAC_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable = New dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable, ByVal FPRCLSAC_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLSAC_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLSAC_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLSAC_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable = New dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAC_FPRCL_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLSAC_FPRCL_SUBACT")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLSAC_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLSAC_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLSAC_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLSAC_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLSAC_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FPRCLSAC_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLSAC_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLSAC_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPRCLSAU_FPRCL_SUBAUXTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLSAU_FPRCL_SUBAUX"
            tableMapping.ColumnMappings.Add("FPRCLSAU_FPRCL_CODE_FK_PK", "FPRCLSAU_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLSAU_SAU_CODE_FK_PK", "FPRCLSAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLSAU_FPRCL_SUBAUX] WHERE (([FPRCLSAU_FPRCL_CODE_FK_P" & _
                "K] = @Original_FPRCLSAU_FPRCL_CODE_FK_PK) AND ([FPRCLSAU_SAU_CODE_FK_PK] = @Orig" & _
                "inal_FPRCLSAU_SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLSAU_FPRCL_SUBAUX] ([FPRCLSAU_FPRCL_CODE_FK_PK], [FP" & _
                "RCLSAU_SAU_CODE_FK_PK]) VALUES (@FPRCLSAU_FPRCL_CODE_FK_PK, @FPRCLSAU_SAU_CODE_F" & _
                "K_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLSAU_FPRCL_CODE_FK_PK, FPRCLSAU_SAU_CODE_FK_PK FROM THERIAQUE" & _
                ".FPRCLSAU_FPRCL_SUBAUX WHERE (FPRCLSAU_FPRCL_CODE_FK_PK = @FPRCLSAU_FPRCL_CODE_F" & _
                "K_PK) AND (FPRCLSAU_SAU_CODE_FK_PK = @FPRCLSAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLSAU_FPRCL_SUBAUX] SET [FPRCLSAU_FPRCL_CODE_FK_PK] = @FPR" & _
                "CLSAU_FPRCL_CODE_FK_PK, [FPRCLSAU_SAU_CODE_FK_PK] = @FPRCLSAU_SAU_CODE_FK_PK WHE" & _
                "RE (([FPRCLSAU_FPRCL_CODE_FK_PK] = @Original_FPRCLSAU_FPRCL_CODE_FK_PK) AND ([FP" & _
                "RCLSAU_SAU_CODE_FK_PK] = @Original_FPRCLSAU_SAU_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLSAU_F" & _
                "PRCL_CODE_FK_PK, FPRCLSAU_SAU_CODE_FK_PK FROM THERIAQUE.FPRCLSAU_FPRCL_SUBAUX WH" & _
                "ERE (FPRCLSAU_FPRCL_CODE_FK_PK = @FPRCLSAU_FPRCL_CODE_FK_PK) AND (FPRCLSAU_SAU_C" & _
                "ODE_FK_PK = @FPRCLSAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLSAU_FPRCL_CODE_FK_PK, FPRCLSAU_SAU_CODE_FK_PK FROM THERIAQUE.FPRCLSAU" & _
                "_FPRCL_SUBAUX"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLSAU_FPRCL_CODE_FK_PK, FPRCLSAU_SAU_CODE_FK_PK FROM THERIAQUE.FPRCLSAU" & _
                "_FPRCL_SUBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLSAU_FPRCL_CODE_FK_PK = @FPRCLSAU_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSAU_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable = New dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable, ByVal FPRCLSAU_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLSAU_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLSAU_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLSAU_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable = New dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSAU_FPRCL_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLSAU_FPRCL_SUBAUX")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLSAU_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLSAU_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLSAU_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLSAU_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLSAU_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSAU_SAU_CODE_FK_PK As Integer, ByVal Original_FPRCLSAU_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLSAU_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLSAU_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPRCLSP_SECPRECLIN_SPECTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLSP_SECPRECLIN_SPEC"
            tableMapping.ColumnMappings.Add("FPRCLSP_FPRCL_CODE_FK_PK", "FPRCLSP_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLSP_SP_CODE_FK_PK", "FPRCLSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLSP_SECPRECLIN_SPEC] WHERE (([FPRCLSP_FPRCL_CODE_FK_"& _ 
                "PK] = @Original_FPRCLSP_FPRCL_CODE_FK_PK) AND ([FPRCLSP_SP_CODE_FK_PK] = @Origin"& _ 
                "al_FPRCLSP_SP_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSP_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLSP_SECPRECLIN_SPEC] ([FPRCLSP_FPRCL_CODE_FK_PK], [F"& _ 
                "PRCLSP_SP_CODE_FK_PK]) VALUES (@FPRCLSP_FPRCL_CODE_FK_PK, @FPRCLSP_SP_CODE_FK_PK"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCLSP_FPRCL_CODE_FK_PK, FPRCLSP_SP_CODE_FK_PK FROM THERIAQUE.FPRCLS"& _ 
                "P_SECPRECLIN_SPEC WHERE (FPRCLSP_FPRCL_CODE_FK_PK = @FPRCLSP_FPRCL_CODE_FK_PK) A"& _ 
                "ND (FPRCLSP_SP_CODE_FK_PK = @FPRCLSP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSP_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLSP_SECPRECLIN_SPEC] SET [FPRCLSP_FPRCL_CODE_FK_PK] = @FP"& _ 
                "RCLSP_FPRCL_CODE_FK_PK, [FPRCLSP_SP_CODE_FK_PK] = @FPRCLSP_SP_CODE_FK_PK WHERE ("& _ 
                "([FPRCLSP_FPRCL_CODE_FK_PK] = @Original_FPRCLSP_FPRCL_CODE_FK_PK) AND ([FPRCLSP_"& _ 
                "SP_CODE_FK_PK] = @Original_FPRCLSP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCLSP_FPRCL_CODE_F"& _ 
                "K_PK, FPRCLSP_SP_CODE_FK_PK FROM THERIAQUE.FPRCLSP_SECPRECLIN_SPEC WHERE (FPRCLS"& _ 
                "P_FPRCL_CODE_FK_PK = @FPRCLSP_FPRCL_CODE_FK_PK) AND (FPRCLSP_SP_CODE_FK_PK = @FP"& _ 
                "RCLSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSP_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSP_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLSP_FPRCL_CODE_FK_PK, FPRCLSP_SP_CODE_FK_PK FROM THERIAQUE.FPRCLSP_SEC" & _
                "PRECLIN_SPEC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLSP_FPRCL_CODE_FK_PK, FPRCLSP_SP_CODE_FK_PK FROM THERIAQUE.FPRCLSP_SEC" & _
                "PRECLIN_SPEC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLSP_FPRCL_CODE_FK_PK = @FPRCLSP_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLSP_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLSP_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable = New dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable, ByVal FPRCLSP_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLSP_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLSP_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLSP_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable = New dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLSP_SECPRECLIN_SPECDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLSP_SECPRECLIN_SPEC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLSP_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLSP_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLSP_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLSP_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLSP_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLSP_SP_CODE_FK_PK As Integer, ByVal Original_FPRCLSP_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLSP_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLSP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLSP_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPRCLAFS_FPRCL_AFSSAPSTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLAFS_FPRCL_AFSSAPS"
            tableMapping.ColumnMappings.Add("FPRCLAFS_FPRCL_CODE_FK_PK", "FPRCLAFS_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLAFS_SP_CODE_FK_PK", "FPRCLAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLAFS_DATE_PK", "FPRCLAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FPRCLAFS_CDF_DOCUMENT_FK_PK", "FPRCLAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLAFS_FPRCL_AFSSAPS] WHERE (([FPRCLAFS_FPRCL_CODE_FK_" & _
                "PK] = @Original_FPRCLAFS_FPRCL_CODE_FK_PK) AND ([FPRCLAFS_SP_CODE_FK_PK] = @Orig" & _
                "inal_FPRCLAFS_SP_CODE_FK_PK) AND ([FPRCLAFS_DATE_PK] = @Original_FPRCLAFS_DATE_P" & _
                "K) AND ([FPRCLAFS_CDF_DOCUMENT_FK_PK] = @Original_FPRCLAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_DATE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLAFS_FPRCL_AFSSAPS] ([FPRCLAFS_FPRCL_CODE_FK_PK], [F" & _
                "PRCLAFS_SP_CODE_FK_PK], [FPRCLAFS_DATE_PK], [FPRCLAFS_CDF_DOCUMENT_FK_PK]) VALUE" & _
                "S (@FPRCLAFS_FPRCL_CODE_FK_PK, @FPRCLAFS_SP_CODE_FK_PK, @FPRCLAFS_DATE_PK, @FPRC" & _
                "LAFS_CDF_DOCUMENT_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLAFS_FPRCL_CODE_FK_PK, FPRCLAFS_SP_CODE_FK" & _
                "_PK, FPRCLAFS_DATE_PK, FPRCLAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPRCLAFS_FPRCL" & _
                "_AFSSAPS WHERE (FPRCLAFS_CDF_DOCUMENT_FK_PK = @FPRCLAFS_CDF_DOCUMENT_FK_PK) AND " & _
                "(FPRCLAFS_DATE_PK = @FPRCLAFS_DATE_PK) AND (FPRCLAFS_FPRCL_CODE_FK_PK = @FPRCLAF" & _
                "S_FPRCL_CODE_FK_PK) AND (FPRCLAFS_SP_CODE_FK_PK = @FPRCLAFS_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_DATE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLAFS_FPRCL_AFSSAPS] SET [FPRCLAFS_FPRCL_CODE_FK_PK] = @FP" & _
                "RCLAFS_FPRCL_CODE_FK_PK, [FPRCLAFS_SP_CODE_FK_PK] = @FPRCLAFS_SP_CODE_FK_PK, [FP" & _
                "RCLAFS_DATE_PK] = @FPRCLAFS_DATE_PK, [FPRCLAFS_CDF_DOCUMENT_FK_PK] = @FPRCLAFS_C" & _
                "DF_DOCUMENT_FK_PK WHERE (([FPRCLAFS_FPRCL_CODE_FK_PK] = @Original_FPRCLAFS_FPRCL" & _
                "_CODE_FK_PK) AND ([FPRCLAFS_SP_CODE_FK_PK] = @Original_FPRCLAFS_SP_CODE_FK_PK) A" & _
                "ND ([FPRCLAFS_DATE_PK] = @Original_FPRCLAFS_DATE_PK) AND ([FPRCLAFS_CDF_DOCUMENT" & _
                "_FK_PK] = @Original_FPRCLAFS_CDF_DOCUMENT_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLAFS_FPRCL_CODE_F" & _
                "K_PK, FPRCLAFS_SP_CODE_FK_PK, FPRCLAFS_DATE_PK, FPRCLAFS_CDF_DOCUMENT_FK_PK FROM" & _
                " THERIAQUE.FPRCLAFS_FPRCL_AFSSAPS WHERE (FPRCLAFS_CDF_DOCUMENT_FK_PK = @FPRCLAFS" & _
                "_CDF_DOCUMENT_FK_PK) AND (FPRCLAFS_DATE_PK = @FPRCLAFS_DATE_PK) AND (FPRCLAFS_FP" & _
                "RCL_CODE_FK_PK = @FPRCLAFS_FPRCL_CODE_FK_PK) AND (FPRCLAFS_SP_CODE_FK_PK = @FPRC" & _
                "LAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_DATE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_DATE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLAFS_FPRCL_CODE_FK_PK, FPRCLAFS_SP_CODE_FK_PK, FPRCLAFS_DATE_PK, FPRCL" & _
                "AFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPRCLAFS_FPRCL_AFSSAPS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLAFS_FPRCL_CODE_FK_PK, FPRCLAFS_SP_CODE_FK_PK, FPRCLAFS_DATE_PK, FPRCL" & _
                "AFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPRCLAFS_FPRCL_AFSSAPS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLAFS_FPR" & _
                "CL_CODE_FK_PK = @FPRCLAFS_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLAFS_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable = New dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable, ByVal FPRCLAFS_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLAFS_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLAFS_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLAFS_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable = New dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_SecuritePreclinique.FPRCLAFS_FPRCL_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_SecuritePreclinique) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLAFS_FPRCL_AFSSAPS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLAFS_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPRCLAFS_DATE_PK As Date, ByVal Original_FPRCLAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLAFS_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPRCLAFS_DATE_PK, Date)
            If (Original_FPRCLAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPRCLAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLAFS_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLAFS_SP_CODE_FK_PK As Integer, ByVal FPRCLAFS_DATE_PK As Date, ByVal FPRCLAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLAFS_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPRCLAFS_DATE_PK, Date)
            If (FPRCLAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPRCLAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLAFS_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLAFS_SP_CODE_FK_PK As Integer, ByVal FPRCLAFS_DATE_PK As Date, ByVal FPRCLAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FPRCLAFS_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPRCLAFS_DATE_PK As Date, ByVal Original_FPRCLAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLAFS_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPRCLAFS_DATE_PK, Date)
            If (FPRCLAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPRCLAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPRCLAFS_FPRCL_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPRCLAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPRCLAFS_DATE_PK, Date)
            If (Original_FPRCLAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FPRCLAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
