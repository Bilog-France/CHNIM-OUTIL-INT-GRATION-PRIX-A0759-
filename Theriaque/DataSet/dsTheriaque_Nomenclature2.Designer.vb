'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Nomenclature2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Nomenclature2
    Inherits Global.System.Data.DataSet
    
    Private tableSYGSP_SYNONYME_GSP As SYGSP_SYNONYME_GSPDataTable
    
    Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
    
    Private tablePRE_PRESENTATION As PRE_PRESENTATIONDataTable
    
    Private tablePREUCD_COMMENT_DOSEUCD As PREUCD_COMMENT_DOSEUCDDataTable
    
    Private tableCOCONT_COMPO_CONTENANT As COCONT_COMPO_CONTENANTDataTable
    
    Private tablePRECONT_PRE_CONTENANT As PRECONT_PRE_CONTENANTDataTable
    
    Private tablePREMAT_PRE_MATERIAU As PREMAT_PRE_MATERIAUDataTable
    
    Private tablePRECAR_PRESENTATION_CARACTCOMP As PRECAR_PRESENTATION_CARACTCOMPDataTable
    
    Private tablePRECEMB_PRE_CAREMBALLAGE As PRECEMB_PRE_CAREMBALLAGEDataTable
    
    Private tablePRETSS_PRESENTATION_TAUX As PRETSS_PRESENTATION_TAUXDataTable
    
    Private tablePRETSSH_PRE_TAUX_HOP As PRETSSH_PRE_TAUX_HOPDataTable
    
    Private tablePRESTP_PRE_STP As PRESTP_PRE_STPDataTable
    
    Private tablePRESTC_STATUTCOMP_PRESENT As PRESTC_STATUTCOMP_PRESENTDataTable
    
    Private tablePRESTR_STATUT_REMBOURST As PRESTR_STATUT_REMBOURSTDataTable
    
    Private tablePRESTRTX_TEXTE_STAT_REMBOURST As PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
    
    Private tablePREPER_PRESENTATION_PERIO_CSV As PREPER_PRESENTATION_PERIO_CSVDataTable
    
    Private tablePERCS_PERIODE_COND_CSV As PERCS_PERIODE_COND_CSVDataTable
    
    Private tablePRECSVTX_TEXTE_CONSERV As PRECSVTX_TEXTE_CONSERVDataTable
    
    Private tablePREDILI_LIEU_DISPENSAT As PREDILI_LIEU_DISPENSATDataTable
    
    Private tablePREDICO_COMMENT_DISPENSAT As PREDICO_COMMENT_DISPENSATDataTable
    
    Private tablePREDITX_TEXTE_DISPENSAT As PREDITX_TEXTE_DISPENSATDataTable
    
    Private tablePRESMR_PRE_SMR_ATR As PRESMR_PRE_SMR_ATRDataTable
    
    Private tableGSAC_PERE_SUBACT As GSAC_PERE_SUBACTDataTable
    
    Private tableGREF_GROUPE_SPECIALITE_REF As GREF_GROUPE_SPECIALITE_REFDataTable
    
    Private tableSPGREFR_GROUPE_SPE_REF As SPGREFR_GROUPE_SPE_REFDataTable
    
    Private tableGREFTX_TEXTE_GROUPE_REF As GREFTX_TEXTE_GROUPE_REFDataTable
    
    Private tableCOSAU_COMPO_SUBAUX1 As COSAU_COMPO_SUBAUX1DataTable
    
    Private tableGSAU_PERE_SUBAUX As GSAU_PERE_SUBAUXDataTable
    
    Private tableSYSAU_SYNONYME_SAU As SYSAU_SYNONYME_SAUDataTable
    
    Private tableSYFSAC_SYNONYMEFR_SUBACT As SYFSAC_SYNONYMEFR_SUBACTDataTable
    
    Private tableSYASAC_SYNONYMEANGLAIS_SAC As SYASAC_SYNONYMEANGLAIS_SACDataTable
    
    Private tableSACCAS_SUBACT_CAS As SACCAS_SUBACT_CASDataTable
    
    Private tableADSAC_AUTRE_DENOMINATION_SUBAC As ADSAC_AUTRE_DENOMINATION_SUBACDataTable
    
    Private tableSACCCH_SUBACT_CLASSECH As SACCCH_SUBACT_CLASSECHDataTable
    
    Private tableSACCPH_SUBACT_CLASSEPH As SACCPH_SUBACT_CLASSEPHDataTable
    
    Private tableSACCATC_SUBACT_CLASSEATC As SACCATC_SUBACT_CLASSEATCDataTable
    
    Private tableSAC_SUBACTIVE As SAC_SUBACTIVEDataTable
    
    Private tablePRECPSS As PRECPSSDataTable
    
    Private tableCOSAU_COMPO_SUBAUX As COSAU_COMPO_SUBAUXDataTable
    
    Private tablePREGREF_PRE_GROUPE_REF As PREGREF_PRE_GROUPE_REFDataTable
    
    Private tableSPGREFG_GROUPE_SPE_GENE As SPGREFG_GROUPE_SPE_GENEDataTable
    
    Private tablePREGREF_PRE_GROUPE_REF1 As PREGREF_PRE_GROUPE_REF1DataTable
    
    Private tablePRIPRE_PRIX_PRESENTATION As PRIPRE_PRIX_PRESENTATIONDataTable
    
    Private tableFORPRE_FORFAIT_PRE As FORPRE_FORFAIT_PREDataTable
    
    Private tableCDF_CODIF As CDF_CODIFDataTable
    
    Private tableCDFCDFU_CDFU As CDFCDFU_CDFUDataTable
    
    Private tableCATVO_CATEGORIEVOIE As CATVO_CATEGORIEVOIEDataTable
    
    Private tableFOV_FORME_VIRTUELLE As FOV_FORME_VIRTUELLEDataTable
    
    Private tableSAV_SUBSTANCE_VIRTUELLE As SAV_SUBSTANCE_VIRTUELLEDataTable
    
    Private tableMVPF_MED_VIR_PERE_FORME As MVPF_MED_VIR_PERE_FORMEDataTable
    
    Private tableCDFUCUM_UCUM As CDFUCUM_UCUMDataTable
    
    Private tableMVPR_MEDICAMENT_VIRTUEL_PERE As MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
    
    Private tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE As SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
    
    Private tableMVPRMV_MED_VIR_VIR_PERE As MVPRMV_MED_VIR_VIR_PEREDataTable
    
    Private tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
    
    Private tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
    
    Private tableUNITFACTEQ_FACTEUR_EQUIVALENCE As UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
    
    Private tableGSP_GENERIQUE_SPECIALITE As GSP_GENERIQUE_SPECIALITEDataTable
    
    Private tableMVPSDU_MED_VIR_PERE_SA As MVPSDU_MED_VIR_PERE_SADataTable
    
    Private tablePREDISPMAX_PRE_DISP_MAXIMALE1 As PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
    
    Private tablePREDISP_PRE_DISPENSATION As PREDISP_PRE_DISPENSATIONDataTable
    
    Private tablePREVOLSOL_VOLUME_SOLUTION As PREVOLSOL_VOLUME_SOLUTIONDataTable
    
    Private tablePREDISPMAX_PRE_DISP_MAXIMALE As PREDISPMAX_PRE_DISP_MAXIMALEDataTable
    
    Private relationFK1_GREFTX As Global.System.Data.DataRelation
    
    Private relationFK2_PREMAT_PRE_MATERIAU As Global.System.Data.DataRelation
    
    Private relationFK2_PRECAR_PRESENT_CARACTCOMP As Global.System.Data.DataRelation
    
    Private relationFK2_PRECONT_PRE_CONTENANT As Global.System.Data.DataRelation
    
    Private relationFK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV As Global.System.Data.DataRelation
    
    Private relationFOV_FORME_VIRTUELLE_MVPF As Global.System.Data.DataRelation
    
    Private relationFK__CDFCDFU_C__CDFCD__292D09F3 As Global.System.Data.DataRelation
    
    Private relationFK__SYMVPR_SY__SYMVP__3A5795F5 As Global.System.Data.DataRelation
    
    Private relationFK__MVPRMV_ME__MVPRM__3E2826D9 As Global.System.Data.DataRelation
    
    Private relationFK__MVPRSAV_M__MVPRS__42ECDBF6 As Global.System.Data.DataRelation
    
    Private relationFK__MVPRSAV_M__MVPRS__43E1002F As Global.System.Data.DataRelation
    
    Private relationFK__MVPRFOV_M__MVPRF__46BD6CDA As Global.System.Data.DataRelation
    
    Private relationFK__MVPRFOV_M__MVPRF__47B19113 As Global.System.Data.DataRelation
    
    Private relationFK_GSP1 As Global.System.Data.DataRelation
    
    Private relationFK_GSP As Global.System.Data.DataRelation
    
    Private relationFK_SAV As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SYGSP_SYNONYME_GSP")) Is Nothing) Then
                MyBase.Tables.Add(New SYGSP_SYNONYME_GSPDataTable(ds.Tables("SYGSP_SYNONYME_GSP")))
            End If
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            If (Not (ds.Tables("PRE_PRESENTATION")) Is Nothing) Then
                MyBase.Tables.Add(New PRE_PRESENTATIONDataTable(ds.Tables("PRE_PRESENTATION")))
            End If
            If (Not (ds.Tables("PREUCD_COMMENT_DOSEUCD")) Is Nothing) Then
                MyBase.Tables.Add(New PREUCD_COMMENT_DOSEUCDDataTable(ds.Tables("PREUCD_COMMENT_DOSEUCD")))
            End If
            If (Not (ds.Tables("COCONT_COMPO_CONTENANT")) Is Nothing) Then
                MyBase.Tables.Add(New COCONT_COMPO_CONTENANTDataTable(ds.Tables("COCONT_COMPO_CONTENANT")))
            End If
            If (Not (ds.Tables("PRECONT_PRE_CONTENANT")) Is Nothing) Then
                MyBase.Tables.Add(New PRECONT_PRE_CONTENANTDataTable(ds.Tables("PRECONT_PRE_CONTENANT")))
            End If
            If (Not (ds.Tables("PREMAT_PRE_MATERIAU")) Is Nothing) Then
                MyBase.Tables.Add(New PREMAT_PRE_MATERIAUDataTable(ds.Tables("PREMAT_PRE_MATERIAU")))
            End If
            If (Not (ds.Tables("PRECAR_PRESENTATION_CARACTCOMP")) Is Nothing) Then
                MyBase.Tables.Add(New PRECAR_PRESENTATION_CARACTCOMPDataTable(ds.Tables("PRECAR_PRESENTATION_CARACTCOMP")))
            End If
            If (Not (ds.Tables("PRECEMB_PRE_CAREMBALLAGE")) Is Nothing) Then
                MyBase.Tables.Add(New PRECEMB_PRE_CAREMBALLAGEDataTable(ds.Tables("PRECEMB_PRE_CAREMBALLAGE")))
            End If
            If (Not (ds.Tables("PRETSS_PRESENTATION_TAUX")) Is Nothing) Then
                MyBase.Tables.Add(New PRETSS_PRESENTATION_TAUXDataTable(ds.Tables("PRETSS_PRESENTATION_TAUX")))
            End If
            If (Not (ds.Tables("PRETSSH_PRE_TAUX_HOP")) Is Nothing) Then
                MyBase.Tables.Add(New PRETSSH_PRE_TAUX_HOPDataTable(ds.Tables("PRETSSH_PRE_TAUX_HOP")))
            End If
            If (Not (ds.Tables("PRESTP_PRE_STP")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTP_PRE_STPDataTable(ds.Tables("PRESTP_PRE_STP")))
            End If
            If (Not (ds.Tables("PRESTC_STATUTCOMP_PRESENT")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTC_STATUTCOMP_PRESENTDataTable(ds.Tables("PRESTC_STATUTCOMP_PRESENT")))
            End If
            If (Not (ds.Tables("PRESTR_STATUT_REMBOURST")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTR_STATUT_REMBOURSTDataTable(ds.Tables("PRESTR_STATUT_REMBOURST")))
            End If
            If (Not (ds.Tables("PRESTRTX_TEXTE_STAT_REMBOURST")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTRTX_TEXTE_STAT_REMBOURSTDataTable(ds.Tables("PRESTRTX_TEXTE_STAT_REMBOURST")))
            End If
            If (Not (ds.Tables("PREPER_PRESENTATION_PERIO_CSV")) Is Nothing) Then
                MyBase.Tables.Add(New PREPER_PRESENTATION_PERIO_CSVDataTable(ds.Tables("PREPER_PRESENTATION_PERIO_CSV")))
            End If
            If (Not (ds.Tables("PERCS_PERIODE_COND_CSV")) Is Nothing) Then
                MyBase.Tables.Add(New PERCS_PERIODE_COND_CSVDataTable(ds.Tables("PERCS_PERIODE_COND_CSV")))
            End If
            If (Not (ds.Tables("PRECSVTX_TEXTE_CONSERV")) Is Nothing) Then
                MyBase.Tables.Add(New PRECSVTX_TEXTE_CONSERVDataTable(ds.Tables("PRECSVTX_TEXTE_CONSERV")))
            End If
            If (Not (ds.Tables("PREDILI_LIEU_DISPENSAT")) Is Nothing) Then
                MyBase.Tables.Add(New PREDILI_LIEU_DISPENSATDataTable(ds.Tables("PREDILI_LIEU_DISPENSAT")))
            End If
            If (Not (ds.Tables("PREDICO_COMMENT_DISPENSAT")) Is Nothing) Then
                MyBase.Tables.Add(New PREDICO_COMMENT_DISPENSATDataTable(ds.Tables("PREDICO_COMMENT_DISPENSAT")))
            End If
            If (Not (ds.Tables("PREDITX_TEXTE_DISPENSAT")) Is Nothing) Then
                MyBase.Tables.Add(New PREDITX_TEXTE_DISPENSATDataTable(ds.Tables("PREDITX_TEXTE_DISPENSAT")))
            End If
            If (Not (ds.Tables("PRESMR_PRE_SMR_ATR")) Is Nothing) Then
                MyBase.Tables.Add(New PRESMR_PRE_SMR_ATRDataTable(ds.Tables("PRESMR_PRE_SMR_ATR")))
            End If
            If (Not (ds.Tables("GSAC_PERE_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New GSAC_PERE_SUBACTDataTable(ds.Tables("GSAC_PERE_SUBACT")))
            End If
            If (Not (ds.Tables("GREF_GROUPE_SPECIALITE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New GREF_GROUPE_SPECIALITE_REFDataTable(ds.Tables("GREF_GROUPE_SPECIALITE_REF")))
            End If
            If (Not (ds.Tables("SPGREFR_GROUPE_SPE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New SPGREFR_GROUPE_SPE_REFDataTable(ds.Tables("SPGREFR_GROUPE_SPE_REF")))
            End If
            If (Not (ds.Tables("GREFTX_TEXTE_GROUPE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New GREFTX_TEXTE_GROUPE_REFDataTable(ds.Tables("GREFTX_TEXTE_GROUPE_REF")))
            End If
            If (Not (ds.Tables("COSAU_COMPO_SUBAUX1")) Is Nothing) Then
                MyBase.Tables.Add(New COSAU_COMPO_SUBAUX1DataTable(ds.Tables("COSAU_COMPO_SUBAUX1")))
            End If
            If (Not (ds.Tables("GSAU_PERE_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New GSAU_PERE_SUBAUXDataTable(ds.Tables("GSAU_PERE_SUBAUX")))
            End If
            If (Not (ds.Tables("SYSAU_SYNONYME_SAU")) Is Nothing) Then
                MyBase.Tables.Add(New SYSAU_SYNONYME_SAUDataTable(ds.Tables("SYSAU_SYNONYME_SAU")))
            End If
            If (Not (ds.Tables("SYFSAC_SYNONYMEFR_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New SYFSAC_SYNONYMEFR_SUBACTDataTable(ds.Tables("SYFSAC_SYNONYMEFR_SUBACT")))
            End If
            If (Not (ds.Tables("SYASAC_SYNONYMEANGLAIS_SAC")) Is Nothing) Then
                MyBase.Tables.Add(New SYASAC_SYNONYMEANGLAIS_SACDataTable(ds.Tables("SYASAC_SYNONYMEANGLAIS_SAC")))
            End If
            If (Not (ds.Tables("SACCAS_SUBACT_CAS")) Is Nothing) Then
                MyBase.Tables.Add(New SACCAS_SUBACT_CASDataTable(ds.Tables("SACCAS_SUBACT_CAS")))
            End If
            If (Not (ds.Tables("ADSAC_AUTRE_DENOMINATION_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New ADSAC_AUTRE_DENOMINATION_SUBACDataTable(ds.Tables("ADSAC_AUTRE_DENOMINATION_SUBAC")))
            End If
            If (Not (ds.Tables("SACCCH_SUBACT_CLASSECH")) Is Nothing) Then
                MyBase.Tables.Add(New SACCCH_SUBACT_CLASSECHDataTable(ds.Tables("SACCCH_SUBACT_CLASSECH")))
            End If
            If (Not (ds.Tables("SACCPH_SUBACT_CLASSEPH")) Is Nothing) Then
                MyBase.Tables.Add(New SACCPH_SUBACT_CLASSEPHDataTable(ds.Tables("SACCPH_SUBACT_CLASSEPH")))
            End If
            If (Not (ds.Tables("SACCATC_SUBACT_CLASSEATC")) Is Nothing) Then
                MyBase.Tables.Add(New SACCATC_SUBACT_CLASSEATCDataTable(ds.Tables("SACCATC_SUBACT_CLASSEATC")))
            End If
            If (Not (ds.Tables("SAC_SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New SAC_SUBACTIVEDataTable(ds.Tables("SAC_SUBACTIVE")))
            End If
            If (Not (ds.Tables("PRECPSS")) Is Nothing) Then
                MyBase.Tables.Add(New PRECPSSDataTable(ds.Tables("PRECPSS")))
            End If
            If (Not (ds.Tables("COSAU_COMPO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New COSAU_COMPO_SUBAUXDataTable(ds.Tables("COSAU_COMPO_SUBAUX")))
            End If
            If (Not (ds.Tables("PREGREF_PRE_GROUPE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New PREGREF_PRE_GROUPE_REFDataTable(ds.Tables("PREGREF_PRE_GROUPE_REF")))
            End If
            If (Not (ds.Tables("SPGREFG_GROUPE_SPE_GENE")) Is Nothing) Then
                MyBase.Tables.Add(New SPGREFG_GROUPE_SPE_GENEDataTable(ds.Tables("SPGREFG_GROUPE_SPE_GENE")))
            End If
            If (Not (ds.Tables("PREGREF_PRE_GROUPE_REF1")) Is Nothing) Then
                MyBase.Tables.Add(New PREGREF_PRE_GROUPE_REF1DataTable(ds.Tables("PREGREF_PRE_GROUPE_REF1")))
            End If
            If (Not (ds.Tables("PRIPRE_PRIX_PRESENTATION")) Is Nothing) Then
                MyBase.Tables.Add(New PRIPRE_PRIX_PRESENTATIONDataTable(ds.Tables("PRIPRE_PRIX_PRESENTATION")))
            End If
            If (Not (ds.Tables("FORPRE_FORFAIT_PRE")) Is Nothing) Then
                MyBase.Tables.Add(New FORPRE_FORFAIT_PREDataTable(ds.Tables("FORPRE_FORFAIT_PRE")))
            End If
            If (Not (ds.Tables("CDF_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDF_CODIFDataTable(ds.Tables("CDF_CODIF")))
            End If
            If (Not (ds.Tables("CDFCDFU_CDFU")) Is Nothing) Then
                MyBase.Tables.Add(New CDFCDFU_CDFUDataTable(ds.Tables("CDFCDFU_CDFU")))
            End If
            If (Not (ds.Tables("CATVO_CATEGORIEVOIE")) Is Nothing) Then
                MyBase.Tables.Add(New CATVO_CATEGORIEVOIEDataTable(ds.Tables("CATVO_CATEGORIEVOIE")))
            End If
            If (Not (ds.Tables("FOV_FORME_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New FOV_FORME_VIRTUELLEDataTable(ds.Tables("FOV_FORME_VIRTUELLE")))
            End If
            If (Not (ds.Tables("SAV_SUBSTANCE_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New SAV_SUBSTANCE_VIRTUELLEDataTable(ds.Tables("SAV_SUBSTANCE_VIRTUELLE")))
            End If
            If (Not (ds.Tables("MVPF_MED_VIR_PERE_FORME")) Is Nothing) Then
                MyBase.Tables.Add(New MVPF_MED_VIR_PERE_FORMEDataTable(ds.Tables("MVPF_MED_VIR_PERE_FORME")))
            End If
            If (Not (ds.Tables("CDFUCUM_UCUM")) Is Nothing) Then
                MyBase.Tables.Add(New CDFUCUM_UCUMDataTable(ds.Tables("CDFUCUM_UCUM")))
            End If
            If (Not (ds.Tables("MVPR_MEDICAMENT_VIRTUEL_PERE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPR_MEDICAMENT_VIRTUEL_PEREDataTable(ds.Tables("MVPR_MEDICAMENT_VIRTUEL_PERE")))
            End If
            If (Not (ds.Tables("SYMVPR_SYN_MEDIC_VIRTUEL_PERE")) Is Nothing) Then
                MyBase.Tables.Add(New SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable(ds.Tables("SYMVPR_SYN_MEDIC_VIRTUEL_PERE")))
            End If
            If (Not (ds.Tables("MVPRMV_MED_VIR_VIR_PERE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPRMV_MED_VIR_VIR_PEREDataTable(ds.Tables("MVPRMV_MED_VIR_VIR_PERE")))
            End If
            If (Not (ds.Tables("MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable(ds.Tables("MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE")))
            End If
            If (Not (ds.Tables("MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable(ds.Tables("MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE")))
            End If
            If (Not (ds.Tables("UNITFACTEQ_FACTEUR_EQUIVALENCE")) Is Nothing) Then
                MyBase.Tables.Add(New UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable(ds.Tables("UNITFACTEQ_FACTEUR_EQUIVALENCE")))
            End If
            If (Not (ds.Tables("GSP_GENERIQUE_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New GSP_GENERIQUE_SPECIALITEDataTable(ds.Tables("GSP_GENERIQUE_SPECIALITE")))
            End If
            If (Not (ds.Tables("MVPSDU_MED_VIR_PERE_SA")) Is Nothing) Then
                MyBase.Tables.Add(New MVPSDU_MED_VIR_PERE_SADataTable(ds.Tables("MVPSDU_MED_VIR_PERE_SA")))
            End If
            If (Not (ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE1")) Is Nothing) Then
                MyBase.Tables.Add(New PREDISPMAX_PRE_DISP_MAXIMALE1DataTable(ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE1")))
            End If
            If (Not (ds.Tables("PREDISP_PRE_DISPENSATION")) Is Nothing) Then
                MyBase.Tables.Add(New PREDISP_PRE_DISPENSATIONDataTable(ds.Tables("PREDISP_PRE_DISPENSATION")))
            End If
            If (Not (ds.Tables("PREVOLSOL_VOLUME_SOLUTION")) Is Nothing) Then
                MyBase.Tables.Add(New PREVOLSOL_VOLUME_SOLUTIONDataTable(ds.Tables("PREVOLSOL_VOLUME_SOLUTION")))
            End If
            If (Not (ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New PREDISPMAX_PRE_DISP_MAXIMALEDataTable(ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYGSP_SYNONYME_GSP() As SYGSP_SYNONYME_GSPDataTable
        Get
            Return Me.tableSYGSP_SYNONYME_GSP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_SPECIALITE() As SP_SPECIALITEDataTable
        Get
            Return Me.tableSP_SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRE_PRESENTATION() As PRE_PRESENTATIONDataTable
        Get
            Return Me.tablePRE_PRESENTATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREUCD_COMMENT_DOSEUCD() As PREUCD_COMMENT_DOSEUCDDataTable
        Get
            Return Me.tablePREUCD_COMMENT_DOSEUCD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COCONT_COMPO_CONTENANT() As COCONT_COMPO_CONTENANTDataTable
        Get
            Return Me.tableCOCONT_COMPO_CONTENANT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRECONT_PRE_CONTENANT() As PRECONT_PRE_CONTENANTDataTable
        Get
            Return Me.tablePRECONT_PRE_CONTENANT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREMAT_PRE_MATERIAU() As PREMAT_PRE_MATERIAUDataTable
        Get
            Return Me.tablePREMAT_PRE_MATERIAU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRECAR_PRESENTATION_CARACTCOMP() As PRECAR_PRESENTATION_CARACTCOMPDataTable
        Get
            Return Me.tablePRECAR_PRESENTATION_CARACTCOMP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRECEMB_PRE_CAREMBALLAGE() As PRECEMB_PRE_CAREMBALLAGEDataTable
        Get
            Return Me.tablePRECEMB_PRE_CAREMBALLAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRETSS_PRESENTATION_TAUX() As PRETSS_PRESENTATION_TAUXDataTable
        Get
            Return Me.tablePRETSS_PRESENTATION_TAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRETSSH_PRE_TAUX_HOP() As PRETSSH_PRE_TAUX_HOPDataTable
        Get
            Return Me.tablePRETSSH_PRE_TAUX_HOP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRESTP_PRE_STP() As PRESTP_PRE_STPDataTable
        Get
            Return Me.tablePRESTP_PRE_STP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRESTC_STATUTCOMP_PRESENT() As PRESTC_STATUTCOMP_PRESENTDataTable
        Get
            Return Me.tablePRESTC_STATUTCOMP_PRESENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRESTR_STATUT_REMBOURST() As PRESTR_STATUT_REMBOURSTDataTable
        Get
            Return Me.tablePRESTR_STATUT_REMBOURST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRESTRTX_TEXTE_STAT_REMBOURST() As PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
        Get
            Return Me.tablePRESTRTX_TEXTE_STAT_REMBOURST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREPER_PRESENTATION_PERIO_CSV() As PREPER_PRESENTATION_PERIO_CSVDataTable
        Get
            Return Me.tablePREPER_PRESENTATION_PERIO_CSV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERCS_PERIODE_COND_CSV() As PERCS_PERIODE_COND_CSVDataTable
        Get
            Return Me.tablePERCS_PERIODE_COND_CSV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRECSVTX_TEXTE_CONSERV() As PRECSVTX_TEXTE_CONSERVDataTable
        Get
            Return Me.tablePRECSVTX_TEXTE_CONSERV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDILI_LIEU_DISPENSAT() As PREDILI_LIEU_DISPENSATDataTable
        Get
            Return Me.tablePREDILI_LIEU_DISPENSAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDICO_COMMENT_DISPENSAT() As PREDICO_COMMENT_DISPENSATDataTable
        Get
            Return Me.tablePREDICO_COMMENT_DISPENSAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDITX_TEXTE_DISPENSAT() As PREDITX_TEXTE_DISPENSATDataTable
        Get
            Return Me.tablePREDITX_TEXTE_DISPENSAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRESMR_PRE_SMR_ATR() As PRESMR_PRE_SMR_ATRDataTable
        Get
            Return Me.tablePRESMR_PRE_SMR_ATR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GSAC_PERE_SUBACT() As GSAC_PERE_SUBACTDataTable
        Get
            Return Me.tableGSAC_PERE_SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GREF_GROUPE_SPECIALITE_REF() As GREF_GROUPE_SPECIALITE_REFDataTable
        Get
            Return Me.tableGREF_GROUPE_SPECIALITE_REF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPGREFR_GROUPE_SPE_REF() As SPGREFR_GROUPE_SPE_REFDataTable
        Get
            Return Me.tableSPGREFR_GROUPE_SPE_REF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GREFTX_TEXTE_GROUPE_REF() As GREFTX_TEXTE_GROUPE_REFDataTable
        Get
            Return Me.tableGREFTX_TEXTE_GROUPE_REF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COSAU_COMPO_SUBAUX1() As COSAU_COMPO_SUBAUX1DataTable
        Get
            Return Me.tableCOSAU_COMPO_SUBAUX1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GSAU_PERE_SUBAUX() As GSAU_PERE_SUBAUXDataTable
        Get
            Return Me.tableGSAU_PERE_SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYSAU_SYNONYME_SAU() As SYSAU_SYNONYME_SAUDataTable
        Get
            Return Me.tableSYSAU_SYNONYME_SAU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYFSAC_SYNONYMEFR_SUBACT() As SYFSAC_SYNONYMEFR_SUBACTDataTable
        Get
            Return Me.tableSYFSAC_SYNONYMEFR_SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYASAC_SYNONYMEANGLAIS_SAC() As SYASAC_SYNONYMEANGLAIS_SACDataTable
        Get
            Return Me.tableSYASAC_SYNONYMEANGLAIS_SAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SACCAS_SUBACT_CAS() As SACCAS_SUBACT_CASDataTable
        Get
            Return Me.tableSACCAS_SUBACT_CAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ADSAC_AUTRE_DENOMINATION_SUBAC() As ADSAC_AUTRE_DENOMINATION_SUBACDataTable
        Get
            Return Me.tableADSAC_AUTRE_DENOMINATION_SUBAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SACCCH_SUBACT_CLASSECH() As SACCCH_SUBACT_CLASSECHDataTable
        Get
            Return Me.tableSACCCH_SUBACT_CLASSECH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SACCPH_SUBACT_CLASSEPH() As SACCPH_SUBACT_CLASSEPHDataTable
        Get
            Return Me.tableSACCPH_SUBACT_CLASSEPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SACCATC_SUBACT_CLASSEATC() As SACCATC_SUBACT_CLASSEATCDataTable
        Get
            Return Me.tableSACCATC_SUBACT_CLASSEATC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAC_SUBACTIVE() As SAC_SUBACTIVEDataTable
        Get
            Return Me.tableSAC_SUBACTIVE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRECPSS() As PRECPSSDataTable
        Get
            Return Me.tablePRECPSS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COSAU_COMPO_SUBAUX() As COSAU_COMPO_SUBAUXDataTable
        Get
            Return Me.tableCOSAU_COMPO_SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREGREF_PRE_GROUPE_REF() As PREGREF_PRE_GROUPE_REFDataTable
        Get
            Return Me.tablePREGREF_PRE_GROUPE_REF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPGREFG_GROUPE_SPE_GENE() As SPGREFG_GROUPE_SPE_GENEDataTable
        Get
            Return Me.tableSPGREFG_GROUPE_SPE_GENE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREGREF_PRE_GROUPE_REF1() As PREGREF_PRE_GROUPE_REF1DataTable
        Get
            Return Me.tablePREGREF_PRE_GROUPE_REF1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRIPRE_PRIX_PRESENTATION() As PRIPRE_PRIX_PRESENTATIONDataTable
        Get
            Return Me.tablePRIPRE_PRIX_PRESENTATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FORPRE_FORFAIT_PRE() As FORPRE_FORFAIT_PREDataTable
        Get
            Return Me.tableFORPRE_FORFAIT_PRE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDF_CODIF() As CDF_CODIFDataTable
        Get
            Return Me.tableCDF_CODIF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFCDFU_CDFU() As CDFCDFU_CDFUDataTable
        Get
            Return Me.tableCDFCDFU_CDFU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CATVO_CATEGORIEVOIE() As CATVO_CATEGORIEVOIEDataTable
        Get
            Return Me.tableCATVO_CATEGORIEVOIE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FOV_FORME_VIRTUELLE() As FOV_FORME_VIRTUELLEDataTable
        Get
            Return Me.tableFOV_FORME_VIRTUELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAV_SUBSTANCE_VIRTUELLE() As SAV_SUBSTANCE_VIRTUELLEDataTable
        Get
            Return Me.tableSAV_SUBSTANCE_VIRTUELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPF_MED_VIR_PERE_FORME() As MVPF_MED_VIR_PERE_FORMEDataTable
        Get
            Return Me.tableMVPF_MED_VIR_PERE_FORME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFUCUM_UCUM() As CDFUCUM_UCUMDataTable
        Get
            Return Me.tableCDFUCUM_UCUM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPR_MEDICAMENT_VIRTUEL_PERE() As MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
        Get
            Return Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYMVPR_SYN_MEDIC_VIRTUEL_PERE() As SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
        Get
            Return Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPRMV_MED_VIR_VIR_PERE() As MVPRMV_MED_VIR_VIR_PEREDataTable
        Get
            Return Me.tableMVPRMV_MED_VIR_VIR_PERE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE() As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
        Get
            Return Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE() As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
        Get
            Return Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UNITFACTEQ_FACTEUR_EQUIVALENCE() As UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
        Get
            Return Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GSP_GENERIQUE_SPECIALITE() As GSP_GENERIQUE_SPECIALITEDataTable
        Get
            Return Me.tableGSP_GENERIQUE_SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPSDU_MED_VIR_PERE_SA() As MVPSDU_MED_VIR_PERE_SADataTable
        Get
            Return Me.tableMVPSDU_MED_VIR_PERE_SA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDISPMAX_PRE_DISP_MAXIMALE1() As PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
        Get
            Return Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDISP_PRE_DISPENSATION() As PREDISP_PRE_DISPENSATIONDataTable
        Get
            Return Me.tablePREDISP_PRE_DISPENSATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREVOLSOL_VOLUME_SOLUTION() As PREVOLSOL_VOLUME_SOLUTIONDataTable
        Get
            Return Me.tablePREVOLSOL_VOLUME_SOLUTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDISPMAX_PRE_DISP_MAXIMALE() As PREDISPMAX_PRE_DISP_MAXIMALEDataTable
        Get
            Return Me.tablePREDISPMAX_PRE_DISP_MAXIMALE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Nomenclature2 = CType(MyBase.Clone,dsTheriaque_Nomenclature2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SYGSP_SYNONYME_GSP")) Is Nothing) Then
                MyBase.Tables.Add(New SYGSP_SYNONYME_GSPDataTable(ds.Tables("SYGSP_SYNONYME_GSP")))
            End If
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            If (Not (ds.Tables("PRE_PRESENTATION")) Is Nothing) Then
                MyBase.Tables.Add(New PRE_PRESENTATIONDataTable(ds.Tables("PRE_PRESENTATION")))
            End If
            If (Not (ds.Tables("PREUCD_COMMENT_DOSEUCD")) Is Nothing) Then
                MyBase.Tables.Add(New PREUCD_COMMENT_DOSEUCDDataTable(ds.Tables("PREUCD_COMMENT_DOSEUCD")))
            End If
            If (Not (ds.Tables("COCONT_COMPO_CONTENANT")) Is Nothing) Then
                MyBase.Tables.Add(New COCONT_COMPO_CONTENANTDataTable(ds.Tables("COCONT_COMPO_CONTENANT")))
            End If
            If (Not (ds.Tables("PRECONT_PRE_CONTENANT")) Is Nothing) Then
                MyBase.Tables.Add(New PRECONT_PRE_CONTENANTDataTable(ds.Tables("PRECONT_PRE_CONTENANT")))
            End If
            If (Not (ds.Tables("PREMAT_PRE_MATERIAU")) Is Nothing) Then
                MyBase.Tables.Add(New PREMAT_PRE_MATERIAUDataTable(ds.Tables("PREMAT_PRE_MATERIAU")))
            End If
            If (Not (ds.Tables("PRECAR_PRESENTATION_CARACTCOMP")) Is Nothing) Then
                MyBase.Tables.Add(New PRECAR_PRESENTATION_CARACTCOMPDataTable(ds.Tables("PRECAR_PRESENTATION_CARACTCOMP")))
            End If
            If (Not (ds.Tables("PRECEMB_PRE_CAREMBALLAGE")) Is Nothing) Then
                MyBase.Tables.Add(New PRECEMB_PRE_CAREMBALLAGEDataTable(ds.Tables("PRECEMB_PRE_CAREMBALLAGE")))
            End If
            If (Not (ds.Tables("PRETSS_PRESENTATION_TAUX")) Is Nothing) Then
                MyBase.Tables.Add(New PRETSS_PRESENTATION_TAUXDataTable(ds.Tables("PRETSS_PRESENTATION_TAUX")))
            End If
            If (Not (ds.Tables("PRETSSH_PRE_TAUX_HOP")) Is Nothing) Then
                MyBase.Tables.Add(New PRETSSH_PRE_TAUX_HOPDataTable(ds.Tables("PRETSSH_PRE_TAUX_HOP")))
            End If
            If (Not (ds.Tables("PRESTP_PRE_STP")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTP_PRE_STPDataTable(ds.Tables("PRESTP_PRE_STP")))
            End If
            If (Not (ds.Tables("PRESTC_STATUTCOMP_PRESENT")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTC_STATUTCOMP_PRESENTDataTable(ds.Tables("PRESTC_STATUTCOMP_PRESENT")))
            End If
            If (Not (ds.Tables("PRESTR_STATUT_REMBOURST")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTR_STATUT_REMBOURSTDataTable(ds.Tables("PRESTR_STATUT_REMBOURST")))
            End If
            If (Not (ds.Tables("PRESTRTX_TEXTE_STAT_REMBOURST")) Is Nothing) Then
                MyBase.Tables.Add(New PRESTRTX_TEXTE_STAT_REMBOURSTDataTable(ds.Tables("PRESTRTX_TEXTE_STAT_REMBOURST")))
            End If
            If (Not (ds.Tables("PREPER_PRESENTATION_PERIO_CSV")) Is Nothing) Then
                MyBase.Tables.Add(New PREPER_PRESENTATION_PERIO_CSVDataTable(ds.Tables("PREPER_PRESENTATION_PERIO_CSV")))
            End If
            If (Not (ds.Tables("PERCS_PERIODE_COND_CSV")) Is Nothing) Then
                MyBase.Tables.Add(New PERCS_PERIODE_COND_CSVDataTable(ds.Tables("PERCS_PERIODE_COND_CSV")))
            End If
            If (Not (ds.Tables("PRECSVTX_TEXTE_CONSERV")) Is Nothing) Then
                MyBase.Tables.Add(New PRECSVTX_TEXTE_CONSERVDataTable(ds.Tables("PRECSVTX_TEXTE_CONSERV")))
            End If
            If (Not (ds.Tables("PREDILI_LIEU_DISPENSAT")) Is Nothing) Then
                MyBase.Tables.Add(New PREDILI_LIEU_DISPENSATDataTable(ds.Tables("PREDILI_LIEU_DISPENSAT")))
            End If
            If (Not (ds.Tables("PREDICO_COMMENT_DISPENSAT")) Is Nothing) Then
                MyBase.Tables.Add(New PREDICO_COMMENT_DISPENSATDataTable(ds.Tables("PREDICO_COMMENT_DISPENSAT")))
            End If
            If (Not (ds.Tables("PREDITX_TEXTE_DISPENSAT")) Is Nothing) Then
                MyBase.Tables.Add(New PREDITX_TEXTE_DISPENSATDataTable(ds.Tables("PREDITX_TEXTE_DISPENSAT")))
            End If
            If (Not (ds.Tables("PRESMR_PRE_SMR_ATR")) Is Nothing) Then
                MyBase.Tables.Add(New PRESMR_PRE_SMR_ATRDataTable(ds.Tables("PRESMR_PRE_SMR_ATR")))
            End If
            If (Not (ds.Tables("GSAC_PERE_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New GSAC_PERE_SUBACTDataTable(ds.Tables("GSAC_PERE_SUBACT")))
            End If
            If (Not (ds.Tables("GREF_GROUPE_SPECIALITE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New GREF_GROUPE_SPECIALITE_REFDataTable(ds.Tables("GREF_GROUPE_SPECIALITE_REF")))
            End If
            If (Not (ds.Tables("SPGREFR_GROUPE_SPE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New SPGREFR_GROUPE_SPE_REFDataTable(ds.Tables("SPGREFR_GROUPE_SPE_REF")))
            End If
            If (Not (ds.Tables("GREFTX_TEXTE_GROUPE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New GREFTX_TEXTE_GROUPE_REFDataTable(ds.Tables("GREFTX_TEXTE_GROUPE_REF")))
            End If
            If (Not (ds.Tables("COSAU_COMPO_SUBAUX1")) Is Nothing) Then
                MyBase.Tables.Add(New COSAU_COMPO_SUBAUX1DataTable(ds.Tables("COSAU_COMPO_SUBAUX1")))
            End If
            If (Not (ds.Tables("GSAU_PERE_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New GSAU_PERE_SUBAUXDataTable(ds.Tables("GSAU_PERE_SUBAUX")))
            End If
            If (Not (ds.Tables("SYSAU_SYNONYME_SAU")) Is Nothing) Then
                MyBase.Tables.Add(New SYSAU_SYNONYME_SAUDataTable(ds.Tables("SYSAU_SYNONYME_SAU")))
            End If
            If (Not (ds.Tables("SYFSAC_SYNONYMEFR_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New SYFSAC_SYNONYMEFR_SUBACTDataTable(ds.Tables("SYFSAC_SYNONYMEFR_SUBACT")))
            End If
            If (Not (ds.Tables("SYASAC_SYNONYMEANGLAIS_SAC")) Is Nothing) Then
                MyBase.Tables.Add(New SYASAC_SYNONYMEANGLAIS_SACDataTable(ds.Tables("SYASAC_SYNONYMEANGLAIS_SAC")))
            End If
            If (Not (ds.Tables("SACCAS_SUBACT_CAS")) Is Nothing) Then
                MyBase.Tables.Add(New SACCAS_SUBACT_CASDataTable(ds.Tables("SACCAS_SUBACT_CAS")))
            End If
            If (Not (ds.Tables("ADSAC_AUTRE_DENOMINATION_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New ADSAC_AUTRE_DENOMINATION_SUBACDataTable(ds.Tables("ADSAC_AUTRE_DENOMINATION_SUBAC")))
            End If
            If (Not (ds.Tables("SACCCH_SUBACT_CLASSECH")) Is Nothing) Then
                MyBase.Tables.Add(New SACCCH_SUBACT_CLASSECHDataTable(ds.Tables("SACCCH_SUBACT_CLASSECH")))
            End If
            If (Not (ds.Tables("SACCPH_SUBACT_CLASSEPH")) Is Nothing) Then
                MyBase.Tables.Add(New SACCPH_SUBACT_CLASSEPHDataTable(ds.Tables("SACCPH_SUBACT_CLASSEPH")))
            End If
            If (Not (ds.Tables("SACCATC_SUBACT_CLASSEATC")) Is Nothing) Then
                MyBase.Tables.Add(New SACCATC_SUBACT_CLASSEATCDataTable(ds.Tables("SACCATC_SUBACT_CLASSEATC")))
            End If
            If (Not (ds.Tables("SAC_SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New SAC_SUBACTIVEDataTable(ds.Tables("SAC_SUBACTIVE")))
            End If
            If (Not (ds.Tables("PRECPSS")) Is Nothing) Then
                MyBase.Tables.Add(New PRECPSSDataTable(ds.Tables("PRECPSS")))
            End If
            If (Not (ds.Tables("COSAU_COMPO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New COSAU_COMPO_SUBAUXDataTable(ds.Tables("COSAU_COMPO_SUBAUX")))
            End If
            If (Not (ds.Tables("PREGREF_PRE_GROUPE_REF")) Is Nothing) Then
                MyBase.Tables.Add(New PREGREF_PRE_GROUPE_REFDataTable(ds.Tables("PREGREF_PRE_GROUPE_REF")))
            End If
            If (Not (ds.Tables("SPGREFG_GROUPE_SPE_GENE")) Is Nothing) Then
                MyBase.Tables.Add(New SPGREFG_GROUPE_SPE_GENEDataTable(ds.Tables("SPGREFG_GROUPE_SPE_GENE")))
            End If
            If (Not (ds.Tables("PREGREF_PRE_GROUPE_REF1")) Is Nothing) Then
                MyBase.Tables.Add(New PREGREF_PRE_GROUPE_REF1DataTable(ds.Tables("PREGREF_PRE_GROUPE_REF1")))
            End If
            If (Not (ds.Tables("PRIPRE_PRIX_PRESENTATION")) Is Nothing) Then
                MyBase.Tables.Add(New PRIPRE_PRIX_PRESENTATIONDataTable(ds.Tables("PRIPRE_PRIX_PRESENTATION")))
            End If
            If (Not (ds.Tables("FORPRE_FORFAIT_PRE")) Is Nothing) Then
                MyBase.Tables.Add(New FORPRE_FORFAIT_PREDataTable(ds.Tables("FORPRE_FORFAIT_PRE")))
            End If
            If (Not (ds.Tables("CDF_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDF_CODIFDataTable(ds.Tables("CDF_CODIF")))
            End If
            If (Not (ds.Tables("CDFCDFU_CDFU")) Is Nothing) Then
                MyBase.Tables.Add(New CDFCDFU_CDFUDataTable(ds.Tables("CDFCDFU_CDFU")))
            End If
            If (Not (ds.Tables("CATVO_CATEGORIEVOIE")) Is Nothing) Then
                MyBase.Tables.Add(New CATVO_CATEGORIEVOIEDataTable(ds.Tables("CATVO_CATEGORIEVOIE")))
            End If
            If (Not (ds.Tables("FOV_FORME_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New FOV_FORME_VIRTUELLEDataTable(ds.Tables("FOV_FORME_VIRTUELLE")))
            End If
            If (Not (ds.Tables("SAV_SUBSTANCE_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New SAV_SUBSTANCE_VIRTUELLEDataTable(ds.Tables("SAV_SUBSTANCE_VIRTUELLE")))
            End If
            If (Not (ds.Tables("MVPF_MED_VIR_PERE_FORME")) Is Nothing) Then
                MyBase.Tables.Add(New MVPF_MED_VIR_PERE_FORMEDataTable(ds.Tables("MVPF_MED_VIR_PERE_FORME")))
            End If
            If (Not (ds.Tables("CDFUCUM_UCUM")) Is Nothing) Then
                MyBase.Tables.Add(New CDFUCUM_UCUMDataTable(ds.Tables("CDFUCUM_UCUM")))
            End If
            If (Not (ds.Tables("MVPR_MEDICAMENT_VIRTUEL_PERE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPR_MEDICAMENT_VIRTUEL_PEREDataTable(ds.Tables("MVPR_MEDICAMENT_VIRTUEL_PERE")))
            End If
            If (Not (ds.Tables("SYMVPR_SYN_MEDIC_VIRTUEL_PERE")) Is Nothing) Then
                MyBase.Tables.Add(New SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable(ds.Tables("SYMVPR_SYN_MEDIC_VIRTUEL_PERE")))
            End If
            If (Not (ds.Tables("MVPRMV_MED_VIR_VIR_PERE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPRMV_MED_VIR_VIR_PEREDataTable(ds.Tables("MVPRMV_MED_VIR_VIR_PERE")))
            End If
            If (Not (ds.Tables("MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable(ds.Tables("MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE")))
            End If
            If (Not (ds.Tables("MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable(ds.Tables("MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE")))
            End If
            If (Not (ds.Tables("UNITFACTEQ_FACTEUR_EQUIVALENCE")) Is Nothing) Then
                MyBase.Tables.Add(New UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable(ds.Tables("UNITFACTEQ_FACTEUR_EQUIVALENCE")))
            End If
            If (Not (ds.Tables("GSP_GENERIQUE_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New GSP_GENERIQUE_SPECIALITEDataTable(ds.Tables("GSP_GENERIQUE_SPECIALITE")))
            End If
            If (Not (ds.Tables("MVPSDU_MED_VIR_PERE_SA")) Is Nothing) Then
                MyBase.Tables.Add(New MVPSDU_MED_VIR_PERE_SADataTable(ds.Tables("MVPSDU_MED_VIR_PERE_SA")))
            End If
            If (Not (ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE1")) Is Nothing) Then
                MyBase.Tables.Add(New PREDISPMAX_PRE_DISP_MAXIMALE1DataTable(ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE1")))
            End If
            If (Not (ds.Tables("PREDISP_PRE_DISPENSATION")) Is Nothing) Then
                MyBase.Tables.Add(New PREDISP_PRE_DISPENSATIONDataTable(ds.Tables("PREDISP_PRE_DISPENSATION")))
            End If
            If (Not (ds.Tables("PREVOLSOL_VOLUME_SOLUTION")) Is Nothing) Then
                MyBase.Tables.Add(New PREVOLSOL_VOLUME_SOLUTIONDataTable(ds.Tables("PREVOLSOL_VOLUME_SOLUTION")))
            End If
            If (Not (ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New PREDISPMAX_PRE_DISP_MAXIMALEDataTable(ds.Tables("PREDISPMAX_PRE_DISP_MAXIMALE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSYGSP_SYNONYME_GSP = CType(MyBase.Tables("SYGSP_SYNONYME_GSP"),SYGSP_SYNONYME_GSPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYGSP_SYNONYME_GSP) Is Nothing) Then
                Me.tableSYGSP_SYNONYME_GSP.InitVars
            End If
        End If
        Me.tableSP_SPECIALITE = CType(MyBase.Tables("SP_SPECIALITE"),SP_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSP_SPECIALITE) Is Nothing) Then
                Me.tableSP_SPECIALITE.InitVars
            End If
        End If
        Me.tablePRE_PRESENTATION = CType(MyBase.Tables("PRE_PRESENTATION"),PRE_PRESENTATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRE_PRESENTATION) Is Nothing) Then
                Me.tablePRE_PRESENTATION.InitVars
            End If
        End If
        Me.tablePREUCD_COMMENT_DOSEUCD = CType(MyBase.Tables("PREUCD_COMMENT_DOSEUCD"),PREUCD_COMMENT_DOSEUCDDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREUCD_COMMENT_DOSEUCD) Is Nothing) Then
                Me.tablePREUCD_COMMENT_DOSEUCD.InitVars
            End If
        End If
        Me.tableCOCONT_COMPO_CONTENANT = CType(MyBase.Tables("COCONT_COMPO_CONTENANT"),COCONT_COMPO_CONTENANTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOCONT_COMPO_CONTENANT) Is Nothing) Then
                Me.tableCOCONT_COMPO_CONTENANT.InitVars
            End If
        End If
        Me.tablePRECONT_PRE_CONTENANT = CType(MyBase.Tables("PRECONT_PRE_CONTENANT"),PRECONT_PRE_CONTENANTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRECONT_PRE_CONTENANT) Is Nothing) Then
                Me.tablePRECONT_PRE_CONTENANT.InitVars
            End If
        End If
        Me.tablePREMAT_PRE_MATERIAU = CType(MyBase.Tables("PREMAT_PRE_MATERIAU"),PREMAT_PRE_MATERIAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREMAT_PRE_MATERIAU) Is Nothing) Then
                Me.tablePREMAT_PRE_MATERIAU.InitVars
            End If
        End If
        Me.tablePRECAR_PRESENTATION_CARACTCOMP = CType(MyBase.Tables("PRECAR_PRESENTATION_CARACTCOMP"),PRECAR_PRESENTATION_CARACTCOMPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRECAR_PRESENTATION_CARACTCOMP) Is Nothing) Then
                Me.tablePRECAR_PRESENTATION_CARACTCOMP.InitVars
            End If
        End If
        Me.tablePRECEMB_PRE_CAREMBALLAGE = CType(MyBase.Tables("PRECEMB_PRE_CAREMBALLAGE"),PRECEMB_PRE_CAREMBALLAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRECEMB_PRE_CAREMBALLAGE) Is Nothing) Then
                Me.tablePRECEMB_PRE_CAREMBALLAGE.InitVars
            End If
        End If
        Me.tablePRETSS_PRESENTATION_TAUX = CType(MyBase.Tables("PRETSS_PRESENTATION_TAUX"),PRETSS_PRESENTATION_TAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRETSS_PRESENTATION_TAUX) Is Nothing) Then
                Me.tablePRETSS_PRESENTATION_TAUX.InitVars
            End If
        End If
        Me.tablePRETSSH_PRE_TAUX_HOP = CType(MyBase.Tables("PRETSSH_PRE_TAUX_HOP"),PRETSSH_PRE_TAUX_HOPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRETSSH_PRE_TAUX_HOP) Is Nothing) Then
                Me.tablePRETSSH_PRE_TAUX_HOP.InitVars
            End If
        End If
        Me.tablePRESTP_PRE_STP = CType(MyBase.Tables("PRESTP_PRE_STP"),PRESTP_PRE_STPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRESTP_PRE_STP) Is Nothing) Then
                Me.tablePRESTP_PRE_STP.InitVars
            End If
        End If
        Me.tablePRESTC_STATUTCOMP_PRESENT = CType(MyBase.Tables("PRESTC_STATUTCOMP_PRESENT"),PRESTC_STATUTCOMP_PRESENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRESTC_STATUTCOMP_PRESENT) Is Nothing) Then
                Me.tablePRESTC_STATUTCOMP_PRESENT.InitVars
            End If
        End If
        Me.tablePRESTR_STATUT_REMBOURST = CType(MyBase.Tables("PRESTR_STATUT_REMBOURST"),PRESTR_STATUT_REMBOURSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRESTR_STATUT_REMBOURST) Is Nothing) Then
                Me.tablePRESTR_STATUT_REMBOURST.InitVars
            End If
        End If
        Me.tablePRESTRTX_TEXTE_STAT_REMBOURST = CType(MyBase.Tables("PRESTRTX_TEXTE_STAT_REMBOURST"),PRESTRTX_TEXTE_STAT_REMBOURSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRESTRTX_TEXTE_STAT_REMBOURST) Is Nothing) Then
                Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.InitVars
            End If
        End If
        Me.tablePREPER_PRESENTATION_PERIO_CSV = CType(MyBase.Tables("PREPER_PRESENTATION_PERIO_CSV"),PREPER_PRESENTATION_PERIO_CSVDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREPER_PRESENTATION_PERIO_CSV) Is Nothing) Then
                Me.tablePREPER_PRESENTATION_PERIO_CSV.InitVars
            End If
        End If
        Me.tablePERCS_PERIODE_COND_CSV = CType(MyBase.Tables("PERCS_PERIODE_COND_CSV"),PERCS_PERIODE_COND_CSVDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERCS_PERIODE_COND_CSV) Is Nothing) Then
                Me.tablePERCS_PERIODE_COND_CSV.InitVars
            End If
        End If
        Me.tablePRECSVTX_TEXTE_CONSERV = CType(MyBase.Tables("PRECSVTX_TEXTE_CONSERV"),PRECSVTX_TEXTE_CONSERVDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRECSVTX_TEXTE_CONSERV) Is Nothing) Then
                Me.tablePRECSVTX_TEXTE_CONSERV.InitVars
            End If
        End If
        Me.tablePREDILI_LIEU_DISPENSAT = CType(MyBase.Tables("PREDILI_LIEU_DISPENSAT"),PREDILI_LIEU_DISPENSATDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDILI_LIEU_DISPENSAT) Is Nothing) Then
                Me.tablePREDILI_LIEU_DISPENSAT.InitVars
            End If
        End If
        Me.tablePREDICO_COMMENT_DISPENSAT = CType(MyBase.Tables("PREDICO_COMMENT_DISPENSAT"),PREDICO_COMMENT_DISPENSATDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDICO_COMMENT_DISPENSAT) Is Nothing) Then
                Me.tablePREDICO_COMMENT_DISPENSAT.InitVars
            End If
        End If
        Me.tablePREDITX_TEXTE_DISPENSAT = CType(MyBase.Tables("PREDITX_TEXTE_DISPENSAT"),PREDITX_TEXTE_DISPENSATDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDITX_TEXTE_DISPENSAT) Is Nothing) Then
                Me.tablePREDITX_TEXTE_DISPENSAT.InitVars
            End If
        End If
        Me.tablePRESMR_PRE_SMR_ATR = CType(MyBase.Tables("PRESMR_PRE_SMR_ATR"),PRESMR_PRE_SMR_ATRDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRESMR_PRE_SMR_ATR) Is Nothing) Then
                Me.tablePRESMR_PRE_SMR_ATR.InitVars
            End If
        End If
        Me.tableGSAC_PERE_SUBACT = CType(MyBase.Tables("GSAC_PERE_SUBACT"),GSAC_PERE_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGSAC_PERE_SUBACT) Is Nothing) Then
                Me.tableGSAC_PERE_SUBACT.InitVars
            End If
        End If
        Me.tableGREF_GROUPE_SPECIALITE_REF = CType(MyBase.Tables("GREF_GROUPE_SPECIALITE_REF"),GREF_GROUPE_SPECIALITE_REFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGREF_GROUPE_SPECIALITE_REF) Is Nothing) Then
                Me.tableGREF_GROUPE_SPECIALITE_REF.InitVars
            End If
        End If
        Me.tableSPGREFR_GROUPE_SPE_REF = CType(MyBase.Tables("SPGREFR_GROUPE_SPE_REF"),SPGREFR_GROUPE_SPE_REFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPGREFR_GROUPE_SPE_REF) Is Nothing) Then
                Me.tableSPGREFR_GROUPE_SPE_REF.InitVars
            End If
        End If
        Me.tableGREFTX_TEXTE_GROUPE_REF = CType(MyBase.Tables("GREFTX_TEXTE_GROUPE_REF"),GREFTX_TEXTE_GROUPE_REFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGREFTX_TEXTE_GROUPE_REF) Is Nothing) Then
                Me.tableGREFTX_TEXTE_GROUPE_REF.InitVars
            End If
        End If
        Me.tableCOSAU_COMPO_SUBAUX1 = CType(MyBase.Tables("COSAU_COMPO_SUBAUX1"),COSAU_COMPO_SUBAUX1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOSAU_COMPO_SUBAUX1) Is Nothing) Then
                Me.tableCOSAU_COMPO_SUBAUX1.InitVars
            End If
        End If
        Me.tableGSAU_PERE_SUBAUX = CType(MyBase.Tables("GSAU_PERE_SUBAUX"),GSAU_PERE_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGSAU_PERE_SUBAUX) Is Nothing) Then
                Me.tableGSAU_PERE_SUBAUX.InitVars
            End If
        End If
        Me.tableSYSAU_SYNONYME_SAU = CType(MyBase.Tables("SYSAU_SYNONYME_SAU"),SYSAU_SYNONYME_SAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYSAU_SYNONYME_SAU) Is Nothing) Then
                Me.tableSYSAU_SYNONYME_SAU.InitVars
            End If
        End If
        Me.tableSYFSAC_SYNONYMEFR_SUBACT = CType(MyBase.Tables("SYFSAC_SYNONYMEFR_SUBACT"),SYFSAC_SYNONYMEFR_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYFSAC_SYNONYMEFR_SUBACT) Is Nothing) Then
                Me.tableSYFSAC_SYNONYMEFR_SUBACT.InitVars
            End If
        End If
        Me.tableSYASAC_SYNONYMEANGLAIS_SAC = CType(MyBase.Tables("SYASAC_SYNONYMEANGLAIS_SAC"),SYASAC_SYNONYMEANGLAIS_SACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYASAC_SYNONYMEANGLAIS_SAC) Is Nothing) Then
                Me.tableSYASAC_SYNONYMEANGLAIS_SAC.InitVars
            End If
        End If
        Me.tableSACCAS_SUBACT_CAS = CType(MyBase.Tables("SACCAS_SUBACT_CAS"),SACCAS_SUBACT_CASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSACCAS_SUBACT_CAS) Is Nothing) Then
                Me.tableSACCAS_SUBACT_CAS.InitVars
            End If
        End If
        Me.tableADSAC_AUTRE_DENOMINATION_SUBAC = CType(MyBase.Tables("ADSAC_AUTRE_DENOMINATION_SUBAC"),ADSAC_AUTRE_DENOMINATION_SUBACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableADSAC_AUTRE_DENOMINATION_SUBAC) Is Nothing) Then
                Me.tableADSAC_AUTRE_DENOMINATION_SUBAC.InitVars
            End If
        End If
        Me.tableSACCCH_SUBACT_CLASSECH = CType(MyBase.Tables("SACCCH_SUBACT_CLASSECH"),SACCCH_SUBACT_CLASSECHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSACCCH_SUBACT_CLASSECH) Is Nothing) Then
                Me.tableSACCCH_SUBACT_CLASSECH.InitVars
            End If
        End If
        Me.tableSACCPH_SUBACT_CLASSEPH = CType(MyBase.Tables("SACCPH_SUBACT_CLASSEPH"),SACCPH_SUBACT_CLASSEPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSACCPH_SUBACT_CLASSEPH) Is Nothing) Then
                Me.tableSACCPH_SUBACT_CLASSEPH.InitVars
            End If
        End If
        Me.tableSACCATC_SUBACT_CLASSEATC = CType(MyBase.Tables("SACCATC_SUBACT_CLASSEATC"),SACCATC_SUBACT_CLASSEATCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSACCATC_SUBACT_CLASSEATC) Is Nothing) Then
                Me.tableSACCATC_SUBACT_CLASSEATC.InitVars
            End If
        End If
        Me.tableSAC_SUBACTIVE = CType(MyBase.Tables("SAC_SUBACTIVE"),SAC_SUBACTIVEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAC_SUBACTIVE) Is Nothing) Then
                Me.tableSAC_SUBACTIVE.InitVars
            End If
        End If
        Me.tablePRECPSS = CType(MyBase.Tables("PRECPSS"),PRECPSSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRECPSS) Is Nothing) Then
                Me.tablePRECPSS.InitVars
            End If
        End If
        Me.tableCOSAU_COMPO_SUBAUX = CType(MyBase.Tables("COSAU_COMPO_SUBAUX"),COSAU_COMPO_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOSAU_COMPO_SUBAUX) Is Nothing) Then
                Me.tableCOSAU_COMPO_SUBAUX.InitVars
            End If
        End If
        Me.tablePREGREF_PRE_GROUPE_REF = CType(MyBase.Tables("PREGREF_PRE_GROUPE_REF"),PREGREF_PRE_GROUPE_REFDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREGREF_PRE_GROUPE_REF) Is Nothing) Then
                Me.tablePREGREF_PRE_GROUPE_REF.InitVars
            End If
        End If
        Me.tableSPGREFG_GROUPE_SPE_GENE = CType(MyBase.Tables("SPGREFG_GROUPE_SPE_GENE"),SPGREFG_GROUPE_SPE_GENEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPGREFG_GROUPE_SPE_GENE) Is Nothing) Then
                Me.tableSPGREFG_GROUPE_SPE_GENE.InitVars
            End If
        End If
        Me.tablePREGREF_PRE_GROUPE_REF1 = CType(MyBase.Tables("PREGREF_PRE_GROUPE_REF1"),PREGREF_PRE_GROUPE_REF1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREGREF_PRE_GROUPE_REF1) Is Nothing) Then
                Me.tablePREGREF_PRE_GROUPE_REF1.InitVars
            End If
        End If
        Me.tablePRIPRE_PRIX_PRESENTATION = CType(MyBase.Tables("PRIPRE_PRIX_PRESENTATION"),PRIPRE_PRIX_PRESENTATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRIPRE_PRIX_PRESENTATION) Is Nothing) Then
                Me.tablePRIPRE_PRIX_PRESENTATION.InitVars
            End If
        End If
        Me.tableFORPRE_FORFAIT_PRE = CType(MyBase.Tables("FORPRE_FORFAIT_PRE"),FORPRE_FORFAIT_PREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFORPRE_FORFAIT_PRE) Is Nothing) Then
                Me.tableFORPRE_FORFAIT_PRE.InitVars
            End If
        End If
        Me.tableCDF_CODIF = CType(MyBase.Tables("CDF_CODIF"),CDF_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDF_CODIF) Is Nothing) Then
                Me.tableCDF_CODIF.InitVars
            End If
        End If
        Me.tableCDFCDFU_CDFU = CType(MyBase.Tables("CDFCDFU_CDFU"),CDFCDFU_CDFUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFCDFU_CDFU) Is Nothing) Then
                Me.tableCDFCDFU_CDFU.InitVars
            End If
        End If
        Me.tableCATVO_CATEGORIEVOIE = CType(MyBase.Tables("CATVO_CATEGORIEVOIE"),CATVO_CATEGORIEVOIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCATVO_CATEGORIEVOIE) Is Nothing) Then
                Me.tableCATVO_CATEGORIEVOIE.InitVars
            End If
        End If
        Me.tableFOV_FORME_VIRTUELLE = CType(MyBase.Tables("FOV_FORME_VIRTUELLE"),FOV_FORME_VIRTUELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFOV_FORME_VIRTUELLE) Is Nothing) Then
                Me.tableFOV_FORME_VIRTUELLE.InitVars
            End If
        End If
        Me.tableSAV_SUBSTANCE_VIRTUELLE = CType(MyBase.Tables("SAV_SUBSTANCE_VIRTUELLE"),SAV_SUBSTANCE_VIRTUELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAV_SUBSTANCE_VIRTUELLE) Is Nothing) Then
                Me.tableSAV_SUBSTANCE_VIRTUELLE.InitVars
            End If
        End If
        Me.tableMVPF_MED_VIR_PERE_FORME = CType(MyBase.Tables("MVPF_MED_VIR_PERE_FORME"),MVPF_MED_VIR_PERE_FORMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPF_MED_VIR_PERE_FORME) Is Nothing) Then
                Me.tableMVPF_MED_VIR_PERE_FORME.InitVars
            End If
        End If
        Me.tableCDFUCUM_UCUM = CType(MyBase.Tables("CDFUCUM_UCUM"),CDFUCUM_UCUMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFUCUM_UCUM) Is Nothing) Then
                Me.tableCDFUCUM_UCUM.InitVars
            End If
        End If
        Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE = CType(MyBase.Tables("MVPR_MEDICAMENT_VIRTUEL_PERE"),MVPR_MEDICAMENT_VIRTUEL_PEREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE) Is Nothing) Then
                Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.InitVars
            End If
        End If
        Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE = CType(MyBase.Tables("SYMVPR_SYN_MEDIC_VIRTUEL_PERE"),SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE) Is Nothing) Then
                Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.InitVars
            End If
        End If
        Me.tableMVPRMV_MED_VIR_VIR_PERE = CType(MyBase.Tables("MVPRMV_MED_VIR_VIR_PERE"),MVPRMV_MED_VIR_VIR_PEREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPRMV_MED_VIR_VIR_PERE) Is Nothing) Then
                Me.tableMVPRMV_MED_VIR_VIR_PERE.InitVars
            End If
        End If
        Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE = CType(MyBase.Tables("MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE"),MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE) Is Nothing) Then
                Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.InitVars
            End If
        End If
        Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE = CType(MyBase.Tables("MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE"),MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE) Is Nothing) Then
                Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.InitVars
            End If
        End If
        Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE = CType(MyBase.Tables("UNITFACTEQ_FACTEUR_EQUIVALENCE"),UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE) Is Nothing) Then
                Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.InitVars
            End If
        End If
        Me.tableGSP_GENERIQUE_SPECIALITE = CType(MyBase.Tables("GSP_GENERIQUE_SPECIALITE"),GSP_GENERIQUE_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGSP_GENERIQUE_SPECIALITE) Is Nothing) Then
                Me.tableGSP_GENERIQUE_SPECIALITE.InitVars
            End If
        End If
        Me.tableMVPSDU_MED_VIR_PERE_SA = CType(MyBase.Tables("MVPSDU_MED_VIR_PERE_SA"),MVPSDU_MED_VIR_PERE_SADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPSDU_MED_VIR_PERE_SA) Is Nothing) Then
                Me.tableMVPSDU_MED_VIR_PERE_SA.InitVars
            End If
        End If
        Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1 = CType(MyBase.Tables("PREDISPMAX_PRE_DISP_MAXIMALE1"),PREDISPMAX_PRE_DISP_MAXIMALE1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1) Is Nothing) Then
                Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.InitVars
            End If
        End If
        Me.tablePREDISP_PRE_DISPENSATION = CType(MyBase.Tables("PREDISP_PRE_DISPENSATION"),PREDISP_PRE_DISPENSATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDISP_PRE_DISPENSATION) Is Nothing) Then
                Me.tablePREDISP_PRE_DISPENSATION.InitVars
            End If
        End If
        Me.tablePREVOLSOL_VOLUME_SOLUTION = CType(MyBase.Tables("PREVOLSOL_VOLUME_SOLUTION"),PREVOLSOL_VOLUME_SOLUTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREVOLSOL_VOLUME_SOLUTION) Is Nothing) Then
                Me.tablePREVOLSOL_VOLUME_SOLUTION.InitVars
            End If
        End If
        Me.tablePREDISPMAX_PRE_DISP_MAXIMALE = CType(MyBase.Tables("PREDISPMAX_PRE_DISP_MAXIMALE"),PREDISPMAX_PRE_DISP_MAXIMALEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDISPMAX_PRE_DISP_MAXIMALE) Is Nothing) Then
                Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.InitVars
            End If
        End If
        Me.relationFK1_GREFTX = Me.Relations("FK1_GREFTX")
        Me.relationFK2_PREMAT_PRE_MATERIAU = Me.Relations("FK2_PREMAT_PRE_MATERIAU")
        Me.relationFK2_PRECAR_PRESENT_CARACTCOMP = Me.Relations("FK2_PRECAR_PRESENT_CARACTCOMP")
        Me.relationFK2_PRECONT_PRE_CONTENANT = Me.Relations("FK2_PRECONT_PRE_CONTENANT")
        Me.relationFK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV = Me.Relations("FK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV")
        Me.relationFOV_FORME_VIRTUELLE_MVPF = Me.Relations("FOV_FORME_VIRTUELLE_MVPF")
        Me.relationFK__CDFCDFU_C__CDFCD__292D09F3 = Me.Relations("FK__CDFCDFU_C__CDFCD__292D09F3")
        Me.relationFK__SYMVPR_SY__SYMVP__3A5795F5 = Me.Relations("FK__SYMVPR_SY__SYMVP__3A5795F5")
        Me.relationFK__MVPRMV_ME__MVPRM__3E2826D9 = Me.Relations("FK__MVPRMV_ME__MVPRM__3E2826D9")
        Me.relationFK__MVPRSAV_M__MVPRS__42ECDBF6 = Me.Relations("FK__MVPRSAV_M__MVPRS__42ECDBF6")
        Me.relationFK__MVPRSAV_M__MVPRS__43E1002F = Me.Relations("FK__MVPRSAV_M__MVPRS__43E1002F")
        Me.relationFK__MVPRFOV_M__MVPRF__46BD6CDA = Me.Relations("FK__MVPRFOV_M__MVPRF__46BD6CDA")
        Me.relationFK__MVPRFOV_M__MVPRF__47B19113 = Me.Relations("FK__MVPRFOV_M__MVPRF__47B19113")
        Me.relationFK_GSP1 = Me.Relations("FK_GSP1")
        Me.relationFK_GSP = Me.Relations("FK_GSP")
        Me.relationFK_SAV = Me.Relations("FK_SAV")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Nomenclature2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Nomenclature2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSYGSP_SYNONYME_GSP = New SYGSP_SYNONYME_GSPDataTable
        MyBase.Tables.Add(Me.tableSYGSP_SYNONYME_GSP)
        Me.tableSP_SPECIALITE = New SP_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableSP_SPECIALITE)
        Me.tablePRE_PRESENTATION = New PRE_PRESENTATIONDataTable
        MyBase.Tables.Add(Me.tablePRE_PRESENTATION)
        Me.tablePREUCD_COMMENT_DOSEUCD = New PREUCD_COMMENT_DOSEUCDDataTable
        MyBase.Tables.Add(Me.tablePREUCD_COMMENT_DOSEUCD)
        Me.tableCOCONT_COMPO_CONTENANT = New COCONT_COMPO_CONTENANTDataTable
        MyBase.Tables.Add(Me.tableCOCONT_COMPO_CONTENANT)
        Me.tablePRECONT_PRE_CONTENANT = New PRECONT_PRE_CONTENANTDataTable
        MyBase.Tables.Add(Me.tablePRECONT_PRE_CONTENANT)
        Me.tablePREMAT_PRE_MATERIAU = New PREMAT_PRE_MATERIAUDataTable
        MyBase.Tables.Add(Me.tablePREMAT_PRE_MATERIAU)
        Me.tablePRECAR_PRESENTATION_CARACTCOMP = New PRECAR_PRESENTATION_CARACTCOMPDataTable
        MyBase.Tables.Add(Me.tablePRECAR_PRESENTATION_CARACTCOMP)
        Me.tablePRECEMB_PRE_CAREMBALLAGE = New PRECEMB_PRE_CAREMBALLAGEDataTable
        MyBase.Tables.Add(Me.tablePRECEMB_PRE_CAREMBALLAGE)
        Me.tablePRETSS_PRESENTATION_TAUX = New PRETSS_PRESENTATION_TAUXDataTable
        MyBase.Tables.Add(Me.tablePRETSS_PRESENTATION_TAUX)
        Me.tablePRETSSH_PRE_TAUX_HOP = New PRETSSH_PRE_TAUX_HOPDataTable
        MyBase.Tables.Add(Me.tablePRETSSH_PRE_TAUX_HOP)
        Me.tablePRESTP_PRE_STP = New PRESTP_PRE_STPDataTable
        MyBase.Tables.Add(Me.tablePRESTP_PRE_STP)
        Me.tablePRESTC_STATUTCOMP_PRESENT = New PRESTC_STATUTCOMP_PRESENTDataTable
        MyBase.Tables.Add(Me.tablePRESTC_STATUTCOMP_PRESENT)
        Me.tablePRESTR_STATUT_REMBOURST = New PRESTR_STATUT_REMBOURSTDataTable
        MyBase.Tables.Add(Me.tablePRESTR_STATUT_REMBOURST)
        Me.tablePRESTRTX_TEXTE_STAT_REMBOURST = New PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
        MyBase.Tables.Add(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST)
        Me.tablePREPER_PRESENTATION_PERIO_CSV = New PREPER_PRESENTATION_PERIO_CSVDataTable
        MyBase.Tables.Add(Me.tablePREPER_PRESENTATION_PERIO_CSV)
        Me.tablePERCS_PERIODE_COND_CSV = New PERCS_PERIODE_COND_CSVDataTable
        MyBase.Tables.Add(Me.tablePERCS_PERIODE_COND_CSV)
        Me.tablePRECSVTX_TEXTE_CONSERV = New PRECSVTX_TEXTE_CONSERVDataTable
        MyBase.Tables.Add(Me.tablePRECSVTX_TEXTE_CONSERV)
        Me.tablePREDILI_LIEU_DISPENSAT = New PREDILI_LIEU_DISPENSATDataTable
        MyBase.Tables.Add(Me.tablePREDILI_LIEU_DISPENSAT)
        Me.tablePREDICO_COMMENT_DISPENSAT = New PREDICO_COMMENT_DISPENSATDataTable
        MyBase.Tables.Add(Me.tablePREDICO_COMMENT_DISPENSAT)
        Me.tablePREDITX_TEXTE_DISPENSAT = New PREDITX_TEXTE_DISPENSATDataTable
        MyBase.Tables.Add(Me.tablePREDITX_TEXTE_DISPENSAT)
        Me.tablePRESMR_PRE_SMR_ATR = New PRESMR_PRE_SMR_ATRDataTable
        MyBase.Tables.Add(Me.tablePRESMR_PRE_SMR_ATR)
        Me.tableGSAC_PERE_SUBACT = New GSAC_PERE_SUBACTDataTable
        MyBase.Tables.Add(Me.tableGSAC_PERE_SUBACT)
        Me.tableGREF_GROUPE_SPECIALITE_REF = New GREF_GROUPE_SPECIALITE_REFDataTable
        MyBase.Tables.Add(Me.tableGREF_GROUPE_SPECIALITE_REF)
        Me.tableSPGREFR_GROUPE_SPE_REF = New SPGREFR_GROUPE_SPE_REFDataTable
        MyBase.Tables.Add(Me.tableSPGREFR_GROUPE_SPE_REF)
        Me.tableGREFTX_TEXTE_GROUPE_REF = New GREFTX_TEXTE_GROUPE_REFDataTable
        MyBase.Tables.Add(Me.tableGREFTX_TEXTE_GROUPE_REF)
        Me.tableCOSAU_COMPO_SUBAUX1 = New COSAU_COMPO_SUBAUX1DataTable
        MyBase.Tables.Add(Me.tableCOSAU_COMPO_SUBAUX1)
        Me.tableGSAU_PERE_SUBAUX = New GSAU_PERE_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableGSAU_PERE_SUBAUX)
        Me.tableSYSAU_SYNONYME_SAU = New SYSAU_SYNONYME_SAUDataTable
        MyBase.Tables.Add(Me.tableSYSAU_SYNONYME_SAU)
        Me.tableSYFSAC_SYNONYMEFR_SUBACT = New SYFSAC_SYNONYMEFR_SUBACTDataTable
        MyBase.Tables.Add(Me.tableSYFSAC_SYNONYMEFR_SUBACT)
        Me.tableSYASAC_SYNONYMEANGLAIS_SAC = New SYASAC_SYNONYMEANGLAIS_SACDataTable
        MyBase.Tables.Add(Me.tableSYASAC_SYNONYMEANGLAIS_SAC)
        Me.tableSACCAS_SUBACT_CAS = New SACCAS_SUBACT_CASDataTable
        MyBase.Tables.Add(Me.tableSACCAS_SUBACT_CAS)
        Me.tableADSAC_AUTRE_DENOMINATION_SUBAC = New ADSAC_AUTRE_DENOMINATION_SUBACDataTable
        MyBase.Tables.Add(Me.tableADSAC_AUTRE_DENOMINATION_SUBAC)
        Me.tableSACCCH_SUBACT_CLASSECH = New SACCCH_SUBACT_CLASSECHDataTable
        MyBase.Tables.Add(Me.tableSACCCH_SUBACT_CLASSECH)
        Me.tableSACCPH_SUBACT_CLASSEPH = New SACCPH_SUBACT_CLASSEPHDataTable
        MyBase.Tables.Add(Me.tableSACCPH_SUBACT_CLASSEPH)
        Me.tableSACCATC_SUBACT_CLASSEATC = New SACCATC_SUBACT_CLASSEATCDataTable
        MyBase.Tables.Add(Me.tableSACCATC_SUBACT_CLASSEATC)
        Me.tableSAC_SUBACTIVE = New SAC_SUBACTIVEDataTable
        MyBase.Tables.Add(Me.tableSAC_SUBACTIVE)
        Me.tablePRECPSS = New PRECPSSDataTable
        MyBase.Tables.Add(Me.tablePRECPSS)
        Me.tableCOSAU_COMPO_SUBAUX = New COSAU_COMPO_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableCOSAU_COMPO_SUBAUX)
        Me.tablePREGREF_PRE_GROUPE_REF = New PREGREF_PRE_GROUPE_REFDataTable
        MyBase.Tables.Add(Me.tablePREGREF_PRE_GROUPE_REF)
        Me.tableSPGREFG_GROUPE_SPE_GENE = New SPGREFG_GROUPE_SPE_GENEDataTable
        MyBase.Tables.Add(Me.tableSPGREFG_GROUPE_SPE_GENE)
        Me.tablePREGREF_PRE_GROUPE_REF1 = New PREGREF_PRE_GROUPE_REF1DataTable
        MyBase.Tables.Add(Me.tablePREGREF_PRE_GROUPE_REF1)
        Me.tablePRIPRE_PRIX_PRESENTATION = New PRIPRE_PRIX_PRESENTATIONDataTable
        MyBase.Tables.Add(Me.tablePRIPRE_PRIX_PRESENTATION)
        Me.tableFORPRE_FORFAIT_PRE = New FORPRE_FORFAIT_PREDataTable
        MyBase.Tables.Add(Me.tableFORPRE_FORFAIT_PRE)
        Me.tableCDF_CODIF = New CDF_CODIFDataTable
        MyBase.Tables.Add(Me.tableCDF_CODIF)
        Me.tableCDFCDFU_CDFU = New CDFCDFU_CDFUDataTable
        MyBase.Tables.Add(Me.tableCDFCDFU_CDFU)
        Me.tableCATVO_CATEGORIEVOIE = New CATVO_CATEGORIEVOIEDataTable
        MyBase.Tables.Add(Me.tableCATVO_CATEGORIEVOIE)
        Me.tableFOV_FORME_VIRTUELLE = New FOV_FORME_VIRTUELLEDataTable
        MyBase.Tables.Add(Me.tableFOV_FORME_VIRTUELLE)
        Me.tableSAV_SUBSTANCE_VIRTUELLE = New SAV_SUBSTANCE_VIRTUELLEDataTable
        MyBase.Tables.Add(Me.tableSAV_SUBSTANCE_VIRTUELLE)
        Me.tableMVPF_MED_VIR_PERE_FORME = New MVPF_MED_VIR_PERE_FORMEDataTable
        MyBase.Tables.Add(Me.tableMVPF_MED_VIR_PERE_FORME)
        Me.tableCDFUCUM_UCUM = New CDFUCUM_UCUMDataTable
        MyBase.Tables.Add(Me.tableCDFUCUM_UCUM)
        Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE = New MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
        MyBase.Tables.Add(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE)
        Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE = New SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
        MyBase.Tables.Add(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE)
        Me.tableMVPRMV_MED_VIR_VIR_PERE = New MVPRMV_MED_VIR_VIR_PEREDataTable
        MyBase.Tables.Add(Me.tableMVPRMV_MED_VIR_VIR_PERE)
        Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE = New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
        MyBase.Tables.Add(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE)
        Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE = New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
        MyBase.Tables.Add(Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE)
        Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE = New UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
        MyBase.Tables.Add(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE)
        Me.tableGSP_GENERIQUE_SPECIALITE = New GSP_GENERIQUE_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableGSP_GENERIQUE_SPECIALITE)
        Me.tableMVPSDU_MED_VIR_PERE_SA = New MVPSDU_MED_VIR_PERE_SADataTable
        MyBase.Tables.Add(Me.tableMVPSDU_MED_VIR_PERE_SA)
        Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1 = New PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
        MyBase.Tables.Add(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1)
        Me.tablePREDISP_PRE_DISPENSATION = New PREDISP_PRE_DISPENSATIONDataTable
        MyBase.Tables.Add(Me.tablePREDISP_PRE_DISPENSATION)
        Me.tablePREVOLSOL_VOLUME_SOLUTION = New PREVOLSOL_VOLUME_SOLUTIONDataTable
        MyBase.Tables.Add(Me.tablePREVOLSOL_VOLUME_SOLUTION)
        Me.tablePREDISPMAX_PRE_DISP_MAXIMALE = New PREDISPMAX_PRE_DISP_MAXIMALEDataTable
        MyBase.Tables.Add(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("FK1_GREFTX", New Global.System.Data.DataColumn() {Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_CODE_SQ_PKColumn, Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATECR_PKColumn}, New Global.System.Data.DataColumn() {Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_CODE_FK_PKColumn, Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_DATECR_FK_PKColumn})
        Me.tableGREFTX_TEXTE_GROUPE_REF.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationFK1_GREFTX = New Global.System.Data.DataRelation("FK1_GREFTX", New Global.System.Data.DataColumn() {Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_CODE_SQ_PKColumn, Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATECR_PKColumn}, New Global.System.Data.DataColumn() {Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_CODE_FK_PKColumn, Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_DATECR_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_GREFTX)
        Me.relationFK2_PREMAT_PRE_MATERIAU = New Global.System.Data.DataRelation("FK2_PREMAT_PRE_MATERIAU", New Global.System.Data.DataColumn() {Me.tableCOCONT_COMPO_CONTENANT.COCONT_PRE_CODE_FK_PKColumn, Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUM_PKColumn}, New Global.System.Data.DataColumn() {Me.tablePREMAT_PRE_MATERIAU.PREMAT_PRE_CODE_FK_PKColumn, Me.tablePREMAT_PRE_MATERIAU.PREMAT_COCONT_NUM_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK2_PREMAT_PRE_MATERIAU)
        Me.relationFK2_PRECAR_PRESENT_CARACTCOMP = New Global.System.Data.DataRelation("FK2_PRECAR_PRESENT_CARACTCOMP", New Global.System.Data.DataColumn() {Me.tableCOCONT_COMPO_CONTENANT.COCONT_PRE_CODE_FK_PKColumn, Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUM_PKColumn}, New Global.System.Data.DataColumn() {Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_PRE_CODE_FK_PKColumn, Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_COCONT_NUM_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK2_PRECAR_PRESENT_CARACTCOMP)
        Me.relationFK2_PRECONT_PRE_CONTENANT = New Global.System.Data.DataRelation("FK2_PRECONT_PRE_CONTENANT", New Global.System.Data.DataColumn() {Me.tableCOCONT_COMPO_CONTENANT.COCONT_PRE_CODE_FK_PKColumn, Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUM_PKColumn}, New Global.System.Data.DataColumn() {Me.tablePRECONT_PRE_CONTENANT.PRECONT_PRE_CODE_FK_PKColumn, Me.tablePRECONT_PRE_CONTENANT.PRECONT_COCONT_NUM_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK2_PRECONT_PRE_CONTENANT)
        Me.relationFK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV = New Global.System.Data.DataRelation("FK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV", New Global.System.Data.DataColumn() {Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_NUM_CODE_PKColumn, Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_PRE_CODE_FK_PKColumn}, New Global.System.Data.DataColumn() {Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUM_CODE_PKColumn, Me.tablePERCS_PERIODE_COND_CSV.PERCS_PRE_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV)
        Me.relationFOV_FORME_VIRTUELLE_MVPF = New Global.System.Data.DataRelation("FOV_FORME_VIRTUELLE_MVPF", New Global.System.Data.DataColumn() {Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_FOV_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFOV_FORME_VIRTUELLE_MVPF)
        Me.relationFK__CDFCDFU_C__CDFCD__292D09F3 = New Global.System.Data.DataRelation("FK__CDFCDFU_C__CDFCD__292D09F3", New Global.System.Data.DataColumn() {Me.tableCDFUCUM_UCUM.CDFUCUM_CODE_PKColumn}, New Global.System.Data.DataColumn() {Me.tableCDFCDFU_CDFU.CDFCDFU_CDFUCUM_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__CDFCDFU_C__CDFCD__292D09F3)
        Me.relationFK__SYMVPR_SY__SYMVP__3A5795F5 = New Global.System.Data.DataRelation("FK__SYMVPR_SY__SYMVP__3A5795F5", New Global.System.Data.DataColumn() {Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_MVPR_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__SYMVPR_SY__SYMVP__3A5795F5)
        Me.relationFK__MVPRMV_ME__MVPRM__3E2826D9 = New Global.System.Data.DataRelation("FK__MVPRMV_ME__MVPRM__3E2826D9", New Global.System.Data.DataColumn() {Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPRMV_MED_VIR_VIR_PERE.MVPRMV_MVPR_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__MVPRMV_ME__MVPRM__3E2826D9)
        Me.relationFK__MVPRSAV_M__MVPRS__42ECDBF6 = New Global.System.Data.DataRelation("FK__MVPRSAV_M__MVPRS__42ECDBF6", New Global.System.Data.DataColumn() {Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_MVPR_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__MVPRSAV_M__MVPRS__42ECDBF6)
        Me.relationFK__MVPRSAV_M__MVPRS__43E1002F = New Global.System.Data.DataRelation("FK__MVPRSAV_M__MVPRS__43E1002F", New Global.System.Data.DataColumn() {Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_SAV_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__MVPRSAV_M__MVPRS__43E1002F)
        Me.relationFK__MVPRFOV_M__MVPRF__46BD6CDA = New Global.System.Data.DataRelation("FK__MVPRFOV_M__MVPRF__46BD6CDA", New Global.System.Data.DataColumn() {Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.MVPRFOV_MVPR_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__MVPRFOV_M__MVPRF__46BD6CDA)
        Me.relationFK__MVPRFOV_M__MVPRF__47B19113 = New Global.System.Data.DataRelation("FK__MVPRFOV_M__MVPRF__47B19113", New Global.System.Data.DataColumn() {Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.MVPRFOV_FOV_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__MVPRFOV_M__MVPRF__47B19113)
        Me.relationFK_GSP1 = New Global.System.Data.DataRelation("FK_GSP1", New Global.System.Data.DataColumn() {Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_GSP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_GSP1)
        Me.relationFK_GSP = New Global.System.Data.DataRelation("FK_GSP", New Global.System.Data.DataColumn() {Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_GSP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_GSP)
        Me.relationFK_SAV = New Global.System.Data.DataRelation("FK_SAV", New Global.System.Data.DataColumn() {Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_SAV_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_SAV)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYGSP_SYNONYME_GSP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSP_SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRE_PRESENTATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREUCD_COMMENT_DOSEUCD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOCONT_COMPO_CONTENANT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRECONT_PRE_CONTENANT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREMAT_PRE_MATERIAU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRECAR_PRESENTATION_CARACTCOMP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRECEMB_PRE_CAREMBALLAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRETSS_PRESENTATION_TAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRETSSH_PRE_TAUX_HOP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRESTP_PRE_STP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRESTC_STATUTCOMP_PRESENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRESTR_STATUT_REMBOURST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRESTRTX_TEXTE_STAT_REMBOURST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREPER_PRESENTATION_PERIO_CSV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePERCS_PERIODE_COND_CSV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRECSVTX_TEXTE_CONSERV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDILI_LIEU_DISPENSAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDICO_COMMENT_DISPENSAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDITX_TEXTE_DISPENSAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRESMR_PRE_SMR_ATR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGSAC_PERE_SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGREF_GROUPE_SPECIALITE_REF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPGREFR_GROUPE_SPE_REF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGREFTX_TEXTE_GROUPE_REF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOSAU_COMPO_SUBAUX1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGSAU_PERE_SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYSAU_SYNONYME_SAU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYFSAC_SYNONYMEFR_SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYASAC_SYNONYMEANGLAIS_SAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSACCAS_SUBACT_CAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeADSAC_AUTRE_DENOMINATION_SUBAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSACCCH_SUBACT_CLASSECH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSACCPH_SUBACT_CLASSEPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSACCATC_SUBACT_CLASSEATC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAC_SUBACTIVE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRECPSS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOSAU_COMPO_SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREGREF_PRE_GROUPE_REF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPGREFG_GROUPE_SPE_GENE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREGREF_PRE_GROUPE_REF1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRIPRE_PRIX_PRESENTATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFORPRE_FORFAIT_PRE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDF_CODIF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFCDFU_CDFU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCATVO_CATEGORIEVOIE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFOV_FORME_VIRTUELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAV_SUBSTANCE_VIRTUELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPF_MED_VIR_PERE_FORME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFUCUM_UCUM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPR_MEDICAMENT_VIRTUEL_PERE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYMVPR_SYN_MEDIC_VIRTUEL_PERE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPRMV_MED_VIR_VIR_PERE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUNITFACTEQ_FACTEUR_EQUIVALENCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGSP_GENERIQUE_SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPSDU_MED_VIR_PERE_SA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDISPMAX_PRE_DISP_MAXIMALE1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDISP_PRE_DISPENSATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREVOLSOL_VOLUME_SOLUTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDISPMAX_PRE_DISP_MAXIMALE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SYGSP_SYNONYME_GSPRowChangeEventHandler(ByVal sender As Object, ByVal e As SYGSP_SYNONYME_GSPRowChangeEvent)
    
    Public Delegate Sub SP_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As SP_SPECIALITERowChangeEvent)
    
    Public Delegate Sub PRE_PRESENTATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PRE_PRESENTATIONRowChangeEvent)
    
    Public Delegate Sub PREUCD_COMMENT_DOSEUCDRowChangeEventHandler(ByVal sender As Object, ByVal e As PREUCD_COMMENT_DOSEUCDRowChangeEvent)
    
    Public Delegate Sub COCONT_COMPO_CONTENANTRowChangeEventHandler(ByVal sender As Object, ByVal e As COCONT_COMPO_CONTENANTRowChangeEvent)
    
    Public Delegate Sub PRECONT_PRE_CONTENANTRowChangeEventHandler(ByVal sender As Object, ByVal e As PRECONT_PRE_CONTENANTRowChangeEvent)
    
    Public Delegate Sub PREMAT_PRE_MATERIAURowChangeEventHandler(ByVal sender As Object, ByVal e As PREMAT_PRE_MATERIAURowChangeEvent)
    
    Public Delegate Sub PRECAR_PRESENTATION_CARACTCOMPRowChangeEventHandler(ByVal sender As Object, ByVal e As PRECAR_PRESENTATION_CARACTCOMPRowChangeEvent)
    
    Public Delegate Sub PRECEMB_PRE_CAREMBALLAGERowChangeEventHandler(ByVal sender As Object, ByVal e As PRECEMB_PRE_CAREMBALLAGERowChangeEvent)
    
    Public Delegate Sub PRETSS_PRESENTATION_TAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As PRETSS_PRESENTATION_TAUXRowChangeEvent)
    
    Public Delegate Sub PRETSSH_PRE_TAUX_HOPRowChangeEventHandler(ByVal sender As Object, ByVal e As PRETSSH_PRE_TAUX_HOPRowChangeEvent)
    
    Public Delegate Sub PRESTP_PRE_STPRowChangeEventHandler(ByVal sender As Object, ByVal e As PRESTP_PRE_STPRowChangeEvent)
    
    Public Delegate Sub PRESTC_STATUTCOMP_PRESENTRowChangeEventHandler(ByVal sender As Object, ByVal e As PRESTC_STATUTCOMP_PRESENTRowChangeEvent)
    
    Public Delegate Sub PRESTR_STATUT_REMBOURSTRowChangeEventHandler(ByVal sender As Object, ByVal e As PRESTR_STATUT_REMBOURSTRowChangeEvent)
    
    Public Delegate Sub PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEventHandler(ByVal sender As Object, ByVal e As PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEvent)
    
    Public Delegate Sub PREPER_PRESENTATION_PERIO_CSVRowChangeEventHandler(ByVal sender As Object, ByVal e As PREPER_PRESENTATION_PERIO_CSVRowChangeEvent)
    
    Public Delegate Sub PERCS_PERIODE_COND_CSVRowChangeEventHandler(ByVal sender As Object, ByVal e As PERCS_PERIODE_COND_CSVRowChangeEvent)
    
    Public Delegate Sub PRECSVTX_TEXTE_CONSERVRowChangeEventHandler(ByVal sender As Object, ByVal e As PRECSVTX_TEXTE_CONSERVRowChangeEvent)
    
    Public Delegate Sub PREDILI_LIEU_DISPENSATRowChangeEventHandler(ByVal sender As Object, ByVal e As PREDILI_LIEU_DISPENSATRowChangeEvent)
    
    Public Delegate Sub PREDICO_COMMENT_DISPENSATRowChangeEventHandler(ByVal sender As Object, ByVal e As PREDICO_COMMENT_DISPENSATRowChangeEvent)
    
    Public Delegate Sub PREDITX_TEXTE_DISPENSATRowChangeEventHandler(ByVal sender As Object, ByVal e As PREDITX_TEXTE_DISPENSATRowChangeEvent)
    
    Public Delegate Sub PRESMR_PRE_SMR_ATRRowChangeEventHandler(ByVal sender As Object, ByVal e As PRESMR_PRE_SMR_ATRRowChangeEvent)
    
    Public Delegate Sub GSAC_PERE_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As GSAC_PERE_SUBACTRowChangeEvent)
    
    Public Delegate Sub GREF_GROUPE_SPECIALITE_REFRowChangeEventHandler(ByVal sender As Object, ByVal e As GREF_GROUPE_SPECIALITE_REFRowChangeEvent)
    
    Public Delegate Sub SPGREFR_GROUPE_SPE_REFRowChangeEventHandler(ByVal sender As Object, ByVal e As SPGREFR_GROUPE_SPE_REFRowChangeEvent)
    
    Public Delegate Sub GREFTX_TEXTE_GROUPE_REFRowChangeEventHandler(ByVal sender As Object, ByVal e As GREFTX_TEXTE_GROUPE_REFRowChangeEvent)
    
    Public Delegate Sub COSAU_COMPO_SUBAUX1RowChangeEventHandler(ByVal sender As Object, ByVal e As COSAU_COMPO_SUBAUX1RowChangeEvent)
    
    Public Delegate Sub GSAU_PERE_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As GSAU_PERE_SUBAUXRowChangeEvent)
    
    Public Delegate Sub SYSAU_SYNONYME_SAURowChangeEventHandler(ByVal sender As Object, ByVal e As SYSAU_SYNONYME_SAURowChangeEvent)
    
    Public Delegate Sub SYFSAC_SYNONYMEFR_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As SYFSAC_SYNONYMEFR_SUBACTRowChangeEvent)
    
    Public Delegate Sub SYASAC_SYNONYMEANGLAIS_SACRowChangeEventHandler(ByVal sender As Object, ByVal e As SYASAC_SYNONYMEANGLAIS_SACRowChangeEvent)
    
    Public Delegate Sub SACCAS_SUBACT_CASRowChangeEventHandler(ByVal sender As Object, ByVal e As SACCAS_SUBACT_CASRowChangeEvent)
    
    Public Delegate Sub ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEventHandler(ByVal sender As Object, ByVal e As ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEvent)
    
    Public Delegate Sub SACCCH_SUBACT_CLASSECHRowChangeEventHandler(ByVal sender As Object, ByVal e As SACCCH_SUBACT_CLASSECHRowChangeEvent)
    
    Public Delegate Sub SACCPH_SUBACT_CLASSEPHRowChangeEventHandler(ByVal sender As Object, ByVal e As SACCPH_SUBACT_CLASSEPHRowChangeEvent)
    
    Public Delegate Sub SACCATC_SUBACT_CLASSEATCRowChangeEventHandler(ByVal sender As Object, ByVal e As SACCATC_SUBACT_CLASSEATCRowChangeEvent)
    
    Public Delegate Sub SAC_SUBACTIVERowChangeEventHandler(ByVal sender As Object, ByVal e As SAC_SUBACTIVERowChangeEvent)
    
    Public Delegate Sub PRECPSSRowChangeEventHandler(ByVal sender As Object, ByVal e As PRECPSSRowChangeEvent)
    
    Public Delegate Sub COSAU_COMPO_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As COSAU_COMPO_SUBAUXRowChangeEvent)
    
    Public Delegate Sub PREGREF_PRE_GROUPE_REFRowChangeEventHandler(ByVal sender As Object, ByVal e As PREGREF_PRE_GROUPE_REFRowChangeEvent)
    
    Public Delegate Sub SPGREFG_GROUPE_SPE_GENERowChangeEventHandler(ByVal sender As Object, ByVal e As SPGREFG_GROUPE_SPE_GENERowChangeEvent)
    
    Public Delegate Sub PREGREF_PRE_GROUPE_REF1RowChangeEventHandler(ByVal sender As Object, ByVal e As PREGREF_PRE_GROUPE_REF1RowChangeEvent)
    
    Public Delegate Sub PRIPRE_PRIX_PRESENTATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PRIPRE_PRIX_PRESENTATIONRowChangeEvent)
    
    Public Delegate Sub FORPRE_FORFAIT_PRERowChangeEventHandler(ByVal sender As Object, ByVal e As FORPRE_FORFAIT_PRERowChangeEvent)
    
    Public Delegate Sub CDF_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As CDF_CODIFRowChangeEvent)
    
    Public Delegate Sub CDFCDFU_CDFURowChangeEventHandler(ByVal sender As Object, ByVal e As CDFCDFU_CDFURowChangeEvent)
    
    Public Delegate Sub CATVO_CATEGORIEVOIERowChangeEventHandler(ByVal sender As Object, ByVal e As CATVO_CATEGORIEVOIERowChangeEvent)
    
    Public Delegate Sub FOV_FORME_VIRTUELLERowChangeEventHandler(ByVal sender As Object, ByVal e As FOV_FORME_VIRTUELLERowChangeEvent)
    
    Public Delegate Sub SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler(ByVal sender As Object, ByVal e As SAV_SUBSTANCE_VIRTUELLERowChangeEvent)
    
    Public Delegate Sub MVPF_MED_VIR_PERE_FORMERowChangeEventHandler(ByVal sender As Object, ByVal e As MVPF_MED_VIR_PERE_FORMERowChangeEvent)
    
    Public Delegate Sub CDFUCUM_UCUMRowChangeEventHandler(ByVal sender As Object, ByVal e As CDFUCUM_UCUMRowChangeEvent)
    
    Public Delegate Sub MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEventHandler(ByVal sender As Object, ByVal e As MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEvent)
    
    Public Delegate Sub SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEventHandler(ByVal sender As Object, ByVal e As SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEvent)
    
    Public Delegate Sub MVPRMV_MED_VIR_VIR_PERERowChangeEventHandler(ByVal sender As Object, ByVal e As MVPRMV_MED_VIR_VIR_PERERowChangeEvent)
    
    Public Delegate Sub MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEventHandler(ByVal sender As Object, ByVal e As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEvent)
    
    Public Delegate Sub MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEventHandler(ByVal sender As Object, ByVal e As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEvent)
    
    Public Delegate Sub UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEventHandler(ByVal sender As Object, ByVal e As UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEvent)
    
    Public Delegate Sub GSP_GENERIQUE_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As GSP_GENERIQUE_SPECIALITERowChangeEvent)
    
    Public Delegate Sub MVPSDU_MED_VIR_PERE_SARowChangeEventHandler(ByVal sender As Object, ByVal e As MVPSDU_MED_VIR_PERE_SARowChangeEvent)
    
    Public Delegate Sub PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEventHandler(ByVal sender As Object, ByVal e As PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEvent)
    
    Public Delegate Sub PREDISP_PRE_DISPENSATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PREDISP_PRE_DISPENSATIONRowChangeEvent)
    
    Public Delegate Sub PREVOLSOL_VOLUME_SOLUTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PREVOLSOL_VOLUME_SOLUTIONRowChangeEvent)
    
    Public Delegate Sub PREDISPMAX_PRE_DISP_MAXIMALERowChangeEventHandler(ByVal sender As Object, ByVal e As PREDISPMAX_PRE_DISP_MAXIMALERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYGSP_SYNONYME_GSPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYGSP_NOM_PK As Global.System.Data.DataColumn
        
        Private columnSYGSP_GSP_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSYGSP_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYGSP_SYNONYME_GSP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYGSP_NOM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYGSP_NOM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYGSP_GSP_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYGSP_GSP_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYGSP_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYGSP_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYGSP_SYNONYME_GSPRow
            Get
                Return CType(Me.Rows(index),SYGSP_SYNONYME_GSPRow)
            End Get
        End Property
        
        Public Event SYGSP_SYNONYME_GSPRowChanging As SYGSP_SYNONYME_GSPRowChangeEventHandler
        
        Public Event SYGSP_SYNONYME_GSPRowChanged As SYGSP_SYNONYME_GSPRowChangeEventHandler
        
        Public Event SYGSP_SYNONYME_GSPRowDeleting As SYGSP_SYNONYME_GSPRowChangeEventHandler
        
        Public Event SYGSP_SYNONYME_GSPRowDeleted As SYGSP_SYNONYME_GSPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYGSP_SYNONYME_GSPRow(ByVal row As SYGSP_SYNONYME_GSPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYGSP_SYNONYME_GSPRow(ByVal SYGSP_NOM_PK As String, ByVal SYGSP_GSP_CODE_FK As Integer, ByVal SYGSP_NUMORD As Short) As SYGSP_SYNONYME_GSPRow
            Dim rowSYGSP_SYNONYME_GSPRow As SYGSP_SYNONYME_GSPRow = CType(Me.NewRow,SYGSP_SYNONYME_GSPRow)
            Dim columnValuesArray() As Object = New Object() {SYGSP_NOM_PK, SYGSP_GSP_CODE_FK, SYGSP_NUMORD}
            rowSYGSP_SYNONYME_GSPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYGSP_SYNONYME_GSPRow)
            Return rowSYGSP_SYNONYME_GSPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYGSP_NOM_PK(ByVal SYGSP_NOM_PK As String) As SYGSP_SYNONYME_GSPRow
            Return CType(Me.Rows.Find(New Object() {SYGSP_NOM_PK}),SYGSP_SYNONYME_GSPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYGSP_SYNONYME_GSPDataTable = CType(MyBase.Clone,SYGSP_SYNONYME_GSPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYGSP_SYNONYME_GSPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYGSP_NOM_PK = MyBase.Columns("SYGSP_NOM_PK")
            Me.columnSYGSP_GSP_CODE_FK = MyBase.Columns("SYGSP_GSP_CODE_FK")
            Me.columnSYGSP_NUMORD = MyBase.Columns("SYGSP_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYGSP_NOM_PK = New Global.System.Data.DataColumn("SYGSP_NOM_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYGSP_NOM_PK)
            Me.columnSYGSP_GSP_CODE_FK = New Global.System.Data.DataColumn("SYGSP_GSP_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYGSP_GSP_CODE_FK)
            Me.columnSYGSP_NUMORD = New Global.System.Data.DataColumn("SYGSP_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYGSP_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYGSP_NOM_PK}, true))
            Me.columnSYGSP_NOM_PK.AllowDBNull = false
            Me.columnSYGSP_NOM_PK.Unique = true
            Me.columnSYGSP_NOM_PK.MaxLength = 255
            Me.columnSYGSP_GSP_CODE_FK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYGSP_SYNONYME_GSPRow() As SYGSP_SYNONYME_GSPRow
            Return CType(Me.NewRow,SYGSP_SYNONYME_GSPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYGSP_SYNONYME_GSPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYGSP_SYNONYME_GSPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYGSP_SYNONYME_GSPRowChangedEvent) Is Nothing) Then
                RaiseEvent SYGSP_SYNONYME_GSPRowChanged(Me, New SYGSP_SYNONYME_GSPRowChangeEvent(CType(e.Row,SYGSP_SYNONYME_GSPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYGSP_SYNONYME_GSPRowChangingEvent) Is Nothing) Then
                RaiseEvent SYGSP_SYNONYME_GSPRowChanging(Me, New SYGSP_SYNONYME_GSPRowChangeEvent(CType(e.Row,SYGSP_SYNONYME_GSPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYGSP_SYNONYME_GSPRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYGSP_SYNONYME_GSPRowDeleted(Me, New SYGSP_SYNONYME_GSPRowChangeEvent(CType(e.Row,SYGSP_SYNONYME_GSPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYGSP_SYNONYME_GSPRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYGSP_SYNONYME_GSPRowDeleting(Me, New SYGSP_SYNONYME_GSPRowChangeEvent(CType(e.Row,SYGSP_SYNONYME_GSPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYGSP_SYNONYME_GSPRow(ByVal row As SYGSP_SYNONYME_GSPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYGSP_SYNONYME_GSPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SP_SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSP_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSP_GSP_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CDF_SLAB_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CDF_LI_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CATC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CEPH_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CGE_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_PR_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_TYPE_SPE As Global.System.Data.DataColumn
        
        Private columnSP_GREF_FK As Global.System.Data.DataColumn
        
        Private columnSP_GREF_DATECR_FK As Global.System.Data.DataColumn
        
        Private columnSP_NOM As Global.System.Data.DataColumn
        
        Private columnSP_NOMCOMP As Global.System.Data.DataColumn
        
        Private columnSP_PH As Global.System.Data.DataColumn
        
        Private columnSP_CIPUCD As Global.System.Data.DataColumn
        
        Private columnSP_DATECR As Global.System.Data.DataColumn
        
        Private columnSP_DATEMJ As Global.System.Data.DataColumn
        
        Private columnSP_NL As Global.System.Data.DataColumn
        
        Private columnSP_APHP As Global.System.Data.DataColumn
        
        Private columnSP_DATEJOGENE As Global.System.Data.DataColumn
        
        Private columnSP_ORIGINE_GENE As Global.System.Data.DataColumn
        
        Private columnSP_NOMLONG As Global.System.Data.DataColumn
        
        Private columnSP_CDT_PRESCR_TEXTE As Global.System.Data.DataColumn
        
        Private columnSP_ATC_DDD_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SP_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GSP_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_GSP_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_SLAB_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_SLAB_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_LI_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_LI_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CATC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CATC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CEPH_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CEPH_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CGE_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CGE_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PR_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_PR_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_TYPE_SPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_TYPE_SPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_DATECR_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_DATECR_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMCOMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NOMCOMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CIPUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CIPUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_APHPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_APHP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEJOGENEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_DATEJOGENE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ORIGINE_GENEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_ORIGINE_GENE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMLONGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NOMLONG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDT_PRESCR_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CDT_PRESCR_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ATC_DDD_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_ATC_DDD_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_SPECIALITERow
            Get
                Return CType(Me.Rows(index),SP_SPECIALITERow)
            End Get
        End Property
        
        Public Event SP_SPECIALITERowChanging As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowChanged As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleting As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleted As SP_SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSP_SPECIALITERow( _
                    ByVal SP_CODE_SQ_PK As Integer,  _
                    ByVal SP_GSP_CODE_FK As Integer,  _
                    ByVal SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal SP_CDF_LI_CODE_FK As String,  _
                    ByVal SP_CATC_CODE_FK As String,  _
                    ByVal SP_CEPH_CODE_FK As String,  _
                    ByVal SP_CGE_CODE_FK As Integer,  _
                    ByVal SP_PR_CODE_FK As Integer,  _
                    ByVal SP_TYPE_SPE As String,  _
                    ByVal SP_GREF_FK As Integer,  _
                    ByVal SP_GREF_DATECR_FK As Date,  _
                    ByVal SP_NOM As String,  _
                    ByVal SP_NOMCOMP As String,  _
                    ByVal SP_PH As String,  _
                    ByVal SP_CIPUCD As String,  _
                    ByVal SP_DATECR As Date,  _
                    ByVal SP_DATEMJ As Date,  _
                    ByVal SP_NL As String,  _
                    ByVal SP_APHP As String,  _
                    ByVal SP_DATEJOGENE As Date,  _
                    ByVal SP_ORIGINE_GENE As String,  _
                    ByVal SP_NOMLONG As String,  _
                    ByVal SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal SP_ATC_DDD_TEXTE As String) As SP_SPECIALITERow
            Dim rowSP_SPECIALITERow As SP_SPECIALITERow = CType(Me.NewRow,SP_SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE}
            rowSP_SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSP_SPECIALITERow)
            Return rowSP_SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySP_CODE_SQ_PK(ByVal SP_CODE_SQ_PK As Integer) As SP_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {SP_CODE_SQ_PK}),SP_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SP_SPECIALITEDataTable = CType(MyBase.Clone,SP_SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SP_SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSP_CODE_SQ_PK = MyBase.Columns("SP_CODE_SQ_PK")
            Me.columnSP_GSP_CODE_FK = MyBase.Columns("SP_GSP_CODE_FK")
            Me.columnSP_CDF_SLAB_CODE_FK = MyBase.Columns("SP_CDF_SLAB_CODE_FK")
            Me.columnSP_CDF_LI_CODE_FK = MyBase.Columns("SP_CDF_LI_CODE_FK")
            Me.columnSP_CATC_CODE_FK = MyBase.Columns("SP_CATC_CODE_FK")
            Me.columnSP_CEPH_CODE_FK = MyBase.Columns("SP_CEPH_CODE_FK")
            Me.columnSP_CGE_CODE_FK = MyBase.Columns("SP_CGE_CODE_FK")
            Me.columnSP_PR_CODE_FK = MyBase.Columns("SP_PR_CODE_FK")
            Me.columnSP_TYPE_SPE = MyBase.Columns("SP_TYPE_SPE")
            Me.columnSP_GREF_FK = MyBase.Columns("SP_GREF_FK")
            Me.columnSP_GREF_DATECR_FK = MyBase.Columns("SP_GREF_DATECR_FK")
            Me.columnSP_NOM = MyBase.Columns("SP_NOM")
            Me.columnSP_NOMCOMP = MyBase.Columns("SP_NOMCOMP")
            Me.columnSP_PH = MyBase.Columns("SP_PH")
            Me.columnSP_CIPUCD = MyBase.Columns("SP_CIPUCD")
            Me.columnSP_DATECR = MyBase.Columns("SP_DATECR")
            Me.columnSP_DATEMJ = MyBase.Columns("SP_DATEMJ")
            Me.columnSP_NL = MyBase.Columns("SP_NL")
            Me.columnSP_APHP = MyBase.Columns("SP_APHP")
            Me.columnSP_DATEJOGENE = MyBase.Columns("SP_DATEJOGENE")
            Me.columnSP_ORIGINE_GENE = MyBase.Columns("SP_ORIGINE_GENE")
            Me.columnSP_NOMLONG = MyBase.Columns("SP_NOMLONG")
            Me.columnSP_CDT_PRESCR_TEXTE = MyBase.Columns("SP_CDT_PRESCR_TEXTE")
            Me.columnSP_ATC_DDD_TEXTE = MyBase.Columns("SP_ATC_DDD_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSP_CODE_SQ_PK = New Global.System.Data.DataColumn("SP_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CODE_SQ_PK)
            Me.columnSP_GSP_CODE_FK = New Global.System.Data.DataColumn("SP_GSP_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GSP_CODE_FK)
            Me.columnSP_CDF_SLAB_CODE_FK = New Global.System.Data.DataColumn("SP_CDF_SLAB_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_SLAB_CODE_FK)
            Me.columnSP_CDF_LI_CODE_FK = New Global.System.Data.DataColumn("SP_CDF_LI_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_LI_CODE_FK)
            Me.columnSP_CATC_CODE_FK = New Global.System.Data.DataColumn("SP_CATC_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CATC_CODE_FK)
            Me.columnSP_CEPH_CODE_FK = New Global.System.Data.DataColumn("SP_CEPH_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CEPH_CODE_FK)
            Me.columnSP_CGE_CODE_FK = New Global.System.Data.DataColumn("SP_CGE_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CGE_CODE_FK)
            Me.columnSP_PR_CODE_FK = New Global.System.Data.DataColumn("SP_PR_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PR_CODE_FK)
            Me.columnSP_TYPE_SPE = New Global.System.Data.DataColumn("SP_TYPE_SPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_TYPE_SPE)
            Me.columnSP_GREF_FK = New Global.System.Data.DataColumn("SP_GREF_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_FK)
            Me.columnSP_GREF_DATECR_FK = New Global.System.Data.DataColumn("SP_GREF_DATECR_FK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_DATECR_FK)
            Me.columnSP_NOM = New Global.System.Data.DataColumn("SP_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOM)
            Me.columnSP_NOMCOMP = New Global.System.Data.DataColumn("SP_NOMCOMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMCOMP)
            Me.columnSP_PH = New Global.System.Data.DataColumn("SP_PH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PH)
            Me.columnSP_CIPUCD = New Global.System.Data.DataColumn("SP_CIPUCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CIPUCD)
            Me.columnSP_DATECR = New Global.System.Data.DataColumn("SP_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATECR)
            Me.columnSP_DATEMJ = New Global.System.Data.DataColumn("SP_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEMJ)
            Me.columnSP_NL = New Global.System.Data.DataColumn("SP_NL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NL)
            Me.columnSP_APHP = New Global.System.Data.DataColumn("SP_APHP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_APHP)
            Me.columnSP_DATEJOGENE = New Global.System.Data.DataColumn("SP_DATEJOGENE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEJOGENE)
            Me.columnSP_ORIGINE_GENE = New Global.System.Data.DataColumn("SP_ORIGINE_GENE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ORIGINE_GENE)
            Me.columnSP_NOMLONG = New Global.System.Data.DataColumn("SP_NOMLONG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMLONG)
            Me.columnSP_CDT_PRESCR_TEXTE = New Global.System.Data.DataColumn("SP_CDT_PRESCR_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDT_PRESCR_TEXTE)
            Me.columnSP_ATC_DDD_TEXTE = New Global.System.Data.DataColumn("SP_ATC_DDD_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ATC_DDD_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSP_CODE_SQ_PK}, true))
            Me.columnSP_CODE_SQ_PK.AllowDBNull = false
            Me.columnSP_CODE_SQ_PK.Unique = true
            Me.columnSP_CDF_SLAB_CODE_FK.AllowDBNull = false
            Me.columnSP_CDF_SLAB_CODE_FK.MaxLength = 10
            Me.columnSP_CDF_LI_CODE_FK.AllowDBNull = false
            Me.columnSP_CDF_LI_CODE_FK.MaxLength = 10
            Me.columnSP_CATC_CODE_FK.MaxLength = 10
            Me.columnSP_CEPH_CODE_FK.MaxLength = 10
            Me.columnSP_PR_CODE_FK.AllowDBNull = false
            Me.columnSP_TYPE_SPE.MaxLength = 1
            Me.columnSP_NOM.AllowDBNull = false
            Me.columnSP_NOM.MaxLength = 36
            Me.columnSP_NOMCOMP.MaxLength = 255
            Me.columnSP_PH.MaxLength = 10
            Me.columnSP_CIPUCD.MaxLength = 7
            Me.columnSP_DATECR.AllowDBNull = false
            Me.columnSP_NL.MaxLength = 13
            Me.columnSP_APHP.MaxLength = 7
            Me.columnSP_ORIGINE_GENE.MaxLength = 1
            Me.columnSP_NOMLONG.MaxLength = 255
            Me.columnSP_CDT_PRESCR_TEXTE.MaxLength = 4000
            Me.columnSP_ATC_DDD_TEXTE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSP_SPECIALITERow() As SP_SPECIALITERow
            Return CType(Me.NewRow,SP_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SP_SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SP_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanged(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanging(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleted(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleting(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SP_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRE_PRESENTATIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRE_CODE_PK As Global.System.Data.DataColumn
        
        Private columnPRE_SP_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_EAN_REF As Global.System.Data.DataColumn
        
        Private columnPRE_NBUNITE As Global.System.Data.DataColumn
        
        Private columnPRE_CDF_UP_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_CACDT_TEXTE As Global.System.Data.DataColumn
        
        Private columnPRE_CDF_RH_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_CDF_LI_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_ETAT_COMMER As Global.System.Data.DataColumn
        
        Private columnPRE_DATECOMMER As Global.System.Data.DataColumn
        
        Private columnPRE_DATESUP As Global.System.Data.DataColumn
        
        Private columnPRE_CDF_PU_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_CEPH_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_CATC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_NATUCD_CDF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRE_NATUCD_CDF_NUM_FK As Global.System.Data.DataColumn
        
        Private columnPRE_DATEJOCIP As Global.System.Data.DataColumn
        
        Private columnPRE_AGRCOLL As Global.System.Data.DataColumn
        
        Private columnPRE_DATEJOCOLL As Global.System.Data.DataColumn
        
        Private columnPRE_DATEFINCOLL As Global.System.Data.DataColumn
        
        Private columnPRE_DATE_APPLIFINCOLL As Global.System.Data.DataColumn
        
        Private columnPRE_PARTSTATUT As Global.System.Data.DataColumn
        
        Private columnPRE_TSS_TEXTE As Global.System.Data.DataColumn
        
        Private columnPRE_CONSAPOUV As Global.System.Data.DataColumn
        
        Private columnPRE_LIB_CEPS As Global.System.Data.DataColumn
        
        Private columnPRE_ADMIN As Global.System.Data.DataColumn
        
        Private columnPRE_DATECR As Global.System.Data.DataColumn
        
        Private columnPRE_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRE_PRESENTATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_SP_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_SP_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_EAN_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_EAN_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_NBUNITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_NBUNITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_UP_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_UP_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CACDT_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CACDT_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_RH_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_RH_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_LI_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_LI_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_ETAT_COMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_ETAT_COMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATECOMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATECOMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATESUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATESUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_PU_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_PU_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CEPH_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CEPH_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CATC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CATC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_NATUCD_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_NATUCD_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_NATUCD_CDF_NUM_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_NATUCD_CDF_NUM_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEJOCIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEJOCIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_AGRCOLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_AGRCOLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEJOCOLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEJOCOLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEFINCOLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEFINCOLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATE_APPLIFINCOLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATE_APPLIFINCOLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_PARTSTATUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_PARTSTATUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_TSS_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_TSS_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CONSAPOUVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_CONSAPOUV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_LIB_CEPSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_LIB_CEPS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_ADMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_ADMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRE_PRESENTATIONRow
            Get
                Return CType(Me.Rows(index),PRE_PRESENTATIONRow)
            End Get
        End Property
        
        Public Event PRE_PRESENTATIONRowChanging As PRE_PRESENTATIONRowChangeEventHandler
        
        Public Event PRE_PRESENTATIONRowChanged As PRE_PRESENTATIONRowChangeEventHandler
        
        Public Event PRE_PRESENTATIONRowDeleting As PRE_PRESENTATIONRowChangeEventHandler
        
        Public Event PRE_PRESENTATIONRowDeleted As PRE_PRESENTATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRE_PRESENTATIONRow(ByVal row As PRE_PRESENTATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRE_PRESENTATIONRow( _
                    ByVal PRE_CODE_PK As String,  _
                    ByVal PRE_SP_CODE_FK As Integer,  _
                    ByVal PRE_EAN_REF As String,  _
                    ByVal PRE_NBUNITE As Short,  _
                    ByVal PRE_CDF_UP_CODE_FK As String,  _
                    ByVal PRE_CACDT_TEXTE As String,  _
                    ByVal PRE_CDF_RH_CODE_FK As String,  _
                    ByVal PRE_CDF_LI_CODE_FK As String,  _
                    ByVal PRE_ETAT_COMMER As String,  _
                    ByVal PRE_DATECOMMER As Date,  _
                    ByVal PRE_DATESUP As Date,  _
                    ByVal PRE_CDF_PU_CODE_FK As String,  _
                    ByVal PRE_CEPH_CODE_FK As String,  _
                    ByVal PRE_CATC_CODE_FK As String,  _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String,  _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String,  _
                    ByVal PRE_DATEJOCIP As Date,  _
                    ByVal PRE_AGRCOLL As String,  _
                    ByVal PRE_DATEJOCOLL As Date,  _
                    ByVal PRE_DATEFINCOLL As Date,  _
                    ByVal PRE_DATE_APPLIFINCOLL As Date,  _
                    ByVal PRE_PARTSTATUT As String,  _
                    ByVal PRE_TSS_TEXTE As String,  _
                    ByVal PRE_CONSAPOUV As String,  _
                    ByVal PRE_LIB_CEPS As String,  _
                    ByVal PRE_ADMIN As String,  _
                    ByVal PRE_DATECR As Date,  _
                    ByVal PRE_DATEMJ As Date) As PRE_PRESENTATIONRow
            Dim rowPRE_PRESENTATIONRow As PRE_PRESENTATIONRow = CType(Me.NewRow,PRE_PRESENTATIONRow)
            Dim columnValuesArray() As Object = New Object() {PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ETAT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PRE_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PRE_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATUT, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ}
            rowPRE_PRESENTATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRE_PRESENTATIONRow)
            Return rowPRE_PRESENTATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRE_CODE_PK(ByVal PRE_CODE_PK As String) As PRE_PRESENTATIONRow
            Return CType(Me.Rows.Find(New Object() {PRE_CODE_PK}),PRE_PRESENTATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRE_PRESENTATIONDataTable = CType(MyBase.Clone,PRE_PRESENTATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRE_PRESENTATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRE_CODE_PK = MyBase.Columns("PRE_CODE_PK")
            Me.columnPRE_SP_CODE_FK = MyBase.Columns("PRE_SP_CODE_FK")
            Me.columnPRE_EAN_REF = MyBase.Columns("PRE_EAN_REF")
            Me.columnPRE_NBUNITE = MyBase.Columns("PRE_NBUNITE")
            Me.columnPRE_CDF_UP_CODE_FK = MyBase.Columns("PRE_CDF_UP_CODE_FK")
            Me.columnPRE_CACDT_TEXTE = MyBase.Columns("PRE_CACDT_TEXTE")
            Me.columnPRE_CDF_RH_CODE_FK = MyBase.Columns("PRE_CDF_RH_CODE_FK")
            Me.columnPRE_CDF_LI_CODE_FK = MyBase.Columns("PRE_CDF_LI_CODE_FK")
            Me.columnPRE_ETAT_COMMER = MyBase.Columns("PRE_ETAT_COMMER")
            Me.columnPRE_DATECOMMER = MyBase.Columns("PRE_DATECOMMER")
            Me.columnPRE_DATESUP = MyBase.Columns("PRE_DATESUP")
            Me.columnPRE_CDF_PU_CODE_FK = MyBase.Columns("PRE_CDF_PU_CODE_FK")
            Me.columnPRE_CEPH_CODE_FK = MyBase.Columns("PRE_CEPH_CODE_FK")
            Me.columnPRE_CATC_CODE_FK = MyBase.Columns("PRE_CATC_CODE_FK")
            Me.columnPRE_NATUCD_CDF_CODE_FK = MyBase.Columns("PRE_NATUCD_CDF_CODE_FK")
            Me.columnPRE_NATUCD_CDF_NUM_FK = MyBase.Columns("PRE_NATUCD_CDF_NUM_FK")
            Me.columnPRE_DATEJOCIP = MyBase.Columns("PRE_DATEJOCIP")
            Me.columnPRE_AGRCOLL = MyBase.Columns("PRE_AGRCOLL")
            Me.columnPRE_DATEJOCOLL = MyBase.Columns("PRE_DATEJOCOLL")
            Me.columnPRE_DATEFINCOLL = MyBase.Columns("PRE_DATEFINCOLL")
            Me.columnPRE_DATE_APPLIFINCOLL = MyBase.Columns("PRE_DATE_APPLIFINCOLL")
            Me.columnPRE_PARTSTATUT = MyBase.Columns("PRE_PARTSTATUT")
            Me.columnPRE_TSS_TEXTE = MyBase.Columns("PRE_TSS_TEXTE")
            Me.columnPRE_CONSAPOUV = MyBase.Columns("PRE_CONSAPOUV")
            Me.columnPRE_LIB_CEPS = MyBase.Columns("PRE_LIB_CEPS")
            Me.columnPRE_ADMIN = MyBase.Columns("PRE_ADMIN")
            Me.columnPRE_DATECR = MyBase.Columns("PRE_DATECR")
            Me.columnPRE_DATEMJ = MyBase.Columns("PRE_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRE_CODE_PK = New Global.System.Data.DataColumn("PRE_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CODE_PK)
            Me.columnPRE_SP_CODE_FK = New Global.System.Data.DataColumn("PRE_SP_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_SP_CODE_FK)
            Me.columnPRE_EAN_REF = New Global.System.Data.DataColumn("PRE_EAN_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_EAN_REF)
            Me.columnPRE_NBUNITE = New Global.System.Data.DataColumn("PRE_NBUNITE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_NBUNITE)
            Me.columnPRE_CDF_UP_CODE_FK = New Global.System.Data.DataColumn("PRE_CDF_UP_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_UP_CODE_FK)
            Me.columnPRE_CACDT_TEXTE = New Global.System.Data.DataColumn("PRE_CACDT_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CACDT_TEXTE)
            Me.columnPRE_CDF_RH_CODE_FK = New Global.System.Data.DataColumn("PRE_CDF_RH_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_RH_CODE_FK)
            Me.columnPRE_CDF_LI_CODE_FK = New Global.System.Data.DataColumn("PRE_CDF_LI_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_LI_CODE_FK)
            Me.columnPRE_ETAT_COMMER = New Global.System.Data.DataColumn("PRE_ETAT_COMMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_ETAT_COMMER)
            Me.columnPRE_DATECOMMER = New Global.System.Data.DataColumn("PRE_DATECOMMER", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATECOMMER)
            Me.columnPRE_DATESUP = New Global.System.Data.DataColumn("PRE_DATESUP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATESUP)
            Me.columnPRE_CDF_PU_CODE_FK = New Global.System.Data.DataColumn("PRE_CDF_PU_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_PU_CODE_FK)
            Me.columnPRE_CEPH_CODE_FK = New Global.System.Data.DataColumn("PRE_CEPH_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CEPH_CODE_FK)
            Me.columnPRE_CATC_CODE_FK = New Global.System.Data.DataColumn("PRE_CATC_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CATC_CODE_FK)
            Me.columnPRE_NATUCD_CDF_CODE_FK = New Global.System.Data.DataColumn("PRE_NATUCD_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_NATUCD_CDF_CODE_FK)
            Me.columnPRE_NATUCD_CDF_NUM_FK = New Global.System.Data.DataColumn("PRE_NATUCD_CDF_NUM_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_NATUCD_CDF_NUM_FK)
            Me.columnPRE_DATEJOCIP = New Global.System.Data.DataColumn("PRE_DATEJOCIP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEJOCIP)
            Me.columnPRE_AGRCOLL = New Global.System.Data.DataColumn("PRE_AGRCOLL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_AGRCOLL)
            Me.columnPRE_DATEJOCOLL = New Global.System.Data.DataColumn("PRE_DATEJOCOLL", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEJOCOLL)
            Me.columnPRE_DATEFINCOLL = New Global.System.Data.DataColumn("PRE_DATEFINCOLL", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEFINCOLL)
            Me.columnPRE_DATE_APPLIFINCOLL = New Global.System.Data.DataColumn("PRE_DATE_APPLIFINCOLL", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATE_APPLIFINCOLL)
            Me.columnPRE_PARTSTATUT = New Global.System.Data.DataColumn("PRE_PARTSTATUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_PARTSTATUT)
            Me.columnPRE_TSS_TEXTE = New Global.System.Data.DataColumn("PRE_TSS_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_TSS_TEXTE)
            Me.columnPRE_CONSAPOUV = New Global.System.Data.DataColumn("PRE_CONSAPOUV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CONSAPOUV)
            Me.columnPRE_LIB_CEPS = New Global.System.Data.DataColumn("PRE_LIB_CEPS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_LIB_CEPS)
            Me.columnPRE_ADMIN = New Global.System.Data.DataColumn("PRE_ADMIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_ADMIN)
            Me.columnPRE_DATECR = New Global.System.Data.DataColumn("PRE_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATECR)
            Me.columnPRE_DATEMJ = New Global.System.Data.DataColumn("PRE_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRE_CODE_PK}, true))
            Me.columnPRE_CODE_PK.AllowDBNull = false
            Me.columnPRE_CODE_PK.Unique = true
            Me.columnPRE_CODE_PK.MaxLength = 10
            Me.columnPRE_SP_CODE_FK.AllowDBNull = false
            Me.columnPRE_EAN_REF.MaxLength = 13
            Me.columnPRE_CDF_UP_CODE_FK.MaxLength = 10
            Me.columnPRE_CACDT_TEXTE.MaxLength = 4000
            Me.columnPRE_CDF_RH_CODE_FK.AllowDBNull = false
            Me.columnPRE_CDF_RH_CODE_FK.MaxLength = 10
            Me.columnPRE_CDF_LI_CODE_FK.MaxLength = 10
            Me.columnPRE_ETAT_COMMER.MaxLength = 2
            Me.columnPRE_CDF_PU_CODE_FK.MaxLength = 10
            Me.columnPRE_CEPH_CODE_FK.MaxLength = 10
            Me.columnPRE_CATC_CODE_FK.MaxLength = 10
            Me.columnPRE_NATUCD_CDF_CODE_FK.MaxLength = 10
            Me.columnPRE_NATUCD_CDF_NUM_FK.MaxLength = 2
            Me.columnPRE_AGRCOLL.MaxLength = 1
            Me.columnPRE_PARTSTATUT.MaxLength = 4000
            Me.columnPRE_TSS_TEXTE.MaxLength = 4000
            Me.columnPRE_CONSAPOUV.MaxLength = 2147483647
            Me.columnPRE_LIB_CEPS.MaxLength = 750
            Me.columnPRE_ADMIN.MaxLength = 600
            Me.columnPRE_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRE_PRESENTATIONRow() As PRE_PRESENTATIONRow
            Return CType(Me.NewRow,PRE_PRESENTATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRE_PRESENTATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRE_PRESENTATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRE_PRESENTATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowChanged(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRE_PRESENTATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowChanging(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRE_PRESENTATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowDeleted(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRE_PRESENTATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowDeleting(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRE_PRESENTATIONRow(ByVal row As PRE_PRESENTATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRE_PRESENTATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREUCD_COMMENT_DOSEUCDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREUCD_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREUCD_CDF_COMUCD_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREUCD_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREUCD_COMMENT_DOSEUCD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREUCD_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREUCD_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREUCD_CDF_COMUCD_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREUCD_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREUCD_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREUCD_COMMENT_DOSEUCDRow
            Get
                Return CType(Me.Rows(index),PREUCD_COMMENT_DOSEUCDRow)
            End Get
        End Property
        
        Public Event PREUCD_COMMENT_DOSEUCDRowChanging As PREUCD_COMMENT_DOSEUCDRowChangeEventHandler
        
        Public Event PREUCD_COMMENT_DOSEUCDRowChanged As PREUCD_COMMENT_DOSEUCDRowChangeEventHandler
        
        Public Event PREUCD_COMMENT_DOSEUCDRowDeleting As PREUCD_COMMENT_DOSEUCDRowChangeEventHandler
        
        Public Event PREUCD_COMMENT_DOSEUCDRowDeleted As PREUCD_COMMENT_DOSEUCDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREUCD_COMMENT_DOSEUCDRow(ByVal row As PREUCD_COMMENT_DOSEUCDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREUCD_COMMENT_DOSEUCDRow(ByVal PREUCD_PRE_CODE_FK_PK As String, ByVal PREUCD_CDF_COMUCD_CODE_FK_PK As String, ByVal PREUCD_NUMORD As Short) As PREUCD_COMMENT_DOSEUCDRow
            Dim rowPREUCD_COMMENT_DOSEUCDRow As PREUCD_COMMENT_DOSEUCDRow = CType(Me.NewRow,PREUCD_COMMENT_DOSEUCDRow)
            Dim columnValuesArray() As Object = New Object() {PREUCD_PRE_CODE_FK_PK, PREUCD_CDF_COMUCD_CODE_FK_PK, PREUCD_NUMORD}
            rowPREUCD_COMMENT_DOSEUCDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREUCD_COMMENT_DOSEUCDRow)
            Return rowPREUCD_COMMENT_DOSEUCDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREUCD_PRE_CODE_FK_PKPREUCD_CDF_COMUCD_CODE_FK_PK(ByVal PREUCD_PRE_CODE_FK_PK As String, ByVal PREUCD_CDF_COMUCD_CODE_FK_PK As String) As PREUCD_COMMENT_DOSEUCDRow
            Return CType(Me.Rows.Find(New Object() {PREUCD_PRE_CODE_FK_PK, PREUCD_CDF_COMUCD_CODE_FK_PK}),PREUCD_COMMENT_DOSEUCDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREUCD_COMMENT_DOSEUCDDataTable = CType(MyBase.Clone,PREUCD_COMMENT_DOSEUCDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREUCD_COMMENT_DOSEUCDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREUCD_PRE_CODE_FK_PK = MyBase.Columns("PREUCD_PRE_CODE_FK_PK")
            Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK = MyBase.Columns("PREUCD_CDF_COMUCD_CODE_FK_PK")
            Me.columnPREUCD_NUMORD = MyBase.Columns("PREUCD_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREUCD_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREUCD_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREUCD_PRE_CODE_FK_PK)
            Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK = New Global.System.Data.DataColumn("PREUCD_CDF_COMUCD_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK)
            Me.columnPREUCD_NUMORD = New Global.System.Data.DataColumn("PREUCD_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREUCD_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREUCD_PRE_CODE_FK_PK, Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK}, true))
            Me.columnPREUCD_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREUCD_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK.AllowDBNull = false
            Me.columnPREUCD_CDF_COMUCD_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREUCD_COMMENT_DOSEUCDRow() As PREUCD_COMMENT_DOSEUCDRow
            Return CType(Me.NewRow,PREUCD_COMMENT_DOSEUCDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREUCD_COMMENT_DOSEUCDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREUCD_COMMENT_DOSEUCDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREUCD_COMMENT_DOSEUCDRowChangedEvent) Is Nothing) Then
                RaiseEvent PREUCD_COMMENT_DOSEUCDRowChanged(Me, New PREUCD_COMMENT_DOSEUCDRowChangeEvent(CType(e.Row,PREUCD_COMMENT_DOSEUCDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREUCD_COMMENT_DOSEUCDRowChangingEvent) Is Nothing) Then
                RaiseEvent PREUCD_COMMENT_DOSEUCDRowChanging(Me, New PREUCD_COMMENT_DOSEUCDRowChangeEvent(CType(e.Row,PREUCD_COMMENT_DOSEUCDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREUCD_COMMENT_DOSEUCDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREUCD_COMMENT_DOSEUCDRowDeleted(Me, New PREUCD_COMMENT_DOSEUCDRowChangeEvent(CType(e.Row,PREUCD_COMMENT_DOSEUCDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREUCD_COMMENT_DOSEUCDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREUCD_COMMENT_DOSEUCDRowDeleting(Me, New PREUCD_COMMENT_DOSEUCDRowChangeEvent(CType(e.Row,PREUCD_COMMENT_DOSEUCDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREUCD_COMMENT_DOSEUCDRow(ByVal row As PREUCD_COMMENT_DOSEUCDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREUCD_COMMENT_DOSEUCDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COCONT_COMPO_CONTENANTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOCONT_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCOCONT_NUM_PK As Global.System.Data.DataColumn
        
        Private columnCOCONT_CDF_GAL_CODE_FK As Global.System.Data.DataColumn
        
        Private columnCOCONT_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COCONT_COMPO_CONTENANT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COCONT_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOCONT_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COCONT_NUM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOCONT_NUM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COCONT_CDF_GAL_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOCONT_CDF_GAL_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COCONT_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOCONT_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COCONT_COMPO_CONTENANTRow
            Get
                Return CType(Me.Rows(index),COCONT_COMPO_CONTENANTRow)
            End Get
        End Property
        
        Public Event COCONT_COMPO_CONTENANTRowChanging As COCONT_COMPO_CONTENANTRowChangeEventHandler
        
        Public Event COCONT_COMPO_CONTENANTRowChanged As COCONT_COMPO_CONTENANTRowChangeEventHandler
        
        Public Event COCONT_COMPO_CONTENANTRowDeleting As COCONT_COMPO_CONTENANTRowChangeEventHandler
        
        Public Event COCONT_COMPO_CONTENANTRowDeleted As COCONT_COMPO_CONTENANTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOCONT_COMPO_CONTENANTRow(ByVal row As COCONT_COMPO_CONTENANTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOCONT_COMPO_CONTENANTRow(ByVal COCONT_PRE_CODE_FK_PK As String, ByVal COCONT_NUM_PK As Byte, ByVal COCONT_CDF_GAL_CODE_FK As String, ByVal COCONT_NUMORD As Short) As COCONT_COMPO_CONTENANTRow
            Dim rowCOCONT_COMPO_CONTENANTRow As COCONT_COMPO_CONTENANTRow = CType(Me.NewRow,COCONT_COMPO_CONTENANTRow)
            Dim columnValuesArray() As Object = New Object() {COCONT_PRE_CODE_FK_PK, COCONT_NUM_PK, COCONT_CDF_GAL_CODE_FK, COCONT_NUMORD}
            rowCOCONT_COMPO_CONTENANTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOCONT_COMPO_CONTENANTRow)
            Return rowCOCONT_COMPO_CONTENANTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOCONT_PRE_CODE_FK_PKCOCONT_NUM_PK(ByVal COCONT_PRE_CODE_FK_PK As String, ByVal COCONT_NUM_PK As Byte) As COCONT_COMPO_CONTENANTRow
            Return CType(Me.Rows.Find(New Object() {COCONT_PRE_CODE_FK_PK, COCONT_NUM_PK}),COCONT_COMPO_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COCONT_COMPO_CONTENANTDataTable = CType(MyBase.Clone,COCONT_COMPO_CONTENANTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COCONT_COMPO_CONTENANTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOCONT_PRE_CODE_FK_PK = MyBase.Columns("COCONT_PRE_CODE_FK_PK")
            Me.columnCOCONT_NUM_PK = MyBase.Columns("COCONT_NUM_PK")
            Me.columnCOCONT_CDF_GAL_CODE_FK = MyBase.Columns("COCONT_CDF_GAL_CODE_FK")
            Me.columnCOCONT_NUMORD = MyBase.Columns("COCONT_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOCONT_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("COCONT_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOCONT_PRE_CODE_FK_PK)
            Me.columnCOCONT_NUM_PK = New Global.System.Data.DataColumn("COCONT_NUM_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOCONT_NUM_PK)
            Me.columnCOCONT_CDF_GAL_CODE_FK = New Global.System.Data.DataColumn("COCONT_CDF_GAL_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOCONT_CDF_GAL_CODE_FK)
            Me.columnCOCONT_NUMORD = New Global.System.Data.DataColumn("COCONT_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOCONT_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOCONT_PRE_CODE_FK_PK, Me.columnCOCONT_NUM_PK}, true))
            Me.columnCOCONT_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnCOCONT_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnCOCONT_NUM_PK.AllowDBNull = false
            Me.columnCOCONT_CDF_GAL_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOCONT_COMPO_CONTENANTRow() As COCONT_COMPO_CONTENANTRow
            Return CType(Me.NewRow,COCONT_COMPO_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COCONT_COMPO_CONTENANTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COCONT_COMPO_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COCONT_COMPO_CONTENANTRowChangedEvent) Is Nothing) Then
                RaiseEvent COCONT_COMPO_CONTENANTRowChanged(Me, New COCONT_COMPO_CONTENANTRowChangeEvent(CType(e.Row,COCONT_COMPO_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COCONT_COMPO_CONTENANTRowChangingEvent) Is Nothing) Then
                RaiseEvent COCONT_COMPO_CONTENANTRowChanging(Me, New COCONT_COMPO_CONTENANTRowChangeEvent(CType(e.Row,COCONT_COMPO_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COCONT_COMPO_CONTENANTRowDeletedEvent) Is Nothing) Then
                RaiseEvent COCONT_COMPO_CONTENANTRowDeleted(Me, New COCONT_COMPO_CONTENANTRowChangeEvent(CType(e.Row,COCONT_COMPO_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COCONT_COMPO_CONTENANTRowDeletingEvent) Is Nothing) Then
                RaiseEvent COCONT_COMPO_CONTENANTRowDeleting(Me, New COCONT_COMPO_CONTENANTRowChangeEvent(CType(e.Row,COCONT_COMPO_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOCONT_COMPO_CONTENANTRow(ByVal row As COCONT_COMPO_CONTENANTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COCONT_COMPO_CONTENANTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRECONT_PRE_CONTENANTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRECONT_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECONT_COCONT_NUM_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECONT_NBCONTENANT As Global.System.Data.DataColumn
        
        Private columnPRECONT_CDF_COCDT_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRECONT_NBCONTENANT_REEL As Global.System.Data.DataColumn
        
        Private columnPRECONT_NBCONTENANCE As Global.System.Data.DataColumn
        
        Private columnPRECONT_CDF_COCE_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPRECONT_VOLCONTENANT As Global.System.Data.DataColumn
        
        Private columnPRECONT_CDF_VOLCONT_CODE_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRECONT_PRE_CONTENANT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_COCONT_NUM_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_COCONT_NUM_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_NBCONTENANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_NBCONTENANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_CDF_COCDT_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_CDF_COCDT_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_NBCONTENANT_REELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_NBCONTENANT_REEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_NBCONTENANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_NBCONTENANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_CDF_COCE_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_CDF_COCE_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_VOLCONTENANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_VOLCONTENANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECONT_CDF_VOLCONT_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECONT_CDF_VOLCONT_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRECONT_PRE_CONTENANTRow
            Get
                Return CType(Me.Rows(index),PRECONT_PRE_CONTENANTRow)
            End Get
        End Property
        
        Public Event PRECONT_PRE_CONTENANTRowChanging As PRECONT_PRE_CONTENANTRowChangeEventHandler
        
        Public Event PRECONT_PRE_CONTENANTRowChanged As PRECONT_PRE_CONTENANTRowChangeEventHandler
        
        Public Event PRECONT_PRE_CONTENANTRowDeleting As PRECONT_PRE_CONTENANTRowChangeEventHandler
        
        Public Event PRECONT_PRE_CONTENANTRowDeleted As PRECONT_PRE_CONTENANTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRECONT_PRE_CONTENANTRow(ByVal row As PRECONT_PRE_CONTENANTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRECONT_PRE_CONTENANTRow(ByVal PRECONT_PRE_CODE_FK_PK As String, ByVal PRECONT_COCONT_NUM_FK_PK As Byte, ByVal PRECONT_NBCONTENANT As Integer, ByVal PRECONT_CDF_COCDT_CODE_FK As String, ByVal PRECONT_NBCONTENANT_REEL As String, ByVal PRECONT_NBCONTENANCE As Decimal, ByVal PRECONT_CDF_COCE_CODE_FK As String, ByVal PRECONT_VOLCONTENANT As Decimal, ByVal PRECONT_CDF_VOLCONT_CODE_FK As String) As PRECONT_PRE_CONTENANTRow
            Dim rowPRECONT_PRE_CONTENANTRow As PRECONT_PRE_CONTENANTRow = CType(Me.NewRow,PRECONT_PRE_CONTENANTRow)
            Dim columnValuesArray() As Object = New Object() {PRECONT_PRE_CODE_FK_PK, PRECONT_COCONT_NUM_FK_PK, PRECONT_NBCONTENANT, PRECONT_CDF_COCDT_CODE_FK, PRECONT_NBCONTENANT_REEL, PRECONT_NBCONTENANCE, PRECONT_CDF_COCE_CODE_FK, PRECONT_VOLCONTENANT, PRECONT_CDF_VOLCONT_CODE_FK}
            rowPRECONT_PRE_CONTENANTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRECONT_PRE_CONTENANTRow)
            Return rowPRECONT_PRE_CONTENANTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRECONT_PRE_CODE_FK_PKPRECONT_COCONT_NUM_FK_PK(ByVal PRECONT_PRE_CODE_FK_PK As String, ByVal PRECONT_COCONT_NUM_FK_PK As Byte) As PRECONT_PRE_CONTENANTRow
            Return CType(Me.Rows.Find(New Object() {PRECONT_PRE_CODE_FK_PK, PRECONT_COCONT_NUM_FK_PK}),PRECONT_PRE_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRECONT_PRE_CONTENANTDataTable = CType(MyBase.Clone,PRECONT_PRE_CONTENANTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRECONT_PRE_CONTENANTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRECONT_PRE_CODE_FK_PK = MyBase.Columns("PRECONT_PRE_CODE_FK_PK")
            Me.columnPRECONT_COCONT_NUM_FK_PK = MyBase.Columns("PRECONT_COCONT_NUM_FK_PK")
            Me.columnPRECONT_NBCONTENANT = MyBase.Columns("PRECONT_NBCONTENANT")
            Me.columnPRECONT_CDF_COCDT_CODE_FK = MyBase.Columns("PRECONT_CDF_COCDT_CODE_FK")
            Me.columnPRECONT_NBCONTENANT_REEL = MyBase.Columns("PRECONT_NBCONTENANT_REEL")
            Me.columnPRECONT_NBCONTENANCE = MyBase.Columns("PRECONT_NBCONTENANCE")
            Me.columnPRECONT_CDF_COCE_CODE_FK = MyBase.Columns("PRECONT_CDF_COCE_CODE_FK")
            Me.columnPRECONT_VOLCONTENANT = MyBase.Columns("PRECONT_VOLCONTENANT")
            Me.columnPRECONT_CDF_VOLCONT_CODE_FK = MyBase.Columns("PRECONT_CDF_VOLCONT_CODE_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRECONT_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRECONT_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_PRE_CODE_FK_PK)
            Me.columnPRECONT_COCONT_NUM_FK_PK = New Global.System.Data.DataColumn("PRECONT_COCONT_NUM_FK_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_COCONT_NUM_FK_PK)
            Me.columnPRECONT_NBCONTENANT = New Global.System.Data.DataColumn("PRECONT_NBCONTENANT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_NBCONTENANT)
            Me.columnPRECONT_CDF_COCDT_CODE_FK = New Global.System.Data.DataColumn("PRECONT_CDF_COCDT_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_CDF_COCDT_CODE_FK)
            Me.columnPRECONT_NBCONTENANT_REEL = New Global.System.Data.DataColumn("PRECONT_NBCONTENANT_REEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_NBCONTENANT_REEL)
            Me.columnPRECONT_NBCONTENANCE = New Global.System.Data.DataColumn("PRECONT_NBCONTENANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_NBCONTENANCE)
            Me.columnPRECONT_CDF_COCE_CODE_FK = New Global.System.Data.DataColumn("PRECONT_CDF_COCE_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_CDF_COCE_CODE_FK)
            Me.columnPRECONT_VOLCONTENANT = New Global.System.Data.DataColumn("PRECONT_VOLCONTENANT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_VOLCONTENANT)
            Me.columnPRECONT_CDF_VOLCONT_CODE_FK = New Global.System.Data.DataColumn("PRECONT_CDF_VOLCONT_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECONT_CDF_VOLCONT_CODE_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRECONT_PRE_CODE_FK_PK, Me.columnPRECONT_COCONT_NUM_FK_PK}, true))
            Me.columnPRECONT_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECONT_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRECONT_COCONT_NUM_FK_PK.AllowDBNull = false
            Me.columnPRECONT_CDF_COCDT_CODE_FK.MaxLength = 10
            Me.columnPRECONT_NBCONTENANT_REEL.MaxLength = 1
            Me.columnPRECONT_CDF_COCE_CODE_FK.MaxLength = 10
            Me.columnPRECONT_CDF_VOLCONT_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRECONT_PRE_CONTENANTRow() As PRECONT_PRE_CONTENANTRow
            Return CType(Me.NewRow,PRECONT_PRE_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRECONT_PRE_CONTENANTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRECONT_PRE_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRECONT_PRE_CONTENANTRowChangedEvent) Is Nothing) Then
                RaiseEvent PRECONT_PRE_CONTENANTRowChanged(Me, New PRECONT_PRE_CONTENANTRowChangeEvent(CType(e.Row,PRECONT_PRE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRECONT_PRE_CONTENANTRowChangingEvent) Is Nothing) Then
                RaiseEvent PRECONT_PRE_CONTENANTRowChanging(Me, New PRECONT_PRE_CONTENANTRowChangeEvent(CType(e.Row,PRECONT_PRE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRECONT_PRE_CONTENANTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRECONT_PRE_CONTENANTRowDeleted(Me, New PRECONT_PRE_CONTENANTRowChangeEvent(CType(e.Row,PRECONT_PRE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRECONT_PRE_CONTENANTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRECONT_PRE_CONTENANTRowDeleting(Me, New PRECONT_PRE_CONTENANTRowChangeEvent(CType(e.Row,PRECONT_PRE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRECONT_PRE_CONTENANTRow(ByVal row As PRECONT_PRE_CONTENANTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRECONT_PRE_CONTENANTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREMAT_PRE_MATERIAUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREMAT_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREMAT_COCONT_NUM_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREMAT_CDF_MACDT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREMAT_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREMAT_PRE_MATERIAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREMAT_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREMAT_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREMAT_COCONT_NUM_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREMAT_COCONT_NUM_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREMAT_CDF_MACDT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREMAT_CDF_MACDT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREMAT_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREMAT_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREMAT_PRE_MATERIAURow
            Get
                Return CType(Me.Rows(index),PREMAT_PRE_MATERIAURow)
            End Get
        End Property
        
        Public Event PREMAT_PRE_MATERIAURowChanging As PREMAT_PRE_MATERIAURowChangeEventHandler
        
        Public Event PREMAT_PRE_MATERIAURowChanged As PREMAT_PRE_MATERIAURowChangeEventHandler
        
        Public Event PREMAT_PRE_MATERIAURowDeleting As PREMAT_PRE_MATERIAURowChangeEventHandler
        
        Public Event PREMAT_PRE_MATERIAURowDeleted As PREMAT_PRE_MATERIAURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREMAT_PRE_MATERIAURow(ByVal row As PREMAT_PRE_MATERIAURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREMAT_PRE_MATERIAURow(ByVal PREMAT_PRE_CODE_FK_PK As String, ByVal PREMAT_COCONT_NUM_FK_PK As Byte, ByVal PREMAT_CDF_MACDT_CODE_FK_PK As String, ByVal PREMAT_NUMORD As Short) As PREMAT_PRE_MATERIAURow
            Dim rowPREMAT_PRE_MATERIAURow As PREMAT_PRE_MATERIAURow = CType(Me.NewRow,PREMAT_PRE_MATERIAURow)
            Dim columnValuesArray() As Object = New Object() {PREMAT_PRE_CODE_FK_PK, PREMAT_COCONT_NUM_FK_PK, PREMAT_CDF_MACDT_CODE_FK_PK, PREMAT_NUMORD}
            rowPREMAT_PRE_MATERIAURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREMAT_PRE_MATERIAURow)
            Return rowPREMAT_PRE_MATERIAURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREMAT_PRE_CODE_FK_PKPREMAT_COCONT_NUM_FK_PKPREMAT_CDF_MACDT_CODE_FK_PK(ByVal PREMAT_PRE_CODE_FK_PK As String, ByVal PREMAT_COCONT_NUM_FK_PK As Byte, ByVal PREMAT_CDF_MACDT_CODE_FK_PK As String) As PREMAT_PRE_MATERIAURow
            Return CType(Me.Rows.Find(New Object() {PREMAT_PRE_CODE_FK_PK, PREMAT_COCONT_NUM_FK_PK, PREMAT_CDF_MACDT_CODE_FK_PK}),PREMAT_PRE_MATERIAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREMAT_PRE_MATERIAUDataTable = CType(MyBase.Clone,PREMAT_PRE_MATERIAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREMAT_PRE_MATERIAUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREMAT_PRE_CODE_FK_PK = MyBase.Columns("PREMAT_PRE_CODE_FK_PK")
            Me.columnPREMAT_COCONT_NUM_FK_PK = MyBase.Columns("PREMAT_COCONT_NUM_FK_PK")
            Me.columnPREMAT_CDF_MACDT_CODE_FK_PK = MyBase.Columns("PREMAT_CDF_MACDT_CODE_FK_PK")
            Me.columnPREMAT_NUMORD = MyBase.Columns("PREMAT_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREMAT_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREMAT_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREMAT_PRE_CODE_FK_PK)
            Me.columnPREMAT_COCONT_NUM_FK_PK = New Global.System.Data.DataColumn("PREMAT_COCONT_NUM_FK_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREMAT_COCONT_NUM_FK_PK)
            Me.columnPREMAT_CDF_MACDT_CODE_FK_PK = New Global.System.Data.DataColumn("PREMAT_CDF_MACDT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREMAT_CDF_MACDT_CODE_FK_PK)
            Me.columnPREMAT_NUMORD = New Global.System.Data.DataColumn("PREMAT_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREMAT_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREMAT_PRE_CODE_FK_PK, Me.columnPREMAT_COCONT_NUM_FK_PK, Me.columnPREMAT_CDF_MACDT_CODE_FK_PK}, true))
            Me.columnPREMAT_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREMAT_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREMAT_COCONT_NUM_FK_PK.AllowDBNull = false
            Me.columnPREMAT_CDF_MACDT_CODE_FK_PK.AllowDBNull = false
            Me.columnPREMAT_CDF_MACDT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREMAT_PRE_MATERIAURow() As PREMAT_PRE_MATERIAURow
            Return CType(Me.NewRow,PREMAT_PRE_MATERIAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREMAT_PRE_MATERIAURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREMAT_PRE_MATERIAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREMAT_PRE_MATERIAURowChangedEvent) Is Nothing) Then
                RaiseEvent PREMAT_PRE_MATERIAURowChanged(Me, New PREMAT_PRE_MATERIAURowChangeEvent(CType(e.Row,PREMAT_PRE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREMAT_PRE_MATERIAURowChangingEvent) Is Nothing) Then
                RaiseEvent PREMAT_PRE_MATERIAURowChanging(Me, New PREMAT_PRE_MATERIAURowChangeEvent(CType(e.Row,PREMAT_PRE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREMAT_PRE_MATERIAURowDeletedEvent) Is Nothing) Then
                RaiseEvent PREMAT_PRE_MATERIAURowDeleted(Me, New PREMAT_PRE_MATERIAURowChangeEvent(CType(e.Row,PREMAT_PRE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREMAT_PRE_MATERIAURowDeletingEvent) Is Nothing) Then
                RaiseEvent PREMAT_PRE_MATERIAURowDeleting(Me, New PREMAT_PRE_MATERIAURowChangeEvent(CType(e.Row,PREMAT_PRE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREMAT_PRE_MATERIAURow(ByVal row As PREMAT_PRE_MATERIAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREMAT_PRE_MATERIAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRECAR_PRESENTATION_CARACTCOMPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRECAR_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECAR_COCONT_NUM_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECAR_CDF_CODE_CACDT_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECAR_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRECAR_PRESENTATION_CARACTCOMP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECAR_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECAR_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECAR_COCONT_NUM_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECAR_COCONT_NUM_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECAR_CDF_CODE_CACDT_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECAR_CDF_CODE_CACDT_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECAR_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECAR_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRECAR_PRESENTATION_CARACTCOMPRow
            Get
                Return CType(Me.Rows(index),PRECAR_PRESENTATION_CARACTCOMPRow)
            End Get
        End Property
        
        Public Event PRECAR_PRESENTATION_CARACTCOMPRowChanging As PRECAR_PRESENTATION_CARACTCOMPRowChangeEventHandler
        
        Public Event PRECAR_PRESENTATION_CARACTCOMPRowChanged As PRECAR_PRESENTATION_CARACTCOMPRowChangeEventHandler
        
        Public Event PRECAR_PRESENTATION_CARACTCOMPRowDeleting As PRECAR_PRESENTATION_CARACTCOMPRowChangeEventHandler
        
        Public Event PRECAR_PRESENTATION_CARACTCOMPRowDeleted As PRECAR_PRESENTATION_CARACTCOMPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRECAR_PRESENTATION_CARACTCOMPRow(ByVal row As PRECAR_PRESENTATION_CARACTCOMPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRECAR_PRESENTATION_CARACTCOMPRow(ByVal PRECAR_PRE_CODE_FK_PK As String, ByVal PRECAR_COCONT_NUM_FK_PK As Byte, ByVal PRECAR_CDF_CODE_CACDT_FK_PK As String, ByVal PRECAR_NUMORD As Short) As PRECAR_PRESENTATION_CARACTCOMPRow
            Dim rowPRECAR_PRESENTATION_CARACTCOMPRow As PRECAR_PRESENTATION_CARACTCOMPRow = CType(Me.NewRow,PRECAR_PRESENTATION_CARACTCOMPRow)
            Dim columnValuesArray() As Object = New Object() {PRECAR_PRE_CODE_FK_PK, PRECAR_COCONT_NUM_FK_PK, PRECAR_CDF_CODE_CACDT_FK_PK, PRECAR_NUMORD}
            rowPRECAR_PRESENTATION_CARACTCOMPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRECAR_PRESENTATION_CARACTCOMPRow)
            Return rowPRECAR_PRESENTATION_CARACTCOMPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRECAR_PRE_CODE_FK_PKPRECAR_COCONT_NUM_FK_PKPRECAR_CDF_CODE_CACDT_FK_PK(ByVal PRECAR_PRE_CODE_FK_PK As String, ByVal PRECAR_COCONT_NUM_FK_PK As Byte, ByVal PRECAR_CDF_CODE_CACDT_FK_PK As String) As PRECAR_PRESENTATION_CARACTCOMPRow
            Return CType(Me.Rows.Find(New Object() {PRECAR_PRE_CODE_FK_PK, PRECAR_COCONT_NUM_FK_PK, PRECAR_CDF_CODE_CACDT_FK_PK}),PRECAR_PRESENTATION_CARACTCOMPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRECAR_PRESENTATION_CARACTCOMPDataTable = CType(MyBase.Clone,PRECAR_PRESENTATION_CARACTCOMPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRECAR_PRESENTATION_CARACTCOMPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRECAR_PRE_CODE_FK_PK = MyBase.Columns("PRECAR_PRE_CODE_FK_PK")
            Me.columnPRECAR_COCONT_NUM_FK_PK = MyBase.Columns("PRECAR_COCONT_NUM_FK_PK")
            Me.columnPRECAR_CDF_CODE_CACDT_FK_PK = MyBase.Columns("PRECAR_CDF_CODE_CACDT_FK_PK")
            Me.columnPRECAR_NUMORD = MyBase.Columns("PRECAR_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRECAR_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRECAR_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECAR_PRE_CODE_FK_PK)
            Me.columnPRECAR_COCONT_NUM_FK_PK = New Global.System.Data.DataColumn("PRECAR_COCONT_NUM_FK_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECAR_COCONT_NUM_FK_PK)
            Me.columnPRECAR_CDF_CODE_CACDT_FK_PK = New Global.System.Data.DataColumn("PRECAR_CDF_CODE_CACDT_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECAR_CDF_CODE_CACDT_FK_PK)
            Me.columnPRECAR_NUMORD = New Global.System.Data.DataColumn("PRECAR_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECAR_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRECAR_PRE_CODE_FK_PK, Me.columnPRECAR_COCONT_NUM_FK_PK, Me.columnPRECAR_CDF_CODE_CACDT_FK_PK}, true))
            Me.columnPRECAR_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECAR_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRECAR_COCONT_NUM_FK_PK.AllowDBNull = false
            Me.columnPRECAR_CDF_CODE_CACDT_FK_PK.AllowDBNull = false
            Me.columnPRECAR_CDF_CODE_CACDT_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRECAR_PRESENTATION_CARACTCOMPRow() As PRECAR_PRESENTATION_CARACTCOMPRow
            Return CType(Me.NewRow,PRECAR_PRESENTATION_CARACTCOMPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRECAR_PRESENTATION_CARACTCOMPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRECAR_PRESENTATION_CARACTCOMPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRECAR_PRESENTATION_CARACTCOMPRowChangedEvent) Is Nothing) Then
                RaiseEvent PRECAR_PRESENTATION_CARACTCOMPRowChanged(Me, New PRECAR_PRESENTATION_CARACTCOMPRowChangeEvent(CType(e.Row,PRECAR_PRESENTATION_CARACTCOMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRECAR_PRESENTATION_CARACTCOMPRowChangingEvent) Is Nothing) Then
                RaiseEvent PRECAR_PRESENTATION_CARACTCOMPRowChanging(Me, New PRECAR_PRESENTATION_CARACTCOMPRowChangeEvent(CType(e.Row,PRECAR_PRESENTATION_CARACTCOMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRECAR_PRESENTATION_CARACTCOMPRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRECAR_PRESENTATION_CARACTCOMPRowDeleted(Me, New PRECAR_PRESENTATION_CARACTCOMPRowChangeEvent(CType(e.Row,PRECAR_PRESENTATION_CARACTCOMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRECAR_PRESENTATION_CARACTCOMPRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRECAR_PRESENTATION_CARACTCOMPRowDeleting(Me, New PRECAR_PRESENTATION_CARACTCOMPRowChangeEvent(CType(e.Row,PRECAR_PRESENTATION_CARACTCOMPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRECAR_PRESENTATION_CARACTCOMPRow(ByVal row As PRECAR_PRESENTATION_CARACTCOMPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRECAR_PRESENTATION_CARACTCOMPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRECEMB_PRE_CAREMBALLAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRECEMB_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECEMB_CDF_CAREMB_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECEMB_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRECEMB_PRE_CAREMBALLAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECEMB_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECEMB_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECEMB_CDF_CAREMB_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECEMB_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECEMB_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRECEMB_PRE_CAREMBALLAGERow
            Get
                Return CType(Me.Rows(index),PRECEMB_PRE_CAREMBALLAGERow)
            End Get
        End Property
        
        Public Event PRECEMB_PRE_CAREMBALLAGERowChanging As PRECEMB_PRE_CAREMBALLAGERowChangeEventHandler
        
        Public Event PRECEMB_PRE_CAREMBALLAGERowChanged As PRECEMB_PRE_CAREMBALLAGERowChangeEventHandler
        
        Public Event PRECEMB_PRE_CAREMBALLAGERowDeleting As PRECEMB_PRE_CAREMBALLAGERowChangeEventHandler
        
        Public Event PRECEMB_PRE_CAREMBALLAGERowDeleted As PRECEMB_PRE_CAREMBALLAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRECEMB_PRE_CAREMBALLAGERow(ByVal row As PRECEMB_PRE_CAREMBALLAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRECEMB_PRE_CAREMBALLAGERow(ByVal PRECEMB_PRE_CODE_FK_PK As String, ByVal PRECEMB_CDF_CAREMB_CODE_FK_PK As String, ByVal PRECEMB_NUMORD As Short) As PRECEMB_PRE_CAREMBALLAGERow
            Dim rowPRECEMB_PRE_CAREMBALLAGERow As PRECEMB_PRE_CAREMBALLAGERow = CType(Me.NewRow,PRECEMB_PRE_CAREMBALLAGERow)
            Dim columnValuesArray() As Object = New Object() {PRECEMB_PRE_CODE_FK_PK, PRECEMB_CDF_CAREMB_CODE_FK_PK, PRECEMB_NUMORD}
            rowPRECEMB_PRE_CAREMBALLAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRECEMB_PRE_CAREMBALLAGERow)
            Return rowPRECEMB_PRE_CAREMBALLAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRECEMB_PRE_CODE_FK_PKPRECEMB_CDF_CAREMB_CODE_FK_PK(ByVal PRECEMB_PRE_CODE_FK_PK As String, ByVal PRECEMB_CDF_CAREMB_CODE_FK_PK As String) As PRECEMB_PRE_CAREMBALLAGERow
            Return CType(Me.Rows.Find(New Object() {PRECEMB_PRE_CODE_FK_PK, PRECEMB_CDF_CAREMB_CODE_FK_PK}),PRECEMB_PRE_CAREMBALLAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRECEMB_PRE_CAREMBALLAGEDataTable = CType(MyBase.Clone,PRECEMB_PRE_CAREMBALLAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRECEMB_PRE_CAREMBALLAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRECEMB_PRE_CODE_FK_PK = MyBase.Columns("PRECEMB_PRE_CODE_FK_PK")
            Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK = MyBase.Columns("PRECEMB_CDF_CAREMB_CODE_FK_PK")
            Me.columnPRECEMB_NUMORD = MyBase.Columns("PRECEMB_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRECEMB_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRECEMB_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECEMB_PRE_CODE_FK_PK)
            Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK = New Global.System.Data.DataColumn("PRECEMB_CDF_CAREMB_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK)
            Me.columnPRECEMB_NUMORD = New Global.System.Data.DataColumn("PRECEMB_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECEMB_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRECEMB_PRE_CODE_FK_PK, Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK}, true))
            Me.columnPRECEMB_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECEMB_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECEMB_CDF_CAREMB_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRECEMB_PRE_CAREMBALLAGERow() As PRECEMB_PRE_CAREMBALLAGERow
            Return CType(Me.NewRow,PRECEMB_PRE_CAREMBALLAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRECEMB_PRE_CAREMBALLAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRECEMB_PRE_CAREMBALLAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRECEMB_PRE_CAREMBALLAGERowChangedEvent) Is Nothing) Then
                RaiseEvent PRECEMB_PRE_CAREMBALLAGERowChanged(Me, New PRECEMB_PRE_CAREMBALLAGERowChangeEvent(CType(e.Row,PRECEMB_PRE_CAREMBALLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRECEMB_PRE_CAREMBALLAGERowChangingEvent) Is Nothing) Then
                RaiseEvent PRECEMB_PRE_CAREMBALLAGERowChanging(Me, New PRECEMB_PRE_CAREMBALLAGERowChangeEvent(CType(e.Row,PRECEMB_PRE_CAREMBALLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRECEMB_PRE_CAREMBALLAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent PRECEMB_PRE_CAREMBALLAGERowDeleted(Me, New PRECEMB_PRE_CAREMBALLAGERowChangeEvent(CType(e.Row,PRECEMB_PRE_CAREMBALLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRECEMB_PRE_CAREMBALLAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent PRECEMB_PRE_CAREMBALLAGERowDeleting(Me, New PRECEMB_PRE_CAREMBALLAGERowChangeEvent(CType(e.Row,PRECEMB_PRE_CAREMBALLAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRECEMB_PRE_CAREMBALLAGERow(ByVal row As PRECEMB_PRE_CAREMBALLAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRECEMB_PRE_CAREMBALLAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRETSS_PRESENTATION_TAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRETSS_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRETSS_CDF_TSS_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRETSS_NUMSEQ As Global.System.Data.DataColumn
        
        Private columnPRETSS_DATE_APPLI_PK As Global.System.Data.DataColumn
        
        Private columnPRETSS_DATE_APPLIQUEE As Global.System.Data.DataColumn
        
        Private columnPRETSS_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRETSS_PRESENTATION_TAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSS_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSS_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSS_CDF_TSS_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSS_CDF_TSS_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSS_NUMSEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSS_NUMSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSS_DATE_APPLI_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSS_DATE_APPLI_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSS_DATE_APPLIQUEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSS_DATE_APPLIQUEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSS_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSS_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRETSS_PRESENTATION_TAUXRow
            Get
                Return CType(Me.Rows(index),PRETSS_PRESENTATION_TAUXRow)
            End Get
        End Property
        
        Public Event PRETSS_PRESENTATION_TAUXRowChanging As PRETSS_PRESENTATION_TAUXRowChangeEventHandler
        
        Public Event PRETSS_PRESENTATION_TAUXRowChanged As PRETSS_PRESENTATION_TAUXRowChangeEventHandler
        
        Public Event PRETSS_PRESENTATION_TAUXRowDeleting As PRETSS_PRESENTATION_TAUXRowChangeEventHandler
        
        Public Event PRETSS_PRESENTATION_TAUXRowDeleted As PRETSS_PRESENTATION_TAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRETSS_PRESENTATION_TAUXRow(ByVal row As PRETSS_PRESENTATION_TAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRETSS_PRESENTATION_TAUXRow(ByVal PRETSS_PRE_CODE_FK_PK As String, ByVal PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal PRETSS_NUMSEQ As Short, ByVal PRETSS_DATE_APPLI_PK As Date, ByVal PRETSS_DATE_APPLIQUEE As Date, ByVal PRETSS_TEXTE As String) As PRETSS_PRESENTATION_TAUXRow
            Dim rowPRETSS_PRESENTATION_TAUXRow As PRETSS_PRESENTATION_TAUXRow = CType(Me.NewRow,PRETSS_PRESENTATION_TAUXRow)
            Dim columnValuesArray() As Object = New Object() {PRETSS_PRE_CODE_FK_PK, PRETSS_CDF_TSS_CODE_FK_PK, PRETSS_NUMSEQ, PRETSS_DATE_APPLI_PK, PRETSS_DATE_APPLIQUEE, PRETSS_TEXTE}
            rowPRETSS_PRESENTATION_TAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRETSS_PRESENTATION_TAUXRow)
            Return rowPRETSS_PRESENTATION_TAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRETSS_PRE_CODE_FK_PKPRETSS_CDF_TSS_CODE_FK_PKPRETSS_NUMSEQ(ByVal PRETSS_PRE_CODE_FK_PK As String, ByVal PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal PRETSS_NUMSEQ As Short) As PRETSS_PRESENTATION_TAUXRow
            Return CType(Me.Rows.Find(New Object() {PRETSS_PRE_CODE_FK_PK, PRETSS_CDF_TSS_CODE_FK_PK, PRETSS_NUMSEQ}),PRETSS_PRESENTATION_TAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRETSS_PRESENTATION_TAUXDataTable = CType(MyBase.Clone,PRETSS_PRESENTATION_TAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRETSS_PRESENTATION_TAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRETSS_PRE_CODE_FK_PK = MyBase.Columns("PRETSS_PRE_CODE_FK_PK")
            Me.columnPRETSS_CDF_TSS_CODE_FK_PK = MyBase.Columns("PRETSS_CDF_TSS_CODE_FK_PK")
            Me.columnPRETSS_NUMSEQ = MyBase.Columns("PRETSS_NUMSEQ")
            Me.columnPRETSS_DATE_APPLI_PK = MyBase.Columns("PRETSS_DATE_APPLI_PK")
            Me.columnPRETSS_DATE_APPLIQUEE = MyBase.Columns("PRETSS_DATE_APPLIQUEE")
            Me.columnPRETSS_TEXTE = MyBase.Columns("PRETSS_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRETSS_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRETSS_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSS_PRE_CODE_FK_PK)
            Me.columnPRETSS_CDF_TSS_CODE_FK_PK = New Global.System.Data.DataColumn("PRETSS_CDF_TSS_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSS_CDF_TSS_CODE_FK_PK)
            Me.columnPRETSS_NUMSEQ = New Global.System.Data.DataColumn("PRETSS_NUMSEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSS_NUMSEQ)
            Me.columnPRETSS_DATE_APPLI_PK = New Global.System.Data.DataColumn("PRETSS_DATE_APPLI_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSS_DATE_APPLI_PK)
            Me.columnPRETSS_DATE_APPLIQUEE = New Global.System.Data.DataColumn("PRETSS_DATE_APPLIQUEE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSS_DATE_APPLIQUEE)
            Me.columnPRETSS_TEXTE = New Global.System.Data.DataColumn("PRETSS_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSS_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRETSS_PRE_CODE_FK_PK, Me.columnPRETSS_CDF_TSS_CODE_FK_PK, Me.columnPRETSS_NUMSEQ}, true))
            Me.columnPRETSS_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRETSS_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRETSS_CDF_TSS_CODE_FK_PK.AllowDBNull = false
            Me.columnPRETSS_CDF_TSS_CODE_FK_PK.MaxLength = 10
            Me.columnPRETSS_NUMSEQ.AllowDBNull = false
            Me.columnPRETSS_TEXTE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRETSS_PRESENTATION_TAUXRow() As PRETSS_PRESENTATION_TAUXRow
            Return CType(Me.NewRow,PRETSS_PRESENTATION_TAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRETSS_PRESENTATION_TAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRETSS_PRESENTATION_TAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRETSS_PRESENTATION_TAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent PRETSS_PRESENTATION_TAUXRowChanged(Me, New PRETSS_PRESENTATION_TAUXRowChangeEvent(CType(e.Row,PRETSS_PRESENTATION_TAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRETSS_PRESENTATION_TAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent PRETSS_PRESENTATION_TAUXRowChanging(Me, New PRETSS_PRESENTATION_TAUXRowChangeEvent(CType(e.Row,PRETSS_PRESENTATION_TAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRETSS_PRESENTATION_TAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRETSS_PRESENTATION_TAUXRowDeleted(Me, New PRETSS_PRESENTATION_TAUXRowChangeEvent(CType(e.Row,PRETSS_PRESENTATION_TAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRETSS_PRESENTATION_TAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRETSS_PRESENTATION_TAUXRowDeleting(Me, New PRETSS_PRESENTATION_TAUXRowChangeEvent(CType(e.Row,PRETSS_PRESENTATION_TAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRETSS_PRESENTATION_TAUXRow(ByVal row As PRETSS_PRESENTATION_TAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRETSS_PRESENTATION_TAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRETSSH_PRE_TAUX_HOPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRETSSH_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRETSSH_CDF_TSS_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRETSSH_NUMSEQ As Global.System.Data.DataColumn
        
        Private columnPRETSSH_DATE_APPLI_PK As Global.System.Data.DataColumn
        
        Private columnPRETSSH_DATE_APPLIQUEE As Global.System.Data.DataColumn
        
        Private columnPRETSSH_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRETSSH_PRE_TAUX_HOP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSSH_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSSH_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSSH_CDF_TSS_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSSH_CDF_TSS_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSSH_NUMSEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSSH_NUMSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSSH_DATE_APPLI_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSSH_DATE_APPLI_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSSH_DATE_APPLIQUEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSSH_DATE_APPLIQUEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRETSSH_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRETSSH_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRETSSH_PRE_TAUX_HOPRow
            Get
                Return CType(Me.Rows(index),PRETSSH_PRE_TAUX_HOPRow)
            End Get
        End Property
        
        Public Event PRETSSH_PRE_TAUX_HOPRowChanging As PRETSSH_PRE_TAUX_HOPRowChangeEventHandler
        
        Public Event PRETSSH_PRE_TAUX_HOPRowChanged As PRETSSH_PRE_TAUX_HOPRowChangeEventHandler
        
        Public Event PRETSSH_PRE_TAUX_HOPRowDeleting As PRETSSH_PRE_TAUX_HOPRowChangeEventHandler
        
        Public Event PRETSSH_PRE_TAUX_HOPRowDeleted As PRETSSH_PRE_TAUX_HOPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRETSSH_PRE_TAUX_HOPRow(ByVal row As PRETSSH_PRE_TAUX_HOPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRETSSH_PRE_TAUX_HOPRow(ByVal PRETSSH_PRE_CODE_FK_PK As String, ByVal PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal PRETSSH_NUMSEQ As Short, ByVal PRETSSH_DATE_APPLI_PK As Date, ByVal PRETSSH_DATE_APPLIQUEE As Date, ByVal PRETSSH_TEXTE As String) As PRETSSH_PRE_TAUX_HOPRow
            Dim rowPRETSSH_PRE_TAUX_HOPRow As PRETSSH_PRE_TAUX_HOPRow = CType(Me.NewRow,PRETSSH_PRE_TAUX_HOPRow)
            Dim columnValuesArray() As Object = New Object() {PRETSSH_PRE_CODE_FK_PK, PRETSSH_CDF_TSS_CODE_FK_PK, PRETSSH_NUMSEQ, PRETSSH_DATE_APPLI_PK, PRETSSH_DATE_APPLIQUEE, PRETSSH_TEXTE}
            rowPRETSSH_PRE_TAUX_HOPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRETSSH_PRE_TAUX_HOPRow)
            Return rowPRETSSH_PRE_TAUX_HOPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRETSSH_PRE_CODE_FK_PKPRETSSH_CDF_TSS_CODE_FK_PKPRETSSH_NUMSEQ(ByVal PRETSSH_PRE_CODE_FK_PK As String, ByVal PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal PRETSSH_NUMSEQ As Short) As PRETSSH_PRE_TAUX_HOPRow
            Return CType(Me.Rows.Find(New Object() {PRETSSH_PRE_CODE_FK_PK, PRETSSH_CDF_TSS_CODE_FK_PK, PRETSSH_NUMSEQ}),PRETSSH_PRE_TAUX_HOPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRETSSH_PRE_TAUX_HOPDataTable = CType(MyBase.Clone,PRETSSH_PRE_TAUX_HOPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRETSSH_PRE_TAUX_HOPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRETSSH_PRE_CODE_FK_PK = MyBase.Columns("PRETSSH_PRE_CODE_FK_PK")
            Me.columnPRETSSH_CDF_TSS_CODE_FK_PK = MyBase.Columns("PRETSSH_CDF_TSS_CODE_FK_PK")
            Me.columnPRETSSH_NUMSEQ = MyBase.Columns("PRETSSH_NUMSEQ")
            Me.columnPRETSSH_DATE_APPLI_PK = MyBase.Columns("PRETSSH_DATE_APPLI_PK")
            Me.columnPRETSSH_DATE_APPLIQUEE = MyBase.Columns("PRETSSH_DATE_APPLIQUEE")
            Me.columnPRETSSH_TEXTE = MyBase.Columns("PRETSSH_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRETSSH_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRETSSH_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSSH_PRE_CODE_FK_PK)
            Me.columnPRETSSH_CDF_TSS_CODE_FK_PK = New Global.System.Data.DataColumn("PRETSSH_CDF_TSS_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSSH_CDF_TSS_CODE_FK_PK)
            Me.columnPRETSSH_NUMSEQ = New Global.System.Data.DataColumn("PRETSSH_NUMSEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSSH_NUMSEQ)
            Me.columnPRETSSH_DATE_APPLI_PK = New Global.System.Data.DataColumn("PRETSSH_DATE_APPLI_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSSH_DATE_APPLI_PK)
            Me.columnPRETSSH_DATE_APPLIQUEE = New Global.System.Data.DataColumn("PRETSSH_DATE_APPLIQUEE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSSH_DATE_APPLIQUEE)
            Me.columnPRETSSH_TEXTE = New Global.System.Data.DataColumn("PRETSSH_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRETSSH_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRETSSH_PRE_CODE_FK_PK, Me.columnPRETSSH_CDF_TSS_CODE_FK_PK, Me.columnPRETSSH_NUMSEQ}, true))
            Me.columnPRETSSH_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRETSSH_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRETSSH_CDF_TSS_CODE_FK_PK.AllowDBNull = false
            Me.columnPRETSSH_CDF_TSS_CODE_FK_PK.MaxLength = 10
            Me.columnPRETSSH_NUMSEQ.AllowDBNull = false
            Me.columnPRETSSH_TEXTE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRETSSH_PRE_TAUX_HOPRow() As PRETSSH_PRE_TAUX_HOPRow
            Return CType(Me.NewRow,PRETSSH_PRE_TAUX_HOPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRETSSH_PRE_TAUX_HOPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRETSSH_PRE_TAUX_HOPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRETSSH_PRE_TAUX_HOPRowChangedEvent) Is Nothing) Then
                RaiseEvent PRETSSH_PRE_TAUX_HOPRowChanged(Me, New PRETSSH_PRE_TAUX_HOPRowChangeEvent(CType(e.Row,PRETSSH_PRE_TAUX_HOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRETSSH_PRE_TAUX_HOPRowChangingEvent) Is Nothing) Then
                RaiseEvent PRETSSH_PRE_TAUX_HOPRowChanging(Me, New PRETSSH_PRE_TAUX_HOPRowChangeEvent(CType(e.Row,PRETSSH_PRE_TAUX_HOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRETSSH_PRE_TAUX_HOPRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRETSSH_PRE_TAUX_HOPRowDeleted(Me, New PRETSSH_PRE_TAUX_HOPRowChangeEvent(CType(e.Row,PRETSSH_PRE_TAUX_HOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRETSSH_PRE_TAUX_HOPRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRETSSH_PRE_TAUX_HOPRowDeleting(Me, New PRETSSH_PRE_TAUX_HOPRowChangeEvent(CType(e.Row,PRETSSH_PRE_TAUX_HOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRETSSH_PRE_TAUX_HOPRow(ByVal row As PRETSSH_PRE_TAUX_HOPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRETSSH_PRE_TAUX_HOPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRESTP_PRE_STPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRESTP_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTP_CDF_STP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTP_DATE_AFSSAPS As Global.System.Data.DataColumn
        
        Private columnPRESTP_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRESTP_PRE_STP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTP_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTP_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTP_CDF_STP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTP_CDF_STP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTP_DATE_AFSSAPSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTP_DATE_AFSSAPS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTP_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTP_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRESTP_PRE_STPRow
            Get
                Return CType(Me.Rows(index),PRESTP_PRE_STPRow)
            End Get
        End Property
        
        Public Event PRESTP_PRE_STPRowChanging As PRESTP_PRE_STPRowChangeEventHandler
        
        Public Event PRESTP_PRE_STPRowChanged As PRESTP_PRE_STPRowChangeEventHandler
        
        Public Event PRESTP_PRE_STPRowDeleting As PRESTP_PRE_STPRowChangeEventHandler
        
        Public Event PRESTP_PRE_STPRowDeleted As PRESTP_PRE_STPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRESTP_PRE_STPRow(ByVal row As PRESTP_PRE_STPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRESTP_PRE_STPRow(ByVal PRESTP_PRE_CODE_FK_PK As String, ByVal PRESTP_CDF_STP_CODE_FK_PK As String, ByVal PRESTP_DATE_AFSSAPS As Date, ByVal PRESTP_NUMORD As Short) As PRESTP_PRE_STPRow
            Dim rowPRESTP_PRE_STPRow As PRESTP_PRE_STPRow = CType(Me.NewRow,PRESTP_PRE_STPRow)
            Dim columnValuesArray() As Object = New Object() {PRESTP_PRE_CODE_FK_PK, PRESTP_CDF_STP_CODE_FK_PK, PRESTP_DATE_AFSSAPS, PRESTP_NUMORD}
            rowPRESTP_PRE_STPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRESTP_PRE_STPRow)
            Return rowPRESTP_PRE_STPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRESTP_PRE_CODE_FK_PKPRESTP_CDF_STP_CODE_FK_PK(ByVal PRESTP_PRE_CODE_FK_PK As String, ByVal PRESTP_CDF_STP_CODE_FK_PK As String) As PRESTP_PRE_STPRow
            Return CType(Me.Rows.Find(New Object() {PRESTP_PRE_CODE_FK_PK, PRESTP_CDF_STP_CODE_FK_PK}),PRESTP_PRE_STPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRESTP_PRE_STPDataTable = CType(MyBase.Clone,PRESTP_PRE_STPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRESTP_PRE_STPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRESTP_PRE_CODE_FK_PK = MyBase.Columns("PRESTP_PRE_CODE_FK_PK")
            Me.columnPRESTP_CDF_STP_CODE_FK_PK = MyBase.Columns("PRESTP_CDF_STP_CODE_FK_PK")
            Me.columnPRESTP_DATE_AFSSAPS = MyBase.Columns("PRESTP_DATE_AFSSAPS")
            Me.columnPRESTP_NUMORD = MyBase.Columns("PRESTP_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRESTP_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTP_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTP_PRE_CODE_FK_PK)
            Me.columnPRESTP_CDF_STP_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTP_CDF_STP_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTP_CDF_STP_CODE_FK_PK)
            Me.columnPRESTP_DATE_AFSSAPS = New Global.System.Data.DataColumn("PRESTP_DATE_AFSSAPS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTP_DATE_AFSSAPS)
            Me.columnPRESTP_NUMORD = New Global.System.Data.DataColumn("PRESTP_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTP_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRESTP_PRE_CODE_FK_PK, Me.columnPRESTP_CDF_STP_CODE_FK_PK}, true))
            Me.columnPRESTP_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTP_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRESTP_CDF_STP_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTP_CDF_STP_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRESTP_PRE_STPRow() As PRESTP_PRE_STPRow
            Return CType(Me.NewRow,PRESTP_PRE_STPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRESTP_PRE_STPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRESTP_PRE_STPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRESTP_PRE_STPRowChangedEvent) Is Nothing) Then
                RaiseEvent PRESTP_PRE_STPRowChanged(Me, New PRESTP_PRE_STPRowChangeEvent(CType(e.Row,PRESTP_PRE_STPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRESTP_PRE_STPRowChangingEvent) Is Nothing) Then
                RaiseEvent PRESTP_PRE_STPRowChanging(Me, New PRESTP_PRE_STPRowChangeEvent(CType(e.Row,PRESTP_PRE_STPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRESTP_PRE_STPRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRESTP_PRE_STPRowDeleted(Me, New PRESTP_PRE_STPRowChangeEvent(CType(e.Row,PRESTP_PRE_STPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRESTP_PRE_STPRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRESTP_PRE_STPRowDeleting(Me, New PRESTP_PRE_STPRowChangeEvent(CType(e.Row,PRESTP_PRE_STPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRESTP_PRE_STPRow(ByVal row As PRESTP_PRE_STPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRESTP_PRE_STPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRESTC_STATUTCOMP_PRESENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRESTC_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTC_CDF_STCOMP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTC_CODE_IDENT As Global.System.Data.DataColumn
        
        Private columnPRESTC_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRESTC_STATUTCOMP_PRESENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTC_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTC_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTC_CDF_STCOMP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTC_CODE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTC_CODE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTC_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTC_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRESTC_STATUTCOMP_PRESENTRow
            Get
                Return CType(Me.Rows(index),PRESTC_STATUTCOMP_PRESENTRow)
            End Get
        End Property
        
        Public Event PRESTC_STATUTCOMP_PRESENTRowChanging As PRESTC_STATUTCOMP_PRESENTRowChangeEventHandler
        
        Public Event PRESTC_STATUTCOMP_PRESENTRowChanged As PRESTC_STATUTCOMP_PRESENTRowChangeEventHandler
        
        Public Event PRESTC_STATUTCOMP_PRESENTRowDeleting As PRESTC_STATUTCOMP_PRESENTRowChangeEventHandler
        
        Public Event PRESTC_STATUTCOMP_PRESENTRowDeleted As PRESTC_STATUTCOMP_PRESENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRESTC_STATUTCOMP_PRESENTRow(ByVal row As PRESTC_STATUTCOMP_PRESENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRESTC_STATUTCOMP_PRESENTRow(ByVal PRESTC_PRE_CODE_FK_PK As String, ByVal PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal PRESTC_CODE_IDENT As String, ByVal PRESTC_NUMORD As Short) As PRESTC_STATUTCOMP_PRESENTRow
            Dim rowPRESTC_STATUTCOMP_PRESENTRow As PRESTC_STATUTCOMP_PRESENTRow = CType(Me.NewRow,PRESTC_STATUTCOMP_PRESENTRow)
            Dim columnValuesArray() As Object = New Object() {PRESTC_PRE_CODE_FK_PK, PRESTC_CDF_STCOMP_CODE_FK_PK, PRESTC_CODE_IDENT, PRESTC_NUMORD}
            rowPRESTC_STATUTCOMP_PRESENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRESTC_STATUTCOMP_PRESENTRow)
            Return rowPRESTC_STATUTCOMP_PRESENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRESTC_PRE_CODE_FK_PKPRESTC_CDF_STCOMP_CODE_FK_PKPRESTC_CODE_IDENT(ByVal PRESTC_PRE_CODE_FK_PK As String, ByVal PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal PRESTC_CODE_IDENT As String) As PRESTC_STATUTCOMP_PRESENTRow
            Return CType(Me.Rows.Find(New Object() {PRESTC_PRE_CODE_FK_PK, PRESTC_CDF_STCOMP_CODE_FK_PK, PRESTC_CODE_IDENT}),PRESTC_STATUTCOMP_PRESENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRESTC_STATUTCOMP_PRESENTDataTable = CType(MyBase.Clone,PRESTC_STATUTCOMP_PRESENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRESTC_STATUTCOMP_PRESENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRESTC_PRE_CODE_FK_PK = MyBase.Columns("PRESTC_PRE_CODE_FK_PK")
            Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK = MyBase.Columns("PRESTC_CDF_STCOMP_CODE_FK_PK")
            Me.columnPRESTC_CODE_IDENT = MyBase.Columns("PRESTC_CODE_IDENT")
            Me.columnPRESTC_NUMORD = MyBase.Columns("PRESTC_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRESTC_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTC_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTC_PRE_CODE_FK_PK)
            Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTC_CDF_STCOMP_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK)
            Me.columnPRESTC_CODE_IDENT = New Global.System.Data.DataColumn("PRESTC_CODE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTC_CODE_IDENT)
            Me.columnPRESTC_NUMORD = New Global.System.Data.DataColumn("PRESTC_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTC_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRESTC_PRE_CODE_FK_PK, Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK, Me.columnPRESTC_CODE_IDENT}, true))
            Me.columnPRESTC_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTC_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTC_CDF_STCOMP_CODE_FK_PK.MaxLength = 10
            Me.columnPRESTC_CODE_IDENT.AllowDBNull = false
            Me.columnPRESTC_CODE_IDENT.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRESTC_STATUTCOMP_PRESENTRow() As PRESTC_STATUTCOMP_PRESENTRow
            Return CType(Me.NewRow,PRESTC_STATUTCOMP_PRESENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRESTC_STATUTCOMP_PRESENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRESTC_STATUTCOMP_PRESENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRESTC_STATUTCOMP_PRESENTRowChangedEvent) Is Nothing) Then
                RaiseEvent PRESTC_STATUTCOMP_PRESENTRowChanged(Me, New PRESTC_STATUTCOMP_PRESENTRowChangeEvent(CType(e.Row,PRESTC_STATUTCOMP_PRESENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRESTC_STATUTCOMP_PRESENTRowChangingEvent) Is Nothing) Then
                RaiseEvent PRESTC_STATUTCOMP_PRESENTRowChanging(Me, New PRESTC_STATUTCOMP_PRESENTRowChangeEvent(CType(e.Row,PRESTC_STATUTCOMP_PRESENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRESTC_STATUTCOMP_PRESENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRESTC_STATUTCOMP_PRESENTRowDeleted(Me, New PRESTC_STATUTCOMP_PRESENTRowChangeEvent(CType(e.Row,PRESTC_STATUTCOMP_PRESENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRESTC_STATUTCOMP_PRESENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRESTC_STATUTCOMP_PRESENTRowDeleting(Me, New PRESTC_STATUTCOMP_PRESENTRowChangeEvent(CType(e.Row,PRESTC_STATUTCOMP_PRESENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRESTC_STATUTCOMP_PRESENTRow(ByVal row As PRESTC_STATUTCOMP_PRESENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRESTC_STATUTCOMP_PRESENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRESTR_STATUT_REMBOURSTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRESTR_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTR_CDF_STR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTR_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRESTR_STATUT_REMBOURST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTR_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTR_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTR_CDF_STR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTR_CDF_STR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTR_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTR_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRESTR_STATUT_REMBOURSTRow
            Get
                Return CType(Me.Rows(index),PRESTR_STATUT_REMBOURSTRow)
            End Get
        End Property
        
        Public Event PRESTR_STATUT_REMBOURSTRowChanging As PRESTR_STATUT_REMBOURSTRowChangeEventHandler
        
        Public Event PRESTR_STATUT_REMBOURSTRowChanged As PRESTR_STATUT_REMBOURSTRowChangeEventHandler
        
        Public Event PRESTR_STATUT_REMBOURSTRowDeleting As PRESTR_STATUT_REMBOURSTRowChangeEventHandler
        
        Public Event PRESTR_STATUT_REMBOURSTRowDeleted As PRESTR_STATUT_REMBOURSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRESTR_STATUT_REMBOURSTRow(ByVal row As PRESTR_STATUT_REMBOURSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRESTR_STATUT_REMBOURSTRow(ByVal PRESTR_PRE_CODE_FK_PK As String, ByVal PRESTR_CDF_STR_CODE_FK_PK As String, ByVal PRESTR_NUMORD As Short) As PRESTR_STATUT_REMBOURSTRow
            Dim rowPRESTR_STATUT_REMBOURSTRow As PRESTR_STATUT_REMBOURSTRow = CType(Me.NewRow,PRESTR_STATUT_REMBOURSTRow)
            Dim columnValuesArray() As Object = New Object() {PRESTR_PRE_CODE_FK_PK, PRESTR_CDF_STR_CODE_FK_PK, PRESTR_NUMORD}
            rowPRESTR_STATUT_REMBOURSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRESTR_STATUT_REMBOURSTRow)
            Return rowPRESTR_STATUT_REMBOURSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRESTR_PRE_CODE_FK_PKPRESTR_CDF_STR_CODE_FK_PK(ByVal PRESTR_PRE_CODE_FK_PK As String, ByVal PRESTR_CDF_STR_CODE_FK_PK As String) As PRESTR_STATUT_REMBOURSTRow
            Return CType(Me.Rows.Find(New Object() {PRESTR_PRE_CODE_FK_PK, PRESTR_CDF_STR_CODE_FK_PK}),PRESTR_STATUT_REMBOURSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRESTR_STATUT_REMBOURSTDataTable = CType(MyBase.Clone,PRESTR_STATUT_REMBOURSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRESTR_STATUT_REMBOURSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRESTR_PRE_CODE_FK_PK = MyBase.Columns("PRESTR_PRE_CODE_FK_PK")
            Me.columnPRESTR_CDF_STR_CODE_FK_PK = MyBase.Columns("PRESTR_CDF_STR_CODE_FK_PK")
            Me.columnPRESTR_NUMORD = MyBase.Columns("PRESTR_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRESTR_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTR_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTR_PRE_CODE_FK_PK)
            Me.columnPRESTR_CDF_STR_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTR_CDF_STR_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTR_CDF_STR_CODE_FK_PK)
            Me.columnPRESTR_NUMORD = New Global.System.Data.DataColumn("PRESTR_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTR_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRESTR_PRE_CODE_FK_PK, Me.columnPRESTR_CDF_STR_CODE_FK_PK}, true))
            Me.columnPRESTR_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTR_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRESTR_CDF_STR_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTR_CDF_STR_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRESTR_STATUT_REMBOURSTRow() As PRESTR_STATUT_REMBOURSTRow
            Return CType(Me.NewRow,PRESTR_STATUT_REMBOURSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRESTR_STATUT_REMBOURSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRESTR_STATUT_REMBOURSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRESTR_STATUT_REMBOURSTRowChangedEvent) Is Nothing) Then
                RaiseEvent PRESTR_STATUT_REMBOURSTRowChanged(Me, New PRESTR_STATUT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTR_STATUT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRESTR_STATUT_REMBOURSTRowChangingEvent) Is Nothing) Then
                RaiseEvent PRESTR_STATUT_REMBOURSTRowChanging(Me, New PRESTR_STATUT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTR_STATUT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRESTR_STATUT_REMBOURSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRESTR_STATUT_REMBOURSTRowDeleted(Me, New PRESTR_STATUT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTR_STATUT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRESTR_STATUT_REMBOURSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRESTR_STATUT_REMBOURSTRowDeleting(Me, New PRESTR_STATUT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTR_STATUT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRESTR_STATUT_REMBOURSTRow(ByVal row As PRESTR_STATUT_REMBOURSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRESTR_STATUT_REMBOURSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRESTRTX_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESTRTX_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRESTRTX_TEXTE_STAT_REMBOURST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTRTX_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTRTX_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESTRTX_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESTRTX_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRESTRTX_TEXTE_STAT_REMBOURSTRow
            Get
                Return CType(Me.Rows(index),PRESTRTX_TEXTE_STAT_REMBOURSTRow)
            End Get
        End Property
        
        Public Event PRESTRTX_TEXTE_STAT_REMBOURSTRowChanging As PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEventHandler
        
        Public Event PRESTRTX_TEXTE_STAT_REMBOURSTRowChanged As PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEventHandler
        
        Public Event PRESTRTX_TEXTE_STAT_REMBOURSTRowDeleting As PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEventHandler
        
        Public Event PRESTRTX_TEXTE_STAT_REMBOURSTRowDeleted As PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRESTRTX_TEXTE_STAT_REMBOURSTRow(ByVal row As PRESTRTX_TEXTE_STAT_REMBOURSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRESTRTX_TEXTE_STAT_REMBOURSTRow(ByVal PRESTRTX_PRE_CODE_FK_PK As String, ByVal PRESTRTX_TEXTE As String) As PRESTRTX_TEXTE_STAT_REMBOURSTRow
            Dim rowPRESTRTX_TEXTE_STAT_REMBOURSTRow As PRESTRTX_TEXTE_STAT_REMBOURSTRow = CType(Me.NewRow,PRESTRTX_TEXTE_STAT_REMBOURSTRow)
            Dim columnValuesArray() As Object = New Object() {PRESTRTX_PRE_CODE_FK_PK, PRESTRTX_TEXTE}
            rowPRESTRTX_TEXTE_STAT_REMBOURSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRESTRTX_TEXTE_STAT_REMBOURSTRow)
            Return rowPRESTRTX_TEXTE_STAT_REMBOURSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRESTRTX_PRE_CODE_FK_PK(ByVal PRESTRTX_PRE_CODE_FK_PK As String) As PRESTRTX_TEXTE_STAT_REMBOURSTRow
            Return CType(Me.Rows.Find(New Object() {PRESTRTX_PRE_CODE_FK_PK}),PRESTRTX_TEXTE_STAT_REMBOURSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRESTRTX_TEXTE_STAT_REMBOURSTDataTable = CType(MyBase.Clone,PRESTRTX_TEXTE_STAT_REMBOURSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRESTRTX_PRE_CODE_FK_PK = MyBase.Columns("PRESTRTX_PRE_CODE_FK_PK")
            Me.columnPRESTRTX_TEXTE = MyBase.Columns("PRESTRTX_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRESTRTX_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRESTRTX_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTRTX_PRE_CODE_FK_PK)
            Me.columnPRESTRTX_TEXTE = New Global.System.Data.DataColumn("PRESTRTX_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESTRTX_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRESTRTX_PRE_CODE_FK_PK}, true))
            Me.columnPRESTRTX_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESTRTX_PRE_CODE_FK_PK.Unique = true
            Me.columnPRESTRTX_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRESTRTX_TEXTE.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRESTRTX_TEXTE_STAT_REMBOURSTRow() As PRESTRTX_TEXTE_STAT_REMBOURSTRow
            Return CType(Me.NewRow,PRESTRTX_TEXTE_STAT_REMBOURSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRESTRTX_TEXTE_STAT_REMBOURSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRESTRTX_TEXTE_STAT_REMBOURSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRESTRTX_TEXTE_STAT_REMBOURSTRowChangedEvent) Is Nothing) Then
                RaiseEvent PRESTRTX_TEXTE_STAT_REMBOURSTRowChanged(Me, New PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTRTX_TEXTE_STAT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRESTRTX_TEXTE_STAT_REMBOURSTRowChangingEvent) Is Nothing) Then
                RaiseEvent PRESTRTX_TEXTE_STAT_REMBOURSTRowChanging(Me, New PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTRTX_TEXTE_STAT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRESTRTX_TEXTE_STAT_REMBOURSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRESTRTX_TEXTE_STAT_REMBOURSTRowDeleted(Me, New PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTRTX_TEXTE_STAT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRESTRTX_TEXTE_STAT_REMBOURSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRESTRTX_TEXTE_STAT_REMBOURSTRowDeleting(Me, New PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEvent(CType(e.Row,PRESTRTX_TEXTE_STAT_REMBOURSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRESTRTX_TEXTE_STAT_REMBOURSTRow(ByVal row As PRESTRTX_TEXTE_STAT_REMBOURSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRESTRTX_TEXTE_STAT_REMBOURSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREPER_PRESENTATION_PERIO_CSVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREPER_NUM_CODE_PK As Global.System.Data.DataColumn
        
        Private columnPREPER_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREPER_CDF_UT_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPREPER_DUREE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREPER_PRESENTATION_PERIO_CSV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREPER_NUM_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREPER_NUM_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREPER_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREPER_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREPER_CDF_UT_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREPER_CDF_UT_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREPER_DUREEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREPER_DUREE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREPER_PRESENTATION_PERIO_CSVRow
            Get
                Return CType(Me.Rows(index),PREPER_PRESENTATION_PERIO_CSVRow)
            End Get
        End Property
        
        Public Event PREPER_PRESENTATION_PERIO_CSVRowChanging As PREPER_PRESENTATION_PERIO_CSVRowChangeEventHandler
        
        Public Event PREPER_PRESENTATION_PERIO_CSVRowChanged As PREPER_PRESENTATION_PERIO_CSVRowChangeEventHandler
        
        Public Event PREPER_PRESENTATION_PERIO_CSVRowDeleting As PREPER_PRESENTATION_PERIO_CSVRowChangeEventHandler
        
        Public Event PREPER_PRESENTATION_PERIO_CSVRowDeleted As PREPER_PRESENTATION_PERIO_CSVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREPER_PRESENTATION_PERIO_CSVRow(ByVal row As PREPER_PRESENTATION_PERIO_CSVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREPER_PRESENTATION_PERIO_CSVRow(ByVal PREPER_NUM_CODE_PK As Integer, ByVal PREPER_PRE_CODE_FK_PK As String, ByVal PREPER_CDF_UT_CODE_FK As String, ByVal PREPER_DUREE As Integer) As PREPER_PRESENTATION_PERIO_CSVRow
            Dim rowPREPER_PRESENTATION_PERIO_CSVRow As PREPER_PRESENTATION_PERIO_CSVRow = CType(Me.NewRow,PREPER_PRESENTATION_PERIO_CSVRow)
            Dim columnValuesArray() As Object = New Object() {PREPER_NUM_CODE_PK, PREPER_PRE_CODE_FK_PK, PREPER_CDF_UT_CODE_FK, PREPER_DUREE}
            rowPREPER_PRESENTATION_PERIO_CSVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREPER_PRESENTATION_PERIO_CSVRow)
            Return rowPREPER_PRESENTATION_PERIO_CSVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREPER_NUM_CODE_PKPREPER_PRE_CODE_FK_PK(ByVal PREPER_NUM_CODE_PK As Integer, ByVal PREPER_PRE_CODE_FK_PK As String) As PREPER_PRESENTATION_PERIO_CSVRow
            Return CType(Me.Rows.Find(New Object() {PREPER_NUM_CODE_PK, PREPER_PRE_CODE_FK_PK}),PREPER_PRESENTATION_PERIO_CSVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREPER_PRESENTATION_PERIO_CSVDataTable = CType(MyBase.Clone,PREPER_PRESENTATION_PERIO_CSVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREPER_PRESENTATION_PERIO_CSVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREPER_NUM_CODE_PK = MyBase.Columns("PREPER_NUM_CODE_PK")
            Me.columnPREPER_PRE_CODE_FK_PK = MyBase.Columns("PREPER_PRE_CODE_FK_PK")
            Me.columnPREPER_CDF_UT_CODE_FK = MyBase.Columns("PREPER_CDF_UT_CODE_FK")
            Me.columnPREPER_DUREE = MyBase.Columns("PREPER_DUREE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREPER_NUM_CODE_PK = New Global.System.Data.DataColumn("PREPER_NUM_CODE_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREPER_NUM_CODE_PK)
            Me.columnPREPER_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREPER_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREPER_PRE_CODE_FK_PK)
            Me.columnPREPER_CDF_UT_CODE_FK = New Global.System.Data.DataColumn("PREPER_CDF_UT_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREPER_CDF_UT_CODE_FK)
            Me.columnPREPER_DUREE = New Global.System.Data.DataColumn("PREPER_DUREE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREPER_DUREE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREPER_NUM_CODE_PK, Me.columnPREPER_PRE_CODE_FK_PK}, true))
            Me.columnPREPER_NUM_CODE_PK.AllowDBNull = false
            Me.columnPREPER_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREPER_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREPER_CDF_UT_CODE_FK.AllowDBNull = false
            Me.columnPREPER_CDF_UT_CODE_FK.MaxLength = 10
            Me.columnPREPER_DUREE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREPER_PRESENTATION_PERIO_CSVRow() As PREPER_PRESENTATION_PERIO_CSVRow
            Return CType(Me.NewRow,PREPER_PRESENTATION_PERIO_CSVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREPER_PRESENTATION_PERIO_CSVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREPER_PRESENTATION_PERIO_CSVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREPER_PRESENTATION_PERIO_CSVRowChangedEvent) Is Nothing) Then
                RaiseEvent PREPER_PRESENTATION_PERIO_CSVRowChanged(Me, New PREPER_PRESENTATION_PERIO_CSVRowChangeEvent(CType(e.Row,PREPER_PRESENTATION_PERIO_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREPER_PRESENTATION_PERIO_CSVRowChangingEvent) Is Nothing) Then
                RaiseEvent PREPER_PRESENTATION_PERIO_CSVRowChanging(Me, New PREPER_PRESENTATION_PERIO_CSVRowChangeEvent(CType(e.Row,PREPER_PRESENTATION_PERIO_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREPER_PRESENTATION_PERIO_CSVRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREPER_PRESENTATION_PERIO_CSVRowDeleted(Me, New PREPER_PRESENTATION_PERIO_CSVRowChangeEvent(CType(e.Row,PREPER_PRESENTATION_PERIO_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREPER_PRESENTATION_PERIO_CSVRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREPER_PRESENTATION_PERIO_CSVRowDeleting(Me, New PREPER_PRESENTATION_PERIO_CSVRowChangeEvent(CType(e.Row,PREPER_PRESENTATION_PERIO_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREPER_PRESENTATION_PERIO_CSVRow(ByVal row As PREPER_PRESENTATION_PERIO_CSVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREPER_PRESENTATION_PERIO_CSVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERCS_PERIODE_COND_CSVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPERCS_NUM_CODE_PK As Global.System.Data.DataColumn
        
        Private columnPERCS_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPERCS_CDF_CSV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPERCS_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERCS_PERIODE_COND_CSV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERCS_NUM_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERCS_NUM_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERCS_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERCS_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERCS_CDF_CSV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERCS_CDF_CSV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERCS_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERCS_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERCS_PERIODE_COND_CSVRow
            Get
                Return CType(Me.Rows(index),PERCS_PERIODE_COND_CSVRow)
            End Get
        End Property
        
        Public Event PERCS_PERIODE_COND_CSVRowChanging As PERCS_PERIODE_COND_CSVRowChangeEventHandler
        
        Public Event PERCS_PERIODE_COND_CSVRowChanged As PERCS_PERIODE_COND_CSVRowChangeEventHandler
        
        Public Event PERCS_PERIODE_COND_CSVRowDeleting As PERCS_PERIODE_COND_CSVRowChangeEventHandler
        
        Public Event PERCS_PERIODE_COND_CSVRowDeleted As PERCS_PERIODE_COND_CSVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPERCS_PERIODE_COND_CSVRow(ByVal row As PERCS_PERIODE_COND_CSVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPERCS_PERIODE_COND_CSVRow(ByVal PERCS_NUM_CODE_PK As Integer, ByVal PERCS_PRE_CODE_FK_PK As String, ByVal PERCS_CDF_CSV_CODE_FK_PK As String, ByVal PERCS_NUMORD As Short) As PERCS_PERIODE_COND_CSVRow
            Dim rowPERCS_PERIODE_COND_CSVRow As PERCS_PERIODE_COND_CSVRow = CType(Me.NewRow,PERCS_PERIODE_COND_CSVRow)
            Dim columnValuesArray() As Object = New Object() {PERCS_NUM_CODE_PK, PERCS_PRE_CODE_FK_PK, PERCS_CDF_CSV_CODE_FK_PK, PERCS_NUMORD}
            rowPERCS_PERIODE_COND_CSVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERCS_PERIODE_COND_CSVRow)
            Return rowPERCS_PERIODE_COND_CSVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPERCS_NUM_CODE_PKPERCS_PRE_CODE_FK_PKPERCS_CDF_CSV_CODE_FK_PK(ByVal PERCS_NUM_CODE_PK As Integer, ByVal PERCS_PRE_CODE_FK_PK As String, ByVal PERCS_CDF_CSV_CODE_FK_PK As String) As PERCS_PERIODE_COND_CSVRow
            Return CType(Me.Rows.Find(New Object() {PERCS_NUM_CODE_PK, PERCS_PRE_CODE_FK_PK, PERCS_CDF_CSV_CODE_FK_PK}),PERCS_PERIODE_COND_CSVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERCS_PERIODE_COND_CSVDataTable = CType(MyBase.Clone,PERCS_PERIODE_COND_CSVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERCS_PERIODE_COND_CSVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPERCS_NUM_CODE_PK = MyBase.Columns("PERCS_NUM_CODE_PK")
            Me.columnPERCS_PRE_CODE_FK_PK = MyBase.Columns("PERCS_PRE_CODE_FK_PK")
            Me.columnPERCS_CDF_CSV_CODE_FK_PK = MyBase.Columns("PERCS_CDF_CSV_CODE_FK_PK")
            Me.columnPERCS_NUMORD = MyBase.Columns("PERCS_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPERCS_NUM_CODE_PK = New Global.System.Data.DataColumn("PERCS_NUM_CODE_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERCS_NUM_CODE_PK)
            Me.columnPERCS_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PERCS_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERCS_PRE_CODE_FK_PK)
            Me.columnPERCS_CDF_CSV_CODE_FK_PK = New Global.System.Data.DataColumn("PERCS_CDF_CSV_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERCS_CDF_CSV_CODE_FK_PK)
            Me.columnPERCS_NUMORD = New Global.System.Data.DataColumn("PERCS_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERCS_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPERCS_NUM_CODE_PK, Me.columnPERCS_PRE_CODE_FK_PK, Me.columnPERCS_CDF_CSV_CODE_FK_PK}, true))
            Me.columnPERCS_NUM_CODE_PK.AllowDBNull = false
            Me.columnPERCS_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPERCS_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPERCS_CDF_CSV_CODE_FK_PK.AllowDBNull = false
            Me.columnPERCS_CDF_CSV_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPERCS_PERIODE_COND_CSVRow() As PERCS_PERIODE_COND_CSVRow
            Return CType(Me.NewRow,PERCS_PERIODE_COND_CSVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERCS_PERIODE_COND_CSVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERCS_PERIODE_COND_CSVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERCS_PERIODE_COND_CSVRowChangedEvent) Is Nothing) Then
                RaiseEvent PERCS_PERIODE_COND_CSVRowChanged(Me, New PERCS_PERIODE_COND_CSVRowChangeEvent(CType(e.Row,PERCS_PERIODE_COND_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERCS_PERIODE_COND_CSVRowChangingEvent) Is Nothing) Then
                RaiseEvent PERCS_PERIODE_COND_CSVRowChanging(Me, New PERCS_PERIODE_COND_CSVRowChangeEvent(CType(e.Row,PERCS_PERIODE_COND_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERCS_PERIODE_COND_CSVRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERCS_PERIODE_COND_CSVRowDeleted(Me, New PERCS_PERIODE_COND_CSVRowChangeEvent(CType(e.Row,PERCS_PERIODE_COND_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERCS_PERIODE_COND_CSVRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERCS_PERIODE_COND_CSVRowDeleting(Me, New PERCS_PERIODE_COND_CSVRowChangeEvent(CType(e.Row,PERCS_PERIODE_COND_CSVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePERCS_PERIODE_COND_CSVRow(ByVal row As PERCS_PERIODE_COND_CSVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERCS_PERIODE_COND_CSVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRECSVTX_TEXTE_CONSERVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRECSVTX_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECSVTX_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRECSVTX_TEXTE_CONSERV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECSVTX_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECSVTX_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECSVTX_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECSVTX_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRECSVTX_TEXTE_CONSERVRow
            Get
                Return CType(Me.Rows(index),PRECSVTX_TEXTE_CONSERVRow)
            End Get
        End Property
        
        Public Event PRECSVTX_TEXTE_CONSERVRowChanging As PRECSVTX_TEXTE_CONSERVRowChangeEventHandler
        
        Public Event PRECSVTX_TEXTE_CONSERVRowChanged As PRECSVTX_TEXTE_CONSERVRowChangeEventHandler
        
        Public Event PRECSVTX_TEXTE_CONSERVRowDeleting As PRECSVTX_TEXTE_CONSERVRowChangeEventHandler
        
        Public Event PRECSVTX_TEXTE_CONSERVRowDeleted As PRECSVTX_TEXTE_CONSERVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRECSVTX_TEXTE_CONSERVRow(ByVal row As PRECSVTX_TEXTE_CONSERVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRECSVTX_TEXTE_CONSERVRow(ByVal PRECSVTX_PRE_CODE_FK_PK As String, ByVal PRECSVTX_TEXTE As String) As PRECSVTX_TEXTE_CONSERVRow
            Dim rowPRECSVTX_TEXTE_CONSERVRow As PRECSVTX_TEXTE_CONSERVRow = CType(Me.NewRow,PRECSVTX_TEXTE_CONSERVRow)
            Dim columnValuesArray() As Object = New Object() {PRECSVTX_PRE_CODE_FK_PK, PRECSVTX_TEXTE}
            rowPRECSVTX_TEXTE_CONSERVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRECSVTX_TEXTE_CONSERVRow)
            Return rowPRECSVTX_TEXTE_CONSERVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRECSVTX_PRE_CODE_FK_PK(ByVal PRECSVTX_PRE_CODE_FK_PK As String) As PRECSVTX_TEXTE_CONSERVRow
            Return CType(Me.Rows.Find(New Object() {PRECSVTX_PRE_CODE_FK_PK}),PRECSVTX_TEXTE_CONSERVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRECSVTX_TEXTE_CONSERVDataTable = CType(MyBase.Clone,PRECSVTX_TEXTE_CONSERVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRECSVTX_TEXTE_CONSERVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRECSVTX_PRE_CODE_FK_PK = MyBase.Columns("PRECSVTX_PRE_CODE_FK_PK")
            Me.columnPRECSVTX_TEXTE = MyBase.Columns("PRECSVTX_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRECSVTX_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRECSVTX_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECSVTX_PRE_CODE_FK_PK)
            Me.columnPRECSVTX_TEXTE = New Global.System.Data.DataColumn("PRECSVTX_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECSVTX_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRECSVTX_PRE_CODE_FK_PK}, true))
            Me.columnPRECSVTX_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECSVTX_PRE_CODE_FK_PK.Unique = true
            Me.columnPRECSVTX_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRECSVTX_TEXTE.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRECSVTX_TEXTE_CONSERVRow() As PRECSVTX_TEXTE_CONSERVRow
            Return CType(Me.NewRow,PRECSVTX_TEXTE_CONSERVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRECSVTX_TEXTE_CONSERVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRECSVTX_TEXTE_CONSERVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRECSVTX_TEXTE_CONSERVRowChangedEvent) Is Nothing) Then
                RaiseEvent PRECSVTX_TEXTE_CONSERVRowChanged(Me, New PRECSVTX_TEXTE_CONSERVRowChangeEvent(CType(e.Row,PRECSVTX_TEXTE_CONSERVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRECSVTX_TEXTE_CONSERVRowChangingEvent) Is Nothing) Then
                RaiseEvent PRECSVTX_TEXTE_CONSERVRowChanging(Me, New PRECSVTX_TEXTE_CONSERVRowChangeEvent(CType(e.Row,PRECSVTX_TEXTE_CONSERVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRECSVTX_TEXTE_CONSERVRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRECSVTX_TEXTE_CONSERVRowDeleted(Me, New PRECSVTX_TEXTE_CONSERVRowChangeEvent(CType(e.Row,PRECSVTX_TEXTE_CONSERVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRECSVTX_TEXTE_CONSERVRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRECSVTX_TEXTE_CONSERVRowDeleting(Me, New PRECSVTX_TEXTE_CONSERVRowChangeEvent(CType(e.Row,PRECSVTX_TEXTE_CONSERVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRECSVTX_TEXTE_CONSERVRow(ByVal row As PRECSVTX_TEXTE_CONSERVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRECSVTX_TEXTE_CONSERVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDILI_LIEU_DISPENSATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREDILI_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDILI_CDF_LIEU_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDILI_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDILI_LIEU_DISPENSAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDILI_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDILI_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDILI_CDF_LIEU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDILI_CDF_LIEU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDILI_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDILI_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDILI_LIEU_DISPENSATRow
            Get
                Return CType(Me.Rows(index),PREDILI_LIEU_DISPENSATRow)
            End Get
        End Property
        
        Public Event PREDILI_LIEU_DISPENSATRowChanging As PREDILI_LIEU_DISPENSATRowChangeEventHandler
        
        Public Event PREDILI_LIEU_DISPENSATRowChanged As PREDILI_LIEU_DISPENSATRowChangeEventHandler
        
        Public Event PREDILI_LIEU_DISPENSATRowDeleting As PREDILI_LIEU_DISPENSATRowChangeEventHandler
        
        Public Event PREDILI_LIEU_DISPENSATRowDeleted As PREDILI_LIEU_DISPENSATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDILI_LIEU_DISPENSATRow(ByVal row As PREDILI_LIEU_DISPENSATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDILI_LIEU_DISPENSATRow(ByVal PREDILI_PRE_CODE_FK_PK As String, ByVal PREDILI_CDF_LIEU_CODE_FK_PK As String, ByVal PREDILI_NUMORD As Short) As PREDILI_LIEU_DISPENSATRow
            Dim rowPREDILI_LIEU_DISPENSATRow As PREDILI_LIEU_DISPENSATRow = CType(Me.NewRow,PREDILI_LIEU_DISPENSATRow)
            Dim columnValuesArray() As Object = New Object() {PREDILI_PRE_CODE_FK_PK, PREDILI_CDF_LIEU_CODE_FK_PK, PREDILI_NUMORD}
            rowPREDILI_LIEU_DISPENSATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDILI_LIEU_DISPENSATRow)
            Return rowPREDILI_LIEU_DISPENSATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREDILI_PRE_CODE_FK_PKPREDILI_CDF_LIEU_CODE_FK_PK(ByVal PREDILI_PRE_CODE_FK_PK As String, ByVal PREDILI_CDF_LIEU_CODE_FK_PK As String) As PREDILI_LIEU_DISPENSATRow
            Return CType(Me.Rows.Find(New Object() {PREDILI_PRE_CODE_FK_PK, PREDILI_CDF_LIEU_CODE_FK_PK}),PREDILI_LIEU_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDILI_LIEU_DISPENSATDataTable = CType(MyBase.Clone,PREDILI_LIEU_DISPENSATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDILI_LIEU_DISPENSATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREDILI_PRE_CODE_FK_PK = MyBase.Columns("PREDILI_PRE_CODE_FK_PK")
            Me.columnPREDILI_CDF_LIEU_CODE_FK_PK = MyBase.Columns("PREDILI_CDF_LIEU_CODE_FK_PK")
            Me.columnPREDILI_NUMORD = MyBase.Columns("PREDILI_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREDILI_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREDILI_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDILI_PRE_CODE_FK_PK)
            Me.columnPREDILI_CDF_LIEU_CODE_FK_PK = New Global.System.Data.DataColumn("PREDILI_CDF_LIEU_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDILI_CDF_LIEU_CODE_FK_PK)
            Me.columnPREDILI_NUMORD = New Global.System.Data.DataColumn("PREDILI_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDILI_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREDILI_PRE_CODE_FK_PK, Me.columnPREDILI_CDF_LIEU_CODE_FK_PK}, true))
            Me.columnPREDILI_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDILI_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREDILI_CDF_LIEU_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDILI_CDF_LIEU_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDILI_LIEU_DISPENSATRow() As PREDILI_LIEU_DISPENSATRow
            Return CType(Me.NewRow,PREDILI_LIEU_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDILI_LIEU_DISPENSATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDILI_LIEU_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDILI_LIEU_DISPENSATRowChangedEvent) Is Nothing) Then
                RaiseEvent PREDILI_LIEU_DISPENSATRowChanged(Me, New PREDILI_LIEU_DISPENSATRowChangeEvent(CType(e.Row,PREDILI_LIEU_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDILI_LIEU_DISPENSATRowChangingEvent) Is Nothing) Then
                RaiseEvent PREDILI_LIEU_DISPENSATRowChanging(Me, New PREDILI_LIEU_DISPENSATRowChangeEvent(CType(e.Row,PREDILI_LIEU_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDILI_LIEU_DISPENSATRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDILI_LIEU_DISPENSATRowDeleted(Me, New PREDILI_LIEU_DISPENSATRowChangeEvent(CType(e.Row,PREDILI_LIEU_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDILI_LIEU_DISPENSATRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDILI_LIEU_DISPENSATRowDeleting(Me, New PREDILI_LIEU_DISPENSATRowChangeEvent(CType(e.Row,PREDILI_LIEU_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDILI_LIEU_DISPENSATRow(ByVal row As PREDILI_LIEU_DISPENSATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDILI_LIEU_DISPENSATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDICO_COMMENT_DISPENSATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREDICO_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDICO_CDF_COM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDICO_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDICO_COMMENT_DISPENSAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDICO_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDICO_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDICO_CDF_COM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDICO_CDF_COM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDICO_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDICO_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDICO_COMMENT_DISPENSATRow
            Get
                Return CType(Me.Rows(index),PREDICO_COMMENT_DISPENSATRow)
            End Get
        End Property
        
        Public Event PREDICO_COMMENT_DISPENSATRowChanging As PREDICO_COMMENT_DISPENSATRowChangeEventHandler
        
        Public Event PREDICO_COMMENT_DISPENSATRowChanged As PREDICO_COMMENT_DISPENSATRowChangeEventHandler
        
        Public Event PREDICO_COMMENT_DISPENSATRowDeleting As PREDICO_COMMENT_DISPENSATRowChangeEventHandler
        
        Public Event PREDICO_COMMENT_DISPENSATRowDeleted As PREDICO_COMMENT_DISPENSATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDICO_COMMENT_DISPENSATRow(ByVal row As PREDICO_COMMENT_DISPENSATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDICO_COMMENT_DISPENSATRow(ByVal PREDICO_PRE_CODE_FK_PK As String, ByVal PREDICO_CDF_COM_CODE_FK_PK As String, ByVal PREDICO_NUMORD As Short) As PREDICO_COMMENT_DISPENSATRow
            Dim rowPREDICO_COMMENT_DISPENSATRow As PREDICO_COMMENT_DISPENSATRow = CType(Me.NewRow,PREDICO_COMMENT_DISPENSATRow)
            Dim columnValuesArray() As Object = New Object() {PREDICO_PRE_CODE_FK_PK, PREDICO_CDF_COM_CODE_FK_PK, PREDICO_NUMORD}
            rowPREDICO_COMMENT_DISPENSATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDICO_COMMENT_DISPENSATRow)
            Return rowPREDICO_COMMENT_DISPENSATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREDICO_PRE_CODE_FK_PKPREDICO_CDF_COM_CODE_FK_PK(ByVal PREDICO_PRE_CODE_FK_PK As String, ByVal PREDICO_CDF_COM_CODE_FK_PK As String) As PREDICO_COMMENT_DISPENSATRow
            Return CType(Me.Rows.Find(New Object() {PREDICO_PRE_CODE_FK_PK, PREDICO_CDF_COM_CODE_FK_PK}),PREDICO_COMMENT_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDICO_COMMENT_DISPENSATDataTable = CType(MyBase.Clone,PREDICO_COMMENT_DISPENSATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDICO_COMMENT_DISPENSATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREDICO_PRE_CODE_FK_PK = MyBase.Columns("PREDICO_PRE_CODE_FK_PK")
            Me.columnPREDICO_CDF_COM_CODE_FK_PK = MyBase.Columns("PREDICO_CDF_COM_CODE_FK_PK")
            Me.columnPREDICO_NUMORD = MyBase.Columns("PREDICO_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREDICO_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREDICO_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDICO_PRE_CODE_FK_PK)
            Me.columnPREDICO_CDF_COM_CODE_FK_PK = New Global.System.Data.DataColumn("PREDICO_CDF_COM_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDICO_CDF_COM_CODE_FK_PK)
            Me.columnPREDICO_NUMORD = New Global.System.Data.DataColumn("PREDICO_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDICO_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREDICO_PRE_CODE_FK_PK, Me.columnPREDICO_CDF_COM_CODE_FK_PK}, true))
            Me.columnPREDICO_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDICO_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREDICO_CDF_COM_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDICO_CDF_COM_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDICO_COMMENT_DISPENSATRow() As PREDICO_COMMENT_DISPENSATRow
            Return CType(Me.NewRow,PREDICO_COMMENT_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDICO_COMMENT_DISPENSATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDICO_COMMENT_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDICO_COMMENT_DISPENSATRowChangedEvent) Is Nothing) Then
                RaiseEvent PREDICO_COMMENT_DISPENSATRowChanged(Me, New PREDICO_COMMENT_DISPENSATRowChangeEvent(CType(e.Row,PREDICO_COMMENT_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDICO_COMMENT_DISPENSATRowChangingEvent) Is Nothing) Then
                RaiseEvent PREDICO_COMMENT_DISPENSATRowChanging(Me, New PREDICO_COMMENT_DISPENSATRowChangeEvent(CType(e.Row,PREDICO_COMMENT_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDICO_COMMENT_DISPENSATRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDICO_COMMENT_DISPENSATRowDeleted(Me, New PREDICO_COMMENT_DISPENSATRowChangeEvent(CType(e.Row,PREDICO_COMMENT_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDICO_COMMENT_DISPENSATRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDICO_COMMENT_DISPENSATRowDeleting(Me, New PREDICO_COMMENT_DISPENSATRowChangeEvent(CType(e.Row,PREDICO_COMMENT_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDICO_COMMENT_DISPENSATRow(ByVal row As PREDICO_COMMENT_DISPENSATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDICO_COMMENT_DISPENSATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDITX_TEXTE_DISPENSATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREDITX_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDITX_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDITX_TEXTE_DISPENSAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDITX_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDITX_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDITX_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDITX_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDITX_TEXTE_DISPENSATRow
            Get
                Return CType(Me.Rows(index),PREDITX_TEXTE_DISPENSATRow)
            End Get
        End Property
        
        Public Event PREDITX_TEXTE_DISPENSATRowChanging As PREDITX_TEXTE_DISPENSATRowChangeEventHandler
        
        Public Event PREDITX_TEXTE_DISPENSATRowChanged As PREDITX_TEXTE_DISPENSATRowChangeEventHandler
        
        Public Event PREDITX_TEXTE_DISPENSATRowDeleting As PREDITX_TEXTE_DISPENSATRowChangeEventHandler
        
        Public Event PREDITX_TEXTE_DISPENSATRowDeleted As PREDITX_TEXTE_DISPENSATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDITX_TEXTE_DISPENSATRow(ByVal row As PREDITX_TEXTE_DISPENSATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDITX_TEXTE_DISPENSATRow(ByVal PREDITX_PRE_CODE_FK_PK As String, ByVal PREDITX_TEXTE As String) As PREDITX_TEXTE_DISPENSATRow
            Dim rowPREDITX_TEXTE_DISPENSATRow As PREDITX_TEXTE_DISPENSATRow = CType(Me.NewRow,PREDITX_TEXTE_DISPENSATRow)
            Dim columnValuesArray() As Object = New Object() {PREDITX_PRE_CODE_FK_PK, PREDITX_TEXTE}
            rowPREDITX_TEXTE_DISPENSATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDITX_TEXTE_DISPENSATRow)
            Return rowPREDITX_TEXTE_DISPENSATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREDITX_PRE_CODE_FK_PK(ByVal PREDITX_PRE_CODE_FK_PK As String) As PREDITX_TEXTE_DISPENSATRow
            Return CType(Me.Rows.Find(New Object() {PREDITX_PRE_CODE_FK_PK}),PREDITX_TEXTE_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDITX_TEXTE_DISPENSATDataTable = CType(MyBase.Clone,PREDITX_TEXTE_DISPENSATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDITX_TEXTE_DISPENSATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREDITX_PRE_CODE_FK_PK = MyBase.Columns("PREDITX_PRE_CODE_FK_PK")
            Me.columnPREDITX_TEXTE = MyBase.Columns("PREDITX_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREDITX_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREDITX_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDITX_PRE_CODE_FK_PK)
            Me.columnPREDITX_TEXTE = New Global.System.Data.DataColumn("PREDITX_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDITX_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREDITX_PRE_CODE_FK_PK}, true))
            Me.columnPREDITX_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDITX_PRE_CODE_FK_PK.Unique = true
            Me.columnPREDITX_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREDITX_TEXTE.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDITX_TEXTE_DISPENSATRow() As PREDITX_TEXTE_DISPENSATRow
            Return CType(Me.NewRow,PREDITX_TEXTE_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDITX_TEXTE_DISPENSATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDITX_TEXTE_DISPENSATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDITX_TEXTE_DISPENSATRowChangedEvent) Is Nothing) Then
                RaiseEvent PREDITX_TEXTE_DISPENSATRowChanged(Me, New PREDITX_TEXTE_DISPENSATRowChangeEvent(CType(e.Row,PREDITX_TEXTE_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDITX_TEXTE_DISPENSATRowChangingEvent) Is Nothing) Then
                RaiseEvent PREDITX_TEXTE_DISPENSATRowChanging(Me, New PREDITX_TEXTE_DISPENSATRowChangeEvent(CType(e.Row,PREDITX_TEXTE_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDITX_TEXTE_DISPENSATRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDITX_TEXTE_DISPENSATRowDeleted(Me, New PREDITX_TEXTE_DISPENSATRowChangeEvent(CType(e.Row,PREDITX_TEXTE_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDITX_TEXTE_DISPENSATRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDITX_TEXTE_DISPENSATRowDeleting(Me, New PREDITX_TEXTE_DISPENSATRowChangeEvent(CType(e.Row,PREDITX_TEXTE_DISPENSATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDITX_TEXTE_DISPENSATRow(ByVal row As PREDITX_TEXTE_DISPENSATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDITX_TEXTE_DISPENSATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRESMR_PRE_SMR_ATRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRESMR_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESMR_CDF_SMR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRESMR_DATE_SMR_PK As Global.System.Data.DataColumn
        
        Private columnPRESMR_ATR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRESMR_PRE_SMR_ATR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESMR_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESMR_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESMR_CDF_SMR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESMR_CDF_SMR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESMR_DATE_SMR_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESMR_DATE_SMR_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESMR_ATR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESMR_ATR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRESMR_PRE_SMR_ATRRow
            Get
                Return CType(Me.Rows(index),PRESMR_PRE_SMR_ATRRow)
            End Get
        End Property
        
        Public Event PRESMR_PRE_SMR_ATRRowChanging As PRESMR_PRE_SMR_ATRRowChangeEventHandler
        
        Public Event PRESMR_PRE_SMR_ATRRowChanged As PRESMR_PRE_SMR_ATRRowChangeEventHandler
        
        Public Event PRESMR_PRE_SMR_ATRRowDeleting As PRESMR_PRE_SMR_ATRRowChangeEventHandler
        
        Public Event PRESMR_PRE_SMR_ATRRowDeleted As PRESMR_PRE_SMR_ATRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRESMR_PRE_SMR_ATRRow(ByVal row As PRESMR_PRE_SMR_ATRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRESMR_PRE_SMR_ATRRow(ByVal PRESMR_PRE_CODE_FK_PK As String, ByVal PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal PRESMR_DATE_SMR_PK As Date, ByVal PRESMR_ATR_CODE_FK_PK As Integer) As PRESMR_PRE_SMR_ATRRow
            Dim rowPRESMR_PRE_SMR_ATRRow As PRESMR_PRE_SMR_ATRRow = CType(Me.NewRow,PRESMR_PRE_SMR_ATRRow)
            Dim columnValuesArray() As Object = New Object() {PRESMR_PRE_CODE_FK_PK, PRESMR_CDF_SMR_CODE_FK_PK, PRESMR_DATE_SMR_PK, PRESMR_ATR_CODE_FK_PK}
            rowPRESMR_PRE_SMR_ATRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRESMR_PRE_SMR_ATRRow)
            Return rowPRESMR_PRE_SMR_ATRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRESMR_PRE_CODE_FK_PKPRESMR_CDF_SMR_CODE_FK_PKPRESMR_DATE_SMR_PKPRESMR_ATR_CODE_FK_PK(ByVal PRESMR_PRE_CODE_FK_PK As String, ByVal PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal PRESMR_DATE_SMR_PK As Date, ByVal PRESMR_ATR_CODE_FK_PK As Integer) As PRESMR_PRE_SMR_ATRRow
            Return CType(Me.Rows.Find(New Object() {PRESMR_PRE_CODE_FK_PK, PRESMR_CDF_SMR_CODE_FK_PK, PRESMR_DATE_SMR_PK, PRESMR_ATR_CODE_FK_PK}),PRESMR_PRE_SMR_ATRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRESMR_PRE_SMR_ATRDataTable = CType(MyBase.Clone,PRESMR_PRE_SMR_ATRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRESMR_PRE_SMR_ATRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRESMR_PRE_CODE_FK_PK = MyBase.Columns("PRESMR_PRE_CODE_FK_PK")
            Me.columnPRESMR_CDF_SMR_CODE_FK_PK = MyBase.Columns("PRESMR_CDF_SMR_CODE_FK_PK")
            Me.columnPRESMR_DATE_SMR_PK = MyBase.Columns("PRESMR_DATE_SMR_PK")
            Me.columnPRESMR_ATR_CODE_FK_PK = MyBase.Columns("PRESMR_ATR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRESMR_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRESMR_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESMR_PRE_CODE_FK_PK)
            Me.columnPRESMR_CDF_SMR_CODE_FK_PK = New Global.System.Data.DataColumn("PRESMR_CDF_SMR_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESMR_CDF_SMR_CODE_FK_PK)
            Me.columnPRESMR_DATE_SMR_PK = New Global.System.Data.DataColumn("PRESMR_DATE_SMR_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESMR_DATE_SMR_PK)
            Me.columnPRESMR_ATR_CODE_FK_PK = New Global.System.Data.DataColumn("PRESMR_ATR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESMR_ATR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRESMR_PRE_CODE_FK_PK, Me.columnPRESMR_CDF_SMR_CODE_FK_PK, Me.columnPRESMR_DATE_SMR_PK, Me.columnPRESMR_ATR_CODE_FK_PK}, true))
            Me.columnPRESMR_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESMR_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRESMR_CDF_SMR_CODE_FK_PK.AllowDBNull = false
            Me.columnPRESMR_CDF_SMR_CODE_FK_PK.MaxLength = 10
            Me.columnPRESMR_DATE_SMR_PK.AllowDBNull = false
            Me.columnPRESMR_ATR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRESMR_PRE_SMR_ATRRow() As PRESMR_PRE_SMR_ATRRow
            Return CType(Me.NewRow,PRESMR_PRE_SMR_ATRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRESMR_PRE_SMR_ATRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRESMR_PRE_SMR_ATRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRESMR_PRE_SMR_ATRRowChangedEvent) Is Nothing) Then
                RaiseEvent PRESMR_PRE_SMR_ATRRowChanged(Me, New PRESMR_PRE_SMR_ATRRowChangeEvent(CType(e.Row,PRESMR_PRE_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRESMR_PRE_SMR_ATRRowChangingEvent) Is Nothing) Then
                RaiseEvent PRESMR_PRE_SMR_ATRRowChanging(Me, New PRESMR_PRE_SMR_ATRRowChangeEvent(CType(e.Row,PRESMR_PRE_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRESMR_PRE_SMR_ATRRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRESMR_PRE_SMR_ATRRowDeleted(Me, New PRESMR_PRE_SMR_ATRRowChangeEvent(CType(e.Row,PRESMR_PRE_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRESMR_PRE_SMR_ATRRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRESMR_PRE_SMR_ATRRowDeleting(Me, New PRESMR_PRE_SMR_ATRRowChangeEvent(CType(e.Row,PRESMR_PRE_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRESMR_PRE_SMR_ATRRow(ByVal row As PRESMR_PRE_SMR_ATRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRESMR_PRE_SMR_ATRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GSAC_PERE_SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGSAC_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnGSAC_NOM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GSAC_PERE_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSAC_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSAC_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSAC_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSAC_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GSAC_PERE_SUBACTRow
            Get
                Return CType(Me.Rows(index),GSAC_PERE_SUBACTRow)
            End Get
        End Property
        
        Public Event GSAC_PERE_SUBACTRowChanging As GSAC_PERE_SUBACTRowChangeEventHandler
        
        Public Event GSAC_PERE_SUBACTRowChanged As GSAC_PERE_SUBACTRowChangeEventHandler
        
        Public Event GSAC_PERE_SUBACTRowDeleting As GSAC_PERE_SUBACTRowChangeEventHandler
        
        Public Event GSAC_PERE_SUBACTRowDeleted As GSAC_PERE_SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGSAC_PERE_SUBACTRow(ByVal row As GSAC_PERE_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGSAC_PERE_SUBACTRow(ByVal GSAC_CODE_SQ_PK As Integer, ByVal GSAC_NOM As String) As GSAC_PERE_SUBACTRow
            Dim rowGSAC_PERE_SUBACTRow As GSAC_PERE_SUBACTRow = CType(Me.NewRow,GSAC_PERE_SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {GSAC_CODE_SQ_PK, GSAC_NOM}
            rowGSAC_PERE_SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGSAC_PERE_SUBACTRow)
            Return rowGSAC_PERE_SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGSAC_CODE_SQ_PK(ByVal GSAC_CODE_SQ_PK As Integer) As GSAC_PERE_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {GSAC_CODE_SQ_PK}),GSAC_PERE_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GSAC_PERE_SUBACTDataTable = CType(MyBase.Clone,GSAC_PERE_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GSAC_PERE_SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGSAC_CODE_SQ_PK = MyBase.Columns("GSAC_CODE_SQ_PK")
            Me.columnGSAC_NOM = MyBase.Columns("GSAC_NOM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGSAC_CODE_SQ_PK = New Global.System.Data.DataColumn("GSAC_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSAC_CODE_SQ_PK)
            Me.columnGSAC_NOM = New Global.System.Data.DataColumn("GSAC_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSAC_NOM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGSAC_CODE_SQ_PK}, true))
            Me.columnGSAC_CODE_SQ_PK.AllowDBNull = false
            Me.columnGSAC_CODE_SQ_PK.Unique = true
            Me.columnGSAC_NOM.AllowDBNull = false
            Me.columnGSAC_NOM.MaxLength = 36
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGSAC_PERE_SUBACTRow() As GSAC_PERE_SUBACTRow
            Return CType(Me.NewRow,GSAC_PERE_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GSAC_PERE_SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GSAC_PERE_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GSAC_PERE_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent GSAC_PERE_SUBACTRowChanged(Me, New GSAC_PERE_SUBACTRowChangeEvent(CType(e.Row,GSAC_PERE_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GSAC_PERE_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent GSAC_PERE_SUBACTRowChanging(Me, New GSAC_PERE_SUBACTRowChangeEvent(CType(e.Row,GSAC_PERE_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GSAC_PERE_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent GSAC_PERE_SUBACTRowDeleted(Me, New GSAC_PERE_SUBACTRowChangeEvent(CType(e.Row,GSAC_PERE_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GSAC_PERE_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent GSAC_PERE_SUBACTRowDeleting(Me, New GSAC_PERE_SUBACTRowChangeEvent(CType(e.Row,GSAC_PERE_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGSAC_PERE_SUBACTRow(ByVal row As GSAC_PERE_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GSAC_PERE_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GREF_GROUPE_SPECIALITE_REFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGREF_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnGREF_LIBELLE As Global.System.Data.DataColumn
        
        Private columnGREF_DATECR_PK As Global.System.Data.DataColumn
        
        Private columnGREF_DATESUSP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GREF_GROUPE_SPECIALITE_REF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREF_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREF_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREF_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREF_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREF_DATECR_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREF_DATECR_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREF_DATESUSPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREF_DATESUSP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GREF_GROUPE_SPECIALITE_REFRow
            Get
                Return CType(Me.Rows(index),GREF_GROUPE_SPECIALITE_REFRow)
            End Get
        End Property
        
        Public Event GREF_GROUPE_SPECIALITE_REFRowChanging As GREF_GROUPE_SPECIALITE_REFRowChangeEventHandler
        
        Public Event GREF_GROUPE_SPECIALITE_REFRowChanged As GREF_GROUPE_SPECIALITE_REFRowChangeEventHandler
        
        Public Event GREF_GROUPE_SPECIALITE_REFRowDeleting As GREF_GROUPE_SPECIALITE_REFRowChangeEventHandler
        
        Public Event GREF_GROUPE_SPECIALITE_REFRowDeleted As GREF_GROUPE_SPECIALITE_REFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGREF_GROUPE_SPECIALITE_REFRow(ByVal row As GREF_GROUPE_SPECIALITE_REFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGREF_GROUPE_SPECIALITE_REFRow(ByVal GREF_CODE_SQ_PK As Integer, ByVal GREF_LIBELLE As String, ByVal GREF_DATECR_PK As Date, ByVal GREF_DATESUSP As Date) As GREF_GROUPE_SPECIALITE_REFRow
            Dim rowGREF_GROUPE_SPECIALITE_REFRow As GREF_GROUPE_SPECIALITE_REFRow = CType(Me.NewRow,GREF_GROUPE_SPECIALITE_REFRow)
            Dim columnValuesArray() As Object = New Object() {GREF_CODE_SQ_PK, GREF_LIBELLE, GREF_DATECR_PK, GREF_DATESUSP}
            rowGREF_GROUPE_SPECIALITE_REFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGREF_GROUPE_SPECIALITE_REFRow)
            Return rowGREF_GROUPE_SPECIALITE_REFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGREF_CODE_SQ_PKGREF_DATECR_PK(ByVal GREF_CODE_SQ_PK As Integer, ByVal GREF_DATECR_PK As Date) As GREF_GROUPE_SPECIALITE_REFRow
            Return CType(Me.Rows.Find(New Object() {GREF_CODE_SQ_PK, GREF_DATECR_PK}),GREF_GROUPE_SPECIALITE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GREF_GROUPE_SPECIALITE_REFDataTable = CType(MyBase.Clone,GREF_GROUPE_SPECIALITE_REFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GREF_GROUPE_SPECIALITE_REFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGREF_CODE_SQ_PK = MyBase.Columns("GREF_CODE_SQ_PK")
            Me.columnGREF_LIBELLE = MyBase.Columns("GREF_LIBELLE")
            Me.columnGREF_DATECR_PK = MyBase.Columns("GREF_DATECR_PK")
            Me.columnGREF_DATESUSP = MyBase.Columns("GREF_DATESUSP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGREF_CODE_SQ_PK = New Global.System.Data.DataColumn("GREF_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREF_CODE_SQ_PK)
            Me.columnGREF_LIBELLE = New Global.System.Data.DataColumn("GREF_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREF_LIBELLE)
            Me.columnGREF_DATECR_PK = New Global.System.Data.DataColumn("GREF_DATECR_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREF_DATECR_PK)
            Me.columnGREF_DATESUSP = New Global.System.Data.DataColumn("GREF_DATESUSP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREF_DATESUSP)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGREF_CODE_SQ_PK, Me.columnGREF_DATECR_PK}, true))
            Me.columnGREF_CODE_SQ_PK.AllowDBNull = false
            Me.columnGREF_LIBELLE.MaxLength = 40
            Me.columnGREF_DATECR_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGREF_GROUPE_SPECIALITE_REFRow() As GREF_GROUPE_SPECIALITE_REFRow
            Return CType(Me.NewRow,GREF_GROUPE_SPECIALITE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GREF_GROUPE_SPECIALITE_REFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GREF_GROUPE_SPECIALITE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GREF_GROUPE_SPECIALITE_REFRowChangedEvent) Is Nothing) Then
                RaiseEvent GREF_GROUPE_SPECIALITE_REFRowChanged(Me, New GREF_GROUPE_SPECIALITE_REFRowChangeEvent(CType(e.Row,GREF_GROUPE_SPECIALITE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GREF_GROUPE_SPECIALITE_REFRowChangingEvent) Is Nothing) Then
                RaiseEvent GREF_GROUPE_SPECIALITE_REFRowChanging(Me, New GREF_GROUPE_SPECIALITE_REFRowChangeEvent(CType(e.Row,GREF_GROUPE_SPECIALITE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GREF_GROUPE_SPECIALITE_REFRowDeletedEvent) Is Nothing) Then
                RaiseEvent GREF_GROUPE_SPECIALITE_REFRowDeleted(Me, New GREF_GROUPE_SPECIALITE_REFRowChangeEvent(CType(e.Row,GREF_GROUPE_SPECIALITE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GREF_GROUPE_SPECIALITE_REFRowDeletingEvent) Is Nothing) Then
                RaiseEvent GREF_GROUPE_SPECIALITE_REFRowDeleting(Me, New GREF_GROUPE_SPECIALITE_REFRowChangeEvent(CType(e.Row,GREF_GROUPE_SPECIALITE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGREF_GROUPE_SPECIALITE_REFRow(ByVal row As GREF_GROUPE_SPECIALITE_REFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GREF_GROUPE_SPECIALITE_REFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPGREFR_GROUPE_SPE_REFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSPGREFR_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPGREFR_GREF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPGREFR_GREF_DATECR_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPGREFR_GROUPE_SPE_REF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFR_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFR_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFR_GREF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFR_GREF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFR_GREF_DATECR_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFR_GREF_DATECR_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPGREFR_GROUPE_SPE_REFRow
            Get
                Return CType(Me.Rows(index),SPGREFR_GROUPE_SPE_REFRow)
            End Get
        End Property
        
        Public Event SPGREFR_GROUPE_SPE_REFRowChanging As SPGREFR_GROUPE_SPE_REFRowChangeEventHandler
        
        Public Event SPGREFR_GROUPE_SPE_REFRowChanged As SPGREFR_GROUPE_SPE_REFRowChangeEventHandler
        
        Public Event SPGREFR_GROUPE_SPE_REFRowDeleting As SPGREFR_GROUPE_SPE_REFRowChangeEventHandler
        
        Public Event SPGREFR_GROUPE_SPE_REFRowDeleted As SPGREFR_GROUPE_SPE_REFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPGREFR_GROUPE_SPE_REFRow(ByVal row As SPGREFR_GROUPE_SPE_REFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPGREFR_GROUPE_SPE_REFRow(ByVal SPGREFR_SP_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_DATECR_FK_PK As Date) As SPGREFR_GROUPE_SPE_REFRow
            Dim rowSPGREFR_GROUPE_SPE_REFRow As SPGREFR_GROUPE_SPE_REFRow = CType(Me.NewRow,SPGREFR_GROUPE_SPE_REFRow)
            Dim columnValuesArray() As Object = New Object() {SPGREFR_SP_CODE_FK_PK, SPGREFR_GREF_CODE_FK_PK, SPGREFR_GREF_DATECR_FK_PK}
            rowSPGREFR_GROUPE_SPE_REFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSPGREFR_GROUPE_SPE_REFRow)
            Return rowSPGREFR_GROUPE_SPE_REFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPGREFR_SP_CODE_FK_PKSPGREFR_GREF_CODE_FK_PKSPGREFR_GREF_DATECR_FK_PK(ByVal SPGREFR_SP_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_DATECR_FK_PK As Date) As SPGREFR_GROUPE_SPE_REFRow
            Return CType(Me.Rows.Find(New Object() {SPGREFR_SP_CODE_FK_PK, SPGREFR_GREF_CODE_FK_PK, SPGREFR_GREF_DATECR_FK_PK}),SPGREFR_GROUPE_SPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SPGREFR_GROUPE_SPE_REFDataTable = CType(MyBase.Clone,SPGREFR_GROUPE_SPE_REFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SPGREFR_GROUPE_SPE_REFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPGREFR_SP_CODE_FK_PK = MyBase.Columns("SPGREFR_SP_CODE_FK_PK")
            Me.columnSPGREFR_GREF_CODE_FK_PK = MyBase.Columns("SPGREFR_GREF_CODE_FK_PK")
            Me.columnSPGREFR_GREF_DATECR_FK_PK = MyBase.Columns("SPGREFR_GREF_DATECR_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPGREFR_SP_CODE_FK_PK = New Global.System.Data.DataColumn("SPGREFR_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFR_SP_CODE_FK_PK)
            Me.columnSPGREFR_GREF_CODE_FK_PK = New Global.System.Data.DataColumn("SPGREFR_GREF_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFR_GREF_CODE_FK_PK)
            Me.columnSPGREFR_GREF_DATECR_FK_PK = New Global.System.Data.DataColumn("SPGREFR_GREF_DATECR_FK_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFR_GREF_DATECR_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSPGREFR_SP_CODE_FK_PK, Me.columnSPGREFR_GREF_CODE_FK_PK, Me.columnSPGREFR_GREF_DATECR_FK_PK}, true))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnSPGREFR_SP_CODE_FK_PK}, false))
            Me.columnSPGREFR_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPGREFR_SP_CODE_FK_PK.Unique = true
            Me.columnSPGREFR_GREF_CODE_FK_PK.AllowDBNull = false
            Me.columnSPGREFR_GREF_DATECR_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPGREFR_GROUPE_SPE_REFRow() As SPGREFR_GROUPE_SPE_REFRow
            Return CType(Me.NewRow,SPGREFR_GROUPE_SPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SPGREFR_GROUPE_SPE_REFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SPGREFR_GROUPE_SPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPGREFR_GROUPE_SPE_REFRowChangedEvent) Is Nothing) Then
                RaiseEvent SPGREFR_GROUPE_SPE_REFRowChanged(Me, New SPGREFR_GROUPE_SPE_REFRowChangeEvent(CType(e.Row,SPGREFR_GROUPE_SPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPGREFR_GROUPE_SPE_REFRowChangingEvent) Is Nothing) Then
                RaiseEvent SPGREFR_GROUPE_SPE_REFRowChanging(Me, New SPGREFR_GROUPE_SPE_REFRowChangeEvent(CType(e.Row,SPGREFR_GROUPE_SPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPGREFR_GROUPE_SPE_REFRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPGREFR_GROUPE_SPE_REFRowDeleted(Me, New SPGREFR_GROUPE_SPE_REFRowChangeEvent(CType(e.Row,SPGREFR_GROUPE_SPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPGREFR_GROUPE_SPE_REFRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPGREFR_GROUPE_SPE_REFRowDeleting(Me, New SPGREFR_GROUPE_SPE_REFRowChangeEvent(CType(e.Row,SPGREFR_GROUPE_SPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPGREFR_GROUPE_SPE_REFRow(ByVal row As SPGREFR_GROUPE_SPE_REFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPGREFR_GROUPE_SPE_REFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GREFTX_TEXTE_GROUPE_REFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGREFTX_GREF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnGREFTX_GREF_DATECR_FK_PK As Global.System.Data.DataColumn
        
        Private columnGREFTX_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GREFTX_TEXTE_GROUPE_REF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREFTX_GREF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREFTX_GREF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREFTX_GREF_DATECR_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREFTX_GREF_DATECR_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GREFTX_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGREFTX_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GREFTX_TEXTE_GROUPE_REFRow
            Get
                Return CType(Me.Rows(index),GREFTX_TEXTE_GROUPE_REFRow)
            End Get
        End Property
        
        Public Event GREFTX_TEXTE_GROUPE_REFRowChanging As GREFTX_TEXTE_GROUPE_REFRowChangeEventHandler
        
        Public Event GREFTX_TEXTE_GROUPE_REFRowChanged As GREFTX_TEXTE_GROUPE_REFRowChangeEventHandler
        
        Public Event GREFTX_TEXTE_GROUPE_REFRowDeleting As GREFTX_TEXTE_GROUPE_REFRowChangeEventHandler
        
        Public Event GREFTX_TEXTE_GROUPE_REFRowDeleted As GREFTX_TEXTE_GROUPE_REFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGREFTX_TEXTE_GROUPE_REFRow(ByVal row As GREFTX_TEXTE_GROUPE_REFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGREFTX_TEXTE_GROUPE_REFRow(ByVal GREFTX_GREF_CODE_FK_PK As Integer, ByVal GREFTX_GREF_DATECR_FK_PK As Date, ByVal GREFTX_TEXTE As String) As GREFTX_TEXTE_GROUPE_REFRow
            Dim rowGREFTX_TEXTE_GROUPE_REFRow As GREFTX_TEXTE_GROUPE_REFRow = CType(Me.NewRow,GREFTX_TEXTE_GROUPE_REFRow)
            Dim columnValuesArray() As Object = New Object() {GREFTX_GREF_CODE_FK_PK, GREFTX_GREF_DATECR_FK_PK, GREFTX_TEXTE}
            rowGREFTX_TEXTE_GROUPE_REFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGREFTX_TEXTE_GROUPE_REFRow)
            Return rowGREFTX_TEXTE_GROUPE_REFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGREFTX_GREF_CODE_FK_PKGREFTX_GREF_DATECR_FK_PK(ByVal GREFTX_GREF_CODE_FK_PK As Integer, ByVal GREFTX_GREF_DATECR_FK_PK As Date) As GREFTX_TEXTE_GROUPE_REFRow
            Return CType(Me.Rows.Find(New Object() {GREFTX_GREF_CODE_FK_PK, GREFTX_GREF_DATECR_FK_PK}),GREFTX_TEXTE_GROUPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GREFTX_TEXTE_GROUPE_REFDataTable = CType(MyBase.Clone,GREFTX_TEXTE_GROUPE_REFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GREFTX_TEXTE_GROUPE_REFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGREFTX_GREF_CODE_FK_PK = MyBase.Columns("GREFTX_GREF_CODE_FK_PK")
            Me.columnGREFTX_GREF_DATECR_FK_PK = MyBase.Columns("GREFTX_GREF_DATECR_FK_PK")
            Me.columnGREFTX_TEXTE = MyBase.Columns("GREFTX_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGREFTX_GREF_CODE_FK_PK = New Global.System.Data.DataColumn("GREFTX_GREF_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREFTX_GREF_CODE_FK_PK)
            Me.columnGREFTX_GREF_DATECR_FK_PK = New Global.System.Data.DataColumn("GREFTX_GREF_DATECR_FK_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREFTX_GREF_DATECR_FK_PK)
            Me.columnGREFTX_TEXTE = New Global.System.Data.DataColumn("GREFTX_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGREFTX_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGREFTX_GREF_CODE_FK_PK, Me.columnGREFTX_GREF_DATECR_FK_PK}, true))
            Me.columnGREFTX_GREF_CODE_FK_PK.AllowDBNull = false
            Me.columnGREFTX_GREF_DATECR_FK_PK.AllowDBNull = false
            Me.columnGREFTX_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGREFTX_TEXTE_GROUPE_REFRow() As GREFTX_TEXTE_GROUPE_REFRow
            Return CType(Me.NewRow,GREFTX_TEXTE_GROUPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GREFTX_TEXTE_GROUPE_REFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GREFTX_TEXTE_GROUPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GREFTX_TEXTE_GROUPE_REFRowChangedEvent) Is Nothing) Then
                RaiseEvent GREFTX_TEXTE_GROUPE_REFRowChanged(Me, New GREFTX_TEXTE_GROUPE_REFRowChangeEvent(CType(e.Row,GREFTX_TEXTE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GREFTX_TEXTE_GROUPE_REFRowChangingEvent) Is Nothing) Then
                RaiseEvent GREFTX_TEXTE_GROUPE_REFRowChanging(Me, New GREFTX_TEXTE_GROUPE_REFRowChangeEvent(CType(e.Row,GREFTX_TEXTE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GREFTX_TEXTE_GROUPE_REFRowDeletedEvent) Is Nothing) Then
                RaiseEvent GREFTX_TEXTE_GROUPE_REFRowDeleted(Me, New GREFTX_TEXTE_GROUPE_REFRowChangeEvent(CType(e.Row,GREFTX_TEXTE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GREFTX_TEXTE_GROUPE_REFRowDeletingEvent) Is Nothing) Then
                RaiseEvent GREFTX_TEXTE_GROUPE_REFRowDeleting(Me, New GREFTX_TEXTE_GROUPE_REFRowChangeEvent(CType(e.Row,GREFTX_TEXTE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGREFTX_TEXTE_GROUPE_REFRow(ByVal row As GREFTX_TEXTE_GROUPE_REFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GREFTX_TEXTE_GROUPE_REFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COSAU_COMPO_SUBAUX1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOSAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCOSAU_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCOSAU_DOSAGE As Global.System.Data.DataColumn
        
        Private columnCOSAU_UNITEDOSAGE As Global.System.Data.DataColumn
        
        Private columnCOSAU_COMPO_NUM_PK As Global.System.Data.DataColumn
        
        Private columnCOSAU_GREF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnCOSAU_GREF_DATECR_FK As Global.System.Data.DataColumn
        
        Private columnCOSAU_GREF_NUMORD As Global.System.Data.DataColumn
        
        Private columnCOSAU_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COSAU_COMPO_SUBAUX1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_DOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_UNITEDOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_UNITEDOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_COMPO_NUM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_COMPO_NUM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_DATECR_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_DATECR_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COSAU_COMPO_SUBAUX1Row
            Get
                Return CType(Me.Rows(index),COSAU_COMPO_SUBAUX1Row)
            End Get
        End Property
        
        Public Event COSAU_COMPO_SUBAUX1RowChanging As COSAU_COMPO_SUBAUX1RowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUX1RowChanged As COSAU_COMPO_SUBAUX1RowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUX1RowDeleting As COSAU_COMPO_SUBAUX1RowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUX1RowDeleted As COSAU_COMPO_SUBAUX1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOSAU_COMPO_SUBAUX1Row(ByVal row As COSAU_COMPO_SUBAUX1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOSAU_COMPO_SUBAUX1Row(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_COMPO_NUM_PK As Byte, ByVal COSAU_GREF_CODE_FK As Integer, ByVal COSAU_GREF_DATECR_FK As Date, ByVal COSAU_GREF_NUMORD As Short, ByVal COSAU_NUMORD As Short) As COSAU_COMPO_SUBAUX1Row
            Dim rowCOSAU_COMPO_SUBAUX1Row As COSAU_COMPO_SUBAUX1Row = CType(Me.NewRow,COSAU_COMPO_SUBAUX1Row)
            Dim columnValuesArray() As Object = New Object() {COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD}
            rowCOSAU_COMPO_SUBAUX1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOSAU_COMPO_SUBAUX1Row)
            Return rowCOSAU_COMPO_SUBAUX1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOSAU_SAU_CODE_FK_PKCOSAU_SP_CODE_FK_PKCOSAU_COMPO_NUM_PK(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_COMPO_NUM_PK As Byte) As COSAU_COMPO_SUBAUX1Row
            Return CType(Me.Rows.Find(New Object() {COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_COMPO_NUM_PK}),COSAU_COMPO_SUBAUX1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COSAU_COMPO_SUBAUX1DataTable = CType(MyBase.Clone,COSAU_COMPO_SUBAUX1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COSAU_COMPO_SUBAUX1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOSAU_SAU_CODE_FK_PK = MyBase.Columns("COSAU_SAU_CODE_FK_PK")
            Me.columnCOSAU_SP_CODE_FK_PK = MyBase.Columns("COSAU_SP_CODE_FK_PK")
            Me.columnCOSAU_DOSAGE = MyBase.Columns("COSAU_DOSAGE")
            Me.columnCOSAU_UNITEDOSAGE = MyBase.Columns("COSAU_UNITEDOSAGE")
            Me.columnCOSAU_COMPO_NUM_PK = MyBase.Columns("COSAU_COMPO_NUM_PK")
            Me.columnCOSAU_GREF_CODE_FK = MyBase.Columns("COSAU_GREF_CODE_FK")
            Me.columnCOSAU_GREF_DATECR_FK = MyBase.Columns("COSAU_GREF_DATECR_FK")
            Me.columnCOSAU_GREF_NUMORD = MyBase.Columns("COSAU_GREF_NUMORD")
            Me.columnCOSAU_NUMORD = MyBase.Columns("COSAU_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOSAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("COSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_SAU_CODE_FK_PK)
            Me.columnCOSAU_SP_CODE_FK_PK = New Global.System.Data.DataColumn("COSAU_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_SP_CODE_FK_PK)
            Me.columnCOSAU_DOSAGE = New Global.System.Data.DataColumn("COSAU_DOSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_DOSAGE)
            Me.columnCOSAU_UNITEDOSAGE = New Global.System.Data.DataColumn("COSAU_UNITEDOSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_UNITEDOSAGE)
            Me.columnCOSAU_COMPO_NUM_PK = New Global.System.Data.DataColumn("COSAU_COMPO_NUM_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_COMPO_NUM_PK)
            Me.columnCOSAU_GREF_CODE_FK = New Global.System.Data.DataColumn("COSAU_GREF_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_CODE_FK)
            Me.columnCOSAU_GREF_DATECR_FK = New Global.System.Data.DataColumn("COSAU_GREF_DATECR_FK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_DATECR_FK)
            Me.columnCOSAU_GREF_NUMORD = New Global.System.Data.DataColumn("COSAU_GREF_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_NUMORD)
            Me.columnCOSAU_NUMORD = New Global.System.Data.DataColumn("COSAU_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOSAU_SAU_CODE_FK_PK, Me.columnCOSAU_SP_CODE_FK_PK, Me.columnCOSAU_COMPO_NUM_PK}, true))
            Me.columnCOSAU_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAU_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAU_DOSAGE.MaxLength = 17
            Me.columnCOSAU_UNITEDOSAGE.MaxLength = 40
            Me.columnCOSAU_COMPO_NUM_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOSAU_COMPO_SUBAUX1Row() As COSAU_COMPO_SUBAUX1Row
            Return CType(Me.NewRow,COSAU_COMPO_SUBAUX1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COSAU_COMPO_SUBAUX1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COSAU_COMPO_SUBAUX1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COSAU_COMPO_SUBAUX1RowChangedEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUX1RowChanged(Me, New COSAU_COMPO_SUBAUX1RowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUX1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COSAU_COMPO_SUBAUX1RowChangingEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUX1RowChanging(Me, New COSAU_COMPO_SUBAUX1RowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUX1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COSAU_COMPO_SUBAUX1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUX1RowDeleted(Me, New COSAU_COMPO_SUBAUX1RowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUX1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COSAU_COMPO_SUBAUX1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUX1RowDeleting(Me, New COSAU_COMPO_SUBAUX1RowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUX1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOSAU_COMPO_SUBAUX1Row(ByVal row As COSAU_COMPO_SUBAUX1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COSAU_COMPO_SUBAUX1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GSAU_PERE_SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGSAU_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnGSAU_NOM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GSAU_PERE_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSAU_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSAU_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSAU_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSAU_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GSAU_PERE_SUBAUXRow
            Get
                Return CType(Me.Rows(index),GSAU_PERE_SUBAUXRow)
            End Get
        End Property
        
        Public Event GSAU_PERE_SUBAUXRowChanging As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        Public Event GSAU_PERE_SUBAUXRowChanged As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        Public Event GSAU_PERE_SUBAUXRowDeleting As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        Public Event GSAU_PERE_SUBAUXRowDeleted As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGSAU_PERE_SUBAUXRow(ByVal row As GSAU_PERE_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGSAU_PERE_SUBAUXRow(ByVal GSAU_CODE_SQ_PK As Integer, ByVal GSAU_NOM As String) As GSAU_PERE_SUBAUXRow
            Dim rowGSAU_PERE_SUBAUXRow As GSAU_PERE_SUBAUXRow = CType(Me.NewRow,GSAU_PERE_SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {GSAU_CODE_SQ_PK, GSAU_NOM}
            rowGSAU_PERE_SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGSAU_PERE_SUBAUXRow)
            Return rowGSAU_PERE_SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGSAU_CODE_SQ_PK(ByVal GSAU_CODE_SQ_PK As Integer) As GSAU_PERE_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {GSAU_CODE_SQ_PK}),GSAU_PERE_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GSAU_PERE_SUBAUXDataTable = CType(MyBase.Clone,GSAU_PERE_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GSAU_PERE_SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGSAU_CODE_SQ_PK = MyBase.Columns("GSAU_CODE_SQ_PK")
            Me.columnGSAU_NOM = MyBase.Columns("GSAU_NOM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGSAU_CODE_SQ_PK = New Global.System.Data.DataColumn("GSAU_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSAU_CODE_SQ_PK)
            Me.columnGSAU_NOM = New Global.System.Data.DataColumn("GSAU_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSAU_NOM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGSAU_CODE_SQ_PK}, true))
            Me.columnGSAU_CODE_SQ_PK.AllowDBNull = false
            Me.columnGSAU_CODE_SQ_PK.Unique = true
            Me.columnGSAU_NOM.AllowDBNull = false
            Me.columnGSAU_NOM.MaxLength = 36
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGSAU_PERE_SUBAUXRow() As GSAU_PERE_SUBAUXRow
            Return CType(Me.NewRow,GSAU_PERE_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GSAU_PERE_SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GSAU_PERE_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowChanged(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowChanging(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowDeleted(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowDeleting(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGSAU_PERE_SUBAUXRow(ByVal row As GSAU_PERE_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GSAU_PERE_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYSAU_SYNONYME_SAUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYSAU_NOM_PK As Global.System.Data.DataColumn
        
        Private columnSYSAU_SAU_CODE_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYSAU_SYNONYME_SAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAU_NOM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSAU_NOM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAU_SAU_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSAU_SAU_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYSAU_SYNONYME_SAURow
            Get
                Return CType(Me.Rows(index),SYSAU_SYNONYME_SAURow)
            End Get
        End Property
        
        Public Event SYSAU_SYNONYME_SAURowChanging As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        Public Event SYSAU_SYNONYME_SAURowChanged As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        Public Event SYSAU_SYNONYME_SAURowDeleting As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        Public Event SYSAU_SYNONYME_SAURowDeleted As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYSAU_SYNONYME_SAURow(ByVal row As SYSAU_SYNONYME_SAURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYSAU_SYNONYME_SAURow(ByVal SYSAU_NOM_PK As String, ByVal SYSAU_SAU_CODE_FK As Integer) As SYSAU_SYNONYME_SAURow
            Dim rowSYSAU_SYNONYME_SAURow As SYSAU_SYNONYME_SAURow = CType(Me.NewRow,SYSAU_SYNONYME_SAURow)
            Dim columnValuesArray() As Object = New Object() {SYSAU_NOM_PK, SYSAU_SAU_CODE_FK}
            rowSYSAU_SYNONYME_SAURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYSAU_SYNONYME_SAURow)
            Return rowSYSAU_SYNONYME_SAURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYSAU_NOM_PK(ByVal SYSAU_NOM_PK As String) As SYSAU_SYNONYME_SAURow
            Return CType(Me.Rows.Find(New Object() {SYSAU_NOM_PK}),SYSAU_SYNONYME_SAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYSAU_SYNONYME_SAUDataTable = CType(MyBase.Clone,SYSAU_SYNONYME_SAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYSAU_SYNONYME_SAUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYSAU_NOM_PK = MyBase.Columns("SYSAU_NOM_PK")
            Me.columnSYSAU_SAU_CODE_FK = MyBase.Columns("SYSAU_SAU_CODE_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYSAU_NOM_PK = New Global.System.Data.DataColumn("SYSAU_NOM_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAU_NOM_PK)
            Me.columnSYSAU_SAU_CODE_FK = New Global.System.Data.DataColumn("SYSAU_SAU_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAU_SAU_CODE_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYSAU_NOM_PK}, true))
            Me.columnSYSAU_NOM_PK.AllowDBNull = false
            Me.columnSYSAU_NOM_PK.Unique = true
            Me.columnSYSAU_NOM_PK.MaxLength = 40
            Me.columnSYSAU_SAU_CODE_FK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYSAU_SYNONYME_SAURow() As SYSAU_SYNONYME_SAURow
            Return CType(Me.NewRow,SYSAU_SYNONYME_SAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYSAU_SYNONYME_SAURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYSAU_SYNONYME_SAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowChangedEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowChanged(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowChangingEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowChanging(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowDeletedEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowDeleted(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowDeletingEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowDeleting(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYSAU_SYNONYME_SAURow(ByVal row As SYSAU_SYNONYME_SAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYSAU_SYNONYME_SAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYFSAC_SYNONYMEFR_SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYFSAC_NOM_PK As Global.System.Data.DataColumn
        
        Private columnSYFSAC_SAC_CODE_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYFSAC_SYNONYMEFR_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFSAC_NOM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYFSAC_NOM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFSAC_SAC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYFSAC_SAC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYFSAC_SYNONYMEFR_SUBACTRow
            Get
                Return CType(Me.Rows(index),SYFSAC_SYNONYMEFR_SUBACTRow)
            End Get
        End Property
        
        Public Event SYFSAC_SYNONYMEFR_SUBACTRowChanging As SYFSAC_SYNONYMEFR_SUBACTRowChangeEventHandler
        
        Public Event SYFSAC_SYNONYMEFR_SUBACTRowChanged As SYFSAC_SYNONYMEFR_SUBACTRowChangeEventHandler
        
        Public Event SYFSAC_SYNONYMEFR_SUBACTRowDeleting As SYFSAC_SYNONYMEFR_SUBACTRowChangeEventHandler
        
        Public Event SYFSAC_SYNONYMEFR_SUBACTRowDeleted As SYFSAC_SYNONYMEFR_SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYFSAC_SYNONYMEFR_SUBACTRow(ByVal row As SYFSAC_SYNONYMEFR_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYFSAC_SYNONYMEFR_SUBACTRow(ByVal SYFSAC_NOM_PK As String, ByVal SYFSAC_SAC_CODE_FK As Integer) As SYFSAC_SYNONYMEFR_SUBACTRow
            Dim rowSYFSAC_SYNONYMEFR_SUBACTRow As SYFSAC_SYNONYMEFR_SUBACTRow = CType(Me.NewRow,SYFSAC_SYNONYMEFR_SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {SYFSAC_NOM_PK, SYFSAC_SAC_CODE_FK}
            rowSYFSAC_SYNONYMEFR_SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYFSAC_SYNONYMEFR_SUBACTRow)
            Return rowSYFSAC_SYNONYMEFR_SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYFSAC_NOM_PK(ByVal SYFSAC_NOM_PK As String) As SYFSAC_SYNONYMEFR_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {SYFSAC_NOM_PK}),SYFSAC_SYNONYMEFR_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYFSAC_SYNONYMEFR_SUBACTDataTable = CType(MyBase.Clone,SYFSAC_SYNONYMEFR_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYFSAC_SYNONYMEFR_SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYFSAC_NOM_PK = MyBase.Columns("SYFSAC_NOM_PK")
            Me.columnSYFSAC_SAC_CODE_FK = MyBase.Columns("SYFSAC_SAC_CODE_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYFSAC_NOM_PK = New Global.System.Data.DataColumn("SYFSAC_NOM_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFSAC_NOM_PK)
            Me.columnSYFSAC_SAC_CODE_FK = New Global.System.Data.DataColumn("SYFSAC_SAC_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFSAC_SAC_CODE_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYFSAC_NOM_PK}, true))
            Me.columnSYFSAC_NOM_PK.AllowDBNull = false
            Me.columnSYFSAC_NOM_PK.Unique = true
            Me.columnSYFSAC_NOM_PK.MaxLength = 40
            Me.columnSYFSAC_SAC_CODE_FK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYFSAC_SYNONYMEFR_SUBACTRow() As SYFSAC_SYNONYMEFR_SUBACTRow
            Return CType(Me.NewRow,SYFSAC_SYNONYMEFR_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYFSAC_SYNONYMEFR_SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYFSAC_SYNONYMEFR_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYFSAC_SYNONYMEFR_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent SYFSAC_SYNONYMEFR_SUBACTRowChanged(Me, New SYFSAC_SYNONYMEFR_SUBACTRowChangeEvent(CType(e.Row,SYFSAC_SYNONYMEFR_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYFSAC_SYNONYMEFR_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent SYFSAC_SYNONYMEFR_SUBACTRowChanging(Me, New SYFSAC_SYNONYMEFR_SUBACTRowChangeEvent(CType(e.Row,SYFSAC_SYNONYMEFR_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYFSAC_SYNONYMEFR_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYFSAC_SYNONYMEFR_SUBACTRowDeleted(Me, New SYFSAC_SYNONYMEFR_SUBACTRowChangeEvent(CType(e.Row,SYFSAC_SYNONYMEFR_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYFSAC_SYNONYMEFR_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYFSAC_SYNONYMEFR_SUBACTRowDeleting(Me, New SYFSAC_SYNONYMEFR_SUBACTRowChangeEvent(CType(e.Row,SYFSAC_SYNONYMEFR_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYFSAC_SYNONYMEFR_SUBACTRow(ByVal row As SYFSAC_SYNONYMEFR_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYFSAC_SYNONYMEFR_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYASAC_SYNONYMEANGLAIS_SACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYASAC_NOM_PK As Global.System.Data.DataColumn
        
        Private columnSYASAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYASAC_SYNONYMEANGLAIS_SAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYASAC_NOM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYASAC_NOM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYASAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYASAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYASAC_SYNONYMEANGLAIS_SACRow
            Get
                Return CType(Me.Rows(index),SYASAC_SYNONYMEANGLAIS_SACRow)
            End Get
        End Property
        
        Public Event SYASAC_SYNONYMEANGLAIS_SACRowChanging As SYASAC_SYNONYMEANGLAIS_SACRowChangeEventHandler
        
        Public Event SYASAC_SYNONYMEANGLAIS_SACRowChanged As SYASAC_SYNONYMEANGLAIS_SACRowChangeEventHandler
        
        Public Event SYASAC_SYNONYMEANGLAIS_SACRowDeleting As SYASAC_SYNONYMEANGLAIS_SACRowChangeEventHandler
        
        Public Event SYASAC_SYNONYMEANGLAIS_SACRowDeleted As SYASAC_SYNONYMEANGLAIS_SACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYASAC_SYNONYMEANGLAIS_SACRow(ByVal row As SYASAC_SYNONYMEANGLAIS_SACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYASAC_SYNONYMEANGLAIS_SACRow(ByVal SYASAC_NOM_PK As String, ByVal SYASAC_SAC_CODE_FK_PK As Integer) As SYASAC_SYNONYMEANGLAIS_SACRow
            Dim rowSYASAC_SYNONYMEANGLAIS_SACRow As SYASAC_SYNONYMEANGLAIS_SACRow = CType(Me.NewRow,SYASAC_SYNONYMEANGLAIS_SACRow)
            Dim columnValuesArray() As Object = New Object() {SYASAC_NOM_PK, SYASAC_SAC_CODE_FK_PK}
            rowSYASAC_SYNONYMEANGLAIS_SACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYASAC_SYNONYMEANGLAIS_SACRow)
            Return rowSYASAC_SYNONYMEANGLAIS_SACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYASAC_NOM_PK(ByVal SYASAC_NOM_PK As String) As SYASAC_SYNONYMEANGLAIS_SACRow
            Return CType(Me.Rows.Find(New Object() {SYASAC_NOM_PK}),SYASAC_SYNONYMEANGLAIS_SACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYASAC_SYNONYMEANGLAIS_SACDataTable = CType(MyBase.Clone,SYASAC_SYNONYMEANGLAIS_SACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYASAC_SYNONYMEANGLAIS_SACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYASAC_NOM_PK = MyBase.Columns("SYASAC_NOM_PK")
            Me.columnSYASAC_SAC_CODE_FK_PK = MyBase.Columns("SYASAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYASAC_NOM_PK = New Global.System.Data.DataColumn("SYASAC_NOM_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYASAC_NOM_PK)
            Me.columnSYASAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("SYASAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYASAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYASAC_NOM_PK}, true))
            Me.columnSYASAC_NOM_PK.AllowDBNull = false
            Me.columnSYASAC_NOM_PK.Unique = true
            Me.columnSYASAC_NOM_PK.MaxLength = 36
            Me.columnSYASAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYASAC_SYNONYMEANGLAIS_SACRow() As SYASAC_SYNONYMEANGLAIS_SACRow
            Return CType(Me.NewRow,SYASAC_SYNONYMEANGLAIS_SACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYASAC_SYNONYMEANGLAIS_SACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYASAC_SYNONYMEANGLAIS_SACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYASAC_SYNONYMEANGLAIS_SACRowChangedEvent) Is Nothing) Then
                RaiseEvent SYASAC_SYNONYMEANGLAIS_SACRowChanged(Me, New SYASAC_SYNONYMEANGLAIS_SACRowChangeEvent(CType(e.Row,SYASAC_SYNONYMEANGLAIS_SACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYASAC_SYNONYMEANGLAIS_SACRowChangingEvent) Is Nothing) Then
                RaiseEvent SYASAC_SYNONYMEANGLAIS_SACRowChanging(Me, New SYASAC_SYNONYMEANGLAIS_SACRowChangeEvent(CType(e.Row,SYASAC_SYNONYMEANGLAIS_SACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYASAC_SYNONYMEANGLAIS_SACRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYASAC_SYNONYMEANGLAIS_SACRowDeleted(Me, New SYASAC_SYNONYMEANGLAIS_SACRowChangeEvent(CType(e.Row,SYASAC_SYNONYMEANGLAIS_SACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYASAC_SYNONYMEANGLAIS_SACRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYASAC_SYNONYMEANGLAIS_SACRowDeleting(Me, New SYASAC_SYNONYMEANGLAIS_SACRowChangeEvent(CType(e.Row,SYASAC_SYNONYMEANGLAIS_SACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYASAC_SYNONYMEANGLAIS_SACRow(ByVal row As SYASAC_SYNONYMEANGLAIS_SACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYASAC_SYNONYMEANGLAIS_SACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SACCAS_SUBACT_CASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSACCAS_CAS_CODE_PK As Global.System.Data.DataColumn
        
        Private columnSACCAS_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SACCAS_SUBACT_CAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCAS_CAS_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCAS_CAS_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCAS_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCAS_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SACCAS_SUBACT_CASRow
            Get
                Return CType(Me.Rows(index),SACCAS_SUBACT_CASRow)
            End Get
        End Property
        
        Public Event SACCAS_SUBACT_CASRowChanging As SACCAS_SUBACT_CASRowChangeEventHandler
        
        Public Event SACCAS_SUBACT_CASRowChanged As SACCAS_SUBACT_CASRowChangeEventHandler
        
        Public Event SACCAS_SUBACT_CASRowDeleting As SACCAS_SUBACT_CASRowChangeEventHandler
        
        Public Event SACCAS_SUBACT_CASRowDeleted As SACCAS_SUBACT_CASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSACCAS_SUBACT_CASRow(ByVal row As SACCAS_SUBACT_CASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSACCAS_SUBACT_CASRow(ByVal SACCAS_CAS_CODE_PK As String, ByVal SACCAS_SAC_CODE_FK_PK As Integer) As SACCAS_SUBACT_CASRow
            Dim rowSACCAS_SUBACT_CASRow As SACCAS_SUBACT_CASRow = CType(Me.NewRow,SACCAS_SUBACT_CASRow)
            Dim columnValuesArray() As Object = New Object() {SACCAS_CAS_CODE_PK, SACCAS_SAC_CODE_FK_PK}
            rowSACCAS_SUBACT_CASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSACCAS_SUBACT_CASRow)
            Return rowSACCAS_SUBACT_CASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySACCAS_CAS_CODE_PKSACCAS_SAC_CODE_FK_PK(ByVal SACCAS_CAS_CODE_PK As String, ByVal SACCAS_SAC_CODE_FK_PK As Integer) As SACCAS_SUBACT_CASRow
            Return CType(Me.Rows.Find(New Object() {SACCAS_CAS_CODE_PK, SACCAS_SAC_CODE_FK_PK}),SACCAS_SUBACT_CASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SACCAS_SUBACT_CASDataTable = CType(MyBase.Clone,SACCAS_SUBACT_CASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SACCAS_SUBACT_CASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSACCAS_CAS_CODE_PK = MyBase.Columns("SACCAS_CAS_CODE_PK")
            Me.columnSACCAS_SAC_CODE_FK_PK = MyBase.Columns("SACCAS_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSACCAS_CAS_CODE_PK = New Global.System.Data.DataColumn("SACCAS_CAS_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCAS_CAS_CODE_PK)
            Me.columnSACCAS_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("SACCAS_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCAS_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSACCAS_CAS_CODE_PK, Me.columnSACCAS_SAC_CODE_FK_PK}, true))
            Me.columnSACCAS_CAS_CODE_PK.AllowDBNull = false
            Me.columnSACCAS_CAS_CODE_PK.MaxLength = 20
            Me.columnSACCAS_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSACCAS_SUBACT_CASRow() As SACCAS_SUBACT_CASRow
            Return CType(Me.NewRow,SACCAS_SUBACT_CASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SACCAS_SUBACT_CASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SACCAS_SUBACT_CASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SACCAS_SUBACT_CASRowChangedEvent) Is Nothing) Then
                RaiseEvent SACCAS_SUBACT_CASRowChanged(Me, New SACCAS_SUBACT_CASRowChangeEvent(CType(e.Row,SACCAS_SUBACT_CASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SACCAS_SUBACT_CASRowChangingEvent) Is Nothing) Then
                RaiseEvent SACCAS_SUBACT_CASRowChanging(Me, New SACCAS_SUBACT_CASRowChangeEvent(CType(e.Row,SACCAS_SUBACT_CASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SACCAS_SUBACT_CASRowDeletedEvent) Is Nothing) Then
                RaiseEvent SACCAS_SUBACT_CASRowDeleted(Me, New SACCAS_SUBACT_CASRowChangeEvent(CType(e.Row,SACCAS_SUBACT_CASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SACCAS_SUBACT_CASRowDeletingEvent) Is Nothing) Then
                RaiseEvent SACCAS_SUBACT_CASRowDeleting(Me, New SACCAS_SUBACT_CASRowChangeEvent(CType(e.Row,SACCAS_SUBACT_CASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSACCAS_SUBACT_CASRow(ByVal row As SACCAS_SUBACT_CASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SACCAS_SUBACT_CASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ADSAC_AUTRE_DENOMINATION_SUBACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnADSAC_NOM_PK As Global.System.Data.DataColumn
        
        Private columnADSAC_SAC_CODE_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ADSAC_AUTRE_DENOMINATION_SUBAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADSAC_NOM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADSAC_NOM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADSAC_SAC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADSAC_SAC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ADSAC_AUTRE_DENOMINATION_SUBACRow
            Get
                Return CType(Me.Rows(index),ADSAC_AUTRE_DENOMINATION_SUBACRow)
            End Get
        End Property
        
        Public Event ADSAC_AUTRE_DENOMINATION_SUBACRowChanging As ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEventHandler
        
        Public Event ADSAC_AUTRE_DENOMINATION_SUBACRowChanged As ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEventHandler
        
        Public Event ADSAC_AUTRE_DENOMINATION_SUBACRowDeleting As ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEventHandler
        
        Public Event ADSAC_AUTRE_DENOMINATION_SUBACRowDeleted As ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddADSAC_AUTRE_DENOMINATION_SUBACRow(ByVal row As ADSAC_AUTRE_DENOMINATION_SUBACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddADSAC_AUTRE_DENOMINATION_SUBACRow(ByVal ADSAC_NOM_PK As String, ByVal ADSAC_SAC_CODE_FK As Integer) As ADSAC_AUTRE_DENOMINATION_SUBACRow
            Dim rowADSAC_AUTRE_DENOMINATION_SUBACRow As ADSAC_AUTRE_DENOMINATION_SUBACRow = CType(Me.NewRow,ADSAC_AUTRE_DENOMINATION_SUBACRow)
            Dim columnValuesArray() As Object = New Object() {ADSAC_NOM_PK, ADSAC_SAC_CODE_FK}
            rowADSAC_AUTRE_DENOMINATION_SUBACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowADSAC_AUTRE_DENOMINATION_SUBACRow)
            Return rowADSAC_AUTRE_DENOMINATION_SUBACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByADSAC_NOM_PK(ByVal ADSAC_NOM_PK As String) As ADSAC_AUTRE_DENOMINATION_SUBACRow
            Return CType(Me.Rows.Find(New Object() {ADSAC_NOM_PK}),ADSAC_AUTRE_DENOMINATION_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ADSAC_AUTRE_DENOMINATION_SUBACDataTable = CType(MyBase.Clone,ADSAC_AUTRE_DENOMINATION_SUBACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ADSAC_AUTRE_DENOMINATION_SUBACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnADSAC_NOM_PK = MyBase.Columns("ADSAC_NOM_PK")
            Me.columnADSAC_SAC_CODE_FK = MyBase.Columns("ADSAC_SAC_CODE_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnADSAC_NOM_PK = New Global.System.Data.DataColumn("ADSAC_NOM_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADSAC_NOM_PK)
            Me.columnADSAC_SAC_CODE_FK = New Global.System.Data.DataColumn("ADSAC_SAC_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADSAC_SAC_CODE_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnADSAC_NOM_PK}, true))
            Me.columnADSAC_NOM_PK.AllowDBNull = false
            Me.columnADSAC_NOM_PK.Unique = true
            Me.columnADSAC_NOM_PK.MaxLength = 40
            Me.columnADSAC_SAC_CODE_FK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewADSAC_AUTRE_DENOMINATION_SUBACRow() As ADSAC_AUTRE_DENOMINATION_SUBACRow
            Return CType(Me.NewRow,ADSAC_AUTRE_DENOMINATION_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ADSAC_AUTRE_DENOMINATION_SUBACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ADSAC_AUTRE_DENOMINATION_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ADSAC_AUTRE_DENOMINATION_SUBACRowChangedEvent) Is Nothing) Then
                RaiseEvent ADSAC_AUTRE_DENOMINATION_SUBACRowChanged(Me, New ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEvent(CType(e.Row,ADSAC_AUTRE_DENOMINATION_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ADSAC_AUTRE_DENOMINATION_SUBACRowChangingEvent) Is Nothing) Then
                RaiseEvent ADSAC_AUTRE_DENOMINATION_SUBACRowChanging(Me, New ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEvent(CType(e.Row,ADSAC_AUTRE_DENOMINATION_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ADSAC_AUTRE_DENOMINATION_SUBACRowDeletedEvent) Is Nothing) Then
                RaiseEvent ADSAC_AUTRE_DENOMINATION_SUBACRowDeleted(Me, New ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEvent(CType(e.Row,ADSAC_AUTRE_DENOMINATION_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ADSAC_AUTRE_DENOMINATION_SUBACRowDeletingEvent) Is Nothing) Then
                RaiseEvent ADSAC_AUTRE_DENOMINATION_SUBACRowDeleting(Me, New ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEvent(CType(e.Row,ADSAC_AUTRE_DENOMINATION_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveADSAC_AUTRE_DENOMINATION_SUBACRow(ByVal row As ADSAC_AUTRE_DENOMINATION_SUBACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ADSAC_AUTRE_DENOMINATION_SUBACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SACCCH_SUBACT_CLASSECHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSACCCH_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSACCCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SACCCH_SUBACT_CLASSECH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCCH_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCCH_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SACCCH_SUBACT_CLASSECHRow
            Get
                Return CType(Me.Rows(index),SACCCH_SUBACT_CLASSECHRow)
            End Get
        End Property
        
        Public Event SACCCH_SUBACT_CLASSECHRowChanging As SACCCH_SUBACT_CLASSECHRowChangeEventHandler
        
        Public Event SACCCH_SUBACT_CLASSECHRowChanged As SACCCH_SUBACT_CLASSECHRowChangeEventHandler
        
        Public Event SACCCH_SUBACT_CLASSECHRowDeleting As SACCCH_SUBACT_CLASSECHRowChangeEventHandler
        
        Public Event SACCCH_SUBACT_CLASSECHRowDeleted As SACCCH_SUBACT_CLASSECHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSACCCH_SUBACT_CLASSECHRow(ByVal row As SACCCH_SUBACT_CLASSECHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSACCCH_SUBACT_CLASSECHRow(ByVal SACCCH_SAC_CODE_FK_PK As Integer, ByVal SACCCH_CCH_CODE_FK_PK As String) As SACCCH_SUBACT_CLASSECHRow
            Dim rowSACCCH_SUBACT_CLASSECHRow As SACCCH_SUBACT_CLASSECHRow = CType(Me.NewRow,SACCCH_SUBACT_CLASSECHRow)
            Dim columnValuesArray() As Object = New Object() {SACCCH_SAC_CODE_FK_PK, SACCCH_CCH_CODE_FK_PK}
            rowSACCCH_SUBACT_CLASSECHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSACCCH_SUBACT_CLASSECHRow)
            Return rowSACCCH_SUBACT_CLASSECHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySACCCH_SAC_CODE_FK_PKSACCCH_CCH_CODE_FK_PK(ByVal SACCCH_SAC_CODE_FK_PK As Integer, ByVal SACCCH_CCH_CODE_FK_PK As String) As SACCCH_SUBACT_CLASSECHRow
            Return CType(Me.Rows.Find(New Object() {SACCCH_SAC_CODE_FK_PK, SACCCH_CCH_CODE_FK_PK}),SACCCH_SUBACT_CLASSECHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SACCCH_SUBACT_CLASSECHDataTable = CType(MyBase.Clone,SACCCH_SUBACT_CLASSECHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SACCCH_SUBACT_CLASSECHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSACCCH_SAC_CODE_FK_PK = MyBase.Columns("SACCCH_SAC_CODE_FK_PK")
            Me.columnSACCCH_CCH_CODE_FK_PK = MyBase.Columns("SACCCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSACCCH_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("SACCCH_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCCH_SAC_CODE_FK_PK)
            Me.columnSACCCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("SACCCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSACCCH_SAC_CODE_FK_PK, Me.columnSACCCH_CCH_CODE_FK_PK}, true))
            Me.columnSACCCH_SAC_CODE_FK_PK.AllowDBNull = false
            Me.columnSACCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnSACCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSACCCH_SUBACT_CLASSECHRow() As SACCCH_SUBACT_CLASSECHRow
            Return CType(Me.NewRow,SACCCH_SUBACT_CLASSECHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SACCCH_SUBACT_CLASSECHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SACCCH_SUBACT_CLASSECHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SACCCH_SUBACT_CLASSECHRowChangedEvent) Is Nothing) Then
                RaiseEvent SACCCH_SUBACT_CLASSECHRowChanged(Me, New SACCCH_SUBACT_CLASSECHRowChangeEvent(CType(e.Row,SACCCH_SUBACT_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SACCCH_SUBACT_CLASSECHRowChangingEvent) Is Nothing) Then
                RaiseEvent SACCCH_SUBACT_CLASSECHRowChanging(Me, New SACCCH_SUBACT_CLASSECHRowChangeEvent(CType(e.Row,SACCCH_SUBACT_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SACCCH_SUBACT_CLASSECHRowDeletedEvent) Is Nothing) Then
                RaiseEvent SACCCH_SUBACT_CLASSECHRowDeleted(Me, New SACCCH_SUBACT_CLASSECHRowChangeEvent(CType(e.Row,SACCCH_SUBACT_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SACCCH_SUBACT_CLASSECHRowDeletingEvent) Is Nothing) Then
                RaiseEvent SACCCH_SUBACT_CLASSECHRowDeleting(Me, New SACCCH_SUBACT_CLASSECHRowChangeEvent(CType(e.Row,SACCCH_SUBACT_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSACCCH_SUBACT_CLASSECHRow(ByVal row As SACCCH_SUBACT_CLASSECHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SACCCH_SUBACT_CLASSECHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SACCPH_SUBACT_CLASSEPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSACCPH_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSACCPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SACCPH_SUBACT_CLASSEPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCPH_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCPH_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SACCPH_SUBACT_CLASSEPHRow
            Get
                Return CType(Me.Rows(index),SACCPH_SUBACT_CLASSEPHRow)
            End Get
        End Property
        
        Public Event SACCPH_SUBACT_CLASSEPHRowChanging As SACCPH_SUBACT_CLASSEPHRowChangeEventHandler
        
        Public Event SACCPH_SUBACT_CLASSEPHRowChanged As SACCPH_SUBACT_CLASSEPHRowChangeEventHandler
        
        Public Event SACCPH_SUBACT_CLASSEPHRowDeleting As SACCPH_SUBACT_CLASSEPHRowChangeEventHandler
        
        Public Event SACCPH_SUBACT_CLASSEPHRowDeleted As SACCPH_SUBACT_CLASSEPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSACCPH_SUBACT_CLASSEPHRow(ByVal row As SACCPH_SUBACT_CLASSEPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSACCPH_SUBACT_CLASSEPHRow(ByVal SACCPH_SAC_CODE_FK_PK As Integer, ByVal SACCPH_CPH_CODE_FK_PK As String) As SACCPH_SUBACT_CLASSEPHRow
            Dim rowSACCPH_SUBACT_CLASSEPHRow As SACCPH_SUBACT_CLASSEPHRow = CType(Me.NewRow,SACCPH_SUBACT_CLASSEPHRow)
            Dim columnValuesArray() As Object = New Object() {SACCPH_SAC_CODE_FK_PK, SACCPH_CPH_CODE_FK_PK}
            rowSACCPH_SUBACT_CLASSEPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSACCPH_SUBACT_CLASSEPHRow)
            Return rowSACCPH_SUBACT_CLASSEPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySACCPH_SAC_CODE_FK_PKSACCPH_CPH_CODE_FK_PK(ByVal SACCPH_SAC_CODE_FK_PK As Integer, ByVal SACCPH_CPH_CODE_FK_PK As String) As SACCPH_SUBACT_CLASSEPHRow
            Return CType(Me.Rows.Find(New Object() {SACCPH_SAC_CODE_FK_PK, SACCPH_CPH_CODE_FK_PK}),SACCPH_SUBACT_CLASSEPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SACCPH_SUBACT_CLASSEPHDataTable = CType(MyBase.Clone,SACCPH_SUBACT_CLASSEPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SACCPH_SUBACT_CLASSEPHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSACCPH_SAC_CODE_FK_PK = MyBase.Columns("SACCPH_SAC_CODE_FK_PK")
            Me.columnSACCPH_CPH_CODE_FK_PK = MyBase.Columns("SACCPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSACCPH_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("SACCPH_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCPH_SAC_CODE_FK_PK)
            Me.columnSACCPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("SACCPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSACCPH_SAC_CODE_FK_PK, Me.columnSACCPH_CPH_CODE_FK_PK}, true))
            Me.columnSACCPH_SAC_CODE_FK_PK.AllowDBNull = false
            Me.columnSACCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnSACCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSACCPH_SUBACT_CLASSEPHRow() As SACCPH_SUBACT_CLASSEPHRow
            Return CType(Me.NewRow,SACCPH_SUBACT_CLASSEPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SACCPH_SUBACT_CLASSEPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SACCPH_SUBACT_CLASSEPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SACCPH_SUBACT_CLASSEPHRowChangedEvent) Is Nothing) Then
                RaiseEvent SACCPH_SUBACT_CLASSEPHRowChanged(Me, New SACCPH_SUBACT_CLASSEPHRowChangeEvent(CType(e.Row,SACCPH_SUBACT_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SACCPH_SUBACT_CLASSEPHRowChangingEvent) Is Nothing) Then
                RaiseEvent SACCPH_SUBACT_CLASSEPHRowChanging(Me, New SACCPH_SUBACT_CLASSEPHRowChangeEvent(CType(e.Row,SACCPH_SUBACT_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SACCPH_SUBACT_CLASSEPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent SACCPH_SUBACT_CLASSEPHRowDeleted(Me, New SACCPH_SUBACT_CLASSEPHRowChangeEvent(CType(e.Row,SACCPH_SUBACT_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SACCPH_SUBACT_CLASSEPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent SACCPH_SUBACT_CLASSEPHRowDeleting(Me, New SACCPH_SUBACT_CLASSEPHRowChangeEvent(CType(e.Row,SACCPH_SUBACT_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSACCPH_SUBACT_CLASSEPHRow(ByVal row As SACCPH_SUBACT_CLASSEPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SACCPH_SUBACT_CLASSEPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SACCATC_SUBACT_CLASSEATCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSACCATC_CATC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSACCATC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SACCATC_SUBACT_CLASSEATC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCATC_CATC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCATC_CATC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACCATC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACCATC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SACCATC_SUBACT_CLASSEATCRow
            Get
                Return CType(Me.Rows(index),SACCATC_SUBACT_CLASSEATCRow)
            End Get
        End Property
        
        Public Event SACCATC_SUBACT_CLASSEATCRowChanging As SACCATC_SUBACT_CLASSEATCRowChangeEventHandler
        
        Public Event SACCATC_SUBACT_CLASSEATCRowChanged As SACCATC_SUBACT_CLASSEATCRowChangeEventHandler
        
        Public Event SACCATC_SUBACT_CLASSEATCRowDeleting As SACCATC_SUBACT_CLASSEATCRowChangeEventHandler
        
        Public Event SACCATC_SUBACT_CLASSEATCRowDeleted As SACCATC_SUBACT_CLASSEATCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSACCATC_SUBACT_CLASSEATCRow(ByVal row As SACCATC_SUBACT_CLASSEATCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSACCATC_SUBACT_CLASSEATCRow(ByVal SACCATC_CATC_CODE_FK_PK As String, ByVal SACCATC_SAC_CODE_FK_PK As Integer) As SACCATC_SUBACT_CLASSEATCRow
            Dim rowSACCATC_SUBACT_CLASSEATCRow As SACCATC_SUBACT_CLASSEATCRow = CType(Me.NewRow,SACCATC_SUBACT_CLASSEATCRow)
            Dim columnValuesArray() As Object = New Object() {SACCATC_CATC_CODE_FK_PK, SACCATC_SAC_CODE_FK_PK}
            rowSACCATC_SUBACT_CLASSEATCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSACCATC_SUBACT_CLASSEATCRow)
            Return rowSACCATC_SUBACT_CLASSEATCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySACCATC_CATC_CODE_FK_PKSACCATC_SAC_CODE_FK_PK(ByVal SACCATC_CATC_CODE_FK_PK As String, ByVal SACCATC_SAC_CODE_FK_PK As Integer) As SACCATC_SUBACT_CLASSEATCRow
            Return CType(Me.Rows.Find(New Object() {SACCATC_CATC_CODE_FK_PK, SACCATC_SAC_CODE_FK_PK}),SACCATC_SUBACT_CLASSEATCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SACCATC_SUBACT_CLASSEATCDataTable = CType(MyBase.Clone,SACCATC_SUBACT_CLASSEATCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SACCATC_SUBACT_CLASSEATCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSACCATC_CATC_CODE_FK_PK = MyBase.Columns("SACCATC_CATC_CODE_FK_PK")
            Me.columnSACCATC_SAC_CODE_FK_PK = MyBase.Columns("SACCATC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSACCATC_CATC_CODE_FK_PK = New Global.System.Data.DataColumn("SACCATC_CATC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCATC_CATC_CODE_FK_PK)
            Me.columnSACCATC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("SACCATC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACCATC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSACCATC_CATC_CODE_FK_PK, Me.columnSACCATC_SAC_CODE_FK_PK}, true))
            Me.columnSACCATC_CATC_CODE_FK_PK.AllowDBNull = false
            Me.columnSACCATC_CATC_CODE_FK_PK.MaxLength = 10
            Me.columnSACCATC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSACCATC_SUBACT_CLASSEATCRow() As SACCATC_SUBACT_CLASSEATCRow
            Return CType(Me.NewRow,SACCATC_SUBACT_CLASSEATCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SACCATC_SUBACT_CLASSEATCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SACCATC_SUBACT_CLASSEATCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SACCATC_SUBACT_CLASSEATCRowChangedEvent) Is Nothing) Then
                RaiseEvent SACCATC_SUBACT_CLASSEATCRowChanged(Me, New SACCATC_SUBACT_CLASSEATCRowChangeEvent(CType(e.Row,SACCATC_SUBACT_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SACCATC_SUBACT_CLASSEATCRowChangingEvent) Is Nothing) Then
                RaiseEvent SACCATC_SUBACT_CLASSEATCRowChanging(Me, New SACCATC_SUBACT_CLASSEATCRowChangeEvent(CType(e.Row,SACCATC_SUBACT_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SACCATC_SUBACT_CLASSEATCRowDeletedEvent) Is Nothing) Then
                RaiseEvent SACCATC_SUBACT_CLASSEATCRowDeleted(Me, New SACCATC_SUBACT_CLASSEATCRowChangeEvent(CType(e.Row,SACCATC_SUBACT_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SACCATC_SUBACT_CLASSEATCRowDeletingEvent) Is Nothing) Then
                RaiseEvent SACCATC_SUBACT_CLASSEATCRowDeleting(Me, New SACCATC_SUBACT_CLASSEATCRowChangeEvent(CType(e.Row,SACCATC_SUBACT_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSACCATC_SUBACT_CLASSEATCRow(ByVal row As SACCATC_SUBACT_CLASSEATCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SACCATC_SUBACT_CLASSEATCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAC_SUBACTIVEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSAC_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSAC_CDF_ORN_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSAC_SAU_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSAC_GSAC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSAC_NOM As Global.System.Data.DataColumn
        
        Private columnSAC_NOMA As Global.System.Data.DataColumn
        
        Private columnSAC_DATECR As Global.System.Data.DataColumn
        
        Private columnSAC_DATEMJ As Global.System.Data.DataColumn
        
        Private columnSAC_ETAT_COMMER As Global.System.Data.DataColumn
        
        Private columnSAC_DATECOMMER As Global.System.Data.DataColumn
        
        Private columnSAC_CODE_REF As Global.System.Data.DataColumn
        
        Private columnSAC_LIBELLE_REF As Global.System.Data.DataColumn
        
        Private columnSAC_TYPE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAC_SUBACTIVE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_CDF_ORN_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_CDF_ORN_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_SAU_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_SAU_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_GSAC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_GSAC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_NOMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_NOMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_ETAT_COMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_ETAT_COMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_DATECOMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_DATECOMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_LIBELLE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_LIBELLE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_TYPE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_TYPE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAC_SUBACTIVERow
            Get
                Return CType(Me.Rows(index),SAC_SUBACTIVERow)
            End Get
        End Property
        
        Public Event SAC_SUBACTIVERowChanging As SAC_SUBACTIVERowChangeEventHandler
        
        Public Event SAC_SUBACTIVERowChanged As SAC_SUBACTIVERowChangeEventHandler
        
        Public Event SAC_SUBACTIVERowDeleting As SAC_SUBACTIVERowChangeEventHandler
        
        Public Event SAC_SUBACTIVERowDeleted As SAC_SUBACTIVERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAC_SUBACTIVERow(ByVal row As SAC_SUBACTIVERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAC_SUBACTIVERow(ByVal SAC_CODE_SQ_PK As Integer, ByVal SAC_CDF_ORN_CODE_FK As String, ByVal SAC_SAU_CODE_FK As Integer, ByVal SAC_GSAC_CODE_FK As Integer, ByVal SAC_NOM As String, ByVal SAC_NOMA As String, ByVal SAC_DATECR As Date, ByVal SAC_DATEMJ As Date, ByVal SAC_ETAT_COMMER As String, ByVal SAC_DATECOMMER As Date, ByVal SAC_CODE_REF As String, ByVal SAC_LIBELLE_REF As String, ByVal SAC_TYPE_REF As String) As SAC_SUBACTIVERow
            Dim rowSAC_SUBACTIVERow As SAC_SUBACTIVERow = CType(Me.NewRow,SAC_SUBACTIVERow)
            Dim columnValuesArray() As Object = New Object() {SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF}
            rowSAC_SUBACTIVERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAC_SUBACTIVERow)
            Return rowSAC_SUBACTIVERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAC_CODE_SQ_PK(ByVal SAC_CODE_SQ_PK As Integer) As SAC_SUBACTIVERow
            Return CType(Me.Rows.Find(New Object() {SAC_CODE_SQ_PK}),SAC_SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAC_SUBACTIVEDataTable = CType(MyBase.Clone,SAC_SUBACTIVEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAC_SUBACTIVEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAC_CODE_SQ_PK = MyBase.Columns("SAC_CODE_SQ_PK")
            Me.columnSAC_CDF_ORN_CODE_FK = MyBase.Columns("SAC_CDF_ORN_CODE_FK")
            Me.columnSAC_SAU_CODE_FK = MyBase.Columns("SAC_SAU_CODE_FK")
            Me.columnSAC_GSAC_CODE_FK = MyBase.Columns("SAC_GSAC_CODE_FK")
            Me.columnSAC_NOM = MyBase.Columns("SAC_NOM")
            Me.columnSAC_NOMA = MyBase.Columns("SAC_NOMA")
            Me.columnSAC_DATECR = MyBase.Columns("SAC_DATECR")
            Me.columnSAC_DATEMJ = MyBase.Columns("SAC_DATEMJ")
            Me.columnSAC_ETAT_COMMER = MyBase.Columns("SAC_ETAT_COMMER")
            Me.columnSAC_DATECOMMER = MyBase.Columns("SAC_DATECOMMER")
            Me.columnSAC_CODE_REF = MyBase.Columns("SAC_CODE_REF")
            Me.columnSAC_LIBELLE_REF = MyBase.Columns("SAC_LIBELLE_REF")
            Me.columnSAC_TYPE_REF = MyBase.Columns("SAC_TYPE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAC_CODE_SQ_PK = New Global.System.Data.DataColumn("SAC_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_CODE_SQ_PK)
            Me.columnSAC_CDF_ORN_CODE_FK = New Global.System.Data.DataColumn("SAC_CDF_ORN_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_CDF_ORN_CODE_FK)
            Me.columnSAC_SAU_CODE_FK = New Global.System.Data.DataColumn("SAC_SAU_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_SAU_CODE_FK)
            Me.columnSAC_GSAC_CODE_FK = New Global.System.Data.DataColumn("SAC_GSAC_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_GSAC_CODE_FK)
            Me.columnSAC_NOM = New Global.System.Data.DataColumn("SAC_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_NOM)
            Me.columnSAC_NOMA = New Global.System.Data.DataColumn("SAC_NOMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_NOMA)
            Me.columnSAC_DATECR = New Global.System.Data.DataColumn("SAC_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_DATECR)
            Me.columnSAC_DATEMJ = New Global.System.Data.DataColumn("SAC_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_DATEMJ)
            Me.columnSAC_ETAT_COMMER = New Global.System.Data.DataColumn("SAC_ETAT_COMMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_ETAT_COMMER)
            Me.columnSAC_DATECOMMER = New Global.System.Data.DataColumn("SAC_DATECOMMER", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_DATECOMMER)
            Me.columnSAC_CODE_REF = New Global.System.Data.DataColumn("SAC_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_CODE_REF)
            Me.columnSAC_LIBELLE_REF = New Global.System.Data.DataColumn("SAC_LIBELLE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_LIBELLE_REF)
            Me.columnSAC_TYPE_REF = New Global.System.Data.DataColumn("SAC_TYPE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_TYPE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSAC_CODE_SQ_PK}, true))
            Me.columnSAC_CODE_SQ_PK.AllowDBNull = false
            Me.columnSAC_CODE_SQ_PK.Unique = true
            Me.columnSAC_CDF_ORN_CODE_FK.MaxLength = 10
            Me.columnSAC_NOM.AllowDBNull = false
            Me.columnSAC_NOM.MaxLength = 40
            Me.columnSAC_NOMA.MaxLength = 36
            Me.columnSAC_DATECR.AllowDBNull = false
            Me.columnSAC_ETAT_COMMER.MaxLength = 2
            Me.columnSAC_CODE_REF.MaxLength = 50
            Me.columnSAC_LIBELLE_REF.MaxLength = 255
            Me.columnSAC_TYPE_REF.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAC_SUBACTIVERow() As SAC_SUBACTIVERow
            Return CType(Me.NewRow,SAC_SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAC_SUBACTIVERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAC_SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAC_SUBACTIVERowChangedEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowChanged(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAC_SUBACTIVERowChangingEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowChanging(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAC_SUBACTIVERowDeletedEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowDeleted(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAC_SUBACTIVERowDeletingEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowDeleting(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAC_SUBACTIVERow(ByVal row As SAC_SUBACTIVERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAC_SUBACTIVEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRECPSSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRECPSS_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECPSS_CDF_CPSS_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRECPSS_CIP13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRECPSS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECPSS_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECPSS_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECPSS_CDF_CPSS_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECPSS_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECPSS_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRECPSSRow
            Get
                Return CType(Me.Rows(index),PRECPSSRow)
            End Get
        End Property
        
        Public Event PRECPSSRowChanging As PRECPSSRowChangeEventHandler
        
        Public Event PRECPSSRowChanged As PRECPSSRowChangeEventHandler
        
        Public Event PRECPSSRowDeleting As PRECPSSRowChangeEventHandler
        
        Public Event PRECPSSRowDeleted As PRECPSSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRECPSSRow(ByVal row As PRECPSSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRECPSSRow(ByVal PRECPSS_PRE_CODE_FK_PK As String, ByVal PRECPSS_CDF_CPSS_CODE_FK_PK As String, ByVal PRECPSS_CIP13 As String) As PRECPSSRow
            Dim rowPRECPSSRow As PRECPSSRow = CType(Me.NewRow,PRECPSSRow)
            Dim columnValuesArray() As Object = New Object() {PRECPSS_PRE_CODE_FK_PK, PRECPSS_CDF_CPSS_CODE_FK_PK, PRECPSS_CIP13}
            rowPRECPSSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRECPSSRow)
            Return rowPRECPSSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRECPSS_PRE_CODE_FK_PKPRECPSS_CDF_CPSS_CODE_FK_PK(ByVal PRECPSS_PRE_CODE_FK_PK As String, ByVal PRECPSS_CDF_CPSS_CODE_FK_PK As String) As PRECPSSRow
            Return CType(Me.Rows.Find(New Object() {PRECPSS_PRE_CODE_FK_PK, PRECPSS_CDF_CPSS_CODE_FK_PK}),PRECPSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRECPSSDataTable = CType(MyBase.Clone,PRECPSSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRECPSSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRECPSS_PRE_CODE_FK_PK = MyBase.Columns("PRECPSS_PRE_CODE_FK_PK")
            Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK = MyBase.Columns("PRECPSS_CDF_CPSS_CODE_FK_PK")
            Me.columnPRECPSS_CIP13 = MyBase.Columns("PRECPSS_CIP13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRECPSS_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRECPSS_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECPSS_PRE_CODE_FK_PK)
            Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK = New Global.System.Data.DataColumn("PRECPSS_CDF_CPSS_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK)
            Me.columnPRECPSS_CIP13 = New Global.System.Data.DataColumn("PRECPSS_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECPSS_CIP13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRECPSS_PRE_CODE_FK_PK, Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK}, true))
            Me.columnPRECPSS_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECPSS_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK.AllowDBNull = false
            Me.columnPRECPSS_CDF_CPSS_CODE_FK_PK.MaxLength = 10
            Me.columnPRECPSS_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRECPSSRow() As PRECPSSRow
            Return CType(Me.NewRow,PRECPSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRECPSSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRECPSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRECPSSRowChangedEvent) Is Nothing) Then
                RaiseEvent PRECPSSRowChanged(Me, New PRECPSSRowChangeEvent(CType(e.Row,PRECPSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRECPSSRowChangingEvent) Is Nothing) Then
                RaiseEvent PRECPSSRowChanging(Me, New PRECPSSRowChangeEvent(CType(e.Row,PRECPSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRECPSSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRECPSSRowDeleted(Me, New PRECPSSRowChangeEvent(CType(e.Row,PRECPSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRECPSSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRECPSSRowDeleting(Me, New PRECPSSRowChangeEvent(CType(e.Row,PRECPSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRECPSSRow(ByVal row As PRECPSSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRECPSSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COSAU_COMPO_SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOSAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCOSAU_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCOSAU_DOSAGE As Global.System.Data.DataColumn
        
        Private columnCOSAU_UNITEDOSAGE As Global.System.Data.DataColumn
        
        Private columnCOSAU_COMPO_NUM_PK As Global.System.Data.DataColumn
        
        Private columnCOSAU_GREF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnCOSAU_GREF_DATECR_FK As Global.System.Data.DataColumn
        
        Private columnCOSAU_GREF_NUMORD As Global.System.Data.DataColumn
        
        Private columnCOSAU_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COSAU_COMPO_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_DOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_UNITEDOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_UNITEDOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_COMPO_NUM_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_COMPO_NUM_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_DATECR_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_DATECR_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSAU_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COSAU_COMPO_SUBAUXRow
            Get
                Return CType(Me.Rows(index),COSAU_COMPO_SUBAUXRow)
            End Get
        End Property
        
        Public Event COSAU_COMPO_SUBAUXRowChanging As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUXRowChanged As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUXRowDeleting As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUXRowDeleted As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOSAU_COMPO_SUBAUXRow(ByVal row As COSAU_COMPO_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOSAU_COMPO_SUBAUXRow(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_COMPO_NUM_PK As Byte, ByVal COSAU_GREF_CODE_FK As Integer, ByVal COSAU_GREF_DATECR_FK As Date, ByVal COSAU_GREF_NUMORD As Short, ByVal COSAU_NUMORD As Short) As COSAU_COMPO_SUBAUXRow
            Dim rowCOSAU_COMPO_SUBAUXRow As COSAU_COMPO_SUBAUXRow = CType(Me.NewRow,COSAU_COMPO_SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD}
            rowCOSAU_COMPO_SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOSAU_COMPO_SUBAUXRow)
            Return rowCOSAU_COMPO_SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOSAU_SAU_CODE_FK_PKCOSAU_SP_CODE_FK_PKCOSAU_COMPO_NUM_PK(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_COMPO_NUM_PK As Byte) As COSAU_COMPO_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_COMPO_NUM_PK}),COSAU_COMPO_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COSAU_COMPO_SUBAUXDataTable = CType(MyBase.Clone,COSAU_COMPO_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COSAU_COMPO_SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOSAU_SAU_CODE_FK_PK = MyBase.Columns("COSAU_SAU_CODE_FK_PK")
            Me.columnCOSAU_SP_CODE_FK_PK = MyBase.Columns("COSAU_SP_CODE_FK_PK")
            Me.columnCOSAU_DOSAGE = MyBase.Columns("COSAU_DOSAGE")
            Me.columnCOSAU_UNITEDOSAGE = MyBase.Columns("COSAU_UNITEDOSAGE")
            Me.columnCOSAU_COMPO_NUM_PK = MyBase.Columns("COSAU_COMPO_NUM_PK")
            Me.columnCOSAU_GREF_CODE_FK = MyBase.Columns("COSAU_GREF_CODE_FK")
            Me.columnCOSAU_GREF_DATECR_FK = MyBase.Columns("COSAU_GREF_DATECR_FK")
            Me.columnCOSAU_GREF_NUMORD = MyBase.Columns("COSAU_GREF_NUMORD")
            Me.columnCOSAU_NUMORD = MyBase.Columns("COSAU_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOSAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("COSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_SAU_CODE_FK_PK)
            Me.columnCOSAU_SP_CODE_FK_PK = New Global.System.Data.DataColumn("COSAU_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_SP_CODE_FK_PK)
            Me.columnCOSAU_DOSAGE = New Global.System.Data.DataColumn("COSAU_DOSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_DOSAGE)
            Me.columnCOSAU_UNITEDOSAGE = New Global.System.Data.DataColumn("COSAU_UNITEDOSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_UNITEDOSAGE)
            Me.columnCOSAU_COMPO_NUM_PK = New Global.System.Data.DataColumn("COSAU_COMPO_NUM_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_COMPO_NUM_PK)
            Me.columnCOSAU_GREF_CODE_FK = New Global.System.Data.DataColumn("COSAU_GREF_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_CODE_FK)
            Me.columnCOSAU_GREF_DATECR_FK = New Global.System.Data.DataColumn("COSAU_GREF_DATECR_FK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_DATECR_FK)
            Me.columnCOSAU_GREF_NUMORD = New Global.System.Data.DataColumn("COSAU_GREF_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_NUMORD)
            Me.columnCOSAU_NUMORD = New Global.System.Data.DataColumn("COSAU_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOSAU_SAU_CODE_FK_PK, Me.columnCOSAU_SP_CODE_FK_PK, Me.columnCOSAU_COMPO_NUM_PK}, true))
            Me.columnCOSAU_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAU_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAU_DOSAGE.MaxLength = 17
            Me.columnCOSAU_UNITEDOSAGE.MaxLength = 40
            Me.columnCOSAU_COMPO_NUM_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOSAU_COMPO_SUBAUXRow() As COSAU_COMPO_SUBAUXRow
            Return CType(Me.NewRow,COSAU_COMPO_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COSAU_COMPO_SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COSAU_COMPO_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowChanged(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowChanging(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowDeleted(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowDeleting(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOSAU_COMPO_SUBAUXRow(ByVal row As COSAU_COMPO_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COSAU_COMPO_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREGREF_PRE_GROUPE_REFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREGREF_GREF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_DATEENTREE_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_GREF_DATECR_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_DATESORTIE As Global.System.Data.DataColumn
        
        Private columnPREGREF_TYPE_PRE As Global.System.Data.DataColumn
        
        Private columnPREGREF_CIP13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREGREF_PRE_GROUPE_REF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_GREF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_GREF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_DATEENTREE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_DATEENTREE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_GREF_DATECR_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_GREF_DATECR_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_DATESORTIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_DATESORTIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_TYPE_PREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_TYPE_PRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREGREF_PRE_GROUPE_REFRow
            Get
                Return CType(Me.Rows(index),PREGREF_PRE_GROUPE_REFRow)
            End Get
        End Property
        
        Public Event PREGREF_PRE_GROUPE_REFRowChanging As PREGREF_PRE_GROUPE_REFRowChangeEventHandler
        
        Public Event PREGREF_PRE_GROUPE_REFRowChanged As PREGREF_PRE_GROUPE_REFRowChangeEventHandler
        
        Public Event PREGREF_PRE_GROUPE_REFRowDeleting As PREGREF_PRE_GROUPE_REFRowChangeEventHandler
        
        Public Event PREGREF_PRE_GROUPE_REFRowDeleted As PREGREF_PRE_GROUPE_REFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREGREF_PRE_GROUPE_REFRow(ByVal row As PREGREF_PRE_GROUPE_REFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREGREF_PRE_GROUPE_REFRow(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date, ByVal PREGREF_DATESORTIE As Date, ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String) As PREGREF_PRE_GROUPE_REFRow
            Dim rowPREGREF_PRE_GROUPE_REFRow As PREGREF_PRE_GROUPE_REFRow = CType(Me.NewRow,PREGREF_PRE_GROUPE_REFRow)
            Dim columnValuesArray() As Object = New Object() {PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13}
            rowPREGREF_PRE_GROUPE_REFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREGREF_PRE_GROUPE_REFRow)
            Return rowPREGREF_PRE_GROUPE_REFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREGREF_GREF_CODE_FK_PKPREGREF_PRE_CODE_FK_PKPREGREF_DATEENTREE_PKPREGREF_GREF_DATECR_FK_PK(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date) As PREGREF_PRE_GROUPE_REFRow
            Return CType(Me.Rows.Find(New Object() {PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATECR_FK_PK}),PREGREF_PRE_GROUPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREGREF_PRE_GROUPE_REFDataTable = CType(MyBase.Clone,PREGREF_PRE_GROUPE_REFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREGREF_PRE_GROUPE_REFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREGREF_GREF_CODE_FK_PK = MyBase.Columns("PREGREF_GREF_CODE_FK_PK")
            Me.columnPREGREF_PRE_CODE_FK_PK = MyBase.Columns("PREGREF_PRE_CODE_FK_PK")
            Me.columnPREGREF_DATEENTREE_PK = MyBase.Columns("PREGREF_DATEENTREE_PK")
            Me.columnPREGREF_GREF_DATECR_FK_PK = MyBase.Columns("PREGREF_GREF_DATECR_FK_PK")
            Me.columnPREGREF_DATESORTIE = MyBase.Columns("PREGREF_DATESORTIE")
            Me.columnPREGREF_TYPE_PRE = MyBase.Columns("PREGREF_TYPE_PRE")
            Me.columnPREGREF_CIP13 = MyBase.Columns("PREGREF_CIP13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREGREF_GREF_CODE_FK_PK = New Global.System.Data.DataColumn("PREGREF_GREF_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_GREF_CODE_FK_PK)
            Me.columnPREGREF_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREGREF_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_PRE_CODE_FK_PK)
            Me.columnPREGREF_DATEENTREE_PK = New Global.System.Data.DataColumn("PREGREF_DATEENTREE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_DATEENTREE_PK)
            Me.columnPREGREF_GREF_DATECR_FK_PK = New Global.System.Data.DataColumn("PREGREF_GREF_DATECR_FK_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_GREF_DATECR_FK_PK)
            Me.columnPREGREF_DATESORTIE = New Global.System.Data.DataColumn("PREGREF_DATESORTIE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_DATESORTIE)
            Me.columnPREGREF_TYPE_PRE = New Global.System.Data.DataColumn("PREGREF_TYPE_PRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_TYPE_PRE)
            Me.columnPREGREF_CIP13 = New Global.System.Data.DataColumn("PREGREF_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_CIP13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREGREF_GREF_CODE_FK_PK, Me.columnPREGREF_PRE_CODE_FK_PK, Me.columnPREGREF_DATEENTREE_PK, Me.columnPREGREF_GREF_DATECR_FK_PK}, true))
            Me.columnPREGREF_GREF_CODE_FK_PK.AllowDBNull = false
            Me.columnPREGREF_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREGREF_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREGREF_DATEENTREE_PK.AllowDBNull = false
            Me.columnPREGREF_GREF_DATECR_FK_PK.AllowDBNull = false
            Me.columnPREGREF_TYPE_PRE.MaxLength = 1
            Me.columnPREGREF_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREGREF_PRE_GROUPE_REFRow() As PREGREF_PRE_GROUPE_REFRow
            Return CType(Me.NewRow,PREGREF_PRE_GROUPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREGREF_PRE_GROUPE_REFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREGREF_PRE_GROUPE_REFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REFRowChangedEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REFRowChanged(Me, New PREGREF_PRE_GROUPE_REFRowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REFRowChangingEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REFRowChanging(Me, New PREGREF_PRE_GROUPE_REFRowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REFRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REFRowDeleted(Me, New PREGREF_PRE_GROUPE_REFRowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REFRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REFRowDeleting(Me, New PREGREF_PRE_GROUPE_REFRowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREGREF_PRE_GROUPE_REFRow(ByVal row As PREGREF_PRE_GROUPE_REFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREGREF_PRE_GROUPE_REFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPGREFG_GROUPE_SPE_GENEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSPGREFG_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPGREFG_GREF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPGREFG_GREF_DATECR_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPGREFG_DATEEG_PK As Global.System.Data.DataColumn
        
        Private columnSPGREFG_DATESG As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPGREFG_GROUPE_SPE_GENE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFG_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFG_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFG_GREF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFG_GREF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFG_GREF_DATECR_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFG_GREF_DATECR_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFG_DATEEG_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFG_DATEEG_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPGREFG_DATESGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPGREFG_DATESG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPGREFG_GROUPE_SPE_GENERow
            Get
                Return CType(Me.Rows(index),SPGREFG_GROUPE_SPE_GENERow)
            End Get
        End Property
        
        Public Event SPGREFG_GROUPE_SPE_GENERowChanging As SPGREFG_GROUPE_SPE_GENERowChangeEventHandler
        
        Public Event SPGREFG_GROUPE_SPE_GENERowChanged As SPGREFG_GROUPE_SPE_GENERowChangeEventHandler
        
        Public Event SPGREFG_GROUPE_SPE_GENERowDeleting As SPGREFG_GROUPE_SPE_GENERowChangeEventHandler
        
        Public Event SPGREFG_GROUPE_SPE_GENERowDeleted As SPGREFG_GROUPE_SPE_GENERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPGREFG_GROUPE_SPE_GENERow(ByVal row As SPGREFG_GROUPE_SPE_GENERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPGREFG_GROUPE_SPE_GENERow(ByVal SPGREFG_SP_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_DATECR_FK_PK As Date, ByVal SPGREFG_DATEEG_PK As Date, ByVal SPGREFG_DATESG As Date) As SPGREFG_GROUPE_SPE_GENERow
            Dim rowSPGREFG_GROUPE_SPE_GENERow As SPGREFG_GROUPE_SPE_GENERow = CType(Me.NewRow,SPGREFG_GROUPE_SPE_GENERow)
            Dim columnValuesArray() As Object = New Object() {SPGREFG_SP_CODE_FK_PK, SPGREFG_GREF_CODE_FK_PK, SPGREFG_GREF_DATECR_FK_PK, SPGREFG_DATEEG_PK, SPGREFG_DATESG}
            rowSPGREFG_GROUPE_SPE_GENERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSPGREFG_GROUPE_SPE_GENERow)
            Return rowSPGREFG_GROUPE_SPE_GENERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPGREFG_SP_CODE_FK_PKSPGREFG_GREF_CODE_FK_PKSPGREFG_GREF_DATECR_FK_PKSPGREFG_DATEEG_PK(ByVal SPGREFG_SP_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_DATECR_FK_PK As Date, ByVal SPGREFG_DATEEG_PK As Date) As SPGREFG_GROUPE_SPE_GENERow
            Return CType(Me.Rows.Find(New Object() {SPGREFG_SP_CODE_FK_PK, SPGREFG_GREF_CODE_FK_PK, SPGREFG_GREF_DATECR_FK_PK, SPGREFG_DATEEG_PK}),SPGREFG_GROUPE_SPE_GENERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SPGREFG_GROUPE_SPE_GENEDataTable = CType(MyBase.Clone,SPGREFG_GROUPE_SPE_GENEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SPGREFG_GROUPE_SPE_GENEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPGREFG_SP_CODE_FK_PK = MyBase.Columns("SPGREFG_SP_CODE_FK_PK")
            Me.columnSPGREFG_GREF_CODE_FK_PK = MyBase.Columns("SPGREFG_GREF_CODE_FK_PK")
            Me.columnSPGREFG_GREF_DATECR_FK_PK = MyBase.Columns("SPGREFG_GREF_DATECR_FK_PK")
            Me.columnSPGREFG_DATEEG_PK = MyBase.Columns("SPGREFG_DATEEG_PK")
            Me.columnSPGREFG_DATESG = MyBase.Columns("SPGREFG_DATESG")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPGREFG_SP_CODE_FK_PK = New Global.System.Data.DataColumn("SPGREFG_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFG_SP_CODE_FK_PK)
            Me.columnSPGREFG_GREF_CODE_FK_PK = New Global.System.Data.DataColumn("SPGREFG_GREF_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFG_GREF_CODE_FK_PK)
            Me.columnSPGREFG_GREF_DATECR_FK_PK = New Global.System.Data.DataColumn("SPGREFG_GREF_DATECR_FK_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFG_GREF_DATECR_FK_PK)
            Me.columnSPGREFG_DATEEG_PK = New Global.System.Data.DataColumn("SPGREFG_DATEEG_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFG_DATEEG_PK)
            Me.columnSPGREFG_DATESG = New Global.System.Data.DataColumn("SPGREFG_DATESG", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPGREFG_DATESG)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSPGREFG_SP_CODE_FK_PK, Me.columnSPGREFG_GREF_CODE_FK_PK, Me.columnSPGREFG_GREF_DATECR_FK_PK, Me.columnSPGREFG_DATEEG_PK}, true))
            Me.columnSPGREFG_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPGREFG_GREF_CODE_FK_PK.AllowDBNull = false
            Me.columnSPGREFG_GREF_DATECR_FK_PK.AllowDBNull = false
            Me.columnSPGREFG_DATEEG_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPGREFG_GROUPE_SPE_GENERow() As SPGREFG_GROUPE_SPE_GENERow
            Return CType(Me.NewRow,SPGREFG_GROUPE_SPE_GENERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SPGREFG_GROUPE_SPE_GENERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SPGREFG_GROUPE_SPE_GENERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPGREFG_GROUPE_SPE_GENERowChangedEvent) Is Nothing) Then
                RaiseEvent SPGREFG_GROUPE_SPE_GENERowChanged(Me, New SPGREFG_GROUPE_SPE_GENERowChangeEvent(CType(e.Row,SPGREFG_GROUPE_SPE_GENERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPGREFG_GROUPE_SPE_GENERowChangingEvent) Is Nothing) Then
                RaiseEvent SPGREFG_GROUPE_SPE_GENERowChanging(Me, New SPGREFG_GROUPE_SPE_GENERowChangeEvent(CType(e.Row,SPGREFG_GROUPE_SPE_GENERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPGREFG_GROUPE_SPE_GENERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPGREFG_GROUPE_SPE_GENERowDeleted(Me, New SPGREFG_GROUPE_SPE_GENERowChangeEvent(CType(e.Row,SPGREFG_GROUPE_SPE_GENERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPGREFG_GROUPE_SPE_GENERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPGREFG_GROUPE_SPE_GENERowDeleting(Me, New SPGREFG_GROUPE_SPE_GENERowChangeEvent(CType(e.Row,SPGREFG_GROUPE_SPE_GENERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPGREFG_GROUPE_SPE_GENERow(ByVal row As SPGREFG_GROUPE_SPE_GENERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPGREFG_GROUPE_SPE_GENEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREGREF_PRE_GROUPE_REF1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREGREF_GREF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_DATEENTREE_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_GREF_DATECR_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREGREF_DATESORTIE As Global.System.Data.DataColumn
        
        Private columnPREGREF_TYPE_PRE As Global.System.Data.DataColumn
        
        Private columnPREGREF_CIP13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREGREF_PRE_GROUPE_REF1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_GREF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_GREF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_DATEENTREE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_DATEENTREE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_GREF_DATECR_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_GREF_DATECR_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_DATESORTIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_DATESORTIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_TYPE_PREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_TYPE_PRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREGREF_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREGREF_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREGREF_PRE_GROUPE_REF1Row
            Get
                Return CType(Me.Rows(index),PREGREF_PRE_GROUPE_REF1Row)
            End Get
        End Property
        
        Public Event PREGREF_PRE_GROUPE_REF1RowChanging As PREGREF_PRE_GROUPE_REF1RowChangeEventHandler
        
        Public Event PREGREF_PRE_GROUPE_REF1RowChanged As PREGREF_PRE_GROUPE_REF1RowChangeEventHandler
        
        Public Event PREGREF_PRE_GROUPE_REF1RowDeleting As PREGREF_PRE_GROUPE_REF1RowChangeEventHandler
        
        Public Event PREGREF_PRE_GROUPE_REF1RowDeleted As PREGREF_PRE_GROUPE_REF1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREGREF_PRE_GROUPE_REF1Row(ByVal row As PREGREF_PRE_GROUPE_REF1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREGREF_PRE_GROUPE_REF1Row(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date, ByVal PREGREF_DATESORTIE As Date, ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String) As PREGREF_PRE_GROUPE_REF1Row
            Dim rowPREGREF_PRE_GROUPE_REF1Row As PREGREF_PRE_GROUPE_REF1Row = CType(Me.NewRow,PREGREF_PRE_GROUPE_REF1Row)
            Dim columnValuesArray() As Object = New Object() {PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13}
            rowPREGREF_PRE_GROUPE_REF1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREGREF_PRE_GROUPE_REF1Row)
            Return rowPREGREF_PRE_GROUPE_REF1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREGREF_GREF_CODE_FK_PKPREGREF_PRE_CODE_FK_PKPREGREF_DATEENTREE_PKPREGREF_GREF_DATECR_FK_PK(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date) As PREGREF_PRE_GROUPE_REF1Row
            Return CType(Me.Rows.Find(New Object() {PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATECR_FK_PK}),PREGREF_PRE_GROUPE_REF1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREGREF_PRE_GROUPE_REF1DataTable = CType(MyBase.Clone,PREGREF_PRE_GROUPE_REF1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREGREF_PRE_GROUPE_REF1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREGREF_GREF_CODE_FK_PK = MyBase.Columns("PREGREF_GREF_CODE_FK_PK")
            Me.columnPREGREF_PRE_CODE_FK_PK = MyBase.Columns("PREGREF_PRE_CODE_FK_PK")
            Me.columnPREGREF_DATEENTREE_PK = MyBase.Columns("PREGREF_DATEENTREE_PK")
            Me.columnPREGREF_GREF_DATECR_FK_PK = MyBase.Columns("PREGREF_GREF_DATECR_FK_PK")
            Me.columnPREGREF_DATESORTIE = MyBase.Columns("PREGREF_DATESORTIE")
            Me.columnPREGREF_TYPE_PRE = MyBase.Columns("PREGREF_TYPE_PRE")
            Me.columnPREGREF_CIP13 = MyBase.Columns("PREGREF_CIP13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREGREF_GREF_CODE_FK_PK = New Global.System.Data.DataColumn("PREGREF_GREF_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_GREF_CODE_FK_PK)
            Me.columnPREGREF_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREGREF_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_PRE_CODE_FK_PK)
            Me.columnPREGREF_DATEENTREE_PK = New Global.System.Data.DataColumn("PREGREF_DATEENTREE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_DATEENTREE_PK)
            Me.columnPREGREF_GREF_DATECR_FK_PK = New Global.System.Data.DataColumn("PREGREF_GREF_DATECR_FK_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_GREF_DATECR_FK_PK)
            Me.columnPREGREF_DATESORTIE = New Global.System.Data.DataColumn("PREGREF_DATESORTIE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_DATESORTIE)
            Me.columnPREGREF_TYPE_PRE = New Global.System.Data.DataColumn("PREGREF_TYPE_PRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_TYPE_PRE)
            Me.columnPREGREF_CIP13 = New Global.System.Data.DataColumn("PREGREF_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREGREF_CIP13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREGREF_GREF_CODE_FK_PK, Me.columnPREGREF_PRE_CODE_FK_PK, Me.columnPREGREF_DATEENTREE_PK, Me.columnPREGREF_GREF_DATECR_FK_PK}, true))
            Me.columnPREGREF_GREF_CODE_FK_PK.AllowDBNull = false
            Me.columnPREGREF_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREGREF_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREGREF_DATEENTREE_PK.AllowDBNull = false
            Me.columnPREGREF_GREF_DATECR_FK_PK.AllowDBNull = false
            Me.columnPREGREF_TYPE_PRE.MaxLength = 1
            Me.columnPREGREF_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREGREF_PRE_GROUPE_REF1Row() As PREGREF_PRE_GROUPE_REF1Row
            Return CType(Me.NewRow,PREGREF_PRE_GROUPE_REF1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREGREF_PRE_GROUPE_REF1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREGREF_PRE_GROUPE_REF1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REF1RowChangedEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REF1RowChanged(Me, New PREGREF_PRE_GROUPE_REF1RowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REF1RowChangingEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REF1RowChanging(Me, New PREGREF_PRE_GROUPE_REF1RowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REF1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REF1RowDeleted(Me, New PREGREF_PRE_GROUPE_REF1RowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREGREF_PRE_GROUPE_REF1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PREGREF_PRE_GROUPE_REF1RowDeleting(Me, New PREGREF_PRE_GROUPE_REF1RowChangeEvent(CType(e.Row,PREGREF_PRE_GROUPE_REF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREGREF_PRE_GROUPE_REF1Row(ByVal row As PREGREF_PRE_GROUPE_REF1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREGREF_PRE_GROUPE_REF1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRIPRE_PRIX_PRESENTATIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRIPRE_DATE_APPLI_PK As Global.System.Data.DataColumn
        
        Private columnPRIPRE_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPRIPRE_PRIX As Global.System.Data.DataColumn
        
        Private columnPRIPRE_PRIX_EURO As Global.System.Data.DataColumn
        
        Private columnPRIPRE_Valide As Global.System.Data.DataColumn
        
        Private columnPRIPRE_CIP13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRIPRE_PRIX_PRESENTATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIPRE_DATE_APPLI_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIPRE_DATE_APPLI_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIPRE_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIPRE_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIPRE_PRIXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIPRE_PRIX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIPRE_PRIX_EUROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIPRE_PRIX_EURO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIPRE_ValideColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIPRE_Valide
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIPRE_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIPRE_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRIPRE_PRIX_PRESENTATIONRow
            Get
                Return CType(Me.Rows(index),PRIPRE_PRIX_PRESENTATIONRow)
            End Get
        End Property
        
        Public Event PRIPRE_PRIX_PRESENTATIONRowChanging As PRIPRE_PRIX_PRESENTATIONRowChangeEventHandler
        
        Public Event PRIPRE_PRIX_PRESENTATIONRowChanged As PRIPRE_PRIX_PRESENTATIONRowChangeEventHandler
        
        Public Event PRIPRE_PRIX_PRESENTATIONRowDeleting As PRIPRE_PRIX_PRESENTATIONRowChangeEventHandler
        
        Public Event PRIPRE_PRIX_PRESENTATIONRowDeleted As PRIPRE_PRIX_PRESENTATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRIPRE_PRIX_PRESENTATIONRow(ByVal row As PRIPRE_PRIX_PRESENTATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRIPRE_PRIX_PRESENTATIONRow(ByVal PRIPRE_DATE_APPLI_PK As Date, ByVal PRIPRE_PRE_CODE_FK_PK As String, ByVal PRIPRE_PRIX As Decimal, ByVal PRIPRE_PRIX_EURO As Decimal, ByVal PRIPRE_Valide As Boolean, ByVal PRIPRE_CIP13 As String) As PRIPRE_PRIX_PRESENTATIONRow
            Dim rowPRIPRE_PRIX_PRESENTATIONRow As PRIPRE_PRIX_PRESENTATIONRow = CType(Me.NewRow,PRIPRE_PRIX_PRESENTATIONRow)
            Dim columnValuesArray() As Object = New Object() {PRIPRE_DATE_APPLI_PK, PRIPRE_PRE_CODE_FK_PK, PRIPRE_PRIX, PRIPRE_PRIX_EURO, PRIPRE_Valide, PRIPRE_CIP13}
            rowPRIPRE_PRIX_PRESENTATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRIPRE_PRIX_PRESENTATIONRow)
            Return rowPRIPRE_PRIX_PRESENTATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRIPRE_DATE_APPLI_PKPRIPRE_PRE_CODE_FK_PK(ByVal PRIPRE_DATE_APPLI_PK As Date, ByVal PRIPRE_PRE_CODE_FK_PK As String) As PRIPRE_PRIX_PRESENTATIONRow
            Return CType(Me.Rows.Find(New Object() {PRIPRE_DATE_APPLI_PK, PRIPRE_PRE_CODE_FK_PK}),PRIPRE_PRIX_PRESENTATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRIPRE_PRIX_PRESENTATIONDataTable = CType(MyBase.Clone,PRIPRE_PRIX_PRESENTATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRIPRE_PRIX_PRESENTATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRIPRE_DATE_APPLI_PK = MyBase.Columns("PRIPRE_DATE_APPLI_PK")
            Me.columnPRIPRE_PRE_CODE_FK_PK = MyBase.Columns("PRIPRE_PRE_CODE_FK_PK")
            Me.columnPRIPRE_PRIX = MyBase.Columns("PRIPRE_PRIX")
            Me.columnPRIPRE_PRIX_EURO = MyBase.Columns("PRIPRE_PRIX_EURO")
            Me.columnPRIPRE_Valide = MyBase.Columns("PRIPRE_Valide")
            Me.columnPRIPRE_CIP13 = MyBase.Columns("PRIPRE_CIP13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRIPRE_DATE_APPLI_PK = New Global.System.Data.DataColumn("PRIPRE_DATE_APPLI_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIPRE_DATE_APPLI_PK)
            Me.columnPRIPRE_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PRIPRE_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIPRE_PRE_CODE_FK_PK)
            Me.columnPRIPRE_PRIX = New Global.System.Data.DataColumn("PRIPRE_PRIX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIPRE_PRIX)
            Me.columnPRIPRE_PRIX_EURO = New Global.System.Data.DataColumn("PRIPRE_PRIX_EURO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIPRE_PRIX_EURO)
            Me.columnPRIPRE_Valide = New Global.System.Data.DataColumn("PRIPRE_Valide", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIPRE_Valide)
            Me.columnPRIPRE_CIP13 = New Global.System.Data.DataColumn("PRIPRE_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIPRE_CIP13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRIPRE_DATE_APPLI_PK, Me.columnPRIPRE_PRE_CODE_FK_PK}, true))
            Me.columnPRIPRE_DATE_APPLI_PK.AllowDBNull = false
            Me.columnPRIPRE_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPRIPRE_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPRIPRE_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRIPRE_PRIX_PRESENTATIONRow() As PRIPRE_PRIX_PRESENTATIONRow
            Return CType(Me.NewRow,PRIPRE_PRIX_PRESENTATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRIPRE_PRIX_PRESENTATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRIPRE_PRIX_PRESENTATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRIPRE_PRIX_PRESENTATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PRIPRE_PRIX_PRESENTATIONRowChanged(Me, New PRIPRE_PRIX_PRESENTATIONRowChangeEvent(CType(e.Row,PRIPRE_PRIX_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRIPRE_PRIX_PRESENTATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PRIPRE_PRIX_PRESENTATIONRowChanging(Me, New PRIPRE_PRIX_PRESENTATIONRowChangeEvent(CType(e.Row,PRIPRE_PRIX_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRIPRE_PRIX_PRESENTATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRIPRE_PRIX_PRESENTATIONRowDeleted(Me, New PRIPRE_PRIX_PRESENTATIONRowChangeEvent(CType(e.Row,PRIPRE_PRIX_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRIPRE_PRIX_PRESENTATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRIPRE_PRIX_PRESENTATIONRowDeleting(Me, New PRIPRE_PRIX_PRESENTATIONRowChangeEvent(CType(e.Row,PRIPRE_PRIX_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRIPRE_PRIX_PRESENTATIONRow(ByVal row As PRIPRE_PRIX_PRESENTATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRIPRE_PRIX_PRESENTATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FORPRE_FORFAIT_PREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFORPRE_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFORPRE_DATE_PK As Global.System.Data.DataColumn
        
        Private columnFORPRE_FORFAIT As Global.System.Data.DataColumn
        
        Private columnFORPRE_Valide As Global.System.Data.DataColumn
        
        Private columnFORPRE_CIP13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FORPRE_FORFAIT_PRE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORPRE_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORPRE_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORPRE_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORPRE_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORPRE_FORFAITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORPRE_FORFAIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORPRE_ValideColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORPRE_Valide
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORPRE_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORPRE_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FORPRE_FORFAIT_PRERow
            Get
                Return CType(Me.Rows(index),FORPRE_FORFAIT_PRERow)
            End Get
        End Property
        
        Public Event FORPRE_FORFAIT_PRERowChanging As FORPRE_FORFAIT_PRERowChangeEventHandler
        
        Public Event FORPRE_FORFAIT_PRERowChanged As FORPRE_FORFAIT_PRERowChangeEventHandler
        
        Public Event FORPRE_FORFAIT_PRERowDeleting As FORPRE_FORFAIT_PRERowChangeEventHandler
        
        Public Event FORPRE_FORFAIT_PRERowDeleted As FORPRE_FORFAIT_PRERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFORPRE_FORFAIT_PRERow(ByVal row As FORPRE_FORFAIT_PRERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFORPRE_FORFAIT_PRERow(ByVal FORPRE_PRE_CODE_FK_PK As String, ByVal FORPRE_DATE_PK As Date, ByVal FORPRE_FORFAIT As Decimal, ByVal FORPRE_Valide As Boolean, ByVal FORPRE_CIP13 As String) As FORPRE_FORFAIT_PRERow
            Dim rowFORPRE_FORFAIT_PRERow As FORPRE_FORFAIT_PRERow = CType(Me.NewRow,FORPRE_FORFAIT_PRERow)
            Dim columnValuesArray() As Object = New Object() {FORPRE_PRE_CODE_FK_PK, FORPRE_DATE_PK, FORPRE_FORFAIT, FORPRE_Valide, FORPRE_CIP13}
            rowFORPRE_FORFAIT_PRERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFORPRE_FORFAIT_PRERow)
            Return rowFORPRE_FORFAIT_PRERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFORPRE_PRE_CODE_FK_PKFORPRE_DATE_PK(ByVal FORPRE_PRE_CODE_FK_PK As String, ByVal FORPRE_DATE_PK As Date) As FORPRE_FORFAIT_PRERow
            Return CType(Me.Rows.Find(New Object() {FORPRE_PRE_CODE_FK_PK, FORPRE_DATE_PK}),FORPRE_FORFAIT_PRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FORPRE_FORFAIT_PREDataTable = CType(MyBase.Clone,FORPRE_FORFAIT_PREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FORPRE_FORFAIT_PREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFORPRE_PRE_CODE_FK_PK = MyBase.Columns("FORPRE_PRE_CODE_FK_PK")
            Me.columnFORPRE_DATE_PK = MyBase.Columns("FORPRE_DATE_PK")
            Me.columnFORPRE_FORFAIT = MyBase.Columns("FORPRE_FORFAIT")
            Me.columnFORPRE_Valide = MyBase.Columns("FORPRE_Valide")
            Me.columnFORPRE_CIP13 = MyBase.Columns("FORPRE_CIP13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFORPRE_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("FORPRE_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORPRE_PRE_CODE_FK_PK)
            Me.columnFORPRE_DATE_PK = New Global.System.Data.DataColumn("FORPRE_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORPRE_DATE_PK)
            Me.columnFORPRE_FORFAIT = New Global.System.Data.DataColumn("FORPRE_FORFAIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORPRE_FORFAIT)
            Me.columnFORPRE_Valide = New Global.System.Data.DataColumn("FORPRE_Valide", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORPRE_Valide)
            Me.columnFORPRE_CIP13 = New Global.System.Data.DataColumn("FORPRE_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORPRE_CIP13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFORPRE_PRE_CODE_FK_PK, Me.columnFORPRE_DATE_PK}, true))
            Me.columnFORPRE_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnFORPRE_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnFORPRE_DATE_PK.AllowDBNull = false
            Me.columnFORPRE_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFORPRE_FORFAIT_PRERow() As FORPRE_FORFAIT_PRERow
            Return CType(Me.NewRow,FORPRE_FORFAIT_PRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FORPRE_FORFAIT_PRERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FORPRE_FORFAIT_PRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FORPRE_FORFAIT_PRERowChangedEvent) Is Nothing) Then
                RaiseEvent FORPRE_FORFAIT_PRERowChanged(Me, New FORPRE_FORFAIT_PRERowChangeEvent(CType(e.Row,FORPRE_FORFAIT_PRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FORPRE_FORFAIT_PRERowChangingEvent) Is Nothing) Then
                RaiseEvent FORPRE_FORFAIT_PRERowChanging(Me, New FORPRE_FORFAIT_PRERowChangeEvent(CType(e.Row,FORPRE_FORFAIT_PRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FORPRE_FORFAIT_PRERowDeletedEvent) Is Nothing) Then
                RaiseEvent FORPRE_FORFAIT_PRERowDeleted(Me, New FORPRE_FORFAIT_PRERowChangeEvent(CType(e.Row,FORPRE_FORFAIT_PRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FORPRE_FORFAIT_PRERowDeletingEvent) Is Nothing) Then
                RaiseEvent FORPRE_FORFAIT_PRERowDeleting(Me, New FORPRE_FORFAIT_PRERowChangeEvent(CType(e.Row,FORPRE_FORFAIT_PRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFORPRE_FORFAIT_PRERow(ByVal row As FORPRE_FORFAIT_PRERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FORPRE_FORFAIT_PREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDF_CODIFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCDF_NUMERO_PK As Global.System.Data.DataColumn
        
        Private columnCDF_CODE_PK As Global.System.Data.DataColumn
        
        Private columnCDF_NOM As Global.System.Data.DataColumn
        
        Private columnCDF_DATECR As Global.System.Data.DataColumn
        
        Private columnCDF_DATEMJ As Global.System.Data.DataColumn
        
        Private columnCDF_VAL_NUM As Global.System.Data.DataColumn
        
        Private columnCDF_NOMABRG As Global.System.Data.DataColumn
        
        Private columnCDF_UNIT_NUM As Global.System.Data.DataColumn
        
        Private columnCDF_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDF_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NUMERO_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_NUMERO_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_VAL_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_VAL_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NOMABRGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_NOMABRG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_UNIT_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_UNIT_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDF_CODIFRow
            Get
                Return CType(Me.Rows(index),CDF_CODIFRow)
            End Get
        End Property
        
        Public Event CDF_CODIFRowChanging As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowChanged As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowDeleting As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowDeleted As CDF_CODIFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDF_CODIFRow(ByVal row As CDF_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDF_CODIFRow(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Date, ByVal CDF_VAL_NUM As Decimal, ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String) As CDF_CODIFRow
            Dim rowCDF_CODIFRow As CDF_CODIFRow = CType(Me.NewRow,CDF_CODIFRow)
            Dim columnValuesArray() As Object = New Object() {CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE}
            rowCDF_CODIFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCDF_CODIFRow)
            Return rowCDF_CODIFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDF_NUMERO_PKCDF_CODE_PK(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As CDF_CODIFRow
            Return CType(Me.Rows.Find(New Object() {CDF_NUMERO_PK, CDF_CODE_PK}),CDF_CODIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CDF_CODIFDataTable = CType(MyBase.Clone,CDF_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CDF_CODIFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDF_NUMERO_PK = MyBase.Columns("CDF_NUMERO_PK")
            Me.columnCDF_CODE_PK = MyBase.Columns("CDF_CODE_PK")
            Me.columnCDF_NOM = MyBase.Columns("CDF_NOM")
            Me.columnCDF_DATECR = MyBase.Columns("CDF_DATECR")
            Me.columnCDF_DATEMJ = MyBase.Columns("CDF_DATEMJ")
            Me.columnCDF_VAL_NUM = MyBase.Columns("CDF_VAL_NUM")
            Me.columnCDF_NOMABRG = MyBase.Columns("CDF_NOMABRG")
            Me.columnCDF_UNIT_NUM = MyBase.Columns("CDF_UNIT_NUM")
            Me.columnCDF_TEXTE = MyBase.Columns("CDF_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDF_NUMERO_PK = New Global.System.Data.DataColumn("CDF_NUMERO_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NUMERO_PK)
            Me.columnCDF_CODE_PK = New Global.System.Data.DataColumn("CDF_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_CODE_PK)
            Me.columnCDF_NOM = New Global.System.Data.DataColumn("CDF_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NOM)
            Me.columnCDF_DATECR = New Global.System.Data.DataColumn("CDF_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_DATECR)
            Me.columnCDF_DATEMJ = New Global.System.Data.DataColumn("CDF_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_DATEMJ)
            Me.columnCDF_VAL_NUM = New Global.System.Data.DataColumn("CDF_VAL_NUM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_VAL_NUM)
            Me.columnCDF_NOMABRG = New Global.System.Data.DataColumn("CDF_NOMABRG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NOMABRG)
            Me.columnCDF_UNIT_NUM = New Global.System.Data.DataColumn("CDF_UNIT_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_UNIT_NUM)
            Me.columnCDF_TEXTE = New Global.System.Data.DataColumn("CDF_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCDF_NUMERO_PK, Me.columnCDF_CODE_PK}, true))
            Me.columnCDF_NUMERO_PK.AllowDBNull = false
            Me.columnCDF_NUMERO_PK.MaxLength = 2
            Me.columnCDF_CODE_PK.AllowDBNull = false
            Me.columnCDF_CODE_PK.MaxLength = 10
            Me.columnCDF_NOM.AllowDBNull = false
            Me.columnCDF_NOM.MaxLength = 80
            Me.columnCDF_DATECR.AllowDBNull = false
            Me.columnCDF_NOMABRG.AllowDBNull = false
            Me.columnCDF_NOMABRG.MaxLength = 10
            Me.columnCDF_UNIT_NUM.AllowDBNull = false
            Me.columnCDF_UNIT_NUM.MaxLength = 50
            Me.columnCDF_TEXTE.AllowDBNull = false
            Me.columnCDF_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDF_CODIFRow() As CDF_CODIFRow
            Return CType(Me.NewRow,CDF_CODIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CDF_CODIFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CDF_CODIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDF_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowChanged(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDF_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowChanging(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDF_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowDeleted(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDF_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowDeleting(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDF_CODIFRow(ByVal row As CDF_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDF_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFCDFU_CDFUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCDFCDFU_CDFUCUM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCDFCDFU_CDF_NUMERO_FK_PK As Global.System.Data.DataColumn
        
        Private columnCDFCDFU_CDF_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFCDFU_CDFU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFCDFU_CDFUCUM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFCDFU_CDFUCUM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFCDFU_CDF_NUMERO_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFCDFU_CDF_NUMERO_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFCDFU_CDF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFCDFU_CDF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFCDFU_CDFURow
            Get
                Return CType(Me.Rows(index),CDFCDFU_CDFURow)
            End Get
        End Property
        
        Public Event CDFCDFU_CDFURowChanging As CDFCDFU_CDFURowChangeEventHandler
        
        Public Event CDFCDFU_CDFURowChanged As CDFCDFU_CDFURowChangeEventHandler
        
        Public Event CDFCDFU_CDFURowDeleting As CDFCDFU_CDFURowChangeEventHandler
        
        Public Event CDFCDFU_CDFURowDeleted As CDFCDFU_CDFURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFCDFU_CDFURow(ByVal row As CDFCDFU_CDFURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFCDFU_CDFURow(ByVal parentCDFUCUM_UCUMRowByFK__CDFCDFU_C__CDFCD__292D09F3 As CDFUCUM_UCUMRow, ByVal CDFCDFU_CDF_NUMERO_FK_PK As String, ByVal CDFCDFU_CDF_CODE_FK_PK As String) As CDFCDFU_CDFURow
            Dim rowCDFCDFU_CDFURow As CDFCDFU_CDFURow = CType(Me.NewRow,CDFCDFU_CDFURow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CDFCDFU_CDF_NUMERO_FK_PK, CDFCDFU_CDF_CODE_FK_PK}
            If (Not (parentCDFUCUM_UCUMRowByFK__CDFCDFU_C__CDFCD__292D09F3) Is Nothing) Then
                columnValuesArray(0) = parentCDFUCUM_UCUMRowByFK__CDFCDFU_C__CDFCD__292D09F3(0)
            End If
            rowCDFCDFU_CDFURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCDFCDFU_CDFURow)
            Return rowCDFCDFU_CDFURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CDFCDFU_CDFUDataTable = CType(MyBase.Clone,CDFCDFU_CDFUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CDFCDFU_CDFUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFCDFU_CDFUCUM_CODE_FK_PK = MyBase.Columns("CDFCDFU_CDFUCUM_CODE_FK_PK")
            Me.columnCDFCDFU_CDF_NUMERO_FK_PK = MyBase.Columns("CDFCDFU_CDF_NUMERO_FK_PK")
            Me.columnCDFCDFU_CDF_CODE_FK_PK = MyBase.Columns("CDFCDFU_CDF_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFCDFU_CDFUCUM_CODE_FK_PK = New Global.System.Data.DataColumn("CDFCDFU_CDFUCUM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFCDFU_CDFUCUM_CODE_FK_PK)
            Me.columnCDFCDFU_CDF_NUMERO_FK_PK = New Global.System.Data.DataColumn("CDFCDFU_CDF_NUMERO_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFCDFU_CDF_NUMERO_FK_PK)
            Me.columnCDFCDFU_CDF_CODE_FK_PK = New Global.System.Data.DataColumn("CDFCDFU_CDF_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFCDFU_CDF_CODE_FK_PK)
            Me.columnCDFCDFU_CDF_NUMERO_FK_PK.MaxLength = 2
            Me.columnCDFCDFU_CDF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFCDFU_CDFURow() As CDFCDFU_CDFURow
            Return CType(Me.NewRow,CDFCDFU_CDFURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CDFCDFU_CDFURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CDFCDFU_CDFURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFCDFU_CDFURowChangedEvent) Is Nothing) Then
                RaiseEvent CDFCDFU_CDFURowChanged(Me, New CDFCDFU_CDFURowChangeEvent(CType(e.Row,CDFCDFU_CDFURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFCDFU_CDFURowChangingEvent) Is Nothing) Then
                RaiseEvent CDFCDFU_CDFURowChanging(Me, New CDFCDFU_CDFURowChangeEvent(CType(e.Row,CDFCDFU_CDFURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFCDFU_CDFURowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFCDFU_CDFURowDeleted(Me, New CDFCDFU_CDFURowChangeEvent(CType(e.Row,CDFCDFU_CDFURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFCDFU_CDFURowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFCDFU_CDFURowDeleting(Me, New CDFCDFU_CDFURowChangeEvent(CType(e.Row,CDFCDFU_CDFURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFCDFU_CDFURow(ByVal row As CDFCDFU_CDFURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFCDFU_CDFUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CATVO_CATEGORIEVOIEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCATVO_CDF_CAT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnCATVO_CDF_VO_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CATVO_CATEGORIEVOIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATVO_CDF_CAT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATVO_CDF_CAT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATVO_CDF_VO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATVO_CDF_VO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CATVO_CATEGORIEVOIERow
            Get
                Return CType(Me.Rows(index),CATVO_CATEGORIEVOIERow)
            End Get
        End Property
        
        Public Event CATVO_CATEGORIEVOIERowChanging As CATVO_CATEGORIEVOIERowChangeEventHandler
        
        Public Event CATVO_CATEGORIEVOIERowChanged As CATVO_CATEGORIEVOIERowChangeEventHandler
        
        Public Event CATVO_CATEGORIEVOIERowDeleting As CATVO_CATEGORIEVOIERowChangeEventHandler
        
        Public Event CATVO_CATEGORIEVOIERowDeleted As CATVO_CATEGORIEVOIERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCATVO_CATEGORIEVOIERow(ByVal row As CATVO_CATEGORIEVOIERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCATVO_CATEGORIEVOIERow(ByVal CATVO_CDF_CAT_CODE_FK_PK As String, ByVal CATVO_CDF_VO_CODE_FK_PK As String) As CATVO_CATEGORIEVOIERow
            Dim rowCATVO_CATEGORIEVOIERow As CATVO_CATEGORIEVOIERow = CType(Me.NewRow,CATVO_CATEGORIEVOIERow)
            Dim columnValuesArray() As Object = New Object() {CATVO_CDF_CAT_CODE_FK_PK, CATVO_CDF_VO_CODE_FK_PK}
            rowCATVO_CATEGORIEVOIERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCATVO_CATEGORIEVOIERow)
            Return rowCATVO_CATEGORIEVOIERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCATVO_CDF_CAT_CODE_FK_PKCATVO_CDF_VO_CODE_FK_PK(ByVal CATVO_CDF_CAT_CODE_FK_PK As String, ByVal CATVO_CDF_VO_CODE_FK_PK As String) As CATVO_CATEGORIEVOIERow
            Return CType(Me.Rows.Find(New Object() {CATVO_CDF_CAT_CODE_FK_PK, CATVO_CDF_VO_CODE_FK_PK}),CATVO_CATEGORIEVOIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CATVO_CATEGORIEVOIEDataTable = CType(MyBase.Clone,CATVO_CATEGORIEVOIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CATVO_CATEGORIEVOIEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCATVO_CDF_CAT_CODE_FK_PK = MyBase.Columns("CATVO_CDF_CAT_CODE_FK_PK")
            Me.columnCATVO_CDF_VO_CODE_FK_PK = MyBase.Columns("CATVO_CDF_VO_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCATVO_CDF_CAT_CODE_FK_PK = New Global.System.Data.DataColumn("CATVO_CDF_CAT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATVO_CDF_CAT_CODE_FK_PK)
            Me.columnCATVO_CDF_VO_CODE_FK_PK = New Global.System.Data.DataColumn("CATVO_CDF_VO_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATVO_CDF_VO_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCATVO_CDF_CAT_CODE_FK_PK, Me.columnCATVO_CDF_VO_CODE_FK_PK}, true))
            Me.columnCATVO_CDF_CAT_CODE_FK_PK.AllowDBNull = false
            Me.columnCATVO_CDF_CAT_CODE_FK_PK.MaxLength = 10
            Me.columnCATVO_CDF_VO_CODE_FK_PK.AllowDBNull = false
            Me.columnCATVO_CDF_VO_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCATVO_CATEGORIEVOIERow() As CATVO_CATEGORIEVOIERow
            Return CType(Me.NewRow,CATVO_CATEGORIEVOIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CATVO_CATEGORIEVOIERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CATVO_CATEGORIEVOIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CATVO_CATEGORIEVOIERowChangedEvent) Is Nothing) Then
                RaiseEvent CATVO_CATEGORIEVOIERowChanged(Me, New CATVO_CATEGORIEVOIERowChangeEvent(CType(e.Row,CATVO_CATEGORIEVOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CATVO_CATEGORIEVOIERowChangingEvent) Is Nothing) Then
                RaiseEvent CATVO_CATEGORIEVOIERowChanging(Me, New CATVO_CATEGORIEVOIERowChangeEvent(CType(e.Row,CATVO_CATEGORIEVOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CATVO_CATEGORIEVOIERowDeletedEvent) Is Nothing) Then
                RaiseEvent CATVO_CATEGORIEVOIERowDeleted(Me, New CATVO_CATEGORIEVOIERowChangeEvent(CType(e.Row,CATVO_CATEGORIEVOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CATVO_CATEGORIEVOIERowDeletingEvent) Is Nothing) Then
                RaiseEvent CATVO_CATEGORIEVOIERowDeleting(Me, New CATVO_CATEGORIEVOIERowChangeEvent(CType(e.Row,CATVO_CATEGORIEVOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCATVO_CATEGORIEVOIERow(ByVal row As CATVO_CATEGORIEVOIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CATVO_CATEGORIEVOIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FOV_FORME_VIRTUELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFOV_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFOV_LIBELLE As Global.System.Data.DataColumn
        
        Private columnFOV_CODE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FOV_FORME_VIRTUELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOV_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOV_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOV_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOV_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOV_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOV_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FOV_FORME_VIRTUELLERow
            Get
                Return CType(Me.Rows(index),FOV_FORME_VIRTUELLERow)
            End Get
        End Property
        
        Public Event FOV_FORME_VIRTUELLERowChanging As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event FOV_FORME_VIRTUELLERowChanged As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event FOV_FORME_VIRTUELLERowDeleting As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event FOV_FORME_VIRTUELLERowDeleted As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFOV_FORME_VIRTUELLERow(ByVal row As FOV_FORME_VIRTUELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFOV_FORME_VIRTUELLERow(ByVal FOV_CODE_SQ_PK As Integer, ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String) As FOV_FORME_VIRTUELLERow
            Dim rowFOV_FORME_VIRTUELLERow As FOV_FORME_VIRTUELLERow = CType(Me.NewRow,FOV_FORME_VIRTUELLERow)
            Dim columnValuesArray() As Object = New Object() {FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF}
            rowFOV_FORME_VIRTUELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFOV_FORME_VIRTUELLERow)
            Return rowFOV_FORME_VIRTUELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFOV_CODE_SQ_PK(ByVal FOV_CODE_SQ_PK As Integer) As FOV_FORME_VIRTUELLERow
            Return CType(Me.Rows.Find(New Object() {FOV_CODE_SQ_PK}),FOV_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FOV_FORME_VIRTUELLEDataTable = CType(MyBase.Clone,FOV_FORME_VIRTUELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FOV_FORME_VIRTUELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFOV_CODE_SQ_PK = MyBase.Columns("FOV_CODE_SQ_PK")
            Me.columnFOV_LIBELLE = MyBase.Columns("FOV_LIBELLE")
            Me.columnFOV_CODE_REF = MyBase.Columns("FOV_CODE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFOV_CODE_SQ_PK = New Global.System.Data.DataColumn("FOV_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOV_CODE_SQ_PK)
            Me.columnFOV_LIBELLE = New Global.System.Data.DataColumn("FOV_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOV_LIBELLE)
            Me.columnFOV_CODE_REF = New Global.System.Data.DataColumn("FOV_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOV_CODE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFOV_CODE_SQ_PK}, true))
            Me.columnFOV_CODE_SQ_PK.AllowDBNull = false
            Me.columnFOV_CODE_SQ_PK.Unique = true
            Me.columnFOV_LIBELLE.MaxLength = 50
            Me.columnFOV_CODE_REF.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFOV_FORME_VIRTUELLERow() As FOV_FORME_VIRTUELLERow
            Return CType(Me.NewRow,FOV_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FOV_FORME_VIRTUELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FOV_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowChangedEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowChanged(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowChangingEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowChanging(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowDeleted(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowDeleting(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFOV_FORME_VIRTUELLERow(ByVal row As FOV_FORME_VIRTUELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FOV_FORME_VIRTUELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAV_SUBSTANCE_VIRTUELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSAV_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSAV_LIBELLE As Global.System.Data.DataColumn
        
        Private columnSAV_CODE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAV_SUBSTANCE_VIRTUELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAV_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAV_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAV_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAV_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAV_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAV_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.Rows(index),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
        End Property
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowChanging As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowChanged As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowDeleting As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowDeleted As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAV_SUBSTANCE_VIRTUELLERow(ByVal row As SAV_SUBSTANCE_VIRTUELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAV_SUBSTANCE_VIRTUELLERow(ByVal SAV_CODE_SQ_PK As Integer, ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String) As SAV_SUBSTANCE_VIRTUELLERow
            Dim rowSAV_SUBSTANCE_VIRTUELLERow As SAV_SUBSTANCE_VIRTUELLERow = CType(Me.NewRow,SAV_SUBSTANCE_VIRTUELLERow)
            Dim columnValuesArray() As Object = New Object() {SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF}
            rowSAV_SUBSTANCE_VIRTUELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAV_SUBSTANCE_VIRTUELLERow)
            Return rowSAV_SUBSTANCE_VIRTUELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAV_CODE_SQ_PK(ByVal SAV_CODE_SQ_PK As Integer) As SAV_SUBSTANCE_VIRTUELLERow
            Return CType(Me.Rows.Find(New Object() {SAV_CODE_SQ_PK}),SAV_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAV_SUBSTANCE_VIRTUELLEDataTable = CType(MyBase.Clone,SAV_SUBSTANCE_VIRTUELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAV_SUBSTANCE_VIRTUELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAV_CODE_SQ_PK = MyBase.Columns("SAV_CODE_SQ_PK")
            Me.columnSAV_LIBELLE = MyBase.Columns("SAV_LIBELLE")
            Me.columnSAV_CODE_REF = MyBase.Columns("SAV_CODE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAV_CODE_SQ_PK = New Global.System.Data.DataColumn("SAV_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAV_CODE_SQ_PK)
            Me.columnSAV_LIBELLE = New Global.System.Data.DataColumn("SAV_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAV_LIBELLE)
            Me.columnSAV_CODE_REF = New Global.System.Data.DataColumn("SAV_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAV_CODE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSAV_CODE_SQ_PK}, true))
            Me.columnSAV_CODE_SQ_PK.AllowDBNull = false
            Me.columnSAV_CODE_SQ_PK.Unique = true
            Me.columnSAV_LIBELLE.MaxLength = 50
            Me.columnSAV_CODE_REF.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Return CType(Me.NewRow,SAV_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAV_SUBSTANCE_VIRTUELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAV_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowChangedEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowChanged(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowChangingEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowChanging(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowDeleted(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowDeleting(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAV_SUBSTANCE_VIRTUELLERow(ByVal row As SAV_SUBSTANCE_VIRTUELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAV_SUBSTANCE_VIRTUELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPF_MED_VIR_PERE_FORMEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPF_GSP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPF_FOV_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPF_MED_VIR_PERE_FORME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPF_GSP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPF_GSP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPF_FOV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPF_FOV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPF_MED_VIR_PERE_FORMERow
            Get
                Return CType(Me.Rows(index),MVPF_MED_VIR_PERE_FORMERow)
            End Get
        End Property
        
        Public Event MVPF_MED_VIR_PERE_FORMERowChanging As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        Public Event MVPF_MED_VIR_PERE_FORMERowChanged As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        Public Event MVPF_MED_VIR_PERE_FORMERowDeleting As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        Public Event MVPF_MED_VIR_PERE_FORMERowDeleted As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPF_MED_VIR_PERE_FORMERow(ByVal row As MVPF_MED_VIR_PERE_FORMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPF_MED_VIR_PERE_FORMERow(ByVal parentGSP_GENERIQUE_SPECIALITERowByFK_GSP1 As GSP_GENERIQUE_SPECIALITERow, ByVal parentFOV_FORME_VIRTUELLERowByFOV_FORME_VIRTUELLE_MVPF As FOV_FORME_VIRTUELLERow) As MVPF_MED_VIR_PERE_FORMERow
            Dim rowMVPF_MED_VIR_PERE_FORMERow As MVPF_MED_VIR_PERE_FORMERow = CType(Me.NewRow,MVPF_MED_VIR_PERE_FORMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing}
            If (Not (parentGSP_GENERIQUE_SPECIALITERowByFK_GSP1) Is Nothing) Then
                columnValuesArray(0) = parentGSP_GENERIQUE_SPECIALITERowByFK_GSP1(0)
            End If
            If (Not (parentFOV_FORME_VIRTUELLERowByFOV_FORME_VIRTUELLE_MVPF) Is Nothing) Then
                columnValuesArray(1) = parentFOV_FORME_VIRTUELLERowByFOV_FORME_VIRTUELLE_MVPF(0)
            End If
            rowMVPF_MED_VIR_PERE_FORMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPF_MED_VIR_PERE_FORMERow)
            Return rowMVPF_MED_VIR_PERE_FORMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPF_GSP_CODE_FK_PKMVPF_FOV_CODE_FK_PK(ByVal MVPF_GSP_CODE_FK_PK As Integer, ByVal MVPF_FOV_CODE_FK_PK As Integer) As MVPF_MED_VIR_PERE_FORMERow
            Return CType(Me.Rows.Find(New Object() {MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK}),MVPF_MED_VIR_PERE_FORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPF_MED_VIR_PERE_FORMEDataTable = CType(MyBase.Clone,MVPF_MED_VIR_PERE_FORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPF_MED_VIR_PERE_FORMEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPF_GSP_CODE_FK_PK = MyBase.Columns("MVPF_GSP_CODE_FK_PK")
            Me.columnMVPF_FOV_CODE_FK_PK = MyBase.Columns("MVPF_FOV_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPF_GSP_CODE_FK_PK = New Global.System.Data.DataColumn("MVPF_GSP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPF_GSP_CODE_FK_PK)
            Me.columnMVPF_FOV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPF_FOV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPF_FOV_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPF_GSP_CODE_FK_PK, Me.columnMVPF_FOV_CODE_FK_PK}, true))
            Me.columnMVPF_GSP_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPF_FOV_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPF_MED_VIR_PERE_FORMERow() As MVPF_MED_VIR_PERE_FORMERow
            Return CType(Me.NewRow,MVPF_MED_VIR_PERE_FORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPF_MED_VIR_PERE_FORMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPF_MED_VIR_PERE_FORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowChangedEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowChanged(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowChangingEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowChanging(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowDeleted(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowDeleting(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPF_MED_VIR_PERE_FORMERow(ByVal row As MVPF_MED_VIR_PERE_FORMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPF_MED_VIR_PERE_FORMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFUCUM_UCUMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCDFUCUM_CODE_PK As Global.System.Data.DataColumn
        
        Private columnCDFUCUM_SYMBOLE As Global.System.Data.DataColumn
        
        Private columnCDFUCUM_DATECR As Global.System.Data.DataColumn
        
        Private columnCDFUCUM_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFUCUM_UCUM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFUCUM_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFUCUM_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFUCUM_SYMBOLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFUCUM_SYMBOLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFUCUM_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFUCUM_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFUCUM_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDFUCUM_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFUCUM_UCUMRow
            Get
                Return CType(Me.Rows(index),CDFUCUM_UCUMRow)
            End Get
        End Property
        
        Public Event CDFUCUM_UCUMRowChanging As CDFUCUM_UCUMRowChangeEventHandler
        
        Public Event CDFUCUM_UCUMRowChanged As CDFUCUM_UCUMRowChangeEventHandler
        
        Public Event CDFUCUM_UCUMRowDeleting As CDFUCUM_UCUMRowChangeEventHandler
        
        Public Event CDFUCUM_UCUMRowDeleted As CDFUCUM_UCUMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFUCUM_UCUMRow(ByVal row As CDFUCUM_UCUMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFUCUM_UCUMRow(ByVal CDFUCUM_SYMBOLE As String, ByVal CDFUCUM_DATECR As Date, ByVal CDFUCUM_DATEMJ As Date) As CDFUCUM_UCUMRow
            Dim rowCDFUCUM_UCUMRow As CDFUCUM_UCUMRow = CType(Me.NewRow,CDFUCUM_UCUMRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CDFUCUM_SYMBOLE, CDFUCUM_DATECR, CDFUCUM_DATEMJ}
            rowCDFUCUM_UCUMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCDFUCUM_UCUMRow)
            Return rowCDFUCUM_UCUMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDFUCUM_CODE_PK(ByVal CDFUCUM_CODE_PK As Integer) As CDFUCUM_UCUMRow
            Return CType(Me.Rows.Find(New Object() {CDFUCUM_CODE_PK}),CDFUCUM_UCUMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CDFUCUM_UCUMDataTable = CType(MyBase.Clone,CDFUCUM_UCUMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CDFUCUM_UCUMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFUCUM_CODE_PK = MyBase.Columns("CDFUCUM_CODE_PK")
            Me.columnCDFUCUM_SYMBOLE = MyBase.Columns("CDFUCUM_SYMBOLE")
            Me.columnCDFUCUM_DATECR = MyBase.Columns("CDFUCUM_DATECR")
            Me.columnCDFUCUM_DATEMJ = MyBase.Columns("CDFUCUM_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFUCUM_CODE_PK = New Global.System.Data.DataColumn("CDFUCUM_CODE_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFUCUM_CODE_PK)
            Me.columnCDFUCUM_SYMBOLE = New Global.System.Data.DataColumn("CDFUCUM_SYMBOLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFUCUM_SYMBOLE)
            Me.columnCDFUCUM_DATECR = New Global.System.Data.DataColumn("CDFUCUM_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFUCUM_DATECR)
            Me.columnCDFUCUM_DATEMJ = New Global.System.Data.DataColumn("CDFUCUM_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFUCUM_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCDFUCUM_CODE_PK}, true))
            Me.columnCDFUCUM_CODE_PK.AutoIncrement = true
            Me.columnCDFUCUM_CODE_PK.AllowDBNull = false
            Me.columnCDFUCUM_CODE_PK.ReadOnly = true
            Me.columnCDFUCUM_CODE_PK.Unique = true
            Me.columnCDFUCUM_SYMBOLE.AllowDBNull = false
            Me.columnCDFUCUM_SYMBOLE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFUCUM_UCUMRow() As CDFUCUM_UCUMRow
            Return CType(Me.NewRow,CDFUCUM_UCUMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CDFUCUM_UCUMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CDFUCUM_UCUMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFUCUM_UCUMRowChangedEvent) Is Nothing) Then
                RaiseEvent CDFUCUM_UCUMRowChanged(Me, New CDFUCUM_UCUMRowChangeEvent(CType(e.Row,CDFUCUM_UCUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFUCUM_UCUMRowChangingEvent) Is Nothing) Then
                RaiseEvent CDFUCUM_UCUMRowChanging(Me, New CDFUCUM_UCUMRowChangeEvent(CType(e.Row,CDFUCUM_UCUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFUCUM_UCUMRowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFUCUM_UCUMRowDeleted(Me, New CDFUCUM_UCUMRowChangeEvent(CType(e.Row,CDFUCUM_UCUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFUCUM_UCUMRowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFUCUM_UCUMRowDeleting(Me, New CDFUCUM_UCUMRowChangeEvent(CType(e.Row,CDFUCUM_UCUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFUCUM_UCUMRow(ByVal row As CDFUCUM_UCUMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFUCUM_UCUMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPR_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnMVPR_DATECR As Global.System.Data.DataColumn
        
        Private columnMVPR_DATEMJ As Global.System.Data.DataColumn
        
        Private columnMVPR_LIBELLE As Global.System.Data.DataColumn
        
        Private columnMVPR_ETAT_DISPO As Global.System.Data.DataColumn
        
        Private columnMVPR_DATE_DISPO As Global.System.Data.DataColumn
        
        Private columnMVPR_DATE_RETRAIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPR_MEDICAMENT_VIRTUEL_PERE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_ETAT_DISPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_ETAT_DISPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_DATE_DISPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_DATE_DISPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPR_DATE_RETRAITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPR_DATE_RETRAIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Get
                Return CType(Me.Rows(index),MVPR_MEDICAMENT_VIRTUEL_PERERow)
            End Get
        End Property
        
        Public Event MVPR_MEDICAMENT_VIRTUEL_PERERowChanging As MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEventHandler
        
        Public Event MVPR_MEDICAMENT_VIRTUEL_PERERowChanged As MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEventHandler
        
        Public Event MVPR_MEDICAMENT_VIRTUEL_PERERowDeleting As MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEventHandler
        
        Public Event MVPR_MEDICAMENT_VIRTUEL_PERERowDeleted As MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPR_MEDICAMENT_VIRTUEL_PERERow(ByVal row As MVPR_MEDICAMENT_VIRTUEL_PERERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPR_MEDICAMENT_VIRTUEL_PERERow(ByVal MVPR_CODE_SQ_PK As Integer, ByVal MVPR_DATECR As Date, ByVal MVPR_DATEMJ As Date, ByVal MVPR_LIBELLE As String, ByVal MVPR_ETAT_DISPO As String, ByVal MVPR_DATE_DISPO As Date, ByVal MVPR_DATE_RETRAIT As Date) As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Dim rowMVPR_MEDICAMENT_VIRTUEL_PERERow As MVPR_MEDICAMENT_VIRTUEL_PERERow = CType(Me.NewRow,MVPR_MEDICAMENT_VIRTUEL_PERERow)
            Dim columnValuesArray() As Object = New Object() {MVPR_CODE_SQ_PK, MVPR_DATECR, MVPR_DATEMJ, MVPR_LIBELLE, MVPR_ETAT_DISPO, MVPR_DATE_DISPO, MVPR_DATE_RETRAIT}
            rowMVPR_MEDICAMENT_VIRTUEL_PERERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPR_MEDICAMENT_VIRTUEL_PERERow)
            Return rowMVPR_MEDICAMENT_VIRTUEL_PERERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPR_CODE_SQ_PK(ByVal MVPR_CODE_SQ_PK As Integer) As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Return CType(Me.Rows.Find(New Object() {MVPR_CODE_SQ_PK}),MVPR_MEDICAMENT_VIRTUEL_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPR_MEDICAMENT_VIRTUEL_PEREDataTable = CType(MyBase.Clone,MVPR_MEDICAMENT_VIRTUEL_PEREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPR_CODE_SQ_PK = MyBase.Columns("MVPR_CODE_SQ_PK")
            Me.columnMVPR_DATECR = MyBase.Columns("MVPR_DATECR")
            Me.columnMVPR_DATEMJ = MyBase.Columns("MVPR_DATEMJ")
            Me.columnMVPR_LIBELLE = MyBase.Columns("MVPR_LIBELLE")
            Me.columnMVPR_ETAT_DISPO = MyBase.Columns("MVPR_ETAT_DISPO")
            Me.columnMVPR_DATE_DISPO = MyBase.Columns("MVPR_DATE_DISPO")
            Me.columnMVPR_DATE_RETRAIT = MyBase.Columns("MVPR_DATE_RETRAIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPR_CODE_SQ_PK = New Global.System.Data.DataColumn("MVPR_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_CODE_SQ_PK)
            Me.columnMVPR_DATECR = New Global.System.Data.DataColumn("MVPR_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_DATECR)
            Me.columnMVPR_DATEMJ = New Global.System.Data.DataColumn("MVPR_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_DATEMJ)
            Me.columnMVPR_LIBELLE = New Global.System.Data.DataColumn("MVPR_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_LIBELLE)
            Me.columnMVPR_ETAT_DISPO = New Global.System.Data.DataColumn("MVPR_ETAT_DISPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_ETAT_DISPO)
            Me.columnMVPR_DATE_DISPO = New Global.System.Data.DataColumn("MVPR_DATE_DISPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_DATE_DISPO)
            Me.columnMVPR_DATE_RETRAIT = New Global.System.Data.DataColumn("MVPR_DATE_RETRAIT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPR_DATE_RETRAIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPR_CODE_SQ_PK}, true))
            Me.columnMVPR_CODE_SQ_PK.AllowDBNull = false
            Me.columnMVPR_CODE_SQ_PK.Unique = true
            Me.columnMVPR_DATECR.AllowDBNull = false
            Me.columnMVPR_DATEMJ.AllowDBNull = false
            Me.columnMVPR_LIBELLE.MaxLength = 255
            Me.columnMVPR_ETAT_DISPO.AllowDBNull = false
            Me.columnMVPR_ETAT_DISPO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPR_MEDICAMENT_VIRTUEL_PERERow() As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Return CType(Me.NewRow,MVPR_MEDICAMENT_VIRTUEL_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPR_MEDICAMENT_VIRTUEL_PERERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPR_MEDICAMENT_VIRTUEL_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPR_MEDICAMENT_VIRTUEL_PERERowChangedEvent) Is Nothing) Then
                RaiseEvent MVPR_MEDICAMENT_VIRTUEL_PERERowChanged(Me, New MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEvent(CType(e.Row,MVPR_MEDICAMENT_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPR_MEDICAMENT_VIRTUEL_PERERowChangingEvent) Is Nothing) Then
                RaiseEvent MVPR_MEDICAMENT_VIRTUEL_PERERowChanging(Me, New MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEvent(CType(e.Row,MVPR_MEDICAMENT_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPR_MEDICAMENT_VIRTUEL_PERERowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPR_MEDICAMENT_VIRTUEL_PERERowDeleted(Me, New MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEvent(CType(e.Row,MVPR_MEDICAMENT_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPR_MEDICAMENT_VIRTUEL_PERERowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPR_MEDICAMENT_VIRTUEL_PERERowDeleting(Me, New MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEvent(CType(e.Row,MVPR_MEDICAMENT_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPR_MEDICAMENT_VIRTUEL_PERERow(ByVal row As MVPR_MEDICAMENT_VIRTUEL_PERERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPR_MEDICAMENT_VIRTUEL_PEREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYMVPR_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSYMVPR_MVPR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSYMVPR_LIBELLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYMVPR_SYN_MEDIC_VIRTUEL_PERE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYMVPR_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYMVPR_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYMVPR_MVPR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYMVPR_MVPR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYMVPR_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYMVPR_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
            Get
                Return CType(Me.Rows(index),SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
            End Get
        End Property
        
        Public Event SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChanging As SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEventHandler
        
        Public Event SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChanged As SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEventHandler
        
        Public Event SYMVPR_SYN_MEDIC_VIRTUEL_PERERowDeleting As SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEventHandler
        
        Public Event SYMVPR_SYN_MEDIC_VIRTUEL_PERERowDeleted As SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYMVPR_SYN_MEDIC_VIRTUEL_PERERow(ByVal row As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYMVPR_SYN_MEDIC_VIRTUEL_PERERow(ByVal SYMVPR_CODE_SQ_PK As Integer, ByVal parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__SYMVPR_SY__SYMVP__3A5795F5 As MVPR_MEDICAMENT_VIRTUEL_PERERow, ByVal SYMVPR_LIBELLE As String) As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
            Dim rowSYMVPR_SYN_MEDIC_VIRTUEL_PERERow As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow = CType(Me.NewRow,SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
            Dim columnValuesArray() As Object = New Object() {SYMVPR_CODE_SQ_PK, Nothing, SYMVPR_LIBELLE}
            If (Not (parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__SYMVPR_SY__SYMVP__3A5795F5) Is Nothing) Then
                columnValuesArray(1) = parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__SYMVPR_SY__SYMVP__3A5795F5(0)
            End If
            rowSYMVPR_SYN_MEDIC_VIRTUEL_PERERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
            Return rowSYMVPR_SYN_MEDIC_VIRTUEL_PERERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYMVPR_CODE_SQ_PK(ByVal SYMVPR_CODE_SQ_PK As Integer) As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
            Return CType(Me.Rows.Find(New Object() {SYMVPR_CODE_SQ_PK}),SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable = CType(MyBase.Clone,SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYMVPR_CODE_SQ_PK = MyBase.Columns("SYMVPR_CODE_SQ_PK")
            Me.columnSYMVPR_MVPR_CODE_FK_PK = MyBase.Columns("SYMVPR_MVPR_CODE_FK_PK")
            Me.columnSYMVPR_LIBELLE = MyBase.Columns("SYMVPR_LIBELLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYMVPR_CODE_SQ_PK = New Global.System.Data.DataColumn("SYMVPR_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYMVPR_CODE_SQ_PK)
            Me.columnSYMVPR_MVPR_CODE_FK_PK = New Global.System.Data.DataColumn("SYMVPR_MVPR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYMVPR_MVPR_CODE_FK_PK)
            Me.columnSYMVPR_LIBELLE = New Global.System.Data.DataColumn("SYMVPR_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYMVPR_LIBELLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYMVPR_CODE_SQ_PK}, true))
            Me.columnSYMVPR_CODE_SQ_PK.AllowDBNull = false
            Me.columnSYMVPR_CODE_SQ_PK.Unique = true
            Me.columnSYMVPR_LIBELLE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYMVPR_SYN_MEDIC_VIRTUEL_PERERow() As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
            Return CType(Me.NewRow,SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYMVPR_SYN_MEDIC_VIRTUEL_PERERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangedEvent) Is Nothing) Then
                RaiseEvent SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChanged(Me, New SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEvent(CType(e.Row,SYMVPR_SYN_MEDIC_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangingEvent) Is Nothing) Then
                RaiseEvent SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChanging(Me, New SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEvent(CType(e.Row,SYMVPR_SYN_MEDIC_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYMVPR_SYN_MEDIC_VIRTUEL_PERERowDeletedEvent) Is Nothing) Then
                RaiseEvent SYMVPR_SYN_MEDIC_VIRTUEL_PERERowDeleted(Me, New SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEvent(CType(e.Row,SYMVPR_SYN_MEDIC_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYMVPR_SYN_MEDIC_VIRTUEL_PERERowDeletingEvent) Is Nothing) Then
                RaiseEvent SYMVPR_SYN_MEDIC_VIRTUEL_PERERowDeleting(Me, New SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEvent(CType(e.Row,SYMVPR_SYN_MEDIC_VIRTUEL_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYMVPR_SYN_MEDIC_VIRTUEL_PERERow(ByVal row As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPRMV_MED_VIR_VIR_PEREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPRMV_MVPR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPRMV_MV_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPRMV_MED_VIR_VIR_PERE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRMV_MVPR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRMV_MVPR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRMV_MV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRMV_MV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPRMV_MED_VIR_VIR_PERERow
            Get
                Return CType(Me.Rows(index),MVPRMV_MED_VIR_VIR_PERERow)
            End Get
        End Property
        
        Public Event MVPRMV_MED_VIR_VIR_PERERowChanging As MVPRMV_MED_VIR_VIR_PERERowChangeEventHandler
        
        Public Event MVPRMV_MED_VIR_VIR_PERERowChanged As MVPRMV_MED_VIR_VIR_PERERowChangeEventHandler
        
        Public Event MVPRMV_MED_VIR_VIR_PERERowDeleting As MVPRMV_MED_VIR_VIR_PERERowChangeEventHandler
        
        Public Event MVPRMV_MED_VIR_VIR_PERERowDeleted As MVPRMV_MED_VIR_VIR_PERERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPRMV_MED_VIR_VIR_PERERow(ByVal row As MVPRMV_MED_VIR_VIR_PERERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPRMV_MED_VIR_VIR_PERERow(ByVal parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRMV_ME__MVPRM__3E2826D9 As MVPR_MEDICAMENT_VIRTUEL_PERERow, ByVal MVPRMV_MV_CODE_FK_PK As Integer) As MVPRMV_MED_VIR_VIR_PERERow
            Dim rowMVPRMV_MED_VIR_VIR_PERERow As MVPRMV_MED_VIR_VIR_PERERow = CType(Me.NewRow,MVPRMV_MED_VIR_VIR_PERERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MVPRMV_MV_CODE_FK_PK}
            If (Not (parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRMV_ME__MVPRM__3E2826D9) Is Nothing) Then
                columnValuesArray(0) = parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRMV_ME__MVPRM__3E2826D9(0)
            End If
            rowMVPRMV_MED_VIR_VIR_PERERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPRMV_MED_VIR_VIR_PERERow)
            Return rowMVPRMV_MED_VIR_VIR_PERERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPRMV_MVPR_CODE_FK_PKMVPRMV_MV_CODE_FK_PK(ByVal MVPRMV_MVPR_CODE_FK_PK As Integer, ByVal MVPRMV_MV_CODE_FK_PK As Integer) As MVPRMV_MED_VIR_VIR_PERERow
            Return CType(Me.Rows.Find(New Object() {MVPRMV_MVPR_CODE_FK_PK, MVPRMV_MV_CODE_FK_PK}),MVPRMV_MED_VIR_VIR_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPRMV_MED_VIR_VIR_PEREDataTable = CType(MyBase.Clone,MVPRMV_MED_VIR_VIR_PEREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPRMV_MED_VIR_VIR_PEREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPRMV_MVPR_CODE_FK_PK = MyBase.Columns("MVPRMV_MVPR_CODE_FK_PK")
            Me.columnMVPRMV_MV_CODE_FK_PK = MyBase.Columns("MVPRMV_MV_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPRMV_MVPR_CODE_FK_PK = New Global.System.Data.DataColumn("MVPRMV_MVPR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRMV_MVPR_CODE_FK_PK)
            Me.columnMVPRMV_MV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPRMV_MV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRMV_MV_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPRMV_MVPR_CODE_FK_PK, Me.columnMVPRMV_MV_CODE_FK_PK}, true))
            Me.columnMVPRMV_MVPR_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPRMV_MV_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPRMV_MED_VIR_VIR_PERERow() As MVPRMV_MED_VIR_VIR_PERERow
            Return CType(Me.NewRow,MVPRMV_MED_VIR_VIR_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPRMV_MED_VIR_VIR_PERERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPRMV_MED_VIR_VIR_PERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPRMV_MED_VIR_VIR_PERERowChangedEvent) Is Nothing) Then
                RaiseEvent MVPRMV_MED_VIR_VIR_PERERowChanged(Me, New MVPRMV_MED_VIR_VIR_PERERowChangeEvent(CType(e.Row,MVPRMV_MED_VIR_VIR_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPRMV_MED_VIR_VIR_PERERowChangingEvent) Is Nothing) Then
                RaiseEvent MVPRMV_MED_VIR_VIR_PERERowChanging(Me, New MVPRMV_MED_VIR_VIR_PERERowChangeEvent(CType(e.Row,MVPRMV_MED_VIR_VIR_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPRMV_MED_VIR_VIR_PERERowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPRMV_MED_VIR_VIR_PERERowDeleted(Me, New MVPRMV_MED_VIR_VIR_PERERowChangeEvent(CType(e.Row,MVPRMV_MED_VIR_VIR_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPRMV_MED_VIR_VIR_PERERowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPRMV_MED_VIR_VIR_PERERowDeleting(Me, New MVPRMV_MED_VIR_VIR_PERERowChangeEvent(CType(e.Row,MVPRMV_MED_VIR_VIR_PERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPRMV_MED_VIR_VIR_PERERow(ByVal row As MVPRMV_MED_VIR_VIR_PERERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPRMV_MED_VIR_VIR_PEREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPRSAV_MVPR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPRSAV_SAV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPRSAV_NUM_ORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRSAV_MVPR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRSAV_MVPR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRSAV_SAV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRSAV_SAV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRSAV_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRSAV_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.Rows(index),MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
            End Get
        End Property
        
        Public Event MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChanging As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChanged As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowDeleting As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowDeleted As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow(ByVal row As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow(ByVal parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRSAV_M__MVPRS__42ECDBF6 As MVPR_MEDICAMENT_VIRTUEL_PERERow, ByVal parentSAV_SUBSTANCE_VIRTUELLERowByFK__MVPRSAV_M__MVPRS__43E1002F As SAV_SUBSTANCE_VIRTUELLERow, ByVal MVPRSAV_NUM_ORD As Integer) As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
            Dim rowMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow = CType(Me.NewRow,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, MVPRSAV_NUM_ORD}
            If (Not (parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRSAV_M__MVPRS__42ECDBF6) Is Nothing) Then
                columnValuesArray(0) = parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRSAV_M__MVPRS__42ECDBF6(0)
            End If
            If (Not (parentSAV_SUBSTANCE_VIRTUELLERowByFK__MVPRSAV_M__MVPRS__43E1002F) Is Nothing) Then
                columnValuesArray(1) = parentSAV_SUBSTANCE_VIRTUELLERowByFK__MVPRSAV_M__MVPRS__43E1002F(0)
            End If
            rowMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
            Return rowMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPRSAV_MVPR_CODE_FK_PKMVPRSAV_SAV_CODE_FK_PK(ByVal MVPRSAV_MVPR_CODE_FK_PK As Integer, ByVal MVPRSAV_SAV_CODE_FK_PK As Integer) As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
            Return CType(Me.Rows.Find(New Object() {MVPRSAV_MVPR_CODE_FK_PK, MVPRSAV_SAV_CODE_FK_PK}),MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable = CType(MyBase.Clone,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPRSAV_MVPR_CODE_FK_PK = MyBase.Columns("MVPRSAV_MVPR_CODE_FK_PK")
            Me.columnMVPRSAV_SAV_CODE_FK_PK = MyBase.Columns("MVPRSAV_SAV_CODE_FK_PK")
            Me.columnMVPRSAV_NUM_ORD = MyBase.Columns("MVPRSAV_NUM_ORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPRSAV_MVPR_CODE_FK_PK = New Global.System.Data.DataColumn("MVPRSAV_MVPR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRSAV_MVPR_CODE_FK_PK)
            Me.columnMVPRSAV_SAV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPRSAV_SAV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRSAV_SAV_CODE_FK_PK)
            Me.columnMVPRSAV_NUM_ORD = New Global.System.Data.DataColumn("MVPRSAV_NUM_ORD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRSAV_NUM_ORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPRSAV_MVPR_CODE_FK_PK, Me.columnMVPRSAV_SAV_CODE_FK_PK}, true))
            Me.columnMVPRSAV_MVPR_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPRSAV_SAV_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow() As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
            Return CType(Me.NewRow,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangedEvent) Is Nothing) Then
                RaiseEvent MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChanged(Me, New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangingEvent) Is Nothing) Then
                RaiseEvent MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChanging(Me, New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowDeleted(Me, New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowDeleting(Me, New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow(ByVal row As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPRFOV_MVPR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPRFOV_FOV_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRFOV_MVPR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRFOV_MVPR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPRFOV_FOV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPRFOV_FOV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
            Get
                Return CType(Me.Rows(index),MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
            End Get
        End Property
        
        Public Event MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChanging As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChanged As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowDeleting As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowDeleted As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow(ByVal row As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow(ByVal parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRFOV_M__MVPRF__46BD6CDA As MVPR_MEDICAMENT_VIRTUEL_PERERow, ByVal parentFOV_FORME_VIRTUELLERowByFK__MVPRFOV_M__MVPRF__47B19113 As FOV_FORME_VIRTUELLERow) As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
            Dim rowMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow = CType(Me.NewRow,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing}
            If (Not (parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRFOV_M__MVPRF__46BD6CDA) Is Nothing) Then
                columnValuesArray(0) = parentMVPR_MEDICAMENT_VIRTUEL_PERERowByFK__MVPRFOV_M__MVPRF__46BD6CDA(0)
            End If
            If (Not (parentFOV_FORME_VIRTUELLERowByFK__MVPRFOV_M__MVPRF__47B19113) Is Nothing) Then
                columnValuesArray(1) = parentFOV_FORME_VIRTUELLERowByFK__MVPRFOV_M__MVPRF__47B19113(0)
            End If
            rowMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
            Return rowMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPRFOV_MVPR_CODE_FK_PKMVPRFOV_FOV_CODE_FK_PK(ByVal MVPRFOV_MVPR_CODE_FK_PK As Integer, ByVal MVPRFOV_FOV_CODE_FK_PK As Integer) As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
            Return CType(Me.Rows.Find(New Object() {MVPRFOV_MVPR_CODE_FK_PK, MVPRFOV_FOV_CODE_FK_PK}),MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable = CType(MyBase.Clone,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPRFOV_MVPR_CODE_FK_PK = MyBase.Columns("MVPRFOV_MVPR_CODE_FK_PK")
            Me.columnMVPRFOV_FOV_CODE_FK_PK = MyBase.Columns("MVPRFOV_FOV_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPRFOV_MVPR_CODE_FK_PK = New Global.System.Data.DataColumn("MVPRFOV_MVPR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRFOV_MVPR_CODE_FK_PK)
            Me.columnMVPRFOV_FOV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPRFOV_FOV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPRFOV_FOV_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPRFOV_MVPR_CODE_FK_PK, Me.columnMVPRFOV_FOV_CODE_FK_PK}, true))
            Me.columnMVPRFOV_MVPR_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPRFOV_FOV_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow() As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
            Return CType(Me.NewRow,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangedEvent) Is Nothing) Then
                RaiseEvent MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChanged(Me, New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEvent(CType(e.Row,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangingEvent) Is Nothing) Then
                RaiseEvent MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChanging(Me, New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEvent(CType(e.Row,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowDeleted(Me, New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEvent(CType(e.Row,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowDeleting(Me, New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEvent(CType(e.Row,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow(ByVal row As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUNITFACTEQ_CDF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnUNITFACTEQ_REF_CDF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnUNITFACTEQ_CDF_NUM_FK_PK As Global.System.Data.DataColumn
        
        Private columnUNITFACTEQ_FACTEQ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UNITFACTEQ_FACTEUR_EQUIVALENCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITFACTEQ_CDF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNITFACTEQ_CDF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITFACTEQ_REF_CDF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITFACTEQ_CDF_NUM_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNITFACTEQ_CDF_NUM_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITFACTEQ_FACTEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNITFACTEQ_FACTEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UNITFACTEQ_FACTEUR_EQUIVALENCERow
            Get
                Return CType(Me.Rows(index),UNITFACTEQ_FACTEUR_EQUIVALENCERow)
            End Get
        End Property
        
        Public Event UNITFACTEQ_FACTEUR_EQUIVALENCERowChanging As UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEventHandler
        
        Public Event UNITFACTEQ_FACTEUR_EQUIVALENCERowChanged As UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEventHandler
        
        Public Event UNITFACTEQ_FACTEUR_EQUIVALENCERowDeleting As UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEventHandler
        
        Public Event UNITFACTEQ_FACTEUR_EQUIVALENCERowDeleted As UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUNITFACTEQ_FACTEUR_EQUIVALENCERow(ByVal row As UNITFACTEQ_FACTEUR_EQUIVALENCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUNITFACTEQ_FACTEUR_EQUIVALENCERow(ByVal UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal UNITFACTEQ_FACTEQ As Decimal) As UNITFACTEQ_FACTEUR_EQUIVALENCERow
            Dim rowUNITFACTEQ_FACTEUR_EQUIVALENCERow As UNITFACTEQ_FACTEUR_EQUIVALENCERow = CType(Me.NewRow,UNITFACTEQ_FACTEUR_EQUIVALENCERow)
            Dim columnValuesArray() As Object = New Object() {UNITFACTEQ_CDF_CODE_FK_PK, UNITFACTEQ_REF_CDF_CODE_FK_PK, UNITFACTEQ_CDF_NUM_FK_PK, UNITFACTEQ_FACTEQ}
            rowUNITFACTEQ_FACTEUR_EQUIVALENCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUNITFACTEQ_FACTEUR_EQUIVALENCERow)
            Return rowUNITFACTEQ_FACTEUR_EQUIVALENCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUNITFACTEQ_CDF_CODE_FK_PKUNITFACTEQ_REF_CDF_CODE_FK_PKUNITFACTEQ_CDF_NUM_FK_PKUNITFACTEQ_FACTEQ(ByVal UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal UNITFACTEQ_FACTEQ As Decimal) As UNITFACTEQ_FACTEUR_EQUIVALENCERow
            Return CType(Me.Rows.Find(New Object() {UNITFACTEQ_CDF_CODE_FK_PK, UNITFACTEQ_REF_CDF_CODE_FK_PK, UNITFACTEQ_CDF_NUM_FK_PK, UNITFACTEQ_FACTEQ}),UNITFACTEQ_FACTEUR_EQUIVALENCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable = CType(MyBase.Clone,UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUNITFACTEQ_CDF_CODE_FK_PK = MyBase.Columns("UNITFACTEQ_CDF_CODE_FK_PK")
            Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK = MyBase.Columns("UNITFACTEQ_REF_CDF_CODE_FK_PK")
            Me.columnUNITFACTEQ_CDF_NUM_FK_PK = MyBase.Columns("UNITFACTEQ_CDF_NUM_FK_PK")
            Me.columnUNITFACTEQ_FACTEQ = MyBase.Columns("UNITFACTEQ_FACTEQ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUNITFACTEQ_CDF_CODE_FK_PK = New Global.System.Data.DataColumn("UNITFACTEQ_CDF_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNITFACTEQ_CDF_CODE_FK_PK)
            Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK = New Global.System.Data.DataColumn("UNITFACTEQ_REF_CDF_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK)
            Me.columnUNITFACTEQ_CDF_NUM_FK_PK = New Global.System.Data.DataColumn("UNITFACTEQ_CDF_NUM_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNITFACTEQ_CDF_NUM_FK_PK)
            Me.columnUNITFACTEQ_FACTEQ = New Global.System.Data.DataColumn("UNITFACTEQ_FACTEQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNITFACTEQ_FACTEQ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUNITFACTEQ_CDF_CODE_FK_PK, Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK, Me.columnUNITFACTEQ_CDF_NUM_FK_PK, Me.columnUNITFACTEQ_FACTEQ}, true))
            Me.columnUNITFACTEQ_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnUNITFACTEQ_CDF_CODE_FK_PK.MaxLength = 10
            Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnUNITFACTEQ_REF_CDF_CODE_FK_PK.MaxLength = 10
            Me.columnUNITFACTEQ_CDF_NUM_FK_PK.AllowDBNull = false
            Me.columnUNITFACTEQ_CDF_NUM_FK_PK.MaxLength = 2
            Me.columnUNITFACTEQ_FACTEQ.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUNITFACTEQ_FACTEUR_EQUIVALENCERow() As UNITFACTEQ_FACTEUR_EQUIVALENCERow
            Return CType(Me.NewRow,UNITFACTEQ_FACTEUR_EQUIVALENCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UNITFACTEQ_FACTEUR_EQUIVALENCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UNITFACTEQ_FACTEUR_EQUIVALENCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UNITFACTEQ_FACTEUR_EQUIVALENCERowChangedEvent) Is Nothing) Then
                RaiseEvent UNITFACTEQ_FACTEUR_EQUIVALENCERowChanged(Me, New UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEvent(CType(e.Row,UNITFACTEQ_FACTEUR_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UNITFACTEQ_FACTEUR_EQUIVALENCERowChangingEvent) Is Nothing) Then
                RaiseEvent UNITFACTEQ_FACTEUR_EQUIVALENCERowChanging(Me, New UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEvent(CType(e.Row,UNITFACTEQ_FACTEUR_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UNITFACTEQ_FACTEUR_EQUIVALENCERowDeletedEvent) Is Nothing) Then
                RaiseEvent UNITFACTEQ_FACTEUR_EQUIVALENCERowDeleted(Me, New UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEvent(CType(e.Row,UNITFACTEQ_FACTEUR_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UNITFACTEQ_FACTEUR_EQUIVALENCERowDeletingEvent) Is Nothing) Then
                RaiseEvent UNITFACTEQ_FACTEUR_EQUIVALENCERowDeleting(Me, New UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEvent(CType(e.Row,UNITFACTEQ_FACTEUR_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUNITFACTEQ_FACTEUR_EQUIVALENCERow(ByVal row As UNITFACTEQ_FACTEUR_EQUIVALENCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GSP_GENERIQUE_SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGSP_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnGSP_NOM As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_VIRTUEL As Global.System.Data.DataColumn
        
        Private columnGSP_DATECR As Global.System.Data.DataColumn
        
        Private columnGSP_DATEMJ As Global.System.Data.DataColumn
        
        Private columnGSP_PRESCRIPTION_DC As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_SP_REFERENCE As Global.System.Data.DataColumn
        
        Private columnGSP_INFO_GENERAL_TEXTE As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_VIRTUEL13 As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_REF As Global.System.Data.DataColumn
        
        Private columnGSP_ETAT_DISPO As Global.System.Data.DataColumn
        
        Private columnGSP_DATE_DISPO As Global.System.Data.DataColumn
        
        Private columnGSP_DATE_RETRAIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GSP_GENERIQUE_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_VIRTUELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_VIRTUEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_PRESCRIPTION_DCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_PRESCRIPTION_DC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_SP_REFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_SP_REFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_INFO_GENERAL_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_INFO_GENERAL_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_VIRTUEL13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_VIRTUEL13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_ETAT_DISPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_ETAT_DISPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_DATE_DISPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_DATE_DISPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_DATE_RETRAITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_DATE_RETRAIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GSP_GENERIQUE_SPECIALITERow
            Get
                Return CType(Me.Rows(index),GSP_GENERIQUE_SPECIALITERow)
            End Get
        End Property
        
        Public Event GSP_GENERIQUE_SPECIALITERowChanging As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        Public Event GSP_GENERIQUE_SPECIALITERowChanged As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        Public Event GSP_GENERIQUE_SPECIALITERowDeleting As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        Public Event GSP_GENERIQUE_SPECIALITERowDeleted As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGSP_GENERIQUE_SPECIALITERow(ByVal row As GSP_GENERIQUE_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGSP_GENERIQUE_SPECIALITERow(ByVal GSP_CODE_SQ_PK As Integer, ByVal GSP_NOM As String, ByVal GSP_CODE_VIRTUEL As String, ByVal GSP_DATECR As Date, ByVal GSP_DATEMJ As Date, ByVal GSP_PRESCRIPTION_DC As Boolean, ByVal GSP_CODE_SP_REFERENCE As Integer, ByVal GSP_INFO_GENERAL_TEXTE As String, ByVal GSP_CODE_VIRTUEL13 As String, ByVal GSP_CODE_REF As String, ByVal GSP_ETAT_DISPO As String, ByVal GSP_DATE_DISPO As Date, ByVal GSP_DATE_RETRAIT As Date) As GSP_GENERIQUE_SPECIALITERow
            Dim rowGSP_GENERIQUE_SPECIALITERow As GSP_GENERIQUE_SPECIALITERow = CType(Me.NewRow,GSP_GENERIQUE_SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_REF, GSP_ETAT_DISPO, GSP_DATE_DISPO, GSP_DATE_RETRAIT}
            rowGSP_GENERIQUE_SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGSP_GENERIQUE_SPECIALITERow)
            Return rowGSP_GENERIQUE_SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGSP_CODE_SQ_PK(ByVal GSP_CODE_SQ_PK As Integer) As GSP_GENERIQUE_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {GSP_CODE_SQ_PK}),GSP_GENERIQUE_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GSP_GENERIQUE_SPECIALITEDataTable = CType(MyBase.Clone,GSP_GENERIQUE_SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GSP_GENERIQUE_SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGSP_CODE_SQ_PK = MyBase.Columns("GSP_CODE_SQ_PK")
            Me.columnGSP_NOM = MyBase.Columns("GSP_NOM")
            Me.columnGSP_CODE_VIRTUEL = MyBase.Columns("GSP_CODE_VIRTUEL")
            Me.columnGSP_DATECR = MyBase.Columns("GSP_DATECR")
            Me.columnGSP_DATEMJ = MyBase.Columns("GSP_DATEMJ")
            Me.columnGSP_PRESCRIPTION_DC = MyBase.Columns("GSP_PRESCRIPTION_DC")
            Me.columnGSP_CODE_SP_REFERENCE = MyBase.Columns("GSP_CODE_SP_REFERENCE")
            Me.columnGSP_INFO_GENERAL_TEXTE = MyBase.Columns("GSP_INFO_GENERAL_TEXTE")
            Me.columnGSP_CODE_VIRTUEL13 = MyBase.Columns("GSP_CODE_VIRTUEL13")
            Me.columnGSP_CODE_REF = MyBase.Columns("GSP_CODE_REF")
            Me.columnGSP_ETAT_DISPO = MyBase.Columns("GSP_ETAT_DISPO")
            Me.columnGSP_DATE_DISPO = MyBase.Columns("GSP_DATE_DISPO")
            Me.columnGSP_DATE_RETRAIT = MyBase.Columns("GSP_DATE_RETRAIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGSP_CODE_SQ_PK = New Global.System.Data.DataColumn("GSP_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_SQ_PK)
            Me.columnGSP_NOM = New Global.System.Data.DataColumn("GSP_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_NOM)
            Me.columnGSP_CODE_VIRTUEL = New Global.System.Data.DataColumn("GSP_CODE_VIRTUEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_VIRTUEL)
            Me.columnGSP_DATECR = New Global.System.Data.DataColumn("GSP_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_DATECR)
            Me.columnGSP_DATEMJ = New Global.System.Data.DataColumn("GSP_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_DATEMJ)
            Me.columnGSP_PRESCRIPTION_DC = New Global.System.Data.DataColumn("GSP_PRESCRIPTION_DC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_PRESCRIPTION_DC)
            Me.columnGSP_CODE_SP_REFERENCE = New Global.System.Data.DataColumn("GSP_CODE_SP_REFERENCE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_SP_REFERENCE)
            Me.columnGSP_INFO_GENERAL_TEXTE = New Global.System.Data.DataColumn("GSP_INFO_GENERAL_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_INFO_GENERAL_TEXTE)
            Me.columnGSP_CODE_VIRTUEL13 = New Global.System.Data.DataColumn("GSP_CODE_VIRTUEL13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_VIRTUEL13)
            Me.columnGSP_CODE_REF = New Global.System.Data.DataColumn("GSP_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_REF)
            Me.columnGSP_ETAT_DISPO = New Global.System.Data.DataColumn("GSP_ETAT_DISPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_ETAT_DISPO)
            Me.columnGSP_DATE_DISPO = New Global.System.Data.DataColumn("GSP_DATE_DISPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_DATE_DISPO)
            Me.columnGSP_DATE_RETRAIT = New Global.System.Data.DataColumn("GSP_DATE_RETRAIT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_DATE_RETRAIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGSP_CODE_SQ_PK}, true))
            Me.columnGSP_CODE_SQ_PK.AllowDBNull = false
            Me.columnGSP_CODE_SQ_PK.Unique = true
            Me.columnGSP_NOM.AllowDBNull = false
            Me.columnGSP_NOM.MaxLength = 255
            Me.columnGSP_CODE_VIRTUEL.MaxLength = 7
            Me.columnGSP_DATECR.AllowDBNull = false
            Me.columnGSP_INFO_GENERAL_TEXTE.MaxLength = 4000
            Me.columnGSP_CODE_VIRTUEL13.MaxLength = 13
            Me.columnGSP_CODE_REF.MaxLength = 13
            Me.columnGSP_ETAT_DISPO.AllowDBNull = false
            Me.columnGSP_ETAT_DISPO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGSP_GENERIQUE_SPECIALITERow() As GSP_GENERIQUE_SPECIALITERow
            Return CType(Me.NewRow,GSP_GENERIQUE_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GSP_GENERIQUE_SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GSP_GENERIQUE_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowChanged(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowChanging(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowDeleted(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowDeleting(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGSP_GENERIQUE_SPECIALITERow(ByVal row As GSP_GENERIQUE_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GSP_GENERIQUE_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPSDU_MED_VIR_PERE_SADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPSDU_GSP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPSDU_SAV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPSDU_DOSAGE As Global.System.Data.DataColumn
        
        Private columnMVPSDU_CDF_UNITE As Global.System.Data.DataColumn
        
        Private columnMVPSDU_CODE_ANSM As Global.System.Data.DataColumn
        
        Private columnMVPSDU_NUM_ORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPSDU_MED_VIR_PERE_SA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_GSP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_GSP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_SAV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_SAV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_DOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_CDF_UNITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_CDF_UNITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_CODE_ANSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_CODE_ANSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPSDU_MED_VIR_PERE_SARow
            Get
                Return CType(Me.Rows(index),MVPSDU_MED_VIR_PERE_SARow)
            End Get
        End Property
        
        Public Event MVPSDU_MED_VIR_PERE_SARowChanging As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        Public Event MVPSDU_MED_VIR_PERE_SARowChanged As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        Public Event MVPSDU_MED_VIR_PERE_SARowDeleting As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        Public Event MVPSDU_MED_VIR_PERE_SARowDeleted As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPSDU_MED_VIR_PERE_SARow(ByVal row As MVPSDU_MED_VIR_PERE_SARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPSDU_MED_VIR_PERE_SARow(ByVal parentGSP_GENERIQUE_SPECIALITERowByFK_GSP As GSP_GENERIQUE_SPECIALITERow, ByVal parentSAV_SUBSTANCE_VIRTUELLERowByFK_SAV As SAV_SUBSTANCE_VIRTUELLERow, ByVal MVPSDU_DOSAGE As Decimal, ByVal MVPSDU_CDF_UNITE As Integer, ByVal MVPSDU_CODE_ANSM As String, ByVal MVPSDU_NUM_ORD As Integer) As MVPSDU_MED_VIR_PERE_SARow
            Dim rowMVPSDU_MED_VIR_PERE_SARow As MVPSDU_MED_VIR_PERE_SARow = CType(Me.NewRow,MVPSDU_MED_VIR_PERE_SARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, MVPSDU_CODE_ANSM, MVPSDU_NUM_ORD}
            If (Not (parentGSP_GENERIQUE_SPECIALITERowByFK_GSP) Is Nothing) Then
                columnValuesArray(0) = parentGSP_GENERIQUE_SPECIALITERowByFK_GSP(0)
            End If
            If (Not (parentSAV_SUBSTANCE_VIRTUELLERowByFK_SAV) Is Nothing) Then
                columnValuesArray(1) = parentSAV_SUBSTANCE_VIRTUELLERowByFK_SAV(0)
            End If
            rowMVPSDU_MED_VIR_PERE_SARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPSDU_MED_VIR_PERE_SARow)
            Return rowMVPSDU_MED_VIR_PERE_SARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPSDU_GSP_CODE_FK_PKMVPSDU_SAV_CODE_FK_PK(ByVal MVPSDU_GSP_CODE_FK_PK As Integer, ByVal MVPSDU_SAV_CODE_FK_PK As Integer) As MVPSDU_MED_VIR_PERE_SARow
            Return CType(Me.Rows.Find(New Object() {MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK}),MVPSDU_MED_VIR_PERE_SARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPSDU_MED_VIR_PERE_SADataTable = CType(MyBase.Clone,MVPSDU_MED_VIR_PERE_SADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPSDU_MED_VIR_PERE_SADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPSDU_GSP_CODE_FK_PK = MyBase.Columns("MVPSDU_GSP_CODE_FK_PK")
            Me.columnMVPSDU_SAV_CODE_FK_PK = MyBase.Columns("MVPSDU_SAV_CODE_FK_PK")
            Me.columnMVPSDU_DOSAGE = MyBase.Columns("MVPSDU_DOSAGE")
            Me.columnMVPSDU_CDF_UNITE = MyBase.Columns("MVPSDU_CDF_UNITE")
            Me.columnMVPSDU_CODE_ANSM = MyBase.Columns("MVPSDU_CODE_ANSM")
            Me.columnMVPSDU_NUM_ORD = MyBase.Columns("MVPSDU_NUM_ORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPSDU_GSP_CODE_FK_PK = New Global.System.Data.DataColumn("MVPSDU_GSP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_GSP_CODE_FK_PK)
            Me.columnMVPSDU_SAV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPSDU_SAV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_SAV_CODE_FK_PK)
            Me.columnMVPSDU_DOSAGE = New Global.System.Data.DataColumn("MVPSDU_DOSAGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_DOSAGE)
            Me.columnMVPSDU_CDF_UNITE = New Global.System.Data.DataColumn("MVPSDU_CDF_UNITE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_CDF_UNITE)
            Me.columnMVPSDU_CODE_ANSM = New Global.System.Data.DataColumn("MVPSDU_CODE_ANSM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_CODE_ANSM)
            Me.columnMVPSDU_NUM_ORD = New Global.System.Data.DataColumn("MVPSDU_NUM_ORD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_NUM_ORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPSDU_GSP_CODE_FK_PK, Me.columnMVPSDU_SAV_CODE_FK_PK}, true))
            Me.columnMVPSDU_GSP_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPSDU_SAV_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPSDU_CODE_ANSM.MaxLength = 13
            Me.columnMVPSDU_NUM_ORD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPSDU_MED_VIR_PERE_SARow() As MVPSDU_MED_VIR_PERE_SARow
            Return CType(Me.NewRow,MVPSDU_MED_VIR_PERE_SARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPSDU_MED_VIR_PERE_SARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPSDU_MED_VIR_PERE_SARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowChangedEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowChanged(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowChangingEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowChanging(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowDeleted(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowDeleting(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPSDU_MED_VIR_PERE_SARow(ByVal row As MVPSDU_MED_VIR_PERE_SARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPSDU_MED_VIR_PERE_SADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREDISPMAX_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_PRE_CIP13 As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_MAXUCD As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_MAXCIP As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_CDF_TYPE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDISPMAX_PRE_DISP_MAXIMALE1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_PRE_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_PRE_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_MAXUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_MAXUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_MAXCIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_MAXCIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_CDF_TYPE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_CDF_TYPE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDISPMAX_PRE_DISP_MAXIMALE1Row
            Get
                Return CType(Me.Rows(index),PREDISPMAX_PRE_DISP_MAXIMALE1Row)
            End Get
        End Property
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALE1RowChanging As PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEventHandler
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALE1RowChanged As PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEventHandler
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALE1RowDeleting As PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEventHandler
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALE1RowDeleted As PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDISPMAX_PRE_DISP_MAXIMALE1Row(ByVal row As PREDISPMAX_PRE_DISP_MAXIMALE1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDISPMAX_PRE_DISP_MAXIMALE1Row(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Decimal, ByVal PREDISPMAX_MAXCIP As Decimal, ByVal PREDISPMAX_CDF_TYPE_FK_PK As String) As PREDISPMAX_PRE_DISP_MAXIMALE1Row
            Dim rowPREDISPMAX_PRE_DISP_MAXIMALE1Row As PREDISPMAX_PRE_DISP_MAXIMALE1Row = CType(Me.NewRow,PREDISPMAX_PRE_DISP_MAXIMALE1Row)
            Dim columnValuesArray() As Object = New Object() {PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK}
            rowPREDISPMAX_PRE_DISP_MAXIMALE1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDISPMAX_PRE_DISP_MAXIMALE1Row)
            Return rowPREDISPMAX_PRE_DISP_MAXIMALE1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREDISPMAX_PRE_CODE_FK_PKPREDISPMAX_CDF_TYPE_FK_PK(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_CDF_TYPE_FK_PK As String) As PREDISPMAX_PRE_DISP_MAXIMALE1Row
            Return CType(Me.Rows.Find(New Object() {PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_CDF_TYPE_FK_PK}),PREDISPMAX_PRE_DISP_MAXIMALE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDISPMAX_PRE_DISP_MAXIMALE1DataTable = CType(MyBase.Clone,PREDISPMAX_PRE_DISP_MAXIMALE1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREDISPMAX_PRE_CODE_FK_PK = MyBase.Columns("PREDISPMAX_PRE_CODE_FK_PK")
            Me.columnPREDISPMAX_PRE_CIP13 = MyBase.Columns("PREDISPMAX_PRE_CIP13")
            Me.columnPREDISPMAX_MAXUCD = MyBase.Columns("PREDISPMAX_MAXUCD")
            Me.columnPREDISPMAX_MAXCIP = MyBase.Columns("PREDISPMAX_MAXCIP")
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK = MyBase.Columns("PREDISPMAX_CDF_TYPE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREDISPMAX_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREDISPMAX_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_PRE_CODE_FK_PK)
            Me.columnPREDISPMAX_PRE_CIP13 = New Global.System.Data.DataColumn("PREDISPMAX_PRE_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_PRE_CIP13)
            Me.columnPREDISPMAX_MAXUCD = New Global.System.Data.DataColumn("PREDISPMAX_MAXUCD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_MAXUCD)
            Me.columnPREDISPMAX_MAXCIP = New Global.System.Data.DataColumn("PREDISPMAX_MAXCIP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_MAXCIP)
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK = New Global.System.Data.DataColumn("PREDISPMAX_CDF_TYPE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_CDF_TYPE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREDISPMAX_PRE_CODE_FK_PK, Me.columnPREDISPMAX_CDF_TYPE_FK_PK}, true))
            Me.columnPREDISPMAX_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDISPMAX_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREDISPMAX_PRE_CIP13.MaxLength = 13
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK.AllowDBNull = false
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDISPMAX_PRE_DISP_MAXIMALE1Row() As PREDISPMAX_PRE_DISP_MAXIMALE1Row
            Return CType(Me.NewRow,PREDISPMAX_PRE_DISP_MAXIMALE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDISPMAX_PRE_DISP_MAXIMALE1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDISPMAX_PRE_DISP_MAXIMALE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALE1RowChangedEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALE1RowChanged(Me, New PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALE1RowChangingEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALE1RowChanging(Me, New PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALE1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALE1RowDeleted(Me, New PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALE1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALE1RowDeleting(Me, New PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDISPMAX_PRE_DISP_MAXIMALE1Row(ByVal row As PREDISPMAX_PRE_DISP_MAXIMALE1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDISPMAX_PRE_DISP_MAXIMALE1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDISP_PRE_DISPENSATIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREDISP_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDISP_NUMSEQ_PK As Global.System.Data.DataColumn
        
        Private columnPREDISP_SAC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPREDISP_UNITEDISP As Global.System.Data.DataColumn
        
        Private columnPREDISP_CDF_UD_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPREDISP_CIP13 As Global.System.Data.DataColumn
        
        Private columnPREDISP_DOSEFRAC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDISP_PRE_DISPENSATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_NUMSEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_NUMSEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_SAC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_SAC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_UNITEDISPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_UNITEDISP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_CDF_UD_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_CDF_UD_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISP_DOSEFRACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISP_DOSEFRAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDISP_PRE_DISPENSATIONRow
            Get
                Return CType(Me.Rows(index),PREDISP_PRE_DISPENSATIONRow)
            End Get
        End Property
        
        Public Event PREDISP_PRE_DISPENSATIONRowChanging As PREDISP_PRE_DISPENSATIONRowChangeEventHandler
        
        Public Event PREDISP_PRE_DISPENSATIONRowChanged As PREDISP_PRE_DISPENSATIONRowChangeEventHandler
        
        Public Event PREDISP_PRE_DISPENSATIONRowDeleting As PREDISP_PRE_DISPENSATIONRowChangeEventHandler
        
        Public Event PREDISP_PRE_DISPENSATIONRowDeleted As PREDISP_PRE_DISPENSATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDISP_PRE_DISPENSATIONRow(ByVal row As PREDISP_PRE_DISPENSATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDISP_PRE_DISPENSATIONRow(ByVal PREDISP_PRE_CODE_FK_PK As String, ByVal PREDISP_NUMSEQ_PK As Byte, ByVal PREDISP_SAC_CODE_FK As Integer, ByVal PREDISP_UNITEDISP As Decimal, ByVal PREDISP_CDF_UD_CODE_FK As String, ByVal PREDISP_CIP13 As String, ByVal PREDISP_DOSEFRAC As Decimal) As PREDISP_PRE_DISPENSATIONRow
            Dim rowPREDISP_PRE_DISPENSATIONRow As PREDISP_PRE_DISPENSATIONRow = CType(Me.NewRow,PREDISP_PRE_DISPENSATIONRow)
            Dim columnValuesArray() As Object = New Object() {PREDISP_PRE_CODE_FK_PK, PREDISP_NUMSEQ_PK, PREDISP_SAC_CODE_FK, PREDISP_UNITEDISP, PREDISP_CDF_UD_CODE_FK, PREDISP_CIP13, PREDISP_DOSEFRAC}
            rowPREDISP_PRE_DISPENSATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDISP_PRE_DISPENSATIONRow)
            Return rowPREDISP_PRE_DISPENSATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREDISP_PRE_CODE_FK_PKPREDISP_NUMSEQ_PK(ByVal PREDISP_PRE_CODE_FK_PK As String, ByVal PREDISP_NUMSEQ_PK As Byte) As PREDISP_PRE_DISPENSATIONRow
            Return CType(Me.Rows.Find(New Object() {PREDISP_PRE_CODE_FK_PK, PREDISP_NUMSEQ_PK}),PREDISP_PRE_DISPENSATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDISP_PRE_DISPENSATIONDataTable = CType(MyBase.Clone,PREDISP_PRE_DISPENSATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDISP_PRE_DISPENSATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREDISP_PRE_CODE_FK_PK = MyBase.Columns("PREDISP_PRE_CODE_FK_PK")
            Me.columnPREDISP_NUMSEQ_PK = MyBase.Columns("PREDISP_NUMSEQ_PK")
            Me.columnPREDISP_SAC_CODE_FK = MyBase.Columns("PREDISP_SAC_CODE_FK")
            Me.columnPREDISP_UNITEDISP = MyBase.Columns("PREDISP_UNITEDISP")
            Me.columnPREDISP_CDF_UD_CODE_FK = MyBase.Columns("PREDISP_CDF_UD_CODE_FK")
            Me.columnPREDISP_CIP13 = MyBase.Columns("PREDISP_CIP13")
            Me.columnPREDISP_DOSEFRAC = MyBase.Columns("PREDISP_DOSEFRAC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREDISP_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREDISP_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_PRE_CODE_FK_PK)
            Me.columnPREDISP_NUMSEQ_PK = New Global.System.Data.DataColumn("PREDISP_NUMSEQ_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_NUMSEQ_PK)
            Me.columnPREDISP_SAC_CODE_FK = New Global.System.Data.DataColumn("PREDISP_SAC_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_SAC_CODE_FK)
            Me.columnPREDISP_UNITEDISP = New Global.System.Data.DataColumn("PREDISP_UNITEDISP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_UNITEDISP)
            Me.columnPREDISP_CDF_UD_CODE_FK = New Global.System.Data.DataColumn("PREDISP_CDF_UD_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_CDF_UD_CODE_FK)
            Me.columnPREDISP_CIP13 = New Global.System.Data.DataColumn("PREDISP_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_CIP13)
            Me.columnPREDISP_DOSEFRAC = New Global.System.Data.DataColumn("PREDISP_DOSEFRAC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISP_DOSEFRAC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREDISP_PRE_CODE_FK_PK, Me.columnPREDISP_NUMSEQ_PK}, true))
            Me.columnPREDISP_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDISP_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREDISP_NUMSEQ_PK.AllowDBNull = false
            Me.columnPREDISP_UNITEDISP.AllowDBNull = false
            Me.columnPREDISP_CDF_UD_CODE_FK.AllowDBNull = false
            Me.columnPREDISP_CDF_UD_CODE_FK.MaxLength = 10
            Me.columnPREDISP_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDISP_PRE_DISPENSATIONRow() As PREDISP_PRE_DISPENSATIONRow
            Return CType(Me.NewRow,PREDISP_PRE_DISPENSATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDISP_PRE_DISPENSATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDISP_PRE_DISPENSATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDISP_PRE_DISPENSATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PREDISP_PRE_DISPENSATIONRowChanged(Me, New PREDISP_PRE_DISPENSATIONRowChangeEvent(CType(e.Row,PREDISP_PRE_DISPENSATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDISP_PRE_DISPENSATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PREDISP_PRE_DISPENSATIONRowChanging(Me, New PREDISP_PRE_DISPENSATIONRowChangeEvent(CType(e.Row,PREDISP_PRE_DISPENSATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDISP_PRE_DISPENSATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDISP_PRE_DISPENSATIONRowDeleted(Me, New PREDISP_PRE_DISPENSATIONRowChangeEvent(CType(e.Row,PREDISP_PRE_DISPENSATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDISP_PRE_DISPENSATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDISP_PRE_DISPENSATIONRowDeleting(Me, New PREDISP_PRE_DISPENSATIONRowChangeEvent(CType(e.Row,PREDISP_PRE_DISPENSATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDISP_PRE_DISPENSATIONRow(ByVal row As PREDISP_PRE_DISPENSATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDISP_PRE_DISPENSATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREVOLSOL_VOLUME_SOLUTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREVOLSOL_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREVOLSOL_VOLSOLUTION As Global.System.Data.DataColumn
        
        Private columnPREVOLSOL_CDF_VOL_CODE_FK As Global.System.Data.DataColumn
        
        Private columnPREVOLSOL_CIP13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREVOLSOL_VOLUME_SOLUTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREVOLSOL_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREVOLSOL_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREVOLSOL_VOLSOLUTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREVOLSOL_VOLSOLUTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREVOLSOL_CDF_VOL_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREVOLSOL_CDF_VOL_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREVOLSOL_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREVOLSOL_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREVOLSOL_VOLUME_SOLUTIONRow
            Get
                Return CType(Me.Rows(index),PREVOLSOL_VOLUME_SOLUTIONRow)
            End Get
        End Property
        
        Public Event PREVOLSOL_VOLUME_SOLUTIONRowChanging As PREVOLSOL_VOLUME_SOLUTIONRowChangeEventHandler
        
        Public Event PREVOLSOL_VOLUME_SOLUTIONRowChanged As PREVOLSOL_VOLUME_SOLUTIONRowChangeEventHandler
        
        Public Event PREVOLSOL_VOLUME_SOLUTIONRowDeleting As PREVOLSOL_VOLUME_SOLUTIONRowChangeEventHandler
        
        Public Event PREVOLSOL_VOLUME_SOLUTIONRowDeleted As PREVOLSOL_VOLUME_SOLUTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREVOLSOL_VOLUME_SOLUTIONRow(ByVal row As PREVOLSOL_VOLUME_SOLUTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREVOLSOL_VOLUME_SOLUTIONRow(ByVal PREVOLSOL_PRE_CODE_FK_PK As String, ByVal PREVOLSOL_VOLSOLUTION As Decimal, ByVal PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal PREVOLSOL_CIP13 As String) As PREVOLSOL_VOLUME_SOLUTIONRow
            Dim rowPREVOLSOL_VOLUME_SOLUTIONRow As PREVOLSOL_VOLUME_SOLUTIONRow = CType(Me.NewRow,PREVOLSOL_VOLUME_SOLUTIONRow)
            Dim columnValuesArray() As Object = New Object() {PREVOLSOL_PRE_CODE_FK_PK, PREVOLSOL_VOLSOLUTION, PREVOLSOL_CDF_VOL_CODE_FK, PREVOLSOL_CIP13}
            rowPREVOLSOL_VOLUME_SOLUTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREVOLSOL_VOLUME_SOLUTIONRow)
            Return rowPREVOLSOL_VOLUME_SOLUTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREVOLSOL_PRE_CODE_FK_PK(ByVal PREVOLSOL_PRE_CODE_FK_PK As String) As PREVOLSOL_VOLUME_SOLUTIONRow
            Return CType(Me.Rows.Find(New Object() {PREVOLSOL_PRE_CODE_FK_PK}),PREVOLSOL_VOLUME_SOLUTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREVOLSOL_VOLUME_SOLUTIONDataTable = CType(MyBase.Clone,PREVOLSOL_VOLUME_SOLUTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREVOLSOL_VOLUME_SOLUTIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREVOLSOL_PRE_CODE_FK_PK = MyBase.Columns("PREVOLSOL_PRE_CODE_FK_PK")
            Me.columnPREVOLSOL_VOLSOLUTION = MyBase.Columns("PREVOLSOL_VOLSOLUTION")
            Me.columnPREVOLSOL_CDF_VOL_CODE_FK = MyBase.Columns("PREVOLSOL_CDF_VOL_CODE_FK")
            Me.columnPREVOLSOL_CIP13 = MyBase.Columns("PREVOLSOL_CIP13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREVOLSOL_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREVOLSOL_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREVOLSOL_PRE_CODE_FK_PK)
            Me.columnPREVOLSOL_VOLSOLUTION = New Global.System.Data.DataColumn("PREVOLSOL_VOLSOLUTION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREVOLSOL_VOLSOLUTION)
            Me.columnPREVOLSOL_CDF_VOL_CODE_FK = New Global.System.Data.DataColumn("PREVOLSOL_CDF_VOL_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREVOLSOL_CDF_VOL_CODE_FK)
            Me.columnPREVOLSOL_CIP13 = New Global.System.Data.DataColumn("PREVOLSOL_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREVOLSOL_CIP13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREVOLSOL_PRE_CODE_FK_PK}, true))
            Me.columnPREVOLSOL_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREVOLSOL_PRE_CODE_FK_PK.Unique = true
            Me.columnPREVOLSOL_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREVOLSOL_CDF_VOL_CODE_FK.MaxLength = 10
            Me.columnPREVOLSOL_CIP13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREVOLSOL_VOLUME_SOLUTIONRow() As PREVOLSOL_VOLUME_SOLUTIONRow
            Return CType(Me.NewRow,PREVOLSOL_VOLUME_SOLUTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREVOLSOL_VOLUME_SOLUTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREVOLSOL_VOLUME_SOLUTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREVOLSOL_VOLUME_SOLUTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PREVOLSOL_VOLUME_SOLUTIONRowChanged(Me, New PREVOLSOL_VOLUME_SOLUTIONRowChangeEvent(CType(e.Row,PREVOLSOL_VOLUME_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREVOLSOL_VOLUME_SOLUTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PREVOLSOL_VOLUME_SOLUTIONRowChanging(Me, New PREVOLSOL_VOLUME_SOLUTIONRowChangeEvent(CType(e.Row,PREVOLSOL_VOLUME_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREVOLSOL_VOLUME_SOLUTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PREVOLSOL_VOLUME_SOLUTIONRowDeleted(Me, New PREVOLSOL_VOLUME_SOLUTIONRowChangeEvent(CType(e.Row,PREVOLSOL_VOLUME_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREVOLSOL_VOLUME_SOLUTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PREVOLSOL_VOLUME_SOLUTIONRowDeleting(Me, New PREVOLSOL_VOLUME_SOLUTIONRowChangeEvent(CType(e.Row,PREVOLSOL_VOLUME_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREVOLSOL_VOLUME_SOLUTIONRow(ByVal row As PREVOLSOL_VOLUME_SOLUTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREVOLSOL_VOLUME_SOLUTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDISPMAX_PRE_DISP_MAXIMALEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPREDISPMAX_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_PRE_CIP13 As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_MAXUCD As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_MAXCIP As Global.System.Data.DataColumn
        
        Private columnPREDISPMAX_CDF_TYPE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDISPMAX_PRE_DISP_MAXIMALE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_PRE_CIP13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_PRE_CIP13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_MAXUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_MAXUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_MAXCIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_MAXCIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREDISPMAX_CDF_TYPE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDISPMAX_CDF_TYPE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDISPMAX_PRE_DISP_MAXIMALERow
            Get
                Return CType(Me.Rows(index),PREDISPMAX_PRE_DISP_MAXIMALERow)
            End Get
        End Property
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALERowChanging As PREDISPMAX_PRE_DISP_MAXIMALERowChangeEventHandler
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALERowChanged As PREDISPMAX_PRE_DISP_MAXIMALERowChangeEventHandler
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALERowDeleting As PREDISPMAX_PRE_DISP_MAXIMALERowChangeEventHandler
        
        Public Event PREDISPMAX_PRE_DISP_MAXIMALERowDeleted As PREDISPMAX_PRE_DISP_MAXIMALERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDISPMAX_PRE_DISP_MAXIMALERow(ByVal row As PREDISPMAX_PRE_DISP_MAXIMALERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDISPMAX_PRE_DISP_MAXIMALERow(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Decimal, ByVal PREDISPMAX_MAXCIP As Decimal, ByVal PREDISPMAX_CDF_TYPE_FK_PK As String) As PREDISPMAX_PRE_DISP_MAXIMALERow
            Dim rowPREDISPMAX_PRE_DISP_MAXIMALERow As PREDISPMAX_PRE_DISP_MAXIMALERow = CType(Me.NewRow,PREDISPMAX_PRE_DISP_MAXIMALERow)
            Dim columnValuesArray() As Object = New Object() {PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK}
            rowPREDISPMAX_PRE_DISP_MAXIMALERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDISPMAX_PRE_DISP_MAXIMALERow)
            Return rowPREDISPMAX_PRE_DISP_MAXIMALERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPREDISPMAX_PRE_CODE_FK_PKPREDISPMAX_CDF_TYPE_FK_PK(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_CDF_TYPE_FK_PK As String) As PREDISPMAX_PRE_DISP_MAXIMALERow
            Return CType(Me.Rows.Find(New Object() {PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_CDF_TYPE_FK_PK}),PREDISPMAX_PRE_DISP_MAXIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDISPMAX_PRE_DISP_MAXIMALEDataTable = CType(MyBase.Clone,PREDISPMAX_PRE_DISP_MAXIMALEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDISPMAX_PRE_DISP_MAXIMALEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPREDISPMAX_PRE_CODE_FK_PK = MyBase.Columns("PREDISPMAX_PRE_CODE_FK_PK")
            Me.columnPREDISPMAX_PRE_CIP13 = MyBase.Columns("PREDISPMAX_PRE_CIP13")
            Me.columnPREDISPMAX_MAXUCD = MyBase.Columns("PREDISPMAX_MAXUCD")
            Me.columnPREDISPMAX_MAXCIP = MyBase.Columns("PREDISPMAX_MAXCIP")
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK = MyBase.Columns("PREDISPMAX_CDF_TYPE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPREDISPMAX_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("PREDISPMAX_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_PRE_CODE_FK_PK)
            Me.columnPREDISPMAX_PRE_CIP13 = New Global.System.Data.DataColumn("PREDISPMAX_PRE_CIP13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_PRE_CIP13)
            Me.columnPREDISPMAX_MAXUCD = New Global.System.Data.DataColumn("PREDISPMAX_MAXUCD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_MAXUCD)
            Me.columnPREDISPMAX_MAXCIP = New Global.System.Data.DataColumn("PREDISPMAX_MAXCIP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_MAXCIP)
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK = New Global.System.Data.DataColumn("PREDISPMAX_CDF_TYPE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDISPMAX_CDF_TYPE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPREDISPMAX_PRE_CODE_FK_PK, Me.columnPREDISPMAX_CDF_TYPE_FK_PK}, true))
            Me.columnPREDISPMAX_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnPREDISPMAX_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnPREDISPMAX_PRE_CIP13.MaxLength = 13
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK.AllowDBNull = false
            Me.columnPREDISPMAX_CDF_TYPE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDISPMAX_PRE_DISP_MAXIMALERow() As PREDISPMAX_PRE_DISP_MAXIMALERow
            Return CType(Me.NewRow,PREDISPMAX_PRE_DISP_MAXIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDISPMAX_PRE_DISP_MAXIMALERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDISPMAX_PRE_DISP_MAXIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALERowChangedEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALERowChanged(Me, New PREDISPMAX_PRE_DISP_MAXIMALERowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALERowChangingEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALERowChanging(Me, New PREDISPMAX_PRE_DISP_MAXIMALERowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALERowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALERowDeleted(Me, New PREDISPMAX_PRE_DISP_MAXIMALERowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDISPMAX_PRE_DISP_MAXIMALERowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDISPMAX_PRE_DISP_MAXIMALERowDeleting(Me, New PREDISPMAX_PRE_DISP_MAXIMALERowChangeEvent(CType(e.Row,PREDISPMAX_PRE_DISP_MAXIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDISPMAX_PRE_DISP_MAXIMALERow(ByVal row As PREDISPMAX_PRE_DISP_MAXIMALERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature2 = New dsTheriaque_Nomenclature2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDISPMAX_PRE_DISP_MAXIMALEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYGSP_SYNONYME_GSPRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYGSP_SYNONYME_GSP As SYGSP_SYNONYME_GSPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYGSP_SYNONYME_GSP = CType(Me.Table,SYGSP_SYNONYME_GSPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYGSP_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_NOM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYGSP_GSP_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_GSP_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_GSP_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYGSP_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SYGSP_NUMORD' dans la table 'SYGSP_SYNONYME_GSP' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYGSP_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSYGSP_SYNONYME_GSP.SYGSP_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYGSP_NUMORDNull()
            Me(Me.tableSYGSP_SYNONYME_GSP.SYGSP_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SP_SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_SPECIALITE = CType(Me.Table,SP_SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GSP_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_GSP_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_SLAB_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_LI_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CATC_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CEPH_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CGE_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CGE_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PR_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_TYPE_SPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_TYPE_SPE' dans la table 'SP_SPECIALITE' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_FK' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_DATECR_FK' dans la table 'SP_SPECIALITE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOM() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMCOMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMCOMP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_PHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_PH' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CIPUCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CIPUCD' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATECR() As Date
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEMJ' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_NL' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_APHP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_APHPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_APHP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEJOGENE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEJOGENE' dans la table 'SP_SPECIALITE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ORIGINE_GENE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_ORIGINE_GENE' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMLONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMLONG' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDT_PRESCR_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CDT_PRESCR_TEXTE' dans la table 'SP_SPECIALITE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ATC_DDD_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_ATC_DDD_TEXTE' dans la table 'SP_SPECIALITE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GSP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GSP_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CATC_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CEPH_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CGE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CGE_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_TYPE_SPENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_TYPE_SPENull()
            Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_DATECR_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMCOMPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMCOMPNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_PHNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_PHNull()
            Me(Me.tableSP_SPECIALITE.SP_PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CIPUCDNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CIPUCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CIPUCDNull()
            Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEMJNull()
            Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NLNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NLNull()
            Me(Me.tableSP_SPECIALITE.SP_NLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_APHPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_APHPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_APHPNull()
            Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEJOGENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEJOGENENull()
            Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ORIGINE_GENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ORIGINE_GENENull()
            Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMLONGNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMLONGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMLONGNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CDT_PRESCR_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CDT_PRESCR_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ATC_DDD_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ATC_DDD_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRE_PRESENTATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRE_PRESENTATION As PRE_PRESENTATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRE_PRESENTATION = CType(Me.Table,PRE_PRESENTATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CODE_PK() As String
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_SP_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_SP_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_SP_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_EAN_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_EAN_REF' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_NBUNITE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_NBUNITE' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_UP_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CDF_UP_CODE_FK' dans la table 'PRE_PRESENTATION' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CACDT_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CACDT_TEXTE' dans la table 'PRE_PRESENTATION' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_RH_CODE_FK() As String
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_RH_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_RH_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_LI_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CDF_LI_CODE_FK' dans la table 'PRE_PRESENTATION' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_ETAT_COMMER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_ETAT_COMMER' dans la table 'PRE_PRESENTATION' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATECOMMER() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATECOMMER' dans la table 'PRE_PRESENTATION' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATESUP() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATESUP' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_PU_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CDF_PU_CODE_FK' dans la table 'PRE_PRESENTATION' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CEPH_CODE_FK' dans la table 'PRE_PRESENTATION' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CATC_CODE_FK' dans la table 'PRE_PRESENTATION' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_NATUCD_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_NATUCD_CDF_CODE_FK' dans la table 'PRE_PRESENTATIO"& _ 
                            "N' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_NATUCD_CDF_NUM_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_NATUCD_CDF_NUM_FK' dans la table 'PRE_PRESENTATION"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEJOCIP() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEJOCIP' dans la table 'PRE_PRESENTATION' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_AGRCOLL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_AGRCOLL' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEJOCOLL() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEJOCOLL' dans la table 'PRE_PRESENTATION' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEFINCOLL() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEFINCOLL' dans la table 'PRE_PRESENTATION' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATE_APPLIFINCOLL() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATE_APPLIFINCOLL' dans la table 'PRE_PRESENTATION"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_PARTSTATUT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_PARTSTATUT' dans la table 'PRE_PRESENTATION' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_TSS_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_TSS_TEXTE' dans la table 'PRE_PRESENTATION' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CONSAPOUV() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CONSAPOUV' dans la table 'PRE_PRESENTATION' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_LIB_CEPS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_LIB_CEPS' dans la table 'PRE_PRESENTATION' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_ADMIN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_ADMINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_ADMIN' dans la table 'PRE_PRESENTATION' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_ADMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATECR() As Date
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEMJ' dans la table 'PRE_PRESENTATION' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_EAN_REFNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_EAN_REFNull()
            Me(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_NBUNITENull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_NBUNITENull()
            Me(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CDF_UP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CDF_UP_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CACDT_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CACDT_TEXTENull()
            Me(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CDF_LI_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CDF_LI_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_ETAT_COMMERNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_ETAT_COMMERNull()
            Me(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATECOMMERNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATECOMMERNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATESUPNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATESUPNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CDF_PU_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CDF_PU_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CEPH_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CATC_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_NATUCD_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_NATUCD_CDF_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_NATUCD_CDF_NUM_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_NATUCD_CDF_NUM_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEJOCIPNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEJOCIPNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_AGRCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_AGRCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEJOCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEJOCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEFINCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEFINCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATE_APPLIFINCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATE_APPLIFINCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_PARTSTATUTNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_PARTSTATUTNull()
            Me(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_TSS_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_TSS_TEXTENull()
            Me(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CONSAPOUVNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CONSAPOUVNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_LIB_CEPSNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_LIB_CEPSNull()
            Me(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_ADMINNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_ADMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_ADMINNull()
            Me(Me.tablePRE_PRESENTATION.PRE_ADMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEMJNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREUCD_COMMENT_DOSEUCDRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREUCD_COMMENT_DOSEUCD As PREUCD_COMMENT_DOSEUCDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREUCD_COMMENT_DOSEUCD = CType(Me.Table,PREUCD_COMMENT_DOSEUCDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREUCD_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREUCD_CDF_COMUCD_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_CDF_COMUCD_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_CDF_COMUCD_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREUCD_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREUCD_NUMORD' dans la table 'PREUCD_COMMENT_DOSEUCD' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREUCD_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREUCD_NUMORDNull()
            Me(Me.tablePREUCD_COMMENT_DOSEUCD.PREUCD_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COCONT_COMPO_CONTENANTRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOCONT_COMPO_CONTENANT As COCONT_COMPO_CONTENANTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOCONT_COMPO_CONTENANT = CType(Me.Table,COCONT_COMPO_CONTENANTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_NUM_PK() As Byte
            Get
                Return CType(Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUM_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_CDF_GAL_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_CDF_GAL_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COCONT_CDF_GAL_CODE_FK' dans la table 'COCONT_COMPO_CO"& _ 
                            "NTENANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_CDF_GAL_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COCONT_NUMORD' dans la table 'COCONT_COMPO_CONTENANT' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOCONT_CDF_GAL_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOCONT_COMPO_CONTENANT.COCONT_CDF_GAL_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOCONT_CDF_GAL_CODE_FKNull()
            Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_CDF_GAL_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOCONT_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOCONT_NUMORDNull()
            Me(Me.tableCOCONT_COMPO_CONTENANT.COCONT_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPREMAT_PRE_MATERIAURows() As PREMAT_PRE_MATERIAURow()
            If (Me.Table.ChildRelations("FK2_PREMAT_PRE_MATERIAU") Is Nothing) Then
                Return New PREMAT_PRE_MATERIAURow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK2_PREMAT_PRE_MATERIAU")),PREMAT_PRE_MATERIAURow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPRECAR_PRESENTATION_CARACTCOMPRows() As PRECAR_PRESENTATION_CARACTCOMPRow()
            If (Me.Table.ChildRelations("FK2_PRECAR_PRESENT_CARACTCOMP") Is Nothing) Then
                Return New PRECAR_PRESENTATION_CARACTCOMPRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK2_PRECAR_PRESENT_CARACTCOMP")),PRECAR_PRESENTATION_CARACTCOMPRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPRECONT_PRE_CONTENANTRows() As PRECONT_PRE_CONTENANTRow()
            If (Me.Table.ChildRelations("FK2_PRECONT_PRE_CONTENANT") Is Nothing) Then
                Return New PRECONT_PRE_CONTENANTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK2_PRECONT_PRE_CONTENANT")),PRECONT_PRE_CONTENANTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRECONT_PRE_CONTENANTRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRECONT_PRE_CONTENANT As PRECONT_PRE_CONTENANTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRECONT_PRE_CONTENANT = CType(Me.Table,PRECONT_PRE_CONTENANTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_COCONT_NUM_FK_PK() As Byte
            Get
                Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_COCONT_NUM_FK_PKColumn),Byte)
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_COCONT_NUM_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_NBCONTENANT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_NBCONTENANT' dans la table 'PRECONT_PRE_CONTEN"& _ 
                            "ANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_CDF_COCDT_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCDT_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_CDF_COCDT_CODE_FK' dans la table 'PRECONT_PRE_"& _ 
                            "CONTENANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCDT_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_NBCONTENANT_REEL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANT_REELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_NBCONTENANT_REEL' dans la table 'PRECONT_PRE_C"& _ 
                            "ONTENANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANT_REELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_NBCONTENANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_NBCONTENANCE' dans la table 'PRECONT_PRE_CONTE"& _ 
                            "NANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_CDF_COCE_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCE_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_CDF_COCE_CODE_FK' dans la table 'PRECONT_PRE_C"& _ 
                            "ONTENANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCE_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_VOLCONTENANT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_VOLCONTENANTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_VOLCONTENANT' dans la table 'PRECONT_PRE_CONTE"& _ 
                            "NANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_VOLCONTENANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECONT_CDF_VOLCONT_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_VOLCONT_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECONT_CDF_VOLCONT_CODE_FK' dans la table 'PRECONT_PR"& _ 
                            "E_CONTENANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_VOLCONT_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_COMPO_CONTENANTRowParent() As COCONT_COMPO_CONTENANTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK2_PRECONT_PRE_CONTENANT")),COCONT_COMPO_CONTENANTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK2_PRECONT_PRE_CONTENANT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_NBCONTENANTNull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_NBCONTENANTNull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_CDF_COCDT_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCDT_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_CDF_COCDT_CODE_FKNull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCDT_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_NBCONTENANT_REELNull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANT_REELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_NBCONTENANT_REELNull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANT_REELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_NBCONTENANCENull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_NBCONTENANCENull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_NBCONTENANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_CDF_COCE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCE_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_CDF_COCE_CODE_FKNull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_COCE_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_VOLCONTENANTNull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_VOLCONTENANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_VOLCONTENANTNull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_VOLCONTENANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECONT_CDF_VOLCONT_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_VOLCONT_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECONT_CDF_VOLCONT_CODE_FKNull()
            Me(Me.tablePRECONT_PRE_CONTENANT.PRECONT_CDF_VOLCONT_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREMAT_PRE_MATERIAURow
        Inherits Global.System.Data.DataRow
        
        Private tablePREMAT_PRE_MATERIAU As PREMAT_PRE_MATERIAUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREMAT_PRE_MATERIAU = CType(Me.Table,PREMAT_PRE_MATERIAUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREMAT_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREMAT_COCONT_NUM_FK_PK() As Byte
            Get
                Return CType(Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_COCONT_NUM_FK_PKColumn),Byte)
            End Get
            Set
                Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_COCONT_NUM_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREMAT_CDF_MACDT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_CDF_MACDT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_CDF_MACDT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREMAT_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREMAT_NUMORD' dans la table 'PREMAT_PRE_MATERIAU' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_COMPO_CONTENANTRowParent() As COCONT_COMPO_CONTENANTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK2_PREMAT_PRE_MATERIAU")),COCONT_COMPO_CONTENANTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK2_PREMAT_PRE_MATERIAU"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREMAT_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePREMAT_PRE_MATERIAU.PREMAT_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREMAT_NUMORDNull()
            Me(Me.tablePREMAT_PRE_MATERIAU.PREMAT_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRECAR_PRESENTATION_CARACTCOMPRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRECAR_PRESENTATION_CARACTCOMP As PRECAR_PRESENTATION_CARACTCOMPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRECAR_PRESENTATION_CARACTCOMP = CType(Me.Table,PRECAR_PRESENTATION_CARACTCOMPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECAR_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECAR_COCONT_NUM_FK_PK() As Byte
            Get
                Return CType(Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_COCONT_NUM_FK_PKColumn),Byte)
            End Get
            Set
                Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_COCONT_NUM_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECAR_CDF_CODE_CACDT_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_CDF_CODE_CACDT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_CDF_CODE_CACDT_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECAR_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECAR_NUMORD' dans la table 'PRECAR_PRESENTATION_CARA"& _ 
                            "CTCOMP' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCONT_COMPO_CONTENANTRowParent() As COCONT_COMPO_CONTENANTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK2_PRECAR_PRESENT_CARACTCOMP")),COCONT_COMPO_CONTENANTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK2_PRECAR_PRESENT_CARACTCOMP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECAR_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECAR_NUMORDNull()
            Me(Me.tablePRECAR_PRESENTATION_CARACTCOMP.PRECAR_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRECEMB_PRE_CAREMBALLAGERow
        Inherits Global.System.Data.DataRow
        
        Private tablePRECEMB_PRE_CAREMBALLAGE As PRECEMB_PRE_CAREMBALLAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRECEMB_PRE_CAREMBALLAGE = CType(Me.Table,PRECEMB_PRE_CAREMBALLAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECEMB_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECEMB_CDF_CAREMB_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_CDF_CAREMB_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_CDF_CAREMB_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECEMB_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECEMB_NUMORD' dans la table 'PRECEMB_PRE_CAREMBALLAG"& _ 
                            "E' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECEMB_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECEMB_NUMORDNull()
            Me(Me.tablePRECEMB_PRE_CAREMBALLAGE.PRECEMB_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRETSS_PRESENTATION_TAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRETSS_PRESENTATION_TAUX As PRETSS_PRESENTATION_TAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRETSS_PRESENTATION_TAUX = CType(Me.Table,PRETSS_PRESENTATION_TAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSS_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSS_CDF_TSS_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_CDF_TSS_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_CDF_TSS_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSS_NUMSEQ() As Short
            Get
                Return CType(Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_NUMSEQColumn),Short)
            End Get
            Set
                Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_NUMSEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSS_DATE_APPLI_PK() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLI_PKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRETSS_DATE_APPLI_PK' dans la table 'PRETSS_PRESENTATI"& _ 
                            "ON_TAUX' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLI_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSS_DATE_APPLIQUEE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLIQUEEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRETSS_DATE_APPLIQUEE' dans la table 'PRETSS_PRESENTAT"& _ 
                            "ION_TAUX' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLIQUEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSS_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRETSS_TEXTE' dans la table 'PRETSS_PRESENTATION_TAUX'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRETSS_DATE_APPLI_PKNull() As Boolean
            Return Me.IsNull(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLI_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRETSS_DATE_APPLI_PKNull()
            Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLI_PKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRETSS_DATE_APPLIQUEENull() As Boolean
            Return Me.IsNull(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLIQUEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRETSS_DATE_APPLIQUEENull()
            Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_DATE_APPLIQUEEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRETSS_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRETSS_TEXTENull()
            Me(Me.tablePRETSS_PRESENTATION_TAUX.PRETSS_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRETSSH_PRE_TAUX_HOPRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRETSSH_PRE_TAUX_HOP As PRETSSH_PRE_TAUX_HOPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRETSSH_PRE_TAUX_HOP = CType(Me.Table,PRETSSH_PRE_TAUX_HOPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSSH_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSSH_CDF_TSS_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_CDF_TSS_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_CDF_TSS_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSSH_NUMSEQ() As Short
            Get
                Return CType(Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_NUMSEQColumn),Short)
            End Get
            Set
                Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_NUMSEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSSH_DATE_APPLI_PK() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLI_PKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRETSSH_DATE_APPLI_PK' dans la table 'PRETSSH_PRE_TAUX"& _ 
                            "_HOP' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLI_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSSH_DATE_APPLIQUEE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLIQUEEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRETSSH_DATE_APPLIQUEE' dans la table 'PRETSSH_PRE_TAU"& _ 
                            "X_HOP' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLIQUEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRETSSH_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRETSSH_TEXTE' dans la table 'PRETSSH_PRE_TAUX_HOP' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRETSSH_DATE_APPLI_PKNull() As Boolean
            Return Me.IsNull(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLI_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRETSSH_DATE_APPLI_PKNull()
            Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLI_PKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRETSSH_DATE_APPLIQUEENull() As Boolean
            Return Me.IsNull(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLIQUEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRETSSH_DATE_APPLIQUEENull()
            Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_DATE_APPLIQUEEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRETSSH_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRETSSH_TEXTENull()
            Me(Me.tablePRETSSH_PRE_TAUX_HOP.PRETSSH_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRESTP_PRE_STPRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRESTP_PRE_STP As PRESTP_PRE_STPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRESTP_PRE_STP = CType(Me.Table,PRESTP_PRE_STPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTP_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTP_PRE_STP.PRESTP_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTP_PRE_STP.PRESTP_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTP_CDF_STP_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTP_PRE_STP.PRESTP_CDF_STP_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTP_PRE_STP.PRESTP_CDF_STP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTP_DATE_AFSSAPS() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRESTP_PRE_STP.PRESTP_DATE_AFSSAPSColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRESTP_DATE_AFSSAPS' dans la table 'PRESTP_PRE_STP' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRESTP_PRE_STP.PRESTP_DATE_AFSSAPSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTP_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRESTP_PRE_STP.PRESTP_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRESTP_NUMORD' dans la table 'PRESTP_PRE_STP' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRESTP_PRE_STP.PRESTP_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESTP_DATE_AFSSAPSNull() As Boolean
            Return Me.IsNull(Me.tablePRESTP_PRE_STP.PRESTP_DATE_AFSSAPSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESTP_DATE_AFSSAPSNull()
            Me(Me.tablePRESTP_PRE_STP.PRESTP_DATE_AFSSAPSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESTP_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePRESTP_PRE_STP.PRESTP_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESTP_NUMORDNull()
            Me(Me.tablePRESTP_PRE_STP.PRESTP_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRESTC_STATUTCOMP_PRESENTRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRESTC_STATUTCOMP_PRESENT As PRESTC_STATUTCOMP_PRESENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRESTC_STATUTCOMP_PRESENT = CType(Me.Table,PRESTC_STATUTCOMP_PRESENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTC_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTC_CDF_STCOMP_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_CDF_STCOMP_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_CDF_STCOMP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTC_CODE_IDENT() As String
            Get
                Return CType(Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_CODE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_CODE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTC_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRESTC_NUMORD' dans la table 'PRESTC_STATUTCOMP_PRESEN"& _ 
                            "T' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESTC_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESTC_NUMORDNull()
            Me(Me.tablePRESTC_STATUTCOMP_PRESENT.PRESTC_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRESTR_STATUT_REMBOURSTRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRESTR_STATUT_REMBOURST As PRESTR_STATUT_REMBOURSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRESTR_STATUT_REMBOURST = CType(Me.Table,PRESTR_STATUT_REMBOURSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTR_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTR_CDF_STR_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_CDF_STR_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_CDF_STR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTR_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRESTR_NUMORD' dans la table 'PRESTR_STATUT_REMBOURST'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESTR_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESTR_NUMORDNull()
            Me(Me.tablePRESTR_STATUT_REMBOURST.PRESTR_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRESTRTX_TEXTE_STAT_REMBOURSTRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRESTRTX_TEXTE_STAT_REMBOURST As PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRESTRTX_TEXTE_STAT_REMBOURST = CType(Me.Table,PRESTRTX_TEXTE_STAT_REMBOURSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTRTX_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.PRESTRTX_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.PRESTRTX_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESTRTX_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.PRESTRTX_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRESTRTX_TEXTE' dans la table 'PRESTRTX_TEXTE_STAT_REM"& _ 
                            "BOURST' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.PRESTRTX_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESTRTX_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.PRESTRTX_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESTRTX_TEXTENull()
            Me(Me.tablePRESTRTX_TEXTE_STAT_REMBOURST.PRESTRTX_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREPER_PRESENTATION_PERIO_CSVRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREPER_PRESENTATION_PERIO_CSV As PREPER_PRESENTATION_PERIO_CSVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREPER_PRESENTATION_PERIO_CSV = CType(Me.Table,PREPER_PRESENTATION_PERIO_CSVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPER_NUM_CODE_PK() As Integer
            Get
                Return CType(Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_NUM_CODE_PKColumn),Integer)
            End Get
            Set
                Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_NUM_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPER_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPER_CDF_UT_CODE_FK() As String
            Get
                Return CType(Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_CDF_UT_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_CDF_UT_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPER_DUREE() As Integer
            Get
                Return CType(Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_DUREEColumn),Integer)
            End Get
            Set
                Me(Me.tablePREPER_PRESENTATION_PERIO_CSV.PREPER_DUREEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPERCS_PERIODE_COND_CSVRows() As PERCS_PERIODE_COND_CSVRow()
            If (Me.Table.ChildRelations("FK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV") Is Nothing) Then
                Return New PERCS_PERIODE_COND_CSVRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV")),PERCS_PERIODE_COND_CSVRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PERCS_PERIODE_COND_CSVRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERCS_PERIODE_COND_CSV As PERCS_PERIODE_COND_CSVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERCS_PERIODE_COND_CSV = CType(Me.Table,PERCS_PERIODE_COND_CSVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERCS_NUM_CODE_PK() As Integer
            Get
                Return CType(Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUM_CODE_PKColumn),Integer)
            End Get
            Set
                Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUM_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERCS_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERCS_CDF_CSV_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_CDF_CSV_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_CDF_CSV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERCS_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PERCS_NUMORD' dans la table 'PERCS_PERIODE_COND_CSV' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPER_PRESENTATION_PERIO_CSVRowParent() As PREPER_PRESENTATION_PERIO_CSVRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV")),PREPER_PRESENTATION_PERIO_CSVRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PREPER_PRESENTATION_PERIO_CSV_PERCS_PERIODE_COND_CSV"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERCS_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERCS_NUMORDNull()
            Me(Me.tablePERCS_PERIODE_COND_CSV.PERCS_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRECSVTX_TEXTE_CONSERVRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRECSVTX_TEXTE_CONSERV As PRECSVTX_TEXTE_CONSERVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRECSVTX_TEXTE_CONSERV = CType(Me.Table,PRECSVTX_TEXTE_CONSERVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECSVTX_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECSVTX_TEXTE_CONSERV.PRECSVTX_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECSVTX_TEXTE_CONSERV.PRECSVTX_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECSVTX_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRECSVTX_TEXTE_CONSERV.PRECSVTX_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECSVTX_TEXTE' dans la table 'PRECSVTX_TEXTE_CONSERV'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECSVTX_TEXTE_CONSERV.PRECSVTX_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECSVTX_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRECSVTX_TEXTE_CONSERV.PRECSVTX_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECSVTX_TEXTENull()
            Me(Me.tablePRECSVTX_TEXTE_CONSERV.PRECSVTX_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDILI_LIEU_DISPENSATRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREDILI_LIEU_DISPENSAT As PREDILI_LIEU_DISPENSATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDILI_LIEU_DISPENSAT = CType(Me.Table,PREDILI_LIEU_DISPENSATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDILI_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDILI_CDF_LIEU_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_CDF_LIEU_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_CDF_LIEU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDILI_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDILI_NUMORD' dans la table 'PREDILI_LIEU_DISPENSAT'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDILI_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDILI_NUMORDNull()
            Me(Me.tablePREDILI_LIEU_DISPENSAT.PREDILI_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDICO_COMMENT_DISPENSATRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREDICO_COMMENT_DISPENSAT As PREDICO_COMMENT_DISPENSATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDICO_COMMENT_DISPENSAT = CType(Me.Table,PREDICO_COMMENT_DISPENSATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDICO_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDICO_CDF_COM_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_CDF_COM_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_CDF_COM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDICO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDICO_NUMORD' dans la table 'PREDICO_COMMENT_DISPENS"& _ 
                            "AT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDICO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDICO_NUMORDNull()
            Me(Me.tablePREDICO_COMMENT_DISPENSAT.PREDICO_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDITX_TEXTE_DISPENSATRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREDITX_TEXTE_DISPENSAT As PREDITX_TEXTE_DISPENSATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDITX_TEXTE_DISPENSAT = CType(Me.Table,PREDITX_TEXTE_DISPENSATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDITX_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDITX_TEXTE_DISPENSAT.PREDITX_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDITX_TEXTE_DISPENSAT.PREDITX_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDITX_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDITX_TEXTE_DISPENSAT.PREDITX_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDITX_TEXTE' dans la table 'PREDITX_TEXTE_DISPENSAT'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDITX_TEXTE_DISPENSAT.PREDITX_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDITX_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePREDITX_TEXTE_DISPENSAT.PREDITX_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDITX_TEXTENull()
            Me(Me.tablePREDITX_TEXTE_DISPENSAT.PREDITX_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRESMR_PRE_SMR_ATRRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRESMR_PRE_SMR_ATR As PRESMR_PRE_SMR_ATRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRESMR_PRE_SMR_ATR = CType(Me.Table,PRESMR_PRE_SMR_ATRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESMR_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESMR_CDF_SMR_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_CDF_SMR_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_CDF_SMR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESMR_DATE_SMR_PK() As Date
            Get
                Return CType(Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_DATE_SMR_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_DATE_SMR_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESMR_ATR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_ATR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tablePRESMR_PRE_SMR_ATR.PRESMR_ATR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GSAC_PERE_SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableGSAC_PERE_SUBACT As GSAC_PERE_SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGSAC_PERE_SUBACT = CType(Me.Table,GSAC_PERE_SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSAC_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableGSAC_PERE_SUBACT.GSAC_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGSAC_PERE_SUBACT.GSAC_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSAC_NOM() As String
            Get
                Return CType(Me(Me.tableGSAC_PERE_SUBACT.GSAC_NOMColumn),String)
            End Get
            Set
                Me(Me.tableGSAC_PERE_SUBACT.GSAC_NOMColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GREF_GROUPE_SPECIALITE_REFRow
        Inherits Global.System.Data.DataRow
        
        Private tableGREF_GROUPE_SPECIALITE_REF As GREF_GROUPE_SPECIALITE_REFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGREF_GROUPE_SPECIALITE_REF = CType(Me.Table,GREF_GROUPE_SPECIALITE_REFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREF_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREF_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GREF_LIBELLE' dans la table 'GREF_GROUPE_SPECIALITE_RE"& _ 
                            "F' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREF_DATECR_PK() As Date
            Get
                Return CType(Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATECR_PKColumn),Date)
            End Get
            Set
                Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATECR_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREF_DATESUSP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATESUSPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GREF_DATESUSP' dans la table 'GREF_GROUPE_SPECIALITE_R"& _ 
                            "EF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATESUSPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGREF_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGREF_LIBELLENull()
            Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGREF_DATESUSPNull() As Boolean
            Return Me.IsNull(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATESUSPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGREF_DATESUSPNull()
            Me(Me.tableGREF_GROUPE_SPECIALITE_REF.GREF_DATESUSPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGREFTX_TEXTE_GROUPE_REFRows() As GREFTX_TEXTE_GROUPE_REFRow()
            If (Me.Table.ChildRelations("FK1_GREFTX") Is Nothing) Then
                Return New GREFTX_TEXTE_GROUPE_REFRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_GREFTX")),GREFTX_TEXTE_GROUPE_REFRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPGREFR_GROUPE_SPE_REFRow
        Inherits Global.System.Data.DataRow
        
        Private tableSPGREFR_GROUPE_SPE_REF As SPGREFR_GROUPE_SPE_REFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPGREFR_GROUPE_SPE_REF = CType(Me.Table,SPGREFR_GROUPE_SPE_REFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFR_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPGREFR_GROUPE_SPE_REF.SPGREFR_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPGREFR_GROUPE_SPE_REF.SPGREFR_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFR_GREF_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPGREFR_GROUPE_SPE_REF.SPGREFR_GREF_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPGREFR_GROUPE_SPE_REF.SPGREFR_GREF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFR_GREF_DATECR_FK_PK() As Date
            Get
                Return CType(Me(Me.tableSPGREFR_GROUPE_SPE_REF.SPGREFR_GREF_DATECR_FK_PKColumn),Date)
            End Get
            Set
                Me(Me.tableSPGREFR_GROUPE_SPE_REF.SPGREFR_GREF_DATECR_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GREFTX_TEXTE_GROUPE_REFRow
        Inherits Global.System.Data.DataRow
        
        Private tableGREFTX_TEXTE_GROUPE_REF As GREFTX_TEXTE_GROUPE_REFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGREFTX_TEXTE_GROUPE_REF = CType(Me.Table,GREFTX_TEXTE_GROUPE_REFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREFTX_GREF_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREFTX_GREF_DATECR_FK_PK() As Date
            Get
                Return CType(Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_DATECR_FK_PKColumn),Date)
            End Get
            Set
                Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_GREF_DATECR_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREFTX_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GREFTX_TEXTE' dans la table 'GREFTX_TEXTE_GROUPE_REF' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GREF_GROUPE_SPECIALITE_REFRowParent() As GREF_GROUPE_SPECIALITE_REFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_GREFTX")),GREF_GROUPE_SPECIALITE_REFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_GREFTX"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGREFTX_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGREFTX_TEXTENull()
            Me(Me.tableGREFTX_TEXTE_GROUPE_REF.GREFTX_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COSAU_COMPO_SUBAUX1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOSAU_COMPO_SUBAUX1 As COSAU_COMPO_SUBAUX1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOSAU_COMPO_SUBAUX1 = CType(Me.Table,COSAU_COMPO_SUBAUX1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_DOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_DOSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_DOSAGE' dans la table 'COSAU_COMPO_SUBAUX1' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_UNITEDOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_UNITEDOSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_UNITEDOSAGE' dans la table 'COSAU_COMPO_SUBAUX1'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_UNITEDOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_COMPO_NUM_PK() As Byte
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_COMPO_NUM_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_COMPO_NUM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_CODE_FK' dans la table 'COSAU_COMPO_SUBAUX1"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_DATECR_FKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_DATECR_FK' dans la table 'COSAU_COMPO_SUBAU"& _ 
                            "X1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_NUMORD' dans la table 'COSAU_COMPO_SUBAUX1'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_NUMORD' dans la table 'COSAU_COMPO_SUBAUX1' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_DOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_DOSAGENull()
            Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_DOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_UNITEDOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_UNITEDOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_UNITEDOSAGENull()
            Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_UNITEDOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_CODE_FKNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_DATECR_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_DATECR_FKNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_DATECR_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_NUMORDNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_GREF_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_NUMORDNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX1.COSAU_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GSAU_PERE_SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableGSAU_PERE_SUBAUX As GSAU_PERE_SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGSAU_PERE_SUBAUX = CType(Me.Table,GSAU_PERE_SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSAU_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableGSAU_PERE_SUBAUX.GSAU_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGSAU_PERE_SUBAUX.GSAU_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSAU_NOM() As String
            Get
                Return CType(Me(Me.tableGSAU_PERE_SUBAUX.GSAU_NOMColumn),String)
            End Get
            Set
                Me(Me.tableGSAU_PERE_SUBAUX.GSAU_NOMColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYSAU_SYNONYME_SAURow
        Inherits Global.System.Data.DataRow
        
        Private tableSYSAU_SYNONYME_SAU As SYSAU_SYNONYME_SAUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYSAU_SYNONYME_SAU = CType(Me.Table,SYSAU_SYNONYME_SAUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAU_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_NOM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAU_SAU_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_SAU_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_SAU_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYFSAC_SYNONYMEFR_SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYFSAC_SYNONYMEFR_SUBACT As SYFSAC_SYNONYMEFR_SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYFSAC_SYNONYMEFR_SUBACT = CType(Me.Table,SYFSAC_SYNONYMEFR_SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFSAC_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYFSAC_SYNONYMEFR_SUBACT.SYFSAC_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYFSAC_SYNONYMEFR_SUBACT.SYFSAC_NOM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFSAC_SAC_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSYFSAC_SYNONYMEFR_SUBACT.SYFSAC_SAC_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYFSAC_SYNONYMEFR_SUBACT.SYFSAC_SAC_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYASAC_SYNONYMEANGLAIS_SACRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYASAC_SYNONYMEANGLAIS_SAC As SYASAC_SYNONYMEANGLAIS_SACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYASAC_SYNONYMEANGLAIS_SAC = CType(Me.Table,SYASAC_SYNONYMEANGLAIS_SACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYASAC_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYASAC_SYNONYMEANGLAIS_SAC.SYASAC_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYASAC_SYNONYMEANGLAIS_SAC.SYASAC_NOM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYASAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSYASAC_SYNONYMEANGLAIS_SAC.SYASAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYASAC_SYNONYMEANGLAIS_SAC.SYASAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SACCAS_SUBACT_CASRow
        Inherits Global.System.Data.DataRow
        
        Private tableSACCAS_SUBACT_CAS As SACCAS_SUBACT_CASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSACCAS_SUBACT_CAS = CType(Me.Table,SACCAS_SUBACT_CASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCAS_CAS_CODE_PK() As String
            Get
                Return CType(Me(Me.tableSACCAS_SUBACT_CAS.SACCAS_CAS_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableSACCAS_SUBACT_CAS.SACCAS_CAS_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCAS_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSACCAS_SUBACT_CAS.SACCAS_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSACCAS_SUBACT_CAS.SACCAS_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ADSAC_AUTRE_DENOMINATION_SUBACRow
        Inherits Global.System.Data.DataRow
        
        Private tableADSAC_AUTRE_DENOMINATION_SUBAC As ADSAC_AUTRE_DENOMINATION_SUBACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableADSAC_AUTRE_DENOMINATION_SUBAC = CType(Me.Table,ADSAC_AUTRE_DENOMINATION_SUBACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADSAC_NOM_PK() As String
            Get
                Return CType(Me(Me.tableADSAC_AUTRE_DENOMINATION_SUBAC.ADSAC_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableADSAC_AUTRE_DENOMINATION_SUBAC.ADSAC_NOM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADSAC_SAC_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableADSAC_AUTRE_DENOMINATION_SUBAC.ADSAC_SAC_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableADSAC_AUTRE_DENOMINATION_SUBAC.ADSAC_SAC_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SACCCH_SUBACT_CLASSECHRow
        Inherits Global.System.Data.DataRow
        
        Private tableSACCCH_SUBACT_CLASSECH As SACCCH_SUBACT_CLASSECHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSACCCH_SUBACT_CLASSECH = CType(Me.Table,SACCCH_SUBACT_CLASSECHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCCH_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSACCCH_SUBACT_CLASSECH.SACCCH_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSACCCH_SUBACT_CLASSECH.SACCCH_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSACCCH_SUBACT_CLASSECH.SACCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSACCCH_SUBACT_CLASSECH.SACCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SACCPH_SUBACT_CLASSEPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableSACCPH_SUBACT_CLASSEPH As SACCPH_SUBACT_CLASSEPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSACCPH_SUBACT_CLASSEPH = CType(Me.Table,SACCPH_SUBACT_CLASSEPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCPH_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSACCPH_SUBACT_CLASSEPH.SACCPH_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSACCPH_SUBACT_CLASSEPH.SACCPH_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSACCPH_SUBACT_CLASSEPH.SACCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSACCPH_SUBACT_CLASSEPH.SACCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SACCATC_SUBACT_CLASSEATCRow
        Inherits Global.System.Data.DataRow
        
        Private tableSACCATC_SUBACT_CLASSEATC As SACCATC_SUBACT_CLASSEATCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSACCATC_SUBACT_CLASSEATC = CType(Me.Table,SACCATC_SUBACT_CLASSEATCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCATC_CATC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSACCATC_SUBACT_CLASSEATC.SACCATC_CATC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSACCATC_SUBACT_CLASSEATC.SACCATC_CATC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACCATC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSACCATC_SUBACT_CLASSEATC.SACCATC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSACCATC_SUBACT_CLASSEATC.SACCATC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAC_SUBACTIVERow
        Inherits Global.System.Data.DataRow
        
        Private tableSAC_SUBACTIVE As SAC_SUBACTIVEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAC_SUBACTIVE = CType(Me.Table,SAC_SUBACTIVEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_CDF_ORN_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_CDF_ORN_CODE_FK' dans la table 'SAC_SUBACTIVE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_SAU_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_SAU_CODE_FK' dans la table 'SAC_SUBACTIVE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_GSAC_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_GSAC_CODE_FK' dans la table 'SAC_SUBACTIVE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_NOM() As String
            Get
                Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_NOMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_NOMA' dans la table 'SAC_SUBACTIVE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_DATECR() As Date
            Get
                Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_DATEMJ' dans la table 'SAC_SUBACTIVE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_ETAT_COMMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_ETAT_COMMER' dans la table 'SAC_SUBACTIVE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_DATECOMMER() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_DATECOMMER' dans la table 'SAC_SUBACTIVE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_CODE_REF' dans la table 'SAC_SUBACTIVE' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_LIBELLE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_LIBELLE_REF' dans la table 'SAC_SUBACTIVE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_TYPE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_TYPE_REF' dans la table 'SAC_SUBACTIVE' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_CDF_ORN_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_CDF_ORN_CODE_FKNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_SAU_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_SAU_CODE_FKNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_GSAC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_GSAC_CODE_FKNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_NOMANull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_NOMANull()
            Me(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_DATEMJNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_ETAT_COMMERNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_ETAT_COMMERNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_DATECOMMERNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_DATECOMMERNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_CODE_REFNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_LIBELLE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_LIBELLE_REFNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_TYPE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_TYPE_REFNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRECPSSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRECPSS As PRECPSSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRECPSS = CType(Me.Table,PRECPSSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECPSS_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECPSS.PRECPSS_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECPSS.PRECPSS_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECPSS_CDF_CPSS_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRECPSS.PRECPSS_CDF_CPSS_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRECPSS.PRECPSS_CDF_CPSS_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECPSS_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRECPSS.PRECPSS_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRECPSS_CIP13' dans la table 'PRECPSS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRECPSS.PRECPSS_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECPSS_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePRECPSS.PRECPSS_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECPSS_CIP13Null()
            Me(Me.tablePRECPSS.PRECPSS_CIP13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COSAU_COMPO_SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOSAU_COMPO_SUBAUX As COSAU_COMPO_SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOSAU_COMPO_SUBAUX = CType(Me.Table,COSAU_COMPO_SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_DOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_DOSAGE' dans la table 'COSAU_COMPO_SUBAUX' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_UNITEDOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_UNITEDOSAGE' dans la table 'COSAU_COMPO_SUBAUX' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_COMPO_NUM_PK() As Byte
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_COMPO_NUM_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_COMPO_NUM_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_CODE_FK' dans la table 'COSAU_COMPO_SUBAUX'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_DATECR_FK' dans la table 'COSAU_COMPO_SUBAU"& _ 
                            "X' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_NUMORD' dans la table 'COSAU_COMPO_SUBAUX' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_NUMORD' dans la table 'COSAU_COMPO_SUBAUX' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_DOSAGENull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_UNITEDOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_UNITEDOSAGENull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_CODE_FKNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_DATECR_FKNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_NUMORDNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_NUMORDNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREGREF_PRE_GROUPE_REFRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREGREF_PRE_GROUPE_REF As PREGREF_PRE_GROUPE_REFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREGREF_PRE_GROUPE_REF = CType(Me.Table,PREGREF_PRE_GROUPE_REFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_GREF_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_GREF_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_GREF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_DATEENTREE_PK() As Date
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_DATEENTREE_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_DATEENTREE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_GREF_DATECR_FK_PK() As Date
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_GREF_DATECR_FK_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_GREF_DATECR_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_DATESORTIE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_DATESORTIEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREGREF_DATESORTIE' dans la table 'PREGREF_PRE_GROUPE_"& _ 
                            "REF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_DATESORTIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_TYPE_PRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_TYPE_PREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREGREF_TYPE_PRE' dans la table 'PREGREF_PRE_GROUPE_RE"& _ 
                            "F' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_TYPE_PREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREGREF_CIP13' dans la table 'PREGREF_PRE_GROUPE_REF' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREGREF_DATESORTIENull() As Boolean
            Return Me.IsNull(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_DATESORTIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREGREF_DATESORTIENull()
            Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_DATESORTIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREGREF_TYPE_PRENull() As Boolean
            Return Me.IsNull(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_TYPE_PREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREGREF_TYPE_PRENull()
            Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_TYPE_PREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREGREF_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREGREF_CIP13Null()
            Me(Me.tablePREGREF_PRE_GROUPE_REF.PREGREF_CIP13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPGREFG_GROUPE_SPE_GENERow
        Inherits Global.System.Data.DataRow
        
        Private tableSPGREFG_GROUPE_SPE_GENE As SPGREFG_GROUPE_SPE_GENEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPGREFG_GROUPE_SPE_GENE = CType(Me.Table,SPGREFG_GROUPE_SPE_GENEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFG_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFG_GREF_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_GREF_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_GREF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFG_GREF_DATECR_FK_PK() As Date
            Get
                Return CType(Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_GREF_DATECR_FK_PKColumn),Date)
            End Get
            Set
                Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_GREF_DATECR_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFG_DATEEG_PK() As Date
            Get
                Return CType(Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_DATEEG_PKColumn),Date)
            End Get
            Set
                Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_DATEEG_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPGREFG_DATESG() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_DATESGColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SPGREFG_DATESG' dans la table 'SPGREFG_GROUPE_SPE_GENE"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_DATESGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPGREFG_DATESGNull() As Boolean
            Return Me.IsNull(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_DATESGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPGREFG_DATESGNull()
            Me(Me.tableSPGREFG_GROUPE_SPE_GENE.SPGREFG_DATESGColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREGREF_PRE_GROUPE_REF1Row
        Inherits Global.System.Data.DataRow
        
        Private tablePREGREF_PRE_GROUPE_REF1 As PREGREF_PRE_GROUPE_REF1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREGREF_PRE_GROUPE_REF1 = CType(Me.Table,PREGREF_PRE_GROUPE_REF1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_GREF_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_GREF_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_GREF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_DATEENTREE_PK() As Date
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_DATEENTREE_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_DATEENTREE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_GREF_DATECR_FK_PK() As Date
            Get
                Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_GREF_DATECR_FK_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_GREF_DATECR_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_DATESORTIE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_DATESORTIEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREGREF_DATESORTIE' dans la table 'PREGREF_PRE_GROUPE_"& _ 
                            "REF1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_DATESORTIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_TYPE_PRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_TYPE_PREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREGREF_TYPE_PRE' dans la table 'PREGREF_PRE_GROUPE_RE"& _ 
                            "F1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_TYPE_PREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREGREF_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREGREF_CIP13' dans la table 'PREGREF_PRE_GROUPE_REF1'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREGREF_DATESORTIENull() As Boolean
            Return Me.IsNull(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_DATESORTIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREGREF_DATESORTIENull()
            Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_DATESORTIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREGREF_TYPE_PRENull() As Boolean
            Return Me.IsNull(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_TYPE_PREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREGREF_TYPE_PRENull()
            Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_TYPE_PREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREGREF_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREGREF_CIP13Null()
            Me(Me.tablePREGREF_PRE_GROUPE_REF1.PREGREF_CIP13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRIPRE_PRIX_PRESENTATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRIPRE_PRIX_PRESENTATION As PRIPRE_PRIX_PRESENTATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRIPRE_PRIX_PRESENTATION = CType(Me.Table,PRIPRE_PRIX_PRESENTATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIPRE_DATE_APPLI_PK() As Date
            Get
                Return CType(Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_DATE_APPLI_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_DATE_APPLI_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIPRE_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIPRE_PRIX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRIPRE_PRIX' dans la table 'PRIPRE_PRIX_PRESENTATION' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIPRE_PRIX_EURO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIX_EUROColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRIPRE_PRIX_EURO' dans la table 'PRIPRE_PRIX_PRESENTAT"& _ 
                            "ION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIX_EUROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIPRE_Valide() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_ValideColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRIPRE_Valide' dans la table 'PRIPRE_PRIX_PRESENTATION"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_ValideColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIPRE_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRIPRE_CIP13' dans la table 'PRIPRE_PRIX_PRESENTATION'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIPRE_PRIXNull() As Boolean
            Return Me.IsNull(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIPRE_PRIXNull()
            Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIPRE_PRIX_EURONull() As Boolean
            Return Me.IsNull(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIX_EUROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIPRE_PRIX_EURONull()
            Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_PRIX_EUROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIPRE_ValideNull() As Boolean
            Return Me.IsNull(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_ValideColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIPRE_ValideNull()
            Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_ValideColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIPRE_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIPRE_CIP13Null()
            Me(Me.tablePRIPRE_PRIX_PRESENTATION.PRIPRE_CIP13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FORPRE_FORFAIT_PRERow
        Inherits Global.System.Data.DataRow
        
        Private tableFORPRE_FORFAIT_PRE As FORPRE_FORFAIT_PREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFORPRE_FORFAIT_PRE = CType(Me.Table,FORPRE_FORFAIT_PREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORPRE_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORPRE_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORPRE_FORFAIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_FORFAITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FORPRE_FORFAIT' dans la table 'FORPRE_FORFAIT_PRE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_FORFAITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORPRE_Valide() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_ValideColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FORPRE_Valide' dans la table 'FORPRE_FORFAIT_PRE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_ValideColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORPRE_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FORPRE_CIP13' dans la table 'FORPRE_FORFAIT_PRE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFORPRE_FORFAITNull() As Boolean
            Return Me.IsNull(Me.tableFORPRE_FORFAIT_PRE.FORPRE_FORFAITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFORPRE_FORFAITNull()
            Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_FORFAITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFORPRE_ValideNull() As Boolean
            Return Me.IsNull(Me.tableFORPRE_FORFAIT_PRE.FORPRE_ValideColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFORPRE_ValideNull()
            Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_ValideColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFORPRE_CIP13Null() As Boolean
            Return Me.IsNull(Me.tableFORPRE_FORFAIT_PRE.FORPRE_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFORPRE_CIP13Null()
            Me(Me.tableFORPRE_FORFAIT_PRE.FORPRE_CIP13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDF_CODIFRow
        Inherits Global.System.Data.DataRow
        
        Private tableCDF_CODIF As CDF_CODIFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDF_CODIF = CType(Me.Table,CDF_CODIFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NOM() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_DATECR() As Date
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCDF_CODIF.CDF_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDF_DATEMJ' dans la table 'CDF_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_VAL_NUM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDF_VAL_NUM' dans la table 'CDF_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NOMABRG() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NOMABRGColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NOMABRGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_UNIT_NUM() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_UNIT_NUMColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_UNIT_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_TEXTE() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDF_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCDF_CODIF.CDF_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDF_DATEMJNull()
            Me(Me.tableCDF_CODIF.CDF_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDF_VAL_NUMNull() As Boolean
            Return Me.IsNull(Me.tableCDF_CODIF.CDF_VAL_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDF_VAL_NUMNull()
            Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFCDFU_CDFURow
        Inherits Global.System.Data.DataRow
        
        Private tableCDFCDFU_CDFU As CDFCDFU_CDFUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFCDFU_CDFU = CType(Me.Table,CDFCDFU_CDFUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFCDFU_CDFUCUM_CODE_FK_PK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDFUCUM_CODE_FK_PKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDFCDFU_CDFUCUM_CODE_FK_PK' dans la table 'CDFCDFU_CDF"& _ 
                            "U' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDFUCUM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFCDFU_CDF_NUMERO_FK_PK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_NUMERO_FK_PKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDFCDFU_CDF_NUMERO_FK_PK' dans la table 'CDFCDFU_CDFU'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFCDFU_CDF_CODE_FK_PK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_CODE_FK_PKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDFCDFU_CDF_CODE_FK_PK' dans la table 'CDFCDFU_CDFU' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFUCUM_UCUMRow() As CDFUCUM_UCUMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__CDFCDFU_C__CDFCD__292D09F3")),CDFUCUM_UCUMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__CDFCDFU_C__CDFCD__292D09F3"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFCDFU_CDFUCUM_CODE_FK_PKNull() As Boolean
            Return Me.IsNull(Me.tableCDFCDFU_CDFU.CDFCDFU_CDFUCUM_CODE_FK_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFCDFU_CDFUCUM_CODE_FK_PKNull()
            Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDFUCUM_CODE_FK_PKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFCDFU_CDF_NUMERO_FK_PKNull() As Boolean
            Return Me.IsNull(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_NUMERO_FK_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFCDFU_CDF_NUMERO_FK_PKNull()
            Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_NUMERO_FK_PKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFCDFU_CDF_CODE_FK_PKNull() As Boolean
            Return Me.IsNull(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_CODE_FK_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFCDFU_CDF_CODE_FK_PKNull()
            Me(Me.tableCDFCDFU_CDFU.CDFCDFU_CDF_CODE_FK_PKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CATVO_CATEGORIEVOIERow
        Inherits Global.System.Data.DataRow
        
        Private tableCATVO_CATEGORIEVOIE As CATVO_CATEGORIEVOIEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCATVO_CATEGORIEVOIE = CType(Me.Table,CATVO_CATEGORIEVOIEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATVO_CDF_CAT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCATVO_CATEGORIEVOIE.CATVO_CDF_CAT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCATVO_CATEGORIEVOIE.CATVO_CDF_CAT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATVO_CDF_VO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCATVO_CATEGORIEVOIE.CATVO_CDF_VO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCATVO_CATEGORIEVOIE.CATVO_CDF_VO_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FOV_FORME_VIRTUELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableFOV_FORME_VIRTUELLE As FOV_FORME_VIRTUELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFOV_FORME_VIRTUELLE = CType(Me.Table,FOV_FORME_VIRTUELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FOV_LIBELLE' dans la table 'FOV_FORME_VIRTUELLE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FOV_CODE_REF' dans la table 'FOV_FORME_VIRTUELLE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOV_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOV_LIBELLENull()
            Me(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOV_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOV_CODE_REFNull()
            Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPF_MED_VIR_PERE_FORMERows() As MVPF_MED_VIR_PERE_FORMERow()
            If (Me.Table.ChildRelations("FOV_FORME_VIRTUELLE_MVPF") Is Nothing) Then
                Return New MVPF_MED_VIR_PERE_FORMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FOV_FORME_VIRTUELLE_MVPF")),MVPF_MED_VIR_PERE_FORMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERows() As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow()
            If (Me.Table.ChildRelations("FK__MVPRFOV_M__MVPRF__47B19113") Is Nothing) Then
                Return New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__MVPRFOV_M__MVPRF__47B19113")),MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAV_SUBSTANCE_VIRTUELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableSAV_SUBSTANCE_VIRTUELLE As SAV_SUBSTANCE_VIRTUELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAV_SUBSTANCE_VIRTUELLE = CType(Me.Table,SAV_SUBSTANCE_VIRTUELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAV_LIBELLE' dans la table 'SAV_SUBSTANCE_VIRTUELLE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAV_CODE_REF' dans la table 'SAV_SUBSTANCE_VIRTUELLE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAV_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAV_LIBELLENull()
            Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAV_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAV_CODE_REFNull()
            Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERows() As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow()
            If (Me.Table.ChildRelations("FK__MVPRSAV_M__MVPRS__43E1002F") Is Nothing) Then
                Return New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__MVPRSAV_M__MVPRS__43E1002F")),MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPSDU_MED_VIR_PERE_SARows() As MVPSDU_MED_VIR_PERE_SARow()
            If (Me.Table.ChildRelations("FK_SAV") Is Nothing) Then
                Return New MVPSDU_MED_VIR_PERE_SARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SAV")),MVPSDU_MED_VIR_PERE_SARow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPF_MED_VIR_PERE_FORMERow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPF_MED_VIR_PERE_FORME As MVPF_MED_VIR_PERE_FORMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPF_MED_VIR_PERE_FORME = CType(Me.Table,MVPF_MED_VIR_PERE_FORMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPF_GSP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_GSP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_GSP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPF_FOV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_FOV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_FOV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_FORME_VIRTUELLERow() As FOV_FORME_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FOV_FORME_VIRTUELLE_MVPF")),FOV_FORME_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FOV_FORME_VIRTUELLE_MVPF"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_GENERIQUE_SPECIALITERow() As GSP_GENERIQUE_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_GSP1")),GSP_GENERIQUE_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_GSP1"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFUCUM_UCUMRow
        Inherits Global.System.Data.DataRow
        
        Private tableCDFUCUM_UCUM As CDFUCUM_UCUMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFUCUM_UCUM = CType(Me.Table,CDFUCUM_UCUMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFUCUM_CODE_PK() As Integer
            Get
                Return CType(Me(Me.tableCDFUCUM_UCUM.CDFUCUM_CODE_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCDFUCUM_UCUM.CDFUCUM_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFUCUM_SYMBOLE() As String
            Get
                Return CType(Me(Me.tableCDFUCUM_UCUM.CDFUCUM_SYMBOLEColumn),String)
            End Get
            Set
                Me(Me.tableCDFUCUM_UCUM.CDFUCUM_SYMBOLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFUCUM_DATECR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCDFUCUM_UCUM.CDFUCUM_DATECRColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDFUCUM_DATECR' dans la table 'CDFUCUM_UCUM' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFUCUM_UCUM.CDFUCUM_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFUCUM_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCDFUCUM_UCUM.CDFUCUM_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDFUCUM_DATEMJ' dans la table 'CDFUCUM_UCUM' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFUCUM_UCUM.CDFUCUM_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFUCUM_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableCDFUCUM_UCUM.CDFUCUM_DATECRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFUCUM_DATECRNull()
            Me(Me.tableCDFUCUM_UCUM.CDFUCUM_DATECRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFUCUM_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCDFUCUM_UCUM.CDFUCUM_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFUCUM_DATEMJNull()
            Me(Me.tableCDFUCUM_UCUM.CDFUCUM_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCDFCDFU_CDFURows() As CDFCDFU_CDFURow()
            If (Me.Table.ChildRelations("FK__CDFCDFU_C__CDFCD__292D09F3") Is Nothing) Then
                Return New CDFCDFU_CDFURow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__CDFCDFU_C__CDFCD__292D09F3")),CDFCDFU_CDFURow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPR_MEDICAMENT_VIRTUEL_PERERow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPR_MEDICAMENT_VIRTUEL_PERE As MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE = CType(Me.Table,MVPR_MEDICAMENT_VIRTUEL_PEREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_DATECR() As Date
            Get
                Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_DATEMJ() As Date
            Get
                Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATEMJColumn),Date)
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPR_LIBELLE' dans la table 'MVPR_MEDICAMENT_VIRTUEL_P"& _ 
                            "ERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_ETAT_DISPO() As String
            Get
                Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_ETAT_DISPOColumn),String)
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_ETAT_DISPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_DATE_DISPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_DISPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPR_DATE_DISPO' dans la table 'MVPR_MEDICAMENT_VIRTUE"& _ 
                            "L_PERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_DISPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_DATE_RETRAIT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_RETRAITColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPR_DATE_RETRAIT' dans la table 'MVPR_MEDICAMENT_VIRT"& _ 
                            "UEL_PERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_RETRAITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPR_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPR_LIBELLENull()
            Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPR_DATE_DISPONull() As Boolean
            Return Me.IsNull(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_DISPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPR_DATE_DISPONull()
            Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_DISPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPR_DATE_RETRAITNull() As Boolean
            Return Me.IsNull(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_RETRAITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPR_DATE_RETRAITNull()
            Me(Me.tableMVPR_MEDICAMENT_VIRTUEL_PERE.MVPR_DATE_RETRAITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYMVPR_SYN_MEDIC_VIRTUEL_PERERows() As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow()
            If (Me.Table.ChildRelations("FK__SYMVPR_SY__SYMVP__3A5795F5") Is Nothing) Then
                Return New SYMVPR_SYN_MEDIC_VIRTUEL_PERERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__SYMVPR_SY__SYMVP__3A5795F5")),SYMVPR_SYN_MEDIC_VIRTUEL_PERERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPRMV_MED_VIR_VIR_PERERows() As MVPRMV_MED_VIR_VIR_PERERow()
            If (Me.Table.ChildRelations("FK__MVPRMV_ME__MVPRM__3E2826D9") Is Nothing) Then
                Return New MVPRMV_MED_VIR_VIR_PERERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__MVPRMV_ME__MVPRM__3E2826D9")),MVPRMV_MED_VIR_VIR_PERERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERows() As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow()
            If (Me.Table.ChildRelations("FK__MVPRSAV_M__MVPRS__42ECDBF6") Is Nothing) Then
                Return New MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__MVPRSAV_M__MVPRS__42ECDBF6")),MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERows() As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow()
            If (Me.Table.ChildRelations("FK__MVPRFOV_M__MVPRF__46BD6CDA") Is Nothing) Then
                Return New MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__MVPRFOV_M__MVPRF__46BD6CDA")),MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
        Inherits Global.System.Data.DataRow
        
        Private tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE As SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE = CType(Me.Table,SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYMVPR_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYMVPR_MVPR_CODE_FK_PK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_MVPR_CODE_FK_PKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SYMVPR_MVPR_CODE_FK_PK' dans la table 'SYMVPR_SYN_MEDI"& _ 
                            "C_VIRTUEL_PERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_MVPR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYMVPR_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SYMVPR_LIBELLE' dans la table 'SYMVPR_SYN_MEDIC_VIRTUE"& _ 
                            "L_PERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_MEDICAMENT_VIRTUEL_PERERow() As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__SYMVPR_SY__SYMVP__3A5795F5")),MVPR_MEDICAMENT_VIRTUEL_PERERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__SYMVPR_SY__SYMVP__3A5795F5"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYMVPR_MVPR_CODE_FK_PKNull() As Boolean
            Return Me.IsNull(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_MVPR_CODE_FK_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYMVPR_MVPR_CODE_FK_PKNull()
            Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_MVPR_CODE_FK_PKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYMVPR_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYMVPR_LIBELLENull()
            Me(Me.tableSYMVPR_SYN_MEDIC_VIRTUEL_PERE.SYMVPR_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPRMV_MED_VIR_VIR_PERERow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPRMV_MED_VIR_VIR_PERE As MVPRMV_MED_VIR_VIR_PEREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPRMV_MED_VIR_VIR_PERE = CType(Me.Table,MVPRMV_MED_VIR_VIR_PEREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRMV_MVPR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPRMV_MED_VIR_VIR_PERE.MVPRMV_MVPR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPRMV_MED_VIR_VIR_PERE.MVPRMV_MVPR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRMV_MV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPRMV_MED_VIR_VIR_PERE.MVPRMV_MV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPRMV_MED_VIR_VIR_PERE.MVPRMV_MV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_MEDICAMENT_VIRTUEL_PERERow() As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__MVPRMV_ME__MVPRM__3E2826D9")),MVPR_MEDICAMENT_VIRTUEL_PERERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__MVPRMV_ME__MVPRM__3E2826D9"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE = CType(Me.Table,MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRSAV_MVPR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_MVPR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_MVPR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRSAV_SAV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_SAV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_SAV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRSAV_NUM_ORD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_NUM_ORDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPRSAV_NUM_ORD' dans la table 'MVPRSAV_MED_VIR_PERE_S"& _ 
                            "UBSTANCE_VIRTUELLE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_MEDICAMENT_VIRTUEL_PERERow() As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__MVPRSAV_M__MVPRS__42ECDBF6")),MVPR_MEDICAMENT_VIRTUEL_PERERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__MVPRSAV_M__MVPRS__42ECDBF6"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__MVPRSAV_M__MVPRS__43E1002F")),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__MVPRSAV_M__MVPRS__43E1002F"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPRSAV_NUM_ORDNull() As Boolean
            Return Me.IsNull(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_NUM_ORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPRSAV_NUM_ORDNull()
            Me(Me.tableMVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE.MVPRSAV_NUM_ORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE = CType(Me.Table,MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRFOV_MVPR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.MVPRFOV_MVPR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.MVPRFOV_MVPR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPRFOV_FOV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.MVPRFOV_FOV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE.MVPRFOV_FOV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPR_MEDICAMENT_VIRTUEL_PERERow() As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__MVPRFOV_M__MVPRF__46BD6CDA")),MVPR_MEDICAMENT_VIRTUEL_PERERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__MVPRFOV_M__MVPRF__46BD6CDA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_FORME_VIRTUELLERow() As FOV_FORME_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__MVPRFOV_M__MVPRF__47B19113")),FOV_FORME_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__MVPRFOV_M__MVPRF__47B19113"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UNITFACTEQ_FACTEUR_EQUIVALENCERow
        Inherits Global.System.Data.DataRow
        
        Private tableUNITFACTEQ_FACTEUR_EQUIVALENCE As UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE = CType(Me.Table,UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNITFACTEQ_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNITFACTEQ_REF_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_REF_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_REF_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNITFACTEQ_CDF_NUM_FK_PK() As String
            Get
                Return CType(Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_CDF_NUM_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_CDF_NUM_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNITFACTEQ_FACTEQ() As Decimal
            Get
                Return CType(Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_FACTEQColumn),Decimal)
            End Get
            Set
                Me(Me.tableUNITFACTEQ_FACTEUR_EQUIVALENCE.UNITFACTEQ_FACTEQColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GSP_GENERIQUE_SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableGSP_GENERIQUE_SPECIALITE As GSP_GENERIQUE_SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGSP_GENERIQUE_SPECIALITE = CType(Me.Table,GSP_GENERIQUE_SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_NOM() As String
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_NOMColumn),String)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_VIRTUEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_VIRTUEL' dans la table 'GSP_GENERIQUE_SPECIAL"& _ 
                            "ITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_DATECR() As Date
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_DATEMJ' dans la table 'GSP_GENERIQUE_SPECIALITE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_PRESCRIPTION_DC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_PRESCRIPTION_DC' dans la table 'GSP_GENERIQUE_SPEC"& _ 
                            "IALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_SP_REFERENCE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_SP_REFERENCE' dans la table 'GSP_GENERIQUE_SP"& _ 
                            "ECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_INFO_GENERAL_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_INFO_GENERAL_TEXTE' dans la table 'GSP_GENERIQUE_S"& _ 
                            "PECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_VIRTUEL13() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_VIRTUEL13' dans la table 'GSP_GENERIQUE_SPECI"& _ 
                            "ALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_REF' dans la table 'GSP_GENERIQUE_SPECIALITE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_ETAT_DISPO() As String
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_ETAT_DISPOColumn),String)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_ETAT_DISPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_DATE_DISPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_DISPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_DATE_DISPO' dans la table 'GSP_GENERIQUE_SPECIALIT"& _ 
                            "E' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_DISPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_DATE_RETRAIT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_RETRAITColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_DATE_RETRAIT' dans la table 'GSP_GENERIQUE_SPECIAL"& _ 
                            "ITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_RETRAITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_VIRTUELNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_VIRTUELNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_DATEMJNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_PRESCRIPTION_DCNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_PRESCRIPTION_DCNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_SP_REFERENCENull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_SP_REFERENCENull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_INFO_GENERAL_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_INFO_GENERAL_TEXTENull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_VIRTUEL13Null() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_VIRTUEL13Null()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_REFNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_DATE_DISPONull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_DISPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_DATE_DISPONull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_DISPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_DATE_RETRAITNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_RETRAITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_DATE_RETRAITNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATE_RETRAITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPF_MED_VIR_PERE_FORMERows() As MVPF_MED_VIR_PERE_FORMERow()
            If (Me.Table.ChildRelations("FK_GSP1") Is Nothing) Then
                Return New MVPF_MED_VIR_PERE_FORMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_GSP1")),MVPF_MED_VIR_PERE_FORMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPSDU_MED_VIR_PERE_SARows() As MVPSDU_MED_VIR_PERE_SARow()
            If (Me.Table.ChildRelations("FK_GSP") Is Nothing) Then
                Return New MVPSDU_MED_VIR_PERE_SARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_GSP")),MVPSDU_MED_VIR_PERE_SARow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPSDU_MED_VIR_PERE_SARow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPSDU_MED_VIR_PERE_SA As MVPSDU_MED_VIR_PERE_SADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPSDU_MED_VIR_PERE_SA = CType(Me.Table,MVPSDU_MED_VIR_PERE_SADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_GSP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_GSP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_GSP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_SAV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_SAV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_SAV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_DOSAGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPSDU_DOSAGE' dans la table 'MVPSDU_MED_VIR_PERE_SA' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_CDF_UNITE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPSDU_CDF_UNITE' dans la table 'MVPSDU_MED_VIR_PERE_S"& _ 
                            "A' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_CODE_ANSM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPSDU_CODE_ANSM' dans la table 'MVPSDU_MED_VIR_PERE_S"& _ 
                            "A' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_NUM_ORD() As Integer
            Get
                Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_NUM_ORDColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_GENERIQUE_SPECIALITERow() As GSP_GENERIQUE_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_GSP")),GSP_GENERIQUE_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_GSP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SAV")),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SAV"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPSDU_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPSDU_DOSAGENull()
            Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPSDU_CDF_UNITENull() As Boolean
            Return Me.IsNull(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPSDU_CDF_UNITENull()
            Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPSDU_CODE_ANSMNull() As Boolean
            Return Me.IsNull(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPSDU_CODE_ANSMNull()
            Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDISPMAX_PRE_DISP_MAXIMALE1Row
        Inherits Global.System.Data.DataRow
        
        Private tablePREDISPMAX_PRE_DISP_MAXIMALE1 As PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1 = CType(Me.Table,PREDISPMAX_PRE_DISP_MAXIMALE1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_PRE_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_PRE_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISPMAX_PRE_CIP13' dans la table 'PREDISPMAX_PRE_DI"& _ 
                            "SP_MAXIMALE1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_PRE_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_MAXUCD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXUCDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISPMAX_MAXUCD' dans la table 'PREDISPMAX_PRE_DISP_"& _ 
                            "MAXIMALE1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_MAXCIP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXCIPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISPMAX_MAXCIP' dans la table 'PREDISPMAX_PRE_DISP_"& _ 
                            "MAXIMALE1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXCIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_CDF_TYPE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_CDF_TYPE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_CDF_TYPE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISPMAX_PRE_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_PRE_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISPMAX_PRE_CIP13Null()
            Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_PRE_CIP13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISPMAX_MAXUCDNull() As Boolean
            Return Me.IsNull(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXUCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISPMAX_MAXUCDNull()
            Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXUCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISPMAX_MAXCIPNull() As Boolean
            Return Me.IsNull(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXCIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISPMAX_MAXCIPNull()
            Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE1.PREDISPMAX_MAXCIPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDISP_PRE_DISPENSATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREDISP_PRE_DISPENSATION As PREDISP_PRE_DISPENSATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDISP_PRE_DISPENSATION = CType(Me.Table,PREDISP_PRE_DISPENSATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_NUMSEQ_PK() As Byte
            Get
                Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_NUMSEQ_PKColumn),Byte)
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_SAC_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_SAC_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISP_SAC_CODE_FK' dans la table 'PREDISP_PRE_DISPEN"& _ 
                            "SATION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_SAC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_UNITEDISP() As Decimal
            Get
                Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_UNITEDISPColumn),Decimal)
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_UNITEDISPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_CDF_UD_CODE_FK() As String
            Get
                Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_CDF_UD_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_CDF_UD_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISP_CIP13' dans la table 'PREDISP_PRE_DISPENSATION"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISP_DOSEFRAC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_DOSEFRACColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISP_DOSEFRAC' dans la table 'PREDISP_PRE_DISPENSAT"& _ 
                            "ION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_DOSEFRACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISP_SAC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_SAC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISP_SAC_CODE_FKNull()
            Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_SAC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISP_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISP_CIP13Null()
            Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_CIP13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISP_DOSEFRACNull() As Boolean
            Return Me.IsNull(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_DOSEFRACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISP_DOSEFRACNull()
            Me(Me.tablePREDISP_PRE_DISPENSATION.PREDISP_DOSEFRACColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREVOLSOL_VOLUME_SOLUTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tablePREVOLSOL_VOLUME_SOLUTION As PREVOLSOL_VOLUME_SOLUTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREVOLSOL_VOLUME_SOLUTION = CType(Me.Table,PREVOLSOL_VOLUME_SOLUTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREVOLSOL_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREVOLSOL_VOLSOLUTION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_VOLSOLUTIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREVOLSOL_VOLSOLUTION' dans la table 'PREVOLSOL_VOLUME"& _ 
                            "_SOLUTION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_VOLSOLUTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREVOLSOL_CDF_VOL_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CDF_VOL_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREVOLSOL_CDF_VOL_CODE_FK' dans la table 'PREVOLSOL_VO"& _ 
                            "LUME_SOLUTION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CDF_VOL_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREVOLSOL_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREVOLSOL_CIP13' dans la table 'PREVOLSOL_VOLUME_SOLUT"& _ 
                            "ION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREVOLSOL_VOLSOLUTIONNull() As Boolean
            Return Me.IsNull(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_VOLSOLUTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREVOLSOL_VOLSOLUTIONNull()
            Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_VOLSOLUTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREVOLSOL_CDF_VOL_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CDF_VOL_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREVOLSOL_CDF_VOL_CODE_FKNull()
            Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CDF_VOL_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREVOLSOL_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREVOLSOL_CIP13Null()
            Me(Me.tablePREVOLSOL_VOLUME_SOLUTION.PREVOLSOL_CIP13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDISPMAX_PRE_DISP_MAXIMALERow
        Inherits Global.System.Data.DataRow
        
        Private tablePREDISPMAX_PRE_DISP_MAXIMALE As PREDISPMAX_PRE_DISP_MAXIMALEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDISPMAX_PRE_DISP_MAXIMALE = CType(Me.Table,PREDISPMAX_PRE_DISP_MAXIMALEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_PRE_CIP13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_PRE_CIP13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISPMAX_PRE_CIP13' dans la table 'PREDISPMAX_PRE_DI"& _ 
                            "SP_MAXIMALE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_PRE_CIP13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_MAXUCD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXUCDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISPMAX_MAXUCD' dans la table 'PREDISPMAX_PRE_DISP_"& _ 
                            "MAXIMALE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_MAXCIP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXCIPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PREDISPMAX_MAXCIP' dans la table 'PREDISPMAX_PRE_DISP_"& _ 
                            "MAXIMALE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXCIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREDISPMAX_CDF_TYPE_FK_PK() As String
            Get
                Return CType(Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_CDF_TYPE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_CDF_TYPE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISPMAX_PRE_CIP13Null() As Boolean
            Return Me.IsNull(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_PRE_CIP13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISPMAX_PRE_CIP13Null()
            Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_PRE_CIP13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISPMAX_MAXUCDNull() As Boolean
            Return Me.IsNull(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXUCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISPMAX_MAXUCDNull()
            Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXUCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREDISPMAX_MAXCIPNull() As Boolean
            Return Me.IsNull(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXCIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREDISPMAX_MAXCIPNull()
            Me(Me.tablePREDISPMAX_PRE_DISP_MAXIMALE.PREDISPMAX_MAXCIPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYGSP_SYNONYME_GSPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYGSP_SYNONYME_GSPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYGSP_SYNONYME_GSPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYGSP_SYNONYME_GSPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SP_SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SP_SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SP_SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SP_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRE_PRESENTATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRE_PRESENTATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRE_PRESENTATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRE_PRESENTATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREUCD_COMMENT_DOSEUCDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREUCD_COMMENT_DOSEUCDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREUCD_COMMENT_DOSEUCDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREUCD_COMMENT_DOSEUCDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COCONT_COMPO_CONTENANTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COCONT_COMPO_CONTENANTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COCONT_COMPO_CONTENANTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COCONT_COMPO_CONTENANTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRECONT_PRE_CONTENANTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRECONT_PRE_CONTENANTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRECONT_PRE_CONTENANTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRECONT_PRE_CONTENANTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREMAT_PRE_MATERIAURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREMAT_PRE_MATERIAURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREMAT_PRE_MATERIAURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREMAT_PRE_MATERIAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRECAR_PRESENTATION_CARACTCOMPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRECAR_PRESENTATION_CARACTCOMPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRECAR_PRESENTATION_CARACTCOMPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRECAR_PRESENTATION_CARACTCOMPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRECEMB_PRE_CAREMBALLAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRECEMB_PRE_CAREMBALLAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRECEMB_PRE_CAREMBALLAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRECEMB_PRE_CAREMBALLAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRETSS_PRESENTATION_TAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRETSS_PRESENTATION_TAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRETSS_PRESENTATION_TAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRETSS_PRESENTATION_TAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRETSSH_PRE_TAUX_HOPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRETSSH_PRE_TAUX_HOPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRETSSH_PRE_TAUX_HOPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRETSSH_PRE_TAUX_HOPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRESTP_PRE_STPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRESTP_PRE_STPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRESTP_PRE_STPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRESTP_PRE_STPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRESTC_STATUTCOMP_PRESENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRESTC_STATUTCOMP_PRESENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRESTC_STATUTCOMP_PRESENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRESTC_STATUTCOMP_PRESENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRESTR_STATUT_REMBOURSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRESTR_STATUT_REMBOURSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRESTR_STATUT_REMBOURSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRESTR_STATUT_REMBOURSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRESTRTX_TEXTE_STAT_REMBOURSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRESTRTX_TEXTE_STAT_REMBOURSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRESTRTX_TEXTE_STAT_REMBOURSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRESTRTX_TEXTE_STAT_REMBOURSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREPER_PRESENTATION_PERIO_CSVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREPER_PRESENTATION_PERIO_CSVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREPER_PRESENTATION_PERIO_CSVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREPER_PRESENTATION_PERIO_CSVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PERCS_PERIODE_COND_CSVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERCS_PERIODE_COND_CSVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PERCS_PERIODE_COND_CSVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PERCS_PERIODE_COND_CSVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRECSVTX_TEXTE_CONSERVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRECSVTX_TEXTE_CONSERVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRECSVTX_TEXTE_CONSERVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRECSVTX_TEXTE_CONSERVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDILI_LIEU_DISPENSATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDILI_LIEU_DISPENSATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDILI_LIEU_DISPENSATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDILI_LIEU_DISPENSATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDICO_COMMENT_DISPENSATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDICO_COMMENT_DISPENSATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDICO_COMMENT_DISPENSATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDICO_COMMENT_DISPENSATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDITX_TEXTE_DISPENSATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDITX_TEXTE_DISPENSATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDITX_TEXTE_DISPENSATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDITX_TEXTE_DISPENSATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRESMR_PRE_SMR_ATRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRESMR_PRE_SMR_ATRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRESMR_PRE_SMR_ATRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRESMR_PRE_SMR_ATRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GSAC_PERE_SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GSAC_PERE_SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GSAC_PERE_SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GSAC_PERE_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GREF_GROUPE_SPECIALITE_REFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GREF_GROUPE_SPECIALITE_REFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GREF_GROUPE_SPECIALITE_REFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GREF_GROUPE_SPECIALITE_REFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPGREFR_GROUPE_SPE_REFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SPGREFR_GROUPE_SPE_REFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPGREFR_GROUPE_SPE_REFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPGREFR_GROUPE_SPE_REFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GREFTX_TEXTE_GROUPE_REFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GREFTX_TEXTE_GROUPE_REFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GREFTX_TEXTE_GROUPE_REFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GREFTX_TEXTE_GROUPE_REFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COSAU_COMPO_SUBAUX1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COSAU_COMPO_SUBAUX1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COSAU_COMPO_SUBAUX1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COSAU_COMPO_SUBAUX1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GSAU_PERE_SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GSAU_PERE_SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GSAU_PERE_SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GSAU_PERE_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYSAU_SYNONYME_SAURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYSAU_SYNONYME_SAURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYSAU_SYNONYME_SAURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYSAU_SYNONYME_SAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYFSAC_SYNONYMEFR_SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYFSAC_SYNONYMEFR_SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYFSAC_SYNONYMEFR_SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYFSAC_SYNONYMEFR_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYASAC_SYNONYMEANGLAIS_SACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYASAC_SYNONYMEANGLAIS_SACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYASAC_SYNONYMEANGLAIS_SACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYASAC_SYNONYMEANGLAIS_SACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SACCAS_SUBACT_CASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SACCAS_SUBACT_CASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SACCAS_SUBACT_CASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SACCAS_SUBACT_CASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ADSAC_AUTRE_DENOMINATION_SUBACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ADSAC_AUTRE_DENOMINATION_SUBACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ADSAC_AUTRE_DENOMINATION_SUBACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ADSAC_AUTRE_DENOMINATION_SUBACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SACCCH_SUBACT_CLASSECHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SACCCH_SUBACT_CLASSECHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SACCCH_SUBACT_CLASSECHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SACCCH_SUBACT_CLASSECHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SACCPH_SUBACT_CLASSEPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SACCPH_SUBACT_CLASSEPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SACCPH_SUBACT_CLASSEPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SACCPH_SUBACT_CLASSEPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SACCATC_SUBACT_CLASSEATCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SACCATC_SUBACT_CLASSEATCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SACCATC_SUBACT_CLASSEATCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SACCATC_SUBACT_CLASSEATCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAC_SUBACTIVERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAC_SUBACTIVERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAC_SUBACTIVERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAC_SUBACTIVERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRECPSSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRECPSSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRECPSSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRECPSSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COSAU_COMPO_SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COSAU_COMPO_SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COSAU_COMPO_SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COSAU_COMPO_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREGREF_PRE_GROUPE_REFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREGREF_PRE_GROUPE_REFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREGREF_PRE_GROUPE_REFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREGREF_PRE_GROUPE_REFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPGREFG_GROUPE_SPE_GENERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SPGREFG_GROUPE_SPE_GENERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPGREFG_GROUPE_SPE_GENERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPGREFG_GROUPE_SPE_GENERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREGREF_PRE_GROUPE_REF1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREGREF_PRE_GROUPE_REF1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREGREF_PRE_GROUPE_REF1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREGREF_PRE_GROUPE_REF1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRIPRE_PRIX_PRESENTATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRIPRE_PRIX_PRESENTATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRIPRE_PRIX_PRESENTATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRIPRE_PRIX_PRESENTATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FORPRE_FORFAIT_PRERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FORPRE_FORFAIT_PRERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FORPRE_FORFAIT_PRERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FORPRE_FORFAIT_PRERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDF_CODIFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CDF_CODIFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDF_CODIFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDF_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFCDFU_CDFURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CDFCDFU_CDFURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFCDFU_CDFURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFCDFU_CDFURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CATVO_CATEGORIEVOIERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CATVO_CATEGORIEVOIERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CATVO_CATEGORIEVOIERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CATVO_CATEGORIEVOIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FOV_FORME_VIRTUELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FOV_FORME_VIRTUELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FOV_FORME_VIRTUELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FOV_FORME_VIRTUELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAV_SUBSTANCE_VIRTUELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAV_SUBSTANCE_VIRTUELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAV_SUBSTANCE_VIRTUELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPF_MED_VIR_PERE_FORMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPF_MED_VIR_PERE_FORMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPF_MED_VIR_PERE_FORMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPF_MED_VIR_PERE_FORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFUCUM_UCUMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CDFUCUM_UCUMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFUCUM_UCUMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFUCUM_UCUMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPR_MEDICAMENT_VIRTUEL_PERERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPR_MEDICAMENT_VIRTUEL_PERERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPR_MEDICAMENT_VIRTUEL_PERERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPR_MEDICAMENT_VIRTUEL_PERERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYMVPR_SYN_MEDIC_VIRTUEL_PERERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYMVPR_SYN_MEDIC_VIRTUEL_PERERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPRMV_MED_VIR_VIR_PERERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPRMV_MED_VIR_VIR_PERERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPRMV_MED_VIR_VIR_PERERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPRMV_MED_VIR_VIR_PERERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UNITFACTEQ_FACTEUR_EQUIVALENCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UNITFACTEQ_FACTEUR_EQUIVALENCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UNITFACTEQ_FACTEUR_EQUIVALENCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UNITFACTEQ_FACTEUR_EQUIVALENCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GSP_GENERIQUE_SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GSP_GENERIQUE_SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GSP_GENERIQUE_SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GSP_GENERIQUE_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPSDU_MED_VIR_PERE_SARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPSDU_MED_VIR_PERE_SARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPSDU_MED_VIR_PERE_SARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPSDU_MED_VIR_PERE_SARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDISPMAX_PRE_DISP_MAXIMALE1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDISPMAX_PRE_DISP_MAXIMALE1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDISPMAX_PRE_DISP_MAXIMALE1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDISPMAX_PRE_DISP_MAXIMALE1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDISP_PRE_DISPENSATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDISP_PRE_DISPENSATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDISP_PRE_DISPENSATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDISP_PRE_DISPENSATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREVOLSOL_VOLUME_SOLUTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREVOLSOL_VOLUME_SOLUTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREVOLSOL_VOLUME_SOLUTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREVOLSOL_VOLUME_SOLUTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDISPMAX_PRE_DISP_MAXIMALERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDISPMAX_PRE_DISP_MAXIMALERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDISPMAX_PRE_DISP_MAXIMALERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDISPMAX_PRE_DISP_MAXIMALERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Nomenclature2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYGSP_SYNONYME_GSPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYGSP_SYNONYME_GSP"
            tableMapping.ColumnMappings.Add("SYGSP_NOM_PK", "SYGSP_NOM_PK")
            tableMapping.ColumnMappings.Add("SYGSP_GSP_CODE_FK", "SYGSP_GSP_CODE_FK")
            tableMapping.ColumnMappings.Add("SYGSP_NUMORD", "SYGSP_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYGSP_SYNONYME_GSP] WHERE (([SYGSP_NOM_PK] = @Original_S"& _ 
                "YGSP_NOM_PK) AND ([SYGSP_GSP_CODE_FK] = @Original_SYGSP_GSP_CODE_FK) AND ((@IsNu"& _ 
                "ll_SYGSP_NUMORD = 1 AND [SYGSP_NUMORD] IS NULL) OR ([SYGSP_NUMORD] = @Original_S"& _ 
                "YGSP_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYGSP_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYGSP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYGSP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYGSP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYGSP_SYNONYME_GSP] ([SYGSP_NOM_PK], [SYGSP_GSP_CODE_FK]"& _ 
                ", [SYGSP_NUMORD]) VALUES (@SYGSP_NOM_PK, @SYGSP_GSP_CODE_FK, @SYGSP_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT SYGSP_NOM_PK, SYGSP_GSP_CODE_FK, SYGSP_NUMORD FROM THERIAQUE.SYGSP_SYNONYME"& _ 
                "_GSP WHERE (SYGSP_NOM_PK = @SYGSP_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYGSP_SYNONYME_GSP] SET [SYGSP_NOM_PK] = @SYGSP_NOM_PK, [SYGS"& _ 
                "P_GSP_CODE_FK] = @SYGSP_GSP_CODE_FK, [SYGSP_NUMORD] = @SYGSP_NUMORD WHERE (([SYG"& _ 
                "SP_NOM_PK] = @Original_SYGSP_NOM_PK) AND ([SYGSP_GSP_CODE_FK] = @Original_SYGSP_"& _ 
                "GSP_CODE_FK) AND ((@IsNull_SYGSP_NUMORD = 1 AND [SYGSP_NUMORD] IS NULL) OR ([SYG"& _ 
                "SP_NUMORD] = @Original_SYGSP_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYGSP_NOM_PK, SYGSP_GSP_CODE_FK,"& _ 
                " SYGSP_NUMORD FROM THERIAQUE.SYGSP_SYNONYME_GSP WHERE (SYGSP_NOM_PK = @SYGSP_NOM"& _ 
                "_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYGSP_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYGSP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYGSP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYGSP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYGSP_NOM_PK, SYGSP_GSP_CODE_FK, SYGSP_NUMORD FROM THERIAQUE.SYGSP_SYNONYM" & _
                "E_GSP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYGSP_NOM_PK, SYGSP_GSP_CODE_FK, SYGSP_NUMORD FROM THERIAQUE.SYGSP_SYNONYM" & _
                "E_GSP" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  SYGSP_GSP_CODE_FK = @SYGSP_GSP_CODE_FK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYGSP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYGSP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable = New dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable, ByVal SYGSP_GSP_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYGSP_GSP_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYGSP_GSP_CODE_FK As Integer) As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYGSP_GSP_CODE_FK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable = New dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SYGSP_SYNONYME_GSPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SYGSP_SYNONYME_GSP")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYGSP_NOM_PK As String, ByVal Original_SYGSP_GSP_CODE_FK As Integer, ByVal Original_SYGSP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_SYGSP_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYGSP_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYGSP_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYGSP_GSP_CODE_FK, Integer)
            If (Original_SYGSP_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SYGSP_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYGSP_NOM_PK As String, ByVal SYGSP_GSP_CODE_FK As Integer, ByVal SYGSP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (SYGSP_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYGSP_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYGSP_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYGSP_GSP_CODE_FK, Integer)
            If (SYGSP_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYGSP_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYGSP_NOM_PK As String, ByVal SYGSP_GSP_CODE_FK As Integer, ByVal SYGSP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_SYGSP_NOM_PK As String, ByVal Original_SYGSP_GSP_CODE_FK As Integer, ByVal Original_SYGSP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (SYGSP_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYGSP_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYGSP_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYGSP_GSP_CODE_FK, Integer)
            If (SYGSP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYGSP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SYGSP_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYGSP_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYGSP_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SYGSP_GSP_CODE_FK, Integer)
            If (Original_SYGSP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SYGSP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYGSP_GSP_CODE_FK As Integer, ByVal SYGSP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_SYGSP_NOM_PK As String, ByVal Original_SYGSP_GSP_CODE_FK As Integer, ByVal Original_SYGSP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_SYGSP_NOM_PK, SYGSP_GSP_CODE_FK, SYGSP_NUMORD, Original_SYGSP_NOM_PK, Original_SYGSP_GSP_CODE_FK, Original_SYGSP_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SP_SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SP_SPECIALITE"
            tableMapping.ColumnMappings.Add("SP_CODE_SQ_PK", "SP_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SP_GSP_CODE_FK", "SP_GSP_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_SLAB_CODE_FK", "SP_CDF_SLAB_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_LI_CODE_FK", "SP_CDF_LI_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CATC_CODE_FK", "SP_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CEPH_CODE_FK", "SP_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CGE_CODE_FK", "SP_CGE_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_PR_CODE_FK", "SP_PR_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_TYPE_SPE", "SP_TYPE_SPE")
            tableMapping.ColumnMappings.Add("SP_GREF_FK", "SP_GREF_FK")
            tableMapping.ColumnMappings.Add("SP_GREF_DATECR_FK", "SP_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("SP_NOM", "SP_NOM")
            tableMapping.ColumnMappings.Add("SP_NOMCOMP", "SP_NOMCOMP")
            tableMapping.ColumnMappings.Add("SP_PH", "SP_PH")
            tableMapping.ColumnMappings.Add("SP_CIPUCD", "SP_CIPUCD")
            tableMapping.ColumnMappings.Add("SP_DATECR", "SP_DATECR")
            tableMapping.ColumnMappings.Add("SP_DATEMJ", "SP_DATEMJ")
            tableMapping.ColumnMappings.Add("SP_NL", "SP_NL")
            tableMapping.ColumnMappings.Add("SP_APHP", "SP_APHP")
            tableMapping.ColumnMappings.Add("SP_DATEJOGENE", "SP_DATEJOGENE")
            tableMapping.ColumnMappings.Add("SP_ORIGINE_GENE", "SP_ORIGINE_GENE")
            tableMapping.ColumnMappings.Add("SP_NOMLONG", "SP_NOMLONG")
            tableMapping.ColumnMappings.Add("SP_CDT_PRESCR_TEXTE", "SP_CDT_PRESCR_TEXTE")
            tableMapping.ColumnMappings.Add("SP_ATC_DDD_TEXTE", "SP_ATC_DDD_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SP_SPECIALITE] WHERE (([SP_CODE_SQ_PK] = @Original_SP_CO" & _
                "DE_SQ_PK) AND ((@IsNull_SP_GSP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP" & _
                "_GSP_CODE_FK] = @Original_SP_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Origina" & _
                "l_SP_CDF_SLAB_CODE_FK) AND ([SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) A" & _
                "ND ((@IsNull_SP_CATC_CODE_FK = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_COD" & _
                "E_FK] = @Original_SP_CATC_CODE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CE" & _
                "PH_CODE_FK] IS NULL) OR ([SP_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@" & _
                "IsNull_SP_CGE_CODE_FK = 1 AND [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @" & _
                "Original_SP_CGE_CODE_FK)) AND ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((" & _
                "@IsNull_SP_TYPE_SPE = 1 AND [SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original" & _
                "_SP_TYPE_SPE)) AND ((@IsNull_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GR" & _
                "EF_FK] = @Original_SP_GREF_FK)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF" & _
                "_DATECR_FK] IS NULL) OR ([SP_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND" & _
                " ([SP_NOM] = @Original_SP_NOM) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS " & _
                "NULL) OR ([SP_NOMCOMP] = @Original_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_" & _
                "PH] IS NULL) OR ([SP_PH] = @Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP" & _
                "_CIPUCD] IS NULL) OR ([SP_CIPUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Or" & _
                "iginal_SP_DATECR) AND ((@IsNull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_D" & _
                "ATEMJ] = @Original_SP_DATEMJ)) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR (" & _
                "[SP_NL] = @Original_SP_NL)) AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR " & _
                "([SP_APHP] = @Original_SP_APHP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOG" & _
                "ENE] IS NULL) OR ([SP_DATEJOGENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_O" & _
                "RIGINE_GENE = 1 AND [SP_ORIGINE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original" & _
                "_SP_ORIGINE_GENE)) AND ((@IsNull_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([S" & _
                "P_NOMLONG] = @Original_SP_NOMLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [S" & _
                "P_CDT_PRESCR_TEXTE] IS NULL) OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR" & _
                "_TEXTE)) AND ((@IsNull_SP_ATC_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR (" & _
                "[SP_ATC_DDD_TEXTE] = @Original_SP_ATC_DDD_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SP_SPECIALITE] ([SP_CODE_SQ_PK], [SP_GSP_CODE_FK], [SP_C" & _
                "DF_SLAB_CODE_FK], [SP_CDF_LI_CODE_FK], [SP_CATC_CODE_FK], [SP_CEPH_CODE_FK], [SP" & _
                "_CGE_CODE_FK], [SP_PR_CODE_FK], [SP_TYPE_SPE], [SP_GREF_FK], [SP_GREF_DATECR_FK]" & _
                ", [SP_NOM], [SP_NOMCOMP], [SP_PH], [SP_CIPUCD], [SP_DATECR], [SP_DATEMJ], [SP_NL" & _
                "], [SP_APHP], [SP_DATEJOGENE], [SP_ORIGINE_GENE], [SP_NOMLONG], [SP_CDT_PRESCR_T" & _
                "EXTE], [SP_ATC_DDD_TEXTE]) VALUES (@SP_CODE_SQ_PK, @SP_GSP_CODE_FK, @SP_CDF_SLAB" & _
                "_CODE_FK, @SP_CDF_LI_CODE_FK, @SP_CATC_CODE_FK, @SP_CEPH_CODE_FK, @SP_CGE_CODE_F" & _
                "K, @SP_PR_CODE_FK, @SP_TYPE_SPE, @SP_GREF_FK, @SP_GREF_DATECR_FK, @SP_NOM, @SP_N" & _
                "OMCOMP, @SP_PH, @SP_CIPUCD, @SP_DATECR, @SP_DATEMJ, @SP_NL, @SP_APHP, @SP_DATEJO" & _
                "GENE, @SP_ORIGINE_GENE, @SP_NOMLONG, @SP_CDT_PRESCR_TEXTE, @SP_ATC_DDD_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP" & _
                "_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_G" & _
                "REF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_D" & _
                "ATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR" & _
                "_TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE WHERE (SP_CODE_SQ_PK = @SP" & _
                "_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SP_SPECIALITE] SET [SP_CODE_SQ_PK] = @SP_CODE_SQ_PK, [SP_GSP_" & _
                "CODE_FK] = @SP_GSP_CODE_FK, [SP_CDF_SLAB_CODE_FK] = @SP_CDF_SLAB_CODE_FK, [SP_CD" & _
                "F_LI_CODE_FK] = @SP_CDF_LI_CODE_FK, [SP_CATC_CODE_FK] = @SP_CATC_CODE_FK, [SP_CE" & _
                "PH_CODE_FK] = @SP_CEPH_CODE_FK, [SP_CGE_CODE_FK] = @SP_CGE_CODE_FK, [SP_PR_CODE_" & _
                "FK] = @SP_PR_CODE_FK, [SP_TYPE_SPE] = @SP_TYPE_SPE, [SP_GREF_FK] = @SP_GREF_FK, " & _
                "[SP_GREF_DATECR_FK] = @SP_GREF_DATECR_FK, [SP_NOM] = @SP_NOM, [SP_NOMCOMP] = @SP" & _
                "_NOMCOMP, [SP_PH] = @SP_PH, [SP_CIPUCD] = @SP_CIPUCD, [SP_DATECR] = @SP_DATECR, " & _
                "[SP_DATEMJ] = @SP_DATEMJ, [SP_NL] = @SP_NL, [SP_APHP] = @SP_APHP, [SP_DATEJOGENE" & _
                "] = @SP_DATEJOGENE, [SP_ORIGINE_GENE] = @SP_ORIGINE_GENE, [SP_NOMLONG] = @SP_NOM" & _
                "LONG, [SP_CDT_PRESCR_TEXTE] = @SP_CDT_PRESCR_TEXTE, [SP_ATC_DDD_TEXTE] = @SP_ATC" & _
                "_DDD_TEXTE WHERE (([SP_CODE_SQ_PK] = @Original_SP_CODE_SQ_PK) AND ((@IsNull_SP_G" & _
                "SP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP_GSP_CODE_FK] = @Original_SP" & _
                "_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Original_SP_CDF_SLAB_CODE_FK) AND (" & _
                "[SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) AND ((@IsNull_SP_CATC_CODE_FK" & _
                " = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_CODE_FK] = @Original_SP_CATC_CO" & _
                "DE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CEPH_CODE_FK] IS NULL) OR ([SP" & _
                "_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@IsNull_SP_CGE_CODE_FK = 1 AN" & _
                "D [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @Original_SP_CGE_CODE_FK)) AN" & _
                "D ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((@IsNull_SP_TYPE_SPE = 1 AND " & _
                "[SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original_SP_TYPE_SPE)) AND ((@IsNull" & _
                "_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GREF_FK] = @Original_SP_GREF_F" & _
                "K)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF_DATECR_FK] IS NULL) OR ([SP" & _
                "_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND ([SP_NOM] = @Original_SP_NO" & _
                "M) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS NULL) OR ([SP_NOMCOMP] = @Or" & _
                "iginal_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_PH] IS NULL) OR ([SP_PH] = @" & _
                "Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP_CIPUCD] IS NULL) OR ([SP_CI" & _
                "PUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Original_SP_DATECR) AND ((@IsN" & _
                "ull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_DATEMJ] = @Original_SP_DATEMJ" & _
                ")) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR ([SP_NL] = @Original_SP_NL)) " & _
                "AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR ([SP_APHP] = @Original_SP_AP" & _
                "HP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOGENE] IS NULL) OR ([SP_DATEJO" & _
                "GENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_ORIGINE_GENE = 1 AND [SP_ORIG" & _
                "INE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original_SP_ORIGINE_GENE)) AND ((@Is" & _
                "Null_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([SP_NOMLONG] = @Original_SP_NO" & _
                "MLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [SP_CDT_PRESCR_TEXTE] IS NULL)" & _
                " OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR_TEXTE)) AND ((@IsNull_SP_AT" & _
                "C_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR ([SP_ATC_DDD_TEXTE] = @Origin" & _
                "al_SP_ATC_DDD_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_" & _
                "FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_C" & _
                "ODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, S" & _
                "P_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, " & _
                "SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE W" & _
                "HERE (SP_CODE_SQ_PK = @SP_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_" & _
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR" & _
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA" & _
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_" & _
                "TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_" & _
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR" & _
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA" & _
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_" & _
                "TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SP_CODE_SQ_PK = @SP_" & _
                "CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_" & _
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR" & _
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA" & _
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_" & _
                "TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SP_GSP_CODE_FK = @SP" & _
                "_GSP_CODE_FK"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable = New dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable, ByVal SP_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SP_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable = New dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCodeVirt(ByVal dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable, ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCodeVirt(ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer)) As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable = New dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SP_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SP_SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SP_CODE_SQ_PK, Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SP_CDF_SLAB_CODE_FK, String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SP_CDF_LI_CODE_FK, String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SP_CATC_CODE_FK, String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SP_CEPH_CODE_FK, String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SP_PR_CODE_FK, Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SP_TYPE_SPE, String)
            End If
            If (Original_SP_GREF_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SP_NOM, String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SP_NOMCOMP, String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SP_PH, String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SP_CIPUCD, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_SP_DATECR, Date)
            If (Original_SP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SP_NL, String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_SP_APHP, String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_SP_ORIGINE_GENE, String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_SP_NOMLONG, String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_SP_CDT_PRESCR_TEXTE, String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_SP_ATC_DDD_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As Global.System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK, String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK, String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK, String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK, String)
            End If
            If (SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(SP_PR_CODE_FK, Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SP_TYPE_SPE, String)
            End If
            If (SP_GREF_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SP_NOM, String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SP_NOMCOMP, String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SP_PH, String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SP_CIPUCD, String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(SP_DATECR, Date)
            If (SP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SP_NL, String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SP_APHP, String)
            End If
            If (SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE, String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SP_NOMLONG, String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE, String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As Global.System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String, _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK, String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK, String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK, String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK, String)
            End If
            If (SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SP_PR_CODE_FK, Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SP_TYPE_SPE, String)
            End If
            If (SP_GREF_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SP_NOM, String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SP_NOMCOMP, String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SP_PH, String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SP_CIPUCD, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SP_DATECR, Date)
            If (SP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SP_NL, String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SP_APHP, String)
            End If
            If (SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE, String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SP_NOMLONG, String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE, String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_SP_CODE_SQ_PK, Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SP_CDF_SLAB_CODE_FK, String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SP_CDF_LI_CODE_FK, String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SP_CATC_CODE_FK, String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SP_CEPH_CODE_FK, String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_SP_PR_CODE_FK, Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_SP_TYPE_SPE, String)
            End If
            If (Original_SP_GREF_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_SP_NOM, String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_SP_NOMCOMP, String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_SP_PH, String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_SP_CIPUCD, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_SP_DATECR, Date)
            If (Original_SP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SP_NL, String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_SP_APHP, String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_SP_ORIGINE_GENE, String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_SP_NOMLONG, String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_SP_CDT_PRESCR_TEXTE, String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_SP_ATC_DDD_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As Global.System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As Global.System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String, _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As Global.System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String) As Integer
            Return Me.Update(Original_SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE, Original_SP_CODE_SQ_PK, Original_SP_GSP_CODE_FK, Original_SP_CDF_SLAB_CODE_FK, Original_SP_CDF_LI_CODE_FK, Original_SP_CATC_CODE_FK, Original_SP_CEPH_CODE_FK, Original_SP_CGE_CODE_FK, Original_SP_PR_CODE_FK, Original_SP_TYPE_SPE, Original_SP_GREF_FK, Original_SP_GREF_DATECR_FK, Original_SP_NOM, Original_SP_NOMCOMP, Original_SP_PH, Original_SP_CIPUCD, Original_SP_DATECR, Original_SP_DATEMJ, Original_SP_NL, Original_SP_APHP, Original_SP_DATEJOGENE, Original_SP_ORIGINE_GENE, Original_SP_NOMLONG, Original_SP_CDT_PRESCR_TEXTE, Original_SP_ATC_DDD_TEXTE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRE_PRESENTATIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRE_PRESENTATION"
            tableMapping.ColumnMappings.Add("PRE_CODE_PK", "PRE_CODE_PK")
            tableMapping.ColumnMappings.Add("PRE_SP_CODE_FK", "PRE_SP_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_EAN_REF", "PRE_EAN_REF")
            tableMapping.ColumnMappings.Add("PRE_NBUNITE", "PRE_NBUNITE")
            tableMapping.ColumnMappings.Add("PRE_CDF_UP_CODE_FK", "PRE_CDF_UP_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CACDT_TEXTE", "PRE_CACDT_TEXTE")
            tableMapping.ColumnMappings.Add("PRE_CDF_RH_CODE_FK", "PRE_CDF_RH_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CDF_LI_CODE_FK", "PRE_CDF_LI_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_ETAT_COMMER", "PRE_ETAT_COMMER")
            tableMapping.ColumnMappings.Add("PRE_DATECOMMER", "PRE_DATECOMMER")
            tableMapping.ColumnMappings.Add("PRE_DATESUP", "PRE_DATESUP")
            tableMapping.ColumnMappings.Add("PRE_CDF_PU_CODE_FK", "PRE_CDF_PU_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CEPH_CODE_FK", "PRE_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CATC_CODE_FK", "PRE_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_NATUCD_CDF_CODE_FK", "PRE_NATUCD_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_NATUCD_CDF_NUM_FK", "PRE_NATUCD_CDF_NUM_FK")
            tableMapping.ColumnMappings.Add("PRE_DATEJOCIP", "PRE_DATEJOCIP")
            tableMapping.ColumnMappings.Add("PRE_AGRCOLL", "PRE_AGRCOLL")
            tableMapping.ColumnMappings.Add("PRE_DATEJOCOLL", "PRE_DATEJOCOLL")
            tableMapping.ColumnMappings.Add("PRE_DATEFINCOLL", "PRE_DATEFINCOLL")
            tableMapping.ColumnMappings.Add("PRE_DATE_APPLIFINCOLL", "PRE_DATE_APPLIFINCOLL")
            tableMapping.ColumnMappings.Add("PRE_PARTSTATUT", "PRE_PARTSTATUT")
            tableMapping.ColumnMappings.Add("PRE_TSS_TEXTE", "PRE_TSS_TEXTE")
            tableMapping.ColumnMappings.Add("PRE_CONSAPOUV", "PRE_CONSAPOUV")
            tableMapping.ColumnMappings.Add("PRE_LIB_CEPS", "PRE_LIB_CEPS")
            tableMapping.ColumnMappings.Add("PRE_ADMIN", "PRE_ADMIN")
            tableMapping.ColumnMappings.Add("PRE_DATECR", "PRE_DATECR")
            tableMapping.ColumnMappings.Add("PRE_DATEMJ", "PRE_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRE_PRESENTATION] WHERE (([PRE_CODE_PK] = @Original_PRE_"& _ 
                "CODE_PK) AND ([PRE_SP_CODE_FK] = @Original_PRE_SP_CODE_FK) AND ((@IsNull_PRE_EAN"& _ 
                "_REF = 1 AND [PRE_EAN_REF] IS NULL) OR ([PRE_EAN_REF] = @Original_PRE_EAN_REF)) "& _ 
                "AND ((@IsNull_PRE_NBUNITE = 1 AND [PRE_NBUNITE] IS NULL) OR ([PRE_NBUNITE] = @Or"& _ 
                "iginal_PRE_NBUNITE)) AND ((@IsNull_PRE_CDF_UP_CODE_FK = 1 AND [PRE_CDF_UP_CODE_F"& _ 
                "K] IS NULL) OR ([PRE_CDF_UP_CODE_FK] = @Original_PRE_CDF_UP_CODE_FK)) AND ((@IsN"& _ 
                "ull_PRE_CACDT_TEXTE = 1 AND [PRE_CACDT_TEXTE] IS NULL) OR ([PRE_CACDT_TEXTE] = @"& _ 
                "Original_PRE_CACDT_TEXTE)) AND ([PRE_CDF_RH_CODE_FK] = @Original_PRE_CDF_RH_CODE"& _ 
                "_FK) AND ((@IsNull_PRE_CDF_LI_CODE_FK = 1 AND [PRE_CDF_LI_CODE_FK] IS NULL) OR ("& _ 
                "[PRE_CDF_LI_CODE_FK] = @Original_PRE_CDF_LI_CODE_FK)) AND ((@IsNull_PRE_ETAT_COM"& _ 
                "MER = 1 AND [PRE_ETAT_COMMER] IS NULL) OR ([PRE_ETAT_COMMER] = @Original_PRE_ETA"& _ 
                "T_COMMER)) AND ((@IsNull_PRE_DATECOMMER = 1 AND [PRE_DATECOMMER] IS NULL) OR ([P"& _ 
                "RE_DATECOMMER] = @Original_PRE_DATECOMMER)) AND ((@IsNull_PRE_DATESUP = 1 AND [P"& _ 
                "RE_DATESUP] IS NULL) OR ([PRE_DATESUP] = @Original_PRE_DATESUP)) AND ((@IsNull_P"& _ 
                "RE_CDF_PU_CODE_FK = 1 AND [PRE_CDF_PU_CODE_FK] IS NULL) OR ([PRE_CDF_PU_CODE_FK]"& _ 
                " = @Original_PRE_CDF_PU_CODE_FK)) AND ((@IsNull_PRE_CEPH_CODE_FK = 1 AND [PRE_CE"& _ 
                "PH_CODE_FK] IS NULL) OR ([PRE_CEPH_CODE_FK] = @Original_PRE_CEPH_CODE_FK)) AND ("& _ 
                "(@IsNull_PRE_CATC_CODE_FK = 1 AND [PRE_CATC_CODE_FK] IS NULL) OR ([PRE_CATC_CODE"& _ 
                "_FK] = @Original_PRE_CATC_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_CODE_FK = 1 AND"& _ 
                " [PRE_NATUCD_CDF_CODE_FK] IS NULL) OR ([PRE_NATUCD_CDF_CODE_FK] = @Original_PRE_"& _ 
                "NATUCD_CDF_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_NUM_FK = 1 AND [PRE_NATUCD_CDF"& _ 
                "_NUM_FK] IS NULL) OR ([PRE_NATUCD_CDF_NUM_FK] = @Original_PRE_NATUCD_CDF_NUM_FK)"& _ 
                ") AND ((@IsNull_PRE_DATEJOCIP = 1 AND [PRE_DATEJOCIP] IS NULL) OR ([PRE_DATEJOCI"& _ 
                "P] = @Original_PRE_DATEJOCIP)) AND ((@IsNull_PRE_AGRCOLL = 1 AND [PRE_AGRCOLL] I"& _ 
                "S NULL) OR ([PRE_AGRCOLL] = @Original_PRE_AGRCOLL)) AND ((@IsNull_PRE_DATEJOCOLL"& _ 
                " = 1 AND [PRE_DATEJOCOLL] IS NULL) OR ([PRE_DATEJOCOLL] = @Original_PRE_DATEJOCO"& _ 
                "LL)) AND ((@IsNull_PRE_DATEFINCOLL = 1 AND [PRE_DATEFINCOLL] IS NULL) OR ([PRE_D"& _ 
                "ATEFINCOLL] = @Original_PRE_DATEFINCOLL)) AND ((@IsNull_PRE_DATE_APPLIFINCOLL = "& _ 
                "1 AND [PRE_DATE_APPLIFINCOLL] IS NULL) OR ([PRE_DATE_APPLIFINCOLL] = @Original_P"& _ 
                "RE_DATE_APPLIFINCOLL)) AND ((@IsNull_PRE_PARTSTATUT = 1 AND [PRE_PARTSTATUT] IS "& _ 
                "NULL) OR ([PRE_PARTSTATUT] = @Original_PRE_PARTSTATUT)) AND ((@IsNull_PRE_TSS_TE"& _ 
                "XTE = 1 AND [PRE_TSS_TEXTE] IS NULL) OR ([PRE_TSS_TEXTE] = @Original_PRE_TSS_TEX"& _ 
                "TE)) AND ((@IsNull_PRE_LIB_CEPS = 1 AND [PRE_LIB_CEPS] IS NULL) OR ([PRE_LIB_CEP"& _ 
                "S] = @Original_PRE_LIB_CEPS)) AND ((@IsNull_PRE_ADMIN = 1 AND [PRE_ADMIN] IS NUL"& _ 
                "L) OR ([PRE_ADMIN] = @Original_PRE_ADMIN)) AND ([PRE_DATECR] = @Original_PRE_DAT"& _ 
                "ECR) AND ((@IsNull_PRE_DATEMJ = 1 AND [PRE_DATEMJ] IS NULL) OR ([PRE_DATEMJ] = @"& _ 
                "Original_PRE_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_SP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_EAN_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_EAN_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_NBUNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_NBUNITE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_UP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_UP_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CACDT_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CACDT_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_RH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_ETAT_COMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATECOMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATESUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATESUP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_PU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_PU_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CEPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCIP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCIP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_AGRCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_AGRCOLL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEFINCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATE_APPLIFINCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATE_APPLIFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_PARTSTATUT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_PARTSTATUT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_TSS_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_TSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_LIB_CEPS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_LIB_CEPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_ADMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_ADMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRE_PRESENTATION] ([PRE_CODE_PK], [PRE_SP_CODE_FK], [PRE"& _ 
                "_EAN_REF], [PRE_NBUNITE], [PRE_CDF_UP_CODE_FK], [PRE_CACDT_TEXTE], [PRE_CDF_RH_C"& _ 
                "ODE_FK], [PRE_CDF_LI_CODE_FK], [PRE_ETAT_COMMER], [PRE_DATECOMMER], [PRE_DATESUP"& _ 
                "], [PRE_CDF_PU_CODE_FK], [PRE_CEPH_CODE_FK], [PRE_CATC_CODE_FK], [PRE_NATUCD_CDF"& _ 
                "_CODE_FK], [PRE_NATUCD_CDF_NUM_FK], [PRE_DATEJOCIP], [PRE_AGRCOLL], [PRE_DATEJOC"& _ 
                "OLL], [PRE_DATEFINCOLL], [PRE_DATE_APPLIFINCOLL], [PRE_PARTSTATUT], [PRE_TSS_TEX"& _ 
                "TE], [PRE_CONSAPOUV], [PRE_LIB_CEPS], [PRE_ADMIN], [PRE_DATECR], [PRE_DATEMJ]) V"& _ 
                "ALUES (@PRE_CODE_PK, @PRE_SP_CODE_FK, @PRE_EAN_REF, @PRE_NBUNITE, @PRE_CDF_UP_CO"& _ 
                "DE_FK, @PRE_CACDT_TEXTE, @PRE_CDF_RH_CODE_FK, @PRE_CDF_LI_CODE_FK, @PRE_ETAT_COM"& _ 
                "MER, @PRE_DATECOMMER, @PRE_DATESUP, @PRE_CDF_PU_CODE_FK, @PRE_CEPH_CODE_FK, @PRE"& _ 
                "_CATC_CODE_FK, @PRE_NATUCD_CDF_CODE_FK, @PRE_NATUCD_CDF_NUM_FK, @PRE_DATEJOCIP, "& _ 
                "@PRE_AGRCOLL, @PRE_DATEJOCOLL, @PRE_DATEFINCOLL, @PRE_DATE_APPLIFINCOLL, @PRE_PA"& _ 
                "RTSTATUT, @PRE_TSS_TEXTE, @PRE_CONSAPOUV, @PRE_LIB_CEPS, @PRE_ADMIN, @PRE_DATECR"& _ 
                ", @PRE_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, P"& _ 
                "RE_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_"& _ 
                "ETAT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, "& _ 
                "PRE_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, "& _ 
                "PRE_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTA"& _ 
                "TUT, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATE"& _ 
                "MJ FROM THERIAQUE.PRE_PRESENTATION WHERE (PRE_CODE_PK = @PRE_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_SP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_EAN_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_NBUNITE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_UP_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CACDT_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_RH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATESUP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_PU_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEJOCIP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_AGRCOLL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEJOCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATE_APPLIFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_PARTSTATUT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_TSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CONSAPOUV", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CONSAPOUV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_LIB_CEPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_ADMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRE_PRESENTATION] SET [PRE_CODE_PK] = @PRE_CODE_PK, [PRE_SP_C"& _ 
                "ODE_FK] = @PRE_SP_CODE_FK, [PRE_EAN_REF] = @PRE_EAN_REF, [PRE_NBUNITE] = @PRE_NB"& _ 
                "UNITE, [PRE_CDF_UP_CODE_FK] = @PRE_CDF_UP_CODE_FK, [PRE_CACDT_TEXTE] = @PRE_CACD"& _ 
                "T_TEXTE, [PRE_CDF_RH_CODE_FK] = @PRE_CDF_RH_CODE_FK, [PRE_CDF_LI_CODE_FK] = @PRE"& _ 
                "_CDF_LI_CODE_FK, [PRE_ETAT_COMMER] = @PRE_ETAT_COMMER, [PRE_DATECOMMER] = @PRE_D"& _ 
                "ATECOMMER, [PRE_DATESUP] = @PRE_DATESUP, [PRE_CDF_PU_CODE_FK] = @PRE_CDF_PU_CODE"& _ 
                "_FK, [PRE_CEPH_CODE_FK] = @PRE_CEPH_CODE_FK, [PRE_CATC_CODE_FK] = @PRE_CATC_CODE"& _ 
                "_FK, [PRE_NATUCD_CDF_CODE_FK] = @PRE_NATUCD_CDF_CODE_FK, [PRE_NATUCD_CDF_NUM_FK]"& _ 
                " = @PRE_NATUCD_CDF_NUM_FK, [PRE_DATEJOCIP] = @PRE_DATEJOCIP, [PRE_AGRCOLL] = @PR"& _ 
                "E_AGRCOLL, [PRE_DATEJOCOLL] = @PRE_DATEJOCOLL, [PRE_DATEFINCOLL] = @PRE_DATEFINC"& _ 
                "OLL, [PRE_DATE_APPLIFINCOLL] = @PRE_DATE_APPLIFINCOLL, [PRE_PARTSTATUT] = @PRE_P"& _ 
                "ARTSTATUT, [PRE_TSS_TEXTE] = @PRE_TSS_TEXTE, [PRE_CONSAPOUV] = @PRE_CONSAPOUV, ["& _ 
                "PRE_LIB_CEPS] = @PRE_LIB_CEPS, [PRE_ADMIN] = @PRE_ADMIN, [PRE_DATECR] = @PRE_DAT"& _ 
                "ECR, [PRE_DATEMJ] = @PRE_DATEMJ WHERE (([PRE_CODE_PK] = @Original_PRE_CODE_PK) A"& _ 
                "ND ([PRE_SP_CODE_FK] = @Original_PRE_SP_CODE_FK) AND ((@IsNull_PRE_EAN_REF = 1 A"& _ 
                "ND [PRE_EAN_REF] IS NULL) OR ([PRE_EAN_REF] = @Original_PRE_EAN_REF)) AND ((@IsN"& _ 
                "ull_PRE_NBUNITE = 1 AND [PRE_NBUNITE] IS NULL) OR ([PRE_NBUNITE] = @Original_PRE"& _ 
                "_NBUNITE)) AND ((@IsNull_PRE_CDF_UP_CODE_FK = 1 AND [PRE_CDF_UP_CODE_FK] IS NULL"& _ 
                ") OR ([PRE_CDF_UP_CODE_FK] = @Original_PRE_CDF_UP_CODE_FK)) AND ((@IsNull_PRE_CA"& _ 
                "CDT_TEXTE = 1 AND [PRE_CACDT_TEXTE] IS NULL) OR ([PRE_CACDT_TEXTE] = @Original_P"& _ 
                "RE_CACDT_TEXTE)) AND ([PRE_CDF_RH_CODE_FK] = @Original_PRE_CDF_RH_CODE_FK) AND ("& _ 
                "(@IsNull_PRE_CDF_LI_CODE_FK = 1 AND [PRE_CDF_LI_CODE_FK] IS NULL) OR ([PRE_CDF_L"& _ 
                "I_CODE_FK] = @Original_PRE_CDF_LI_CODE_FK)) AND ((@IsNull_PRE_ETAT_COMMER = 1 AN"& _ 
                "D [PRE_ETAT_COMMER] IS NULL) OR ([PRE_ETAT_COMMER] = @Original_PRE_ETAT_COMMER))"& _ 
                " AND ((@IsNull_PRE_DATECOMMER = 1 AND [PRE_DATECOMMER] IS NULL) OR ([PRE_DATECOM"& _ 
                "MER] = @Original_PRE_DATECOMMER)) AND ((@IsNull_PRE_DATESUP = 1 AND [PRE_DATESUP"& _ 
                "] IS NULL) OR ([PRE_DATESUP] = @Original_PRE_DATESUP)) AND ((@IsNull_PRE_CDF_PU_"& _ 
                "CODE_FK = 1 AND [PRE_CDF_PU_CODE_FK] IS NULL) OR ([PRE_CDF_PU_CODE_FK] = @Origin"& _ 
                "al_PRE_CDF_PU_CODE_FK)) AND ((@IsNull_PRE_CEPH_CODE_FK = 1 AND [PRE_CEPH_CODE_FK"& _ 
                "] IS NULL) OR ([PRE_CEPH_CODE_FK] = @Original_PRE_CEPH_CODE_FK)) AND ((@IsNull_P"& _ 
                "RE_CATC_CODE_FK = 1 AND [PRE_CATC_CODE_FK] IS NULL) OR ([PRE_CATC_CODE_FK] = @Or"& _ 
                "iginal_PRE_CATC_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_CODE_FK = 1 AND [PRE_NATU"& _ 
                "CD_CDF_CODE_FK] IS NULL) OR ([PRE_NATUCD_CDF_CODE_FK] = @Original_PRE_NATUCD_CDF"& _ 
                "_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_NUM_FK = 1 AND [PRE_NATUCD_CDF_NUM_FK] I"& _ 
                "S NULL) OR ([PRE_NATUCD_CDF_NUM_FK] = @Original_PRE_NATUCD_CDF_NUM_FK)) AND ((@I"& _ 
                "sNull_PRE_DATEJOCIP = 1 AND [PRE_DATEJOCIP] IS NULL) OR ([PRE_DATEJOCIP] = @Orig"& _ 
                "inal_PRE_DATEJOCIP)) AND ((@IsNull_PRE_AGRCOLL = 1 AND [PRE_AGRCOLL] IS NULL) OR"& _ 
                " ([PRE_AGRCOLL] = @Original_PRE_AGRCOLL)) AND ((@IsNull_PRE_DATEJOCOLL = 1 AND ["& _ 
                "PRE_DATEJOCOLL] IS NULL) OR ([PRE_DATEJOCOLL] = @Original_PRE_DATEJOCOLL)) AND ("& _ 
                "(@IsNull_PRE_DATEFINCOLL = 1 AND [PRE_DATEFINCOLL] IS NULL) OR ([PRE_DATEFINCOLL"& _ 
                "] = @Original_PRE_DATEFINCOLL)) AND ((@IsNull_PRE_DATE_APPLIFINCOLL = 1 AND [PRE"& _ 
                "_DATE_APPLIFINCOLL] IS NULL) OR ([PRE_DATE_APPLIFINCOLL] = @Original_PRE_DATE_AP"& _ 
                "PLIFINCOLL)) AND ((@IsNull_PRE_PARTSTATUT = 1 AND [PRE_PARTSTATUT] IS NULL) OR ("& _ 
                "[PRE_PARTSTATUT] = @Original_PRE_PARTSTATUT)) AND ((@IsNull_PRE_TSS_TEXTE = 1 AN"& _ 
                "D [PRE_TSS_TEXTE] IS NULL) OR ([PRE_TSS_TEXTE] = @Original_PRE_TSS_TEXTE)) AND ("& _ 
                "(@IsNull_PRE_LIB_CEPS = 1 AND [PRE_LIB_CEPS] IS NULL) OR ([PRE_LIB_CEPS] = @Orig"& _ 
                "inal_PRE_LIB_CEPS)) AND ((@IsNull_PRE_ADMIN = 1 AND [PRE_ADMIN] IS NULL) OR ([PR"& _ 
                "E_ADMIN] = @Original_PRE_ADMIN)) AND ([PRE_DATECR] = @Original_PRE_DATECR) AND ("& _ 
                "(@IsNull_PRE_DATEMJ = 1 AND [PRE_DATEMJ] IS NULL) OR ([PRE_DATEMJ] = @Original_P"& _ 
                "RE_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE"& _ 
                "_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ET"& _ 
                "AT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PR"& _ 
                "E_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PR"& _ 
                "E_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATU"& _ 
                "T, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ"& _ 
                " FROM THERIAQUE.PRE_PRESENTATION WHERE (PRE_CODE_PK = @PRE_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_SP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_EAN_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_NBUNITE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_UP_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CACDT_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_RH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATESUP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CDF_PU_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEJOCIP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_AGRCOLL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEJOCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATE_APPLIFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_PARTSTATUT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_TSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CONSAPOUV", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CONSAPOUV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_LIB_CEPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_ADMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_SP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_EAN_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_EAN_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_NBUNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_NBUNITE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_UP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_UP_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CACDT_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CACDT_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_RH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_ETAT_COMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATECOMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATESUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATESUP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_PU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_PU_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CEPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCIP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCIP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_AGRCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_AGRCOLL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEFINCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATE_APPLIFINCOLL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATE_APPLIFINCOLL", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_PARTSTATUT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_PARTSTATUT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_TSS_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_TSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_LIB_CEPS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_LIB_CEPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_ADMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_ADMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRE_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE_CDF_UP_CODE_FK," & _
                " PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ETAT_COMMER, PRE_D" & _
                "ATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PRE_CATC_CODE_FK, " & _
                "PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PRE_AGRCOLL, PRE_D" & _
                "ATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATUT, PRE_TSS_TEXTE" & _
                ", PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ FROM THERIAQUE." & _
                "PRE_PRESENTATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE_CDF_UP_CODE_FK," & _
                " PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ETAT_COMMER, PRE_D" & _
                "ATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PRE_CATC_CODE_FK, " & _
                "PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PRE_AGRCOLL, PRE_D" & _
                "ATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATUT, PRE_TSS_TEXTE" & _
                ", PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ FROM THERIAQUE." & _
                "PRE_PRESENTATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRE_CODE_PK = @PRE_CODE_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRE_CODE_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable = New dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable, ByVal PRE_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRE_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRE_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRE_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRE_CODE_PK As String) As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRE_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRE_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRE_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable = New dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRE_PRESENTATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRE_PRESENTATION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_PRE_CODE_PK As String, _
                    ByVal Original_PRE_SP_CODE_FK As Integer, _
                    ByVal Original_PRE_EAN_REF As String, _
                    ByVal Original_PRE_NBUNITE As Global.System.Nullable(Of Short), _
                    ByVal Original_PRE_CDF_UP_CODE_FK As String, _
                    ByVal Original_PRE_CACDT_TEXTE As String, _
                    ByVal Original_PRE_CDF_RH_CODE_FK As String, _
                    ByVal Original_PRE_CDF_LI_CODE_FK As String, _
                    ByVal Original_PRE_ETAT_COMMER As String, _
                    ByVal Original_PRE_DATECOMMER As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATESUP As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_CDF_PU_CODE_FK As String, _
                    ByVal Original_PRE_CEPH_CODE_FK As String, _
                    ByVal Original_PRE_CATC_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_PRE_DATEJOCIP As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_AGRCOLL As String, _
                    ByVal Original_PRE_DATEJOCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATEFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATE_APPLIFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_PARTSTATUT As String, _
                    ByVal Original_PRE_TSS_TEXTE As String, _
                    ByVal Original_PRE_LIB_CEPS As String, _
                    ByVal Original_PRE_ADMIN As String, _
                    ByVal Original_PRE_DATECR As Date, _
                    ByVal Original_PRE_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (Original_PRE_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRE_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRE_CODE_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRE_SP_CODE_FK, Integer)
            If (Original_PRE_EAN_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRE_EAN_REF, String)
            End If
            If (Original_PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PRE_CDF_UP_CODE_FK, String)
            End If
            If (Original_PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PRE_CACDT_TEXTE, String)
            End If
            If (Original_PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PRE_CDF_RH_CODE_FK, String)
            End If
            If (Original_PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PRE_CDF_LI_CODE_FK, String)
            End If
            If (Original_PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PRE_ETAT_COMMER, String)
            End If
            If (Original_PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_DATESUP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PRE_CDF_PU_CODE_FK, String)
            End If
            If (Original_PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PRE_CEPH_CODE_FK, String)
            End If
            If (Original_PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_PRE_CATC_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_PRE_AGRCOLL, String)
            End If
            If (Original_PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_PRE_PARTSTATUT, String)
            End If
            If (Original_PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PRE_TSS_TEXTE, String)
            End If
            If (Original_PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_PRE_LIB_CEPS, String)
            End If
            If (Original_PRE_ADMIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_PRE_ADMIN, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_PRE_DATECR, Date)
            If (Original_PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal PRE_CODE_PK As String, _
                    ByVal PRE_SP_CODE_FK As Integer, _
                    ByVal PRE_EAN_REF As String, _
                    ByVal PRE_NBUNITE As Global.System.Nullable(Of Short), _
                    ByVal PRE_CDF_UP_CODE_FK As String, _
                    ByVal PRE_CACDT_TEXTE As String, _
                    ByVal PRE_CDF_RH_CODE_FK As String, _
                    ByVal PRE_CDF_LI_CODE_FK As String, _
                    ByVal PRE_ETAT_COMMER As String, _
                    ByVal PRE_DATECOMMER As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATESUP As Global.System.Nullable(Of Date), _
                    ByVal PRE_CDF_PU_CODE_FK As String, _
                    ByVal PRE_CEPH_CODE_FK As String, _
                    ByVal PRE_CATC_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal PRE_DATEJOCIP As Global.System.Nullable(Of Date), _
                    ByVal PRE_AGRCOLL As String, _
                    ByVal PRE_DATEJOCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATEFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATE_APPLIFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_PARTSTATUT As String, _
                    ByVal PRE_TSS_TEXTE As String, _
                    ByVal PRE_CONSAPOUV As String, _
                    ByVal PRE_LIB_CEPS As String, _
                    ByVal PRE_ADMIN As String, _
                    ByVal PRE_DATECR As Date, _
                    ByVal PRE_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (PRE_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRE_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRE_CODE_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRE_SP_CODE_FK, Integer)
            If (PRE_EAN_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRE_EAN_REF, String)
            End If
            If (PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRE_CDF_UP_CODE_FK, String)
            End If
            If (PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRE_CACDT_TEXTE, String)
            End If
            If (PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRE_CDF_RH_CODE_FK, String)
            End If
            If (PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PRE_CDF_LI_CODE_FK, String)
            End If
            If (PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PRE_ETAT_COMMER, String)
            End If
            If (PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PRE_DATESUP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PRE_CDF_PU_CODE_FK, String)
            End If
            If (PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PRE_CEPH_CODE_FK, String)
            End If
            If (PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PRE_CATC_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PRE_AGRCOLL, String)
            End If
            If (PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PRE_PARTSTATUT, String)
            End If
            If (PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PRE_TSS_TEXTE, String)
            End If
            If (PRE_CONSAPOUV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PRE_CONSAPOUV, String)
            End If
            If (PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PRE_LIB_CEPS, String)
            End If
            If (PRE_ADMIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(PRE_ADMIN, String)
            End If
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(PRE_DATECR, Date)
            If (PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal PRE_CODE_PK As String, _
                    ByVal PRE_SP_CODE_FK As Integer, _
                    ByVal PRE_EAN_REF As String, _
                    ByVal PRE_NBUNITE As Global.System.Nullable(Of Short), _
                    ByVal PRE_CDF_UP_CODE_FK As String, _
                    ByVal PRE_CACDT_TEXTE As String, _
                    ByVal PRE_CDF_RH_CODE_FK As String, _
                    ByVal PRE_CDF_LI_CODE_FK As String, _
                    ByVal PRE_ETAT_COMMER As String, _
                    ByVal PRE_DATECOMMER As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATESUP As Global.System.Nullable(Of Date), _
                    ByVal PRE_CDF_PU_CODE_FK As String, _
                    ByVal PRE_CEPH_CODE_FK As String, _
                    ByVal PRE_CATC_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal PRE_DATEJOCIP As Global.System.Nullable(Of Date), _
                    ByVal PRE_AGRCOLL As String, _
                    ByVal PRE_DATEJOCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATEFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATE_APPLIFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_PARTSTATUT As String, _
                    ByVal PRE_TSS_TEXTE As String, _
                    ByVal PRE_CONSAPOUV As String, _
                    ByVal PRE_LIB_CEPS As String, _
                    ByVal PRE_ADMIN As String, _
                    ByVal PRE_DATECR As Date, _
                    ByVal PRE_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_CODE_PK As String, _
                    ByVal Original_PRE_SP_CODE_FK As Integer, _
                    ByVal Original_PRE_EAN_REF As String, _
                    ByVal Original_PRE_NBUNITE As Global.System.Nullable(Of Short), _
                    ByVal Original_PRE_CDF_UP_CODE_FK As String, _
                    ByVal Original_PRE_CACDT_TEXTE As String, _
                    ByVal Original_PRE_CDF_RH_CODE_FK As String, _
                    ByVal Original_PRE_CDF_LI_CODE_FK As String, _
                    ByVal Original_PRE_ETAT_COMMER As String, _
                    ByVal Original_PRE_DATECOMMER As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATESUP As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_CDF_PU_CODE_FK As String, _
                    ByVal Original_PRE_CEPH_CODE_FK As String, _
                    ByVal Original_PRE_CATC_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_PRE_DATEJOCIP As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_AGRCOLL As String, _
                    ByVal Original_PRE_DATEJOCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATEFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATE_APPLIFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_PARTSTATUT As String, _
                    ByVal Original_PRE_TSS_TEXTE As String, _
                    ByVal Original_PRE_LIB_CEPS As String, _
                    ByVal Original_PRE_ADMIN As String, _
                    ByVal Original_PRE_DATECR As Date, _
                    ByVal Original_PRE_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (PRE_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRE_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRE_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRE_SP_CODE_FK, Integer)
            If (PRE_EAN_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRE_EAN_REF, String)
            End If
            If (PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRE_CDF_UP_CODE_FK, String)
            End If
            If (PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRE_CACDT_TEXTE, String)
            End If
            If (PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRE_CDF_RH_CODE_FK, String)
            End If
            If (PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PRE_CDF_LI_CODE_FK, String)
            End If
            If (PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PRE_ETAT_COMMER, String)
            End If
            If (PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PRE_DATESUP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PRE_CDF_PU_CODE_FK, String)
            End If
            If (PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PRE_CEPH_CODE_FK, String)
            End If
            If (PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PRE_CATC_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PRE_AGRCOLL, String)
            End If
            If (PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(PRE_PARTSTATUT, String)
            End If
            If (PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PRE_TSS_TEXTE, String)
            End If
            If (PRE_CONSAPOUV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(PRE_CONSAPOUV, String)
            End If
            If (PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(PRE_LIB_CEPS, String)
            End If
            If (PRE_ADMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(PRE_ADMIN, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(PRE_DATECR, Date)
            If (PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRE_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PRE_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_PRE_SP_CODE_FK, Integer)
            If (Original_PRE_EAN_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PRE_EAN_REF, String)
            End If
            If (Original_PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_PRE_CDF_UP_CODE_FK, String)
            End If
            If (Original_PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_PRE_CACDT_TEXTE, String)
            End If
            If (Original_PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PRE_CDF_RH_CODE_FK, String)
            End If
            If (Original_PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_PRE_CDF_LI_CODE_FK, String)
            End If
            If (Original_PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_PRE_ETAT_COMMER, String)
            End If
            If (Original_PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_DATESUP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_PRE_CDF_PU_CODE_FK, String)
            End If
            If (Original_PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_PRE_CEPH_CODE_FK, String)
            End If
            If (Original_PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_PRE_CATC_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_PRE_AGRCOLL, String)
            End If
            If (Original_PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_PRE_PARTSTATUT, String)
            End If
            If (Original_PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_PRE_TSS_TEXTE, String)
            End If
            If (Original_PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_PRE_LIB_CEPS, String)
            End If
            If (Original_PRE_ADMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_PRE_ADMIN, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_PRE_DATECR, Date)
            If (Original_PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal PRE_SP_CODE_FK As Integer, _
                    ByVal PRE_EAN_REF As String, _
                    ByVal PRE_NBUNITE As Global.System.Nullable(Of Short), _
                    ByVal PRE_CDF_UP_CODE_FK As String, _
                    ByVal PRE_CACDT_TEXTE As String, _
                    ByVal PRE_CDF_RH_CODE_FK As String, _
                    ByVal PRE_CDF_LI_CODE_FK As String, _
                    ByVal PRE_ETAT_COMMER As String, _
                    ByVal PRE_DATECOMMER As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATESUP As Global.System.Nullable(Of Date), _
                    ByVal PRE_CDF_PU_CODE_FK As String, _
                    ByVal PRE_CEPH_CODE_FK As String, _
                    ByVal PRE_CATC_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal PRE_DATEJOCIP As Global.System.Nullable(Of Date), _
                    ByVal PRE_AGRCOLL As String, _
                    ByVal PRE_DATEJOCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATEFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_DATE_APPLIFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal PRE_PARTSTATUT As String, _
                    ByVal PRE_TSS_TEXTE As String, _
                    ByVal PRE_CONSAPOUV As String, _
                    ByVal PRE_LIB_CEPS As String, _
                    ByVal PRE_ADMIN As String, _
                    ByVal PRE_DATECR As Date, _
                    ByVal PRE_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_CODE_PK As String, _
                    ByVal Original_PRE_SP_CODE_FK As Integer, _
                    ByVal Original_PRE_EAN_REF As String, _
                    ByVal Original_PRE_NBUNITE As Global.System.Nullable(Of Short), _
                    ByVal Original_PRE_CDF_UP_CODE_FK As String, _
                    ByVal Original_PRE_CACDT_TEXTE As String, _
                    ByVal Original_PRE_CDF_RH_CODE_FK As String, _
                    ByVal Original_PRE_CDF_LI_CODE_FK As String, _
                    ByVal Original_PRE_ETAT_COMMER As String, _
                    ByVal Original_PRE_DATECOMMER As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATESUP As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_CDF_PU_CODE_FK As String, _
                    ByVal Original_PRE_CEPH_CODE_FK As String, _
                    ByVal Original_PRE_CATC_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_PRE_DATEJOCIP As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_AGRCOLL As String, _
                    ByVal Original_PRE_DATEJOCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATEFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_DATE_APPLIFINCOLL As Global.System.Nullable(Of Date), _
                    ByVal Original_PRE_PARTSTATUT As String, _
                    ByVal Original_PRE_TSS_TEXTE As String, _
                    ByVal Original_PRE_LIB_CEPS As String, _
                    ByVal Original_PRE_ADMIN As String, _
                    ByVal Original_PRE_DATECR As Date, _
                    ByVal Original_PRE_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ETAT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PRE_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PRE_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATUT, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ, Original_PRE_CODE_PK, Original_PRE_SP_CODE_FK, Original_PRE_EAN_REF, Original_PRE_NBUNITE, Original_PRE_CDF_UP_CODE_FK, Original_PRE_CACDT_TEXTE, Original_PRE_CDF_RH_CODE_FK, Original_PRE_CDF_LI_CODE_FK, Original_PRE_ETAT_COMMER, Original_PRE_DATECOMMER, Original_PRE_DATESUP, Original_PRE_CDF_PU_CODE_FK, Original_PRE_CEPH_CODE_FK, Original_PRE_CATC_CODE_FK, Original_PRE_NATUCD_CDF_CODE_FK, Original_PRE_NATUCD_CDF_NUM_FK, Original_PRE_DATEJOCIP, Original_PRE_AGRCOLL, Original_PRE_DATEJOCOLL, Original_PRE_DATEFINCOLL, Original_PRE_DATE_APPLIFINCOLL, Original_PRE_PARTSTATUT, Original_PRE_TSS_TEXTE, Original_PRE_LIB_CEPS, Original_PRE_ADMIN, Original_PRE_DATECR, Original_PRE_DATEMJ)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREUCD_COMMENT_DOSEUCDTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREUCD_COMMENT_DOSEUCD"
            tableMapping.ColumnMappings.Add("PREUCD_PRE_CODE_FK_PK", "PREUCD_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREUCD_CDF_COMUCD_CODE_FK_PK", "PREUCD_CDF_COMUCD_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREUCD_NUMORD", "PREUCD_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PREUCD_COMMENT_DOSEUCD] WHERE (([PREUCD_PRE_CODE_FK_PK] " & _
                "= @Original_PREUCD_PRE_CODE_FK_PK) AND ([PREUCD_CDF_COMUCD_CODE_FK_PK] = @Origin" & _
                "al_PREUCD_CDF_COMUCD_CODE_FK_PK) AND ((@IsNull_PREUCD_NUMORD = 1 AND [PREUCD_NUM" & _
                "ORD] IS NULL) OR ([PREUCD_NUMORD] = @Original_PREUCD_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREUCD_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREUCD_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREUCD_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PREUCD_COMMENT_DOSEUCD] ([PREUCD_PRE_CODE_FK_PK], [PREUC" & _
                "D_CDF_COMUCD_CODE_FK_PK], [PREUCD_NUMORD]) VALUES (@PREUCD_PRE_CODE_FK_PK, @PREU" & _
                "CD_CDF_COMUCD_CODE_FK_PK, @PREUCD_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREUCD_PRE_CODE_FK_PK, PREUCD" & _
                "_CDF_COMUCD_CODE_FK_PK, PREUCD_NUMORD FROM THERIAQUE.PREUCD_COMMENT_DOSEUCD WHER" & _
                "E (PREUCD_CDF_COMUCD_CODE_FK_PK = @PREUCD_CDF_COMUCD_CODE_FK_PK) AND (PREUCD_PRE" & _
                "_CODE_FK_PK = @PREUCD_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PREUCD_COMMENT_DOSEUCD] SET [PREUCD_PRE_CODE_FK_PK] = @PREUCD" & _
                "_PRE_CODE_FK_PK, [PREUCD_CDF_COMUCD_CODE_FK_PK] = @PREUCD_CDF_COMUCD_CODE_FK_PK," & _
                " [PREUCD_NUMORD] = @PREUCD_NUMORD WHERE (([PREUCD_PRE_CODE_FK_PK] = @Original_PR" & _
                "EUCD_PRE_CODE_FK_PK) AND ([PREUCD_CDF_COMUCD_CODE_FK_PK] = @Original_PREUCD_CDF_" & _
                "COMUCD_CODE_FK_PK) AND ((@IsNull_PREUCD_NUMORD = 1 AND [PREUCD_NUMORD] IS NULL) " & _
                "OR ([PREUCD_NUMORD] = @Original_PREUCD_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREUCD_PRE_CODE_FK_PK," & _
                " PREUCD_CDF_COMUCD_CODE_FK_PK, PREUCD_NUMORD FROM THERIAQUE.PREUCD_COMMENT_DOSEU" & _
                "CD WHERE (PREUCD_CDF_COMUCD_CODE_FK_PK = @PREUCD_CDF_COMUCD_CODE_FK_PK) AND (PRE" & _
                "UCD_PRE_CODE_FK_PK = @PREUCD_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREUCD_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_CDF_COMUCD_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREUCD_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREUCD_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREUCD_PRE_CODE_FK_PK, PREUCD_CDF_COMUCD_CODE_FK_PK, PREUCD_NUMORD FROM TH" & _
                "ERIAQUE.PREUCD_COMMENT_DOSEUCD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREUCD_PRE_CODE_FK_PK, PREUCD_CDF_COMUCD_CODE_FK_PK, PREUCD_NUMORD FROM TH" & _
                "ERIAQUE.PREUCD_COMMENT_DOSEUCD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PREUCD_PRE_CODE_FK_PK = @PREUCD_PRE_CODE_F" & _
                "K_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREUCD_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREUCD_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable = New dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable, ByVal PREUCD_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREUCD_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREUCD_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREUCD_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREUCD_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREUCD_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREUCD_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREUCD_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable = New dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREUCD_COMMENT_DOSEUCDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREUCD_COMMENT_DOSEUCD")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREUCD_PRE_CODE_FK_PK As String, ByVal Original_PREUCD_CDF_COMUCD_CODE_FK_PK As String, ByVal Original_PREUCD_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PREUCD_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREUCD_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREUCD_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREUCD_CDF_COMUCD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREUCD_CDF_COMUCD_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREUCD_CDF_COMUCD_CODE_FK_PK, String)
            End If
            If (Original_PREUCD_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREUCD_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREUCD_PRE_CODE_FK_PK As String, ByVal PREUCD_CDF_COMUCD_CODE_FK_PK As String, ByVal PREUCD_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREUCD_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREUCD_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREUCD_PRE_CODE_FK_PK, String)
            End If
            If (PREUCD_CDF_COMUCD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREUCD_CDF_COMUCD_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREUCD_CDF_COMUCD_CODE_FK_PK, String)
            End If
            If (PREUCD_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREUCD_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREUCD_PRE_CODE_FK_PK As String, ByVal PREUCD_CDF_COMUCD_CODE_FK_PK As String, ByVal PREUCD_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREUCD_PRE_CODE_FK_PK As String, ByVal Original_PREUCD_CDF_COMUCD_CODE_FK_PK As String, ByVal Original_PREUCD_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREUCD_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREUCD_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREUCD_PRE_CODE_FK_PK, String)
            End If
            If (PREUCD_CDF_COMUCD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREUCD_CDF_COMUCD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREUCD_CDF_COMUCD_CODE_FK_PK, String)
            End If
            If (PREUCD_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREUCD_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PREUCD_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREUCD_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PREUCD_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREUCD_CDF_COMUCD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREUCD_CDF_COMUCD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREUCD_CDF_COMUCD_CODE_FK_PK, String)
            End If
            If (Original_PREUCD_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PREUCD_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREUCD_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREUCD_PRE_CODE_FK_PK As String, ByVal Original_PREUCD_CDF_COMUCD_CODE_FK_PK As String, ByVal Original_PREUCD_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PREUCD_PRE_CODE_FK_PK, Original_PREUCD_CDF_COMUCD_CODE_FK_PK, PREUCD_NUMORD, Original_PREUCD_PRE_CODE_FK_PK, Original_PREUCD_CDF_COMUCD_CODE_FK_PK, Original_PREUCD_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class COCONT_COMPO_CONTENANTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COCONT_COMPO_CONTENANT"
            tableMapping.ColumnMappings.Add("COCONT_PRE_CODE_FK_PK", "COCONT_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COCONT_NUM_PK", "COCONT_NUM_PK")
            tableMapping.ColumnMappings.Add("COCONT_CDF_GAL_CODE_FK", "COCONT_CDF_GAL_CODE_FK")
            tableMapping.ColumnMappings.Add("COCONT_NUMORD", "COCONT_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[COCONT_COMPO_CONTENANT] WHERE (([COCONT_PRE_CODE_FK_PK] " & _
                "= @Original_COCONT_PRE_CODE_FK_PK) AND ([COCONT_NUM_PK] = @Original_COCONT_NUM_P" & _
                "K) AND ((@IsNull_COCONT_CDF_GAL_CODE_FK = 1 AND [COCONT_CDF_GAL_CODE_FK] IS NULL" & _
                ") OR ([COCONT_CDF_GAL_CODE_FK] = @Original_COCONT_CDF_GAL_CODE_FK)) AND ((@IsNul" & _
                "l_COCONT_NUMORD = 1 AND [COCONT_NUMORD] IS NULL) OR ([COCONT_NUMORD] = @Original" & _
                "_COCONT_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUM_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COCONT_CDF_GAL_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_CDF_GAL_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_CDF_GAL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_CDF_GAL_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COCONT_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[COCONT_COMPO_CONTENANT] ([COCONT_PRE_CODE_FK_PK], [COCON" & _
                "T_NUM_PK], [COCONT_CDF_GAL_CODE_FK], [COCONT_NUMORD]) VALUES (@COCONT_PRE_CODE_F" & _
                "K_PK, @COCONT_NUM_PK, @COCONT_CDF_GAL_CODE_FK, @COCONT_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COCONT_P" & _
                "RE_CODE_FK_PK, COCONT_NUM_PK, COCONT_CDF_GAL_CODE_FK, COCONT_NUMORD FROM THERIAQ" & _
                "UE.COCONT_COMPO_CONTENANT WHERE (COCONT_NUM_PK = @COCONT_NUM_PK) AND (COCONT_PRE" & _
                "_CODE_FK_PK = @COCONT_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUM_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_CDF_GAL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_CDF_GAL_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[COCONT_COMPO_CONTENANT] SET [COCONT_PRE_CODE_FK_PK] = @COCONT" & _
                "_PRE_CODE_FK_PK, [COCONT_NUM_PK] = @COCONT_NUM_PK, [COCONT_CDF_GAL_CODE_FK] = @C" & _
                "OCONT_CDF_GAL_CODE_FK, [COCONT_NUMORD] = @COCONT_NUMORD WHERE (([COCONT_PRE_CODE" & _
                "_FK_PK] = @Original_COCONT_PRE_CODE_FK_PK) AND ([COCONT_NUM_PK] = @Original_COCO" & _
                "NT_NUM_PK) AND ((@IsNull_COCONT_CDF_GAL_CODE_FK = 1 AND [COCONT_CDF_GAL_CODE_FK]" & _
                " IS NULL) OR ([COCONT_CDF_GAL_CODE_FK] = @Original_COCONT_CDF_GAL_CODE_FK)) AND " & _
                "((@IsNull_COCONT_NUMORD = 1 AND [COCONT_NUMORD] IS NULL) OR ([COCONT_NUMORD] = @" & _
                "Original_COCONT_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COCONT_PRE_CODE_FK_PK, COCONT_NUM_PK, COCONT_" & _
                "CDF_GAL_CODE_FK, COCONT_NUMORD FROM THERIAQUE.COCONT_COMPO_CONTENANT WHERE (COCO" & _
                "NT_NUM_PK = @COCONT_NUM_PK) AND (COCONT_PRE_CODE_FK_PK = @COCONT_PRE_CODE_FK_PK)" & _
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUM_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_CDF_GAL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_CDF_GAL_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUM_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COCONT_CDF_GAL_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_CDF_GAL_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_CDF_GAL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_CDF_GAL_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COCONT_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COCONT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COCONT_PRE_CODE_FK_PK, COCONT_NUM_PK, COCONT_CDF_GAL_CODE_FK, COCONT_NUMOR" & _
                "D FROM THERIAQUE.COCONT_COMPO_CONTENANT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COCONT_PRE_CODE_FK_PK, COCONT_NUM_PK, COCONT_CDF_GAL_CODE_FK, COCONT_NUMOR" & _
                "D FROM THERIAQUE.COCONT_COMPO_CONTENANT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where COCONT_PRE_CODE_FK_PK = @COCONT_P" & _
                "RE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COCONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "COCONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable = New dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable, ByVal COCONT_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COCONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COCONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COCONT_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal COCONT_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COCONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COCONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COCONT_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable = New dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.COCONT_COMPO_CONTENANTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "COCONT_COMPO_CONTENANT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_COCONT_PRE_CODE_FK_PK As String, ByVal Original_COCONT_NUM_PK As Byte, ByVal Original_COCONT_CDF_GAL_CODE_FK As String, ByVal Original_COCONT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_COCONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COCONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COCONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COCONT_NUM_PK, Byte)
            If (Original_COCONT_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COCONT_CDF_GAL_CODE_FK, String)
            End If
            If (Original_COCONT_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COCONT_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal COCONT_PRE_CODE_FK_PK As String, ByVal COCONT_NUM_PK As Byte, ByVal COCONT_CDF_GAL_CODE_FK As String, ByVal COCONT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (COCONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COCONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COCONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COCONT_NUM_PK, Byte)
            If (COCONT_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COCONT_CDF_GAL_CODE_FK, String)
            End If
            If (COCONT_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COCONT_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal COCONT_PRE_CODE_FK_PK As String, ByVal COCONT_NUM_PK As Byte, ByVal COCONT_CDF_GAL_CODE_FK As String, ByVal COCONT_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COCONT_PRE_CODE_FK_PK As String, ByVal Original_COCONT_NUM_PK As Byte, ByVal Original_COCONT_CDF_GAL_CODE_FK As String, ByVal Original_COCONT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (COCONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COCONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COCONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COCONT_NUM_PK, Byte)
            If (COCONT_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COCONT_CDF_GAL_CODE_FK, String)
            End If
            If (COCONT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COCONT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_COCONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COCONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_COCONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COCONT_NUM_PK, Byte)
            If (Original_COCONT_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_COCONT_CDF_GAL_CODE_FK, String)
            End If
            If (Original_COCONT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COCONT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal COCONT_CDF_GAL_CODE_FK As String, ByVal COCONT_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COCONT_PRE_CODE_FK_PK As String, ByVal Original_COCONT_NUM_PK As Byte, ByVal Original_COCONT_CDF_GAL_CODE_FK As String, ByVal Original_COCONT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_COCONT_PRE_CODE_FK_PK, Original_COCONT_NUM_PK, COCONT_CDF_GAL_CODE_FK, COCONT_NUMORD, Original_COCONT_PRE_CODE_FK_PK, Original_COCONT_NUM_PK, Original_COCONT_CDF_GAL_CODE_FK, Original_COCONT_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRECONT_PRE_CONTENANTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRECONT_PRE_CONTENANT"
            tableMapping.ColumnMappings.Add("PRECONT_PRE_CODE_FK_PK", "PRECONT_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECONT_COCONT_NUM_FK_PK", "PRECONT_COCONT_NUM_FK_PK")
            tableMapping.ColumnMappings.Add("PRECONT_NBCONTENANT", "PRECONT_NBCONTENANT")
            tableMapping.ColumnMappings.Add("PRECONT_CDF_COCDT_CODE_FK", "PRECONT_CDF_COCDT_CODE_FK")
            tableMapping.ColumnMappings.Add("PRECONT_NBCONTENANT_REEL", "PRECONT_NBCONTENANT_REEL")
            tableMapping.ColumnMappings.Add("PRECONT_NBCONTENANCE", "PRECONT_NBCONTENANCE")
            tableMapping.ColumnMappings.Add("PRECONT_CDF_COCE_CODE_FK", "PRECONT_CDF_COCE_CODE_FK")
            tableMapping.ColumnMappings.Add("PRECONT_VOLCONTENANT", "PRECONT_VOLCONTENANT")
            tableMapping.ColumnMappings.Add("PRECONT_CDF_VOLCONT_CODE_FK", "PRECONT_CDF_VOLCONT_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRECONT_PRE_CONTENANT] WHERE (([PRECONT_PRE_CODE_FK_PK] " & _
                "= @Original_PRECONT_PRE_CODE_FK_PK) AND ([PRECONT_COCONT_NUM_FK_PK] = @Original_" & _
                "PRECONT_COCONT_NUM_FK_PK) AND ((@IsNull_PRECONT_NBCONTENANT = 1 AND [PRECONT_NBC" & _
                "ONTENANT] IS NULL) OR ([PRECONT_NBCONTENANT] = @Original_PRECONT_NBCONTENANT)) A" & _
                "ND ((@IsNull_PRECONT_CDF_COCDT_CODE_FK = 1 AND [PRECONT_CDF_COCDT_CODE_FK] IS NU" & _
                "LL) OR ([PRECONT_CDF_COCDT_CODE_FK] = @Original_PRECONT_CDF_COCDT_CODE_FK)) AND " & _
                "((@IsNull_PRECONT_NBCONTENANT_REEL = 1 AND [PRECONT_NBCONTENANT_REEL] IS NULL) O" & _
                "R ([PRECONT_NBCONTENANT_REEL] = @Original_PRECONT_NBCONTENANT_REEL)) AND ((@IsNu" & _
                "ll_PRECONT_NBCONTENANCE = 1 AND [PRECONT_NBCONTENANCE] IS NULL) OR ([PRECONT_NBC" & _
                "ONTENANCE] = @Original_PRECONT_NBCONTENANCE)) AND ((@IsNull_PRECONT_CDF_COCE_COD" & _
                "E_FK = 1 AND [PRECONT_CDF_COCE_CODE_FK] IS NULL) OR ([PRECONT_CDF_COCE_CODE_FK] " & _
                "= @Original_PRECONT_CDF_COCE_CODE_FK)) AND ((@IsNull_PRECONT_VOLCONTENANT = 1 AN" & _
                "D [PRECONT_VOLCONTENANT] IS NULL) OR ([PRECONT_VOLCONTENANT] = @Original_PRECONT" & _
                "_VOLCONTENANT)) AND ((@IsNull_PRECONT_CDF_VOLCONT_CODE_FK = 1 AND [PRECONT_CDF_V" & _
                "OLCONT_CODE_FK] IS NULL) OR ([PRECONT_CDF_VOLCONT_CODE_FK] = @Original_PRECONT_C" & _
                "DF_VOLCONT_CODE_FK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_NBCONTENANT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_NBCONTENANT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_NBCONTENANT_REEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT_REEL", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_NBCONTENANT_REEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT_REEL", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_NBCONTENANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANCE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_NBCONTENANCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_NBCONTENANCE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_CDF_COCE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCE_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_CDF_COCE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCE_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_VOLCONTENANT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_VOLCONTENANT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_VOLCONTENANT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_VOLCONTENANT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRECONT_PRE_CONTENANT] ([PRECONT_PRE_CODE_FK_PK], [PRECO" & _
                "NT_COCONT_NUM_FK_PK], [PRECONT_NBCONTENANT], [PRECONT_CDF_COCDT_CODE_FK], [PRECO" & _
                "NT_NBCONTENANT_REEL], [PRECONT_NBCONTENANCE], [PRECONT_CDF_COCE_CODE_FK], [PRECO" & _
                "NT_VOLCONTENANT], [PRECONT_CDF_VOLCONT_CODE_FK]) VALUES (@PRECONT_PRE_CODE_FK_PK" & _
                ", @PRECONT_COCONT_NUM_FK_PK, @PRECONT_NBCONTENANT, @PRECONT_CDF_COCDT_CODE_FK, @" & _
                "PRECONT_NBCONTENANT_REEL, @PRECONT_NBCONTENANCE, @PRECONT_CDF_COCE_CODE_FK, @PRE" & _
                "CONT_VOLCONTENANT, @PRECONT_CDF_VOLCONT_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECONT_PRE_CODE_FK_PK" & _
                ", PRECONT_COCONT_NUM_FK_PK, PRECONT_NBCONTENANT, PRECONT_CDF_COCDT_CODE_FK, PREC" & _
                "ONT_NBCONTENANT_REEL, PRECONT_NBCONTENANCE, PRECONT_CDF_COCE_CODE_FK, PRECONT_VO" & _
                "LCONTENANT, PRECONT_CDF_VOLCONT_CODE_FK FROM THERIAQUE.PRECONT_PRE_CONTENANT WHE" & _
                "RE (PRECONT_COCONT_NUM_FK_PK = @PRECONT_COCONT_NUM_FK_PK) AND (PRECONT_PRE_CODE_" & _
                "FK_PK = @PRECONT_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_NBCONTENANT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_NBCONTENANT_REEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT_REEL", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_NBCONTENANCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_NBCONTENANCE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_CDF_COCE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCE_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_VOLCONTENANT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_VOLCONTENANT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRECONT_PRE_CONTENANT] SET [PRECONT_PRE_CODE_FK_PK] = @PRECON" & _
                "T_PRE_CODE_FK_PK, [PRECONT_COCONT_NUM_FK_PK] = @PRECONT_COCONT_NUM_FK_PK, [PRECO" & _
                "NT_NBCONTENANT] = @PRECONT_NBCONTENANT, [PRECONT_CDF_COCDT_CODE_FK] = @PRECONT_C" & _
                "DF_COCDT_CODE_FK, [PRECONT_NBCONTENANT_REEL] = @PRECONT_NBCONTENANT_REEL, [PRECO" & _
                "NT_NBCONTENANCE] = @PRECONT_NBCONTENANCE, [PRECONT_CDF_COCE_CODE_FK] = @PRECONT_" & _
                "CDF_COCE_CODE_FK, [PRECONT_VOLCONTENANT] = @PRECONT_VOLCONTENANT, [PRECONT_CDF_V" & _
                "OLCONT_CODE_FK] = @PRECONT_CDF_VOLCONT_CODE_FK WHERE (([PRECONT_PRE_CODE_FK_PK] " & _
                "= @Original_PRECONT_PRE_CODE_FK_PK) AND ([PRECONT_COCONT_NUM_FK_PK] = @Original_" & _
                "PRECONT_COCONT_NUM_FK_PK) AND ((@IsNull_PRECONT_NBCONTENANT = 1 AND [PRECONT_NBC" & _
                "ONTENANT] IS NULL) OR ([PRECONT_NBCONTENANT] = @Original_PRECONT_NBCONTENANT)) A" & _
                "ND ((@IsNull_PRECONT_CDF_COCDT_CODE_FK = 1 AND [PRECONT_CDF_COCDT_CODE_FK] IS NU" & _
                "LL) OR ([PRECONT_CDF_COCDT_CODE_FK] = @Original_PRECONT_CDF_COCDT_CODE_FK)) AND " & _
                "((@IsNull_PRECONT_NBCONTENANT_REEL = 1 AND [PRECONT_NBCONTENANT_REEL] IS NULL) O" & _
                "R ([PRECONT_NBCONTENANT_REEL] = @Original_PRECONT_NBCONTENANT_REEL)) AND ((@IsNu" & _
                "ll_PRECONT_NBCONTENANCE = 1 AND [PRECONT_NBCONTENANCE] IS NULL) OR ([PRECONT_NBC" & _
                "ONTENANCE] = @Original_PRECONT_NBCONTENANCE)) AND ((@IsNull_PRECONT_CDF_COCE_COD" & _
                "E_FK = 1 AND [PRECONT_CDF_COCE_CODE_FK] IS NULL) OR ([PRECONT_CDF_COCE_CODE_FK] " & _
                "= @Original_PRECONT_CDF_COCE_CODE_FK)) AND ((@IsNull_PRECONT_VOLCONTENANT = 1 AN" & _
                "D [PRECONT_VOLCONTENANT] IS NULL) OR ([PRECONT_VOLCONTENANT] = @Original_PRECONT" & _
                "_VOLCONTENANT)) AND ((@IsNull_PRECONT_CDF_VOLCONT_CODE_FK = 1 AND [PRECONT_CDF_V" & _
                "OLCONT_CODE_FK] IS NULL) OR ([PRECONT_CDF_VOLCONT_CODE_FK] = @Original_PRECONT_C" & _
                "DF_VOLCONT_CODE_FK)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECONT_PRE_CODE_FK_PK, PRECONT_COCONT_NUM_FK_PK," & _
                " PRECONT_NBCONTENANT, PRECONT_CDF_COCDT_CODE_FK, PRECONT_NBCONTENANT_REEL, PRECO" & _
                "NT_NBCONTENANCE, PRECONT_CDF_COCE_CODE_FK, PRECONT_VOLCONTENANT, PRECONT_CDF_VOL" & _
                "CONT_CODE_FK FROM THERIAQUE.PRECONT_PRE_CONTENANT WHERE (PRECONT_COCONT_NUM_FK_P" & _
                "K = @PRECONT_COCONT_NUM_FK_PK) AND (PRECONT_PRE_CODE_FK_PK = @PRECONT_PRE_CODE_F" & _
                "K_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_NBCONTENANT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_NBCONTENANT_REEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT_REEL", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_NBCONTENANCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_NBCONTENANCE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_CDF_COCE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCE_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_VOLCONTENANT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_VOLCONTENANT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_NBCONTENANT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_NBCONTENANT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCDT_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_NBCONTENANT_REEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT_REEL", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_NBCONTENANT_REEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANT_REEL", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_NBCONTENANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_NBCONTENANCE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_NBCONTENANCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_NBCONTENANCE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_CDF_COCE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCE_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_CDF_COCE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_COCE_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_VOLCONTENANT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_VOLCONTENANT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_VOLCONTENANT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PRECONT_VOLCONTENANT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_CDF_VOLCONT_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRECONT_PRE_CODE_FK_PK, PRECONT_COCONT_NUM_FK_PK, PRECONT_NBCONTENANT, PRE" & _
                "CONT_CDF_COCDT_CODE_FK, PRECONT_NBCONTENANT_REEL, PRECONT_NBCONTENANCE, PRECONT_" & _
                "CDF_COCE_CODE_FK, PRECONT_VOLCONTENANT, PRECONT_CDF_VOLCONT_CODE_FK FROM THERIAQ" & _
                "UE.PRECONT_PRE_CONTENANT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRECONT_PRE_CODE_FK_PK, PRECONT_COCONT_NUM_FK_PK, PRECONT_NBCONTENANT, PRE" & _
                "CONT_CDF_COCDT_CODE_FK, PRECONT_NBCONTENANT_REEL, PRECONT_NBCONTENANCE, PRECONT_" & _
                "CDF_COCE_CODE_FK, PRECONT_VOLCONTENANT, PRECONT_CDF_VOLCONT_CODE_FK FROM THERIAQ" & _
                "UE.PRECONT_PRE_CONTENANT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  PRECONT_PRE_CODE_FK_PK = @PRECONT_PRE_CODE_FK_P" & _
                "K"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECONT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECONT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable = New dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable, ByVal PRECONT_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECONT_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRECONT_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECONT_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable = New dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRECONT_PRE_CONTENANTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRECONT_PRE_CONTENANT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRECONT_PRE_CODE_FK_PK As String, ByVal Original_PRECONT_COCONT_NUM_FK_PK As Byte, ByVal Original_PRECONT_NBCONTENANT As Global.System.Nullable(Of Short), ByVal Original_PRECONT_CDF_COCDT_CODE_FK As String, ByVal Original_PRECONT_NBCONTENANT_REEL As String, ByVal Original_PRECONT_NBCONTENANCE As Global.System.Nullable(Of Decimal), ByVal Original_PRECONT_CDF_COCE_CODE_FK As String, ByVal Original_PRECONT_VOLCONTENANT As Global.System.Nullable(Of Decimal), ByVal Original_PRECONT_CDF_VOLCONT_CODE_FK As String) As Integer
            If (Original_PRECONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRECONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRECONT_COCONT_NUM_FK_PK, Byte)
            If (Original_PRECONT_NBCONTENANT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRECONT_NBCONTENANT.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECONT_CDF_COCDT_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PRECONT_CDF_COCDT_CODE_FK, String)
            End If
            If (Original_PRECONT_NBCONTENANT_REEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PRECONT_NBCONTENANT_REEL, String)
            End If
            If (Original_PRECONT_NBCONTENANCE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PRECONT_NBCONTENANCE.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECONT_CDF_COCE_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PRECONT_CDF_COCE_CODE_FK, String)
            End If
            If (Original_PRECONT_VOLCONTENANT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PRECONT_VOLCONTENANT.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECONT_CDF_VOLCONT_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_PRECONT_CDF_VOLCONT_CODE_FK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRECONT_PRE_CODE_FK_PK As String, ByVal PRECONT_COCONT_NUM_FK_PK As Byte, ByVal PRECONT_NBCONTENANT As Global.System.Nullable(Of Short), ByVal PRECONT_CDF_COCDT_CODE_FK As String, ByVal PRECONT_NBCONTENANT_REEL As String, ByVal PRECONT_NBCONTENANCE As Global.System.Nullable(Of Decimal), ByVal PRECONT_CDF_COCE_CODE_FK As String, ByVal PRECONT_VOLCONTENANT As Global.System.Nullable(Of Decimal), ByVal PRECONT_CDF_VOLCONT_CODE_FK As String) As Integer
            If (PRECONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRECONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRECONT_COCONT_NUM_FK_PK, Byte)
            If (PRECONT_NBCONTENANT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRECONT_NBCONTENANT.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PRECONT_CDF_COCDT_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRECONT_CDF_COCDT_CODE_FK, String)
            End If
            If (PRECONT_NBCONTENANT_REEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRECONT_NBCONTENANT_REEL, String)
            End If
            If (PRECONT_NBCONTENANCE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRECONT_NBCONTENANCE.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PRECONT_CDF_COCE_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRECONT_CDF_COCE_CODE_FK, String)
            End If
            If (PRECONT_VOLCONTENANT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PRECONT_VOLCONTENANT.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PRECONT_CDF_VOLCONT_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PRECONT_CDF_VOLCONT_CODE_FK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal PRECONT_PRE_CODE_FK_PK As String, _
                    ByVal PRECONT_COCONT_NUM_FK_PK As Byte, _
                    ByVal PRECONT_NBCONTENANT As Global.System.Nullable(Of Short), _
                    ByVal PRECONT_CDF_COCDT_CODE_FK As String, _
                    ByVal PRECONT_NBCONTENANT_REEL As String, _
                    ByVal PRECONT_NBCONTENANCE As Global.System.Nullable(Of Decimal), _
                    ByVal PRECONT_CDF_COCE_CODE_FK As String, _
                    ByVal PRECONT_VOLCONTENANT As Global.System.Nullable(Of Decimal), _
                    ByVal PRECONT_CDF_VOLCONT_CODE_FK As String, _
                    ByVal Original_PRECONT_PRE_CODE_FK_PK As String, _
                    ByVal Original_PRECONT_COCONT_NUM_FK_PK As Byte, _
                    ByVal Original_PRECONT_NBCONTENANT As Global.System.Nullable(Of Short), _
                    ByVal Original_PRECONT_CDF_COCDT_CODE_FK As String, _
                    ByVal Original_PRECONT_NBCONTENANT_REEL As String, _
                    ByVal Original_PRECONT_NBCONTENANCE As Global.System.Nullable(Of Decimal), _
                    ByVal Original_PRECONT_CDF_COCE_CODE_FK As String, _
                    ByVal Original_PRECONT_VOLCONTENANT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_PRECONT_CDF_VOLCONT_CODE_FK As String) As Integer
            If (PRECONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRECONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRECONT_COCONT_NUM_FK_PK, Byte)
            If (PRECONT_NBCONTENANT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRECONT_NBCONTENANT.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PRECONT_CDF_COCDT_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRECONT_CDF_COCDT_CODE_FK, String)
            End If
            If (PRECONT_NBCONTENANT_REEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRECONT_NBCONTENANT_REEL, String)
            End If
            If (PRECONT_NBCONTENANCE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRECONT_NBCONTENANCE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PRECONT_CDF_COCE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRECONT_CDF_COCE_CODE_FK, String)
            End If
            If (PRECONT_VOLCONTENANT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PRECONT_VOLCONTENANT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PRECONT_CDF_VOLCONT_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PRECONT_CDF_VOLCONT_CODE_FK, String)
            End If
            If (Original_PRECONT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECONT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PRECONT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PRECONT_COCONT_NUM_FK_PK, Byte)
            If (Original_PRECONT_NBCONTENANT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PRECONT_NBCONTENANT.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECONT_CDF_COCDT_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PRECONT_CDF_COCDT_CODE_FK, String)
            End If
            If (Original_PRECONT_NBCONTENANT_REEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PRECONT_NBCONTENANT_REEL, String)
            End If
            If (Original_PRECONT_NBCONTENANCE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PRECONT_NBCONTENANCE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECONT_CDF_COCE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PRECONT_CDF_COCE_CODE_FK, String)
            End If
            If (Original_PRECONT_VOLCONTENANT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_PRECONT_VOLCONTENANT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECONT_CDF_VOLCONT_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_PRECONT_CDF_VOLCONT_CODE_FK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal PRECONT_NBCONTENANT As Global.System.Nullable(Of Short), _
                    ByVal PRECONT_CDF_COCDT_CODE_FK As String, _
                    ByVal PRECONT_NBCONTENANT_REEL As String, _
                    ByVal PRECONT_NBCONTENANCE As Global.System.Nullable(Of Decimal), _
                    ByVal PRECONT_CDF_COCE_CODE_FK As String, _
                    ByVal PRECONT_VOLCONTENANT As Global.System.Nullable(Of Decimal), _
                    ByVal PRECONT_CDF_VOLCONT_CODE_FK As String, _
                    ByVal Original_PRECONT_PRE_CODE_FK_PK As String, _
                    ByVal Original_PRECONT_COCONT_NUM_FK_PK As Byte, _
                    ByVal Original_PRECONT_NBCONTENANT As Global.System.Nullable(Of Short), _
                    ByVal Original_PRECONT_CDF_COCDT_CODE_FK As String, _
                    ByVal Original_PRECONT_NBCONTENANT_REEL As String, _
                    ByVal Original_PRECONT_NBCONTENANCE As Global.System.Nullable(Of Decimal), _
                    ByVal Original_PRECONT_CDF_COCE_CODE_FK As String, _
                    ByVal Original_PRECONT_VOLCONTENANT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_PRECONT_CDF_VOLCONT_CODE_FK As String) As Integer
            Return Me.Update(Original_PRECONT_PRE_CODE_FK_PK, Original_PRECONT_COCONT_NUM_FK_PK, PRECONT_NBCONTENANT, PRECONT_CDF_COCDT_CODE_FK, PRECONT_NBCONTENANT_REEL, PRECONT_NBCONTENANCE, PRECONT_CDF_COCE_CODE_FK, PRECONT_VOLCONTENANT, PRECONT_CDF_VOLCONT_CODE_FK, Original_PRECONT_PRE_CODE_FK_PK, Original_PRECONT_COCONT_NUM_FK_PK, Original_PRECONT_NBCONTENANT, Original_PRECONT_CDF_COCDT_CODE_FK, Original_PRECONT_NBCONTENANT_REEL, Original_PRECONT_NBCONTENANCE, Original_PRECONT_CDF_COCE_CODE_FK, Original_PRECONT_VOLCONTENANT, Original_PRECONT_CDF_VOLCONT_CODE_FK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREMAT_PRE_MATERIAUTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREMAT_PRE_MATERIAU"
            tableMapping.ColumnMappings.Add("PREMAT_PRE_CODE_FK_PK", "PREMAT_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREMAT_COCONT_NUM_FK_PK", "PREMAT_COCONT_NUM_FK_PK")
            tableMapping.ColumnMappings.Add("PREMAT_CDF_MACDT_CODE_FK_PK", "PREMAT_CDF_MACDT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREMAT_NUMORD", "PREMAT_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PREMAT_PRE_MATERIAU] WHERE (([PREMAT_PRE_CODE_FK_PK] = @" & _
                "Original_PREMAT_PRE_CODE_FK_PK) AND ([PREMAT_COCONT_NUM_FK_PK] = @Original_PREMA" & _
                "T_COCONT_NUM_FK_PK) AND ([PREMAT_CDF_MACDT_CODE_FK_PK] = @Original_PREMAT_CDF_MA" & _
                "CDT_CODE_FK_PK) AND ((@IsNull_PREMAT_NUMORD = 1 AND [PREMAT_NUMORD] IS NULL) OR " & _
                "([PREMAT_NUMORD] = @Original_PREMAT_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREMAT_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PREMAT_PRE_MATERIAU] ([PREMAT_PRE_CODE_FK_PK], [PREMAT_C" & _
                "OCONT_NUM_FK_PK], [PREMAT_CDF_MACDT_CODE_FK_PK], [PREMAT_NUMORD]) VALUES (@PREMA" & _
                "T_PRE_CODE_FK_PK, @PREMAT_COCONT_NUM_FK_PK, @PREMAT_CDF_MACDT_CODE_FK_PK, @PREMA" & _
                "T_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREMAT_PRE_CODE_FK_PK, PREMAT_COCONT_NUM_FK_PK, PREMAT_CDF_MA" & _
                "CDT_CODE_FK_PK, PREMAT_NUMORD FROM THERIAQUE.PREMAT_PRE_MATERIAU WHERE (PREMAT_C" & _
                "DF_MACDT_CODE_FK_PK = @PREMAT_CDF_MACDT_CODE_FK_PK) AND (PREMAT_COCONT_NUM_FK_PK" & _
                " = @PREMAT_COCONT_NUM_FK_PK) AND (PREMAT_PRE_CODE_FK_PK = @PREMAT_PRE_CODE_FK_PK" & _
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PREMAT_PRE_MATERIAU] SET [PREMAT_PRE_CODE_FK_PK] = @PREMAT_PR" & _
                "E_CODE_FK_PK, [PREMAT_COCONT_NUM_FK_PK] = @PREMAT_COCONT_NUM_FK_PK, [PREMAT_CDF_" & _
                "MACDT_CODE_FK_PK] = @PREMAT_CDF_MACDT_CODE_FK_PK, [PREMAT_NUMORD] = @PREMAT_NUMO" & _
                "RD WHERE (([PREMAT_PRE_CODE_FK_PK] = @Original_PREMAT_PRE_CODE_FK_PK) AND ([PREM" & _
                "AT_COCONT_NUM_FK_PK] = @Original_PREMAT_COCONT_NUM_FK_PK) AND ([PREMAT_CDF_MACDT" & _
                "_CODE_FK_PK] = @Original_PREMAT_CDF_MACDT_CODE_FK_PK) AND ((@IsNull_PREMAT_NUMOR" & _
                "D = 1 AND [PREMAT_NUMORD] IS NULL) OR ([PREMAT_NUMORD] = @Original_PREMAT_NUMORD" & _
                ")));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREMAT_PRE_CODE_FK_PK, PREMAT_COCONT_NUM_FK_PK, PREMAT_CDF_MACDT_CO" & _
                "DE_FK_PK, PREMAT_NUMORD FROM THERIAQUE.PREMAT_PRE_MATERIAU WHERE (PREMAT_CDF_MAC" & _
                "DT_CODE_FK_PK = @PREMAT_CDF_MACDT_CODE_FK_PK) AND (PREMAT_COCONT_NUM_FK_PK = @PR" & _
                "EMAT_COCONT_NUM_FK_PK) AND (PREMAT_PRE_CODE_FK_PK = @PREMAT_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_CDF_MACDT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREMAT_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREMAT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREMAT_PRE_CODE_FK_PK, PREMAT_COCONT_NUM_FK_PK, PREMAT_CDF_MACDT_CODE_FK_P" & _
                "K, PREMAT_NUMORD FROM THERIAQUE.PREMAT_PRE_MATERIAU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREMAT_PRE_CODE_FK_PK, PREMAT_COCONT_NUM_FK_PK, PREMAT_CDF_MACDT_CODE_FK_P" & _
                "K, PREMAT_NUMORD FROM THERIAQUE.PREMAT_PRE_MATERIAU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PREMAT_PRE_CODE_FK_PK" & _
                " = @PREMAT_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREMAT_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREMAT_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable = New dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable, ByVal PREMAT_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREMAT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREMAT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREMAT_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREMAT_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREMAT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREMAT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREMAT_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable = New dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREMAT_PRE_MATERIAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREMAT_PRE_MATERIAU")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREMAT_PRE_CODE_FK_PK As String, ByVal Original_PREMAT_COCONT_NUM_FK_PK As Byte, ByVal Original_PREMAT_CDF_MACDT_CODE_FK_PK As String, ByVal Original_PREMAT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PREMAT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREMAT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREMAT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREMAT_COCONT_NUM_FK_PK, Byte)
            If (Original_PREMAT_CDF_MACDT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREMAT_CDF_MACDT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREMAT_CDF_MACDT_CODE_FK_PK, String)
            End If
            If (Original_PREMAT_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PREMAT_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREMAT_PRE_CODE_FK_PK As String, ByVal PREMAT_COCONT_NUM_FK_PK As Byte, ByVal PREMAT_CDF_MACDT_CODE_FK_PK As String, ByVal PREMAT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREMAT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREMAT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREMAT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREMAT_COCONT_NUM_FK_PK, Byte)
            If (PREMAT_CDF_MACDT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREMAT_CDF_MACDT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREMAT_CDF_MACDT_CODE_FK_PK, String)
            End If
            If (PREMAT_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREMAT_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREMAT_PRE_CODE_FK_PK As String, ByVal PREMAT_COCONT_NUM_FK_PK As Byte, ByVal PREMAT_CDF_MACDT_CODE_FK_PK As String, ByVal PREMAT_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREMAT_PRE_CODE_FK_PK As String, ByVal Original_PREMAT_COCONT_NUM_FK_PK As Byte, ByVal Original_PREMAT_CDF_MACDT_CODE_FK_PK As String, ByVal Original_PREMAT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREMAT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREMAT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREMAT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREMAT_COCONT_NUM_FK_PK, Byte)
            If (PREMAT_CDF_MACDT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREMAT_CDF_MACDT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREMAT_CDF_MACDT_CODE_FK_PK, String)
            End If
            If (PREMAT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREMAT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PREMAT_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREMAT_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREMAT_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PREMAT_COCONT_NUM_FK_PK, Byte)
            If (Original_PREMAT_CDF_MACDT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREMAT_CDF_MACDT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PREMAT_CDF_MACDT_CODE_FK_PK, String)
            End If
            If (Original_PREMAT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PREMAT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREMAT_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREMAT_PRE_CODE_FK_PK As String, ByVal Original_PREMAT_COCONT_NUM_FK_PK As Byte, ByVal Original_PREMAT_CDF_MACDT_CODE_FK_PK As String, ByVal Original_PREMAT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PREMAT_PRE_CODE_FK_PK, Original_PREMAT_COCONT_NUM_FK_PK, Original_PREMAT_CDF_MACDT_CODE_FK_PK, PREMAT_NUMORD, Original_PREMAT_PRE_CODE_FK_PK, Original_PREMAT_COCONT_NUM_FK_PK, Original_PREMAT_CDF_MACDT_CODE_FK_PK, Original_PREMAT_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRECAR_PRESENTATION_CARACTCOMPTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRECAR_PRESENTATION_CARACTCOMP"
            tableMapping.ColumnMappings.Add("PRECAR_PRE_CODE_FK_PK", "PRECAR_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECAR_COCONT_NUM_FK_PK", "PRECAR_COCONT_NUM_FK_PK")
            tableMapping.ColumnMappings.Add("PRECAR_CDF_CODE_CACDT_FK_PK", "PRECAR_CDF_CODE_CACDT_FK_PK")
            tableMapping.ColumnMappings.Add("PRECAR_NUMORD", "PRECAR_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRECAR_PRESENTATION_CARACTCOMP] WHERE (([PRECAR_PRE_CODE" & _
                "_FK_PK] = @Original_PRECAR_PRE_CODE_FK_PK) AND ([PRECAR_COCONT_NUM_FK_PK] = @Ori" & _
                "ginal_PRECAR_COCONT_NUM_FK_PK) AND ([PRECAR_CDF_CODE_CACDT_FK_PK] = @Original_PR" & _
                "ECAR_CDF_CODE_CACDT_FK_PK) AND ((@IsNull_PRECAR_NUMORD = 1 AND [PRECAR_NUMORD] I" & _
                "S NULL) OR ([PRECAR_NUMORD] = @Original_PRECAR_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECAR_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRECAR_PRESENTATION_CARACTCOMP] ([PRECAR_PRE_CODE_FK_PK]" & _
                ", [PRECAR_COCONT_NUM_FK_PK], [PRECAR_CDF_CODE_CACDT_FK_PK], [PRECAR_NUMORD]) VAL" & _
                "UES (@PRECAR_PRE_CODE_FK_PK, @PRECAR_COCONT_NUM_FK_PK, @PRECAR_CDF_CODE_CACDT_FK" & _
                "_PK, @PRECAR_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECAR_PRE_CODE_FK_PK, PRECAR_COCONT_NUM_FK_PK, PR" & _
                "ECAR_CDF_CODE_CACDT_FK_PK, PRECAR_NUMORD FROM THERIAQUE.PRECAR_PRESENTATION_CARA" & _
                "CTCOMP WHERE (PRECAR_CDF_CODE_CACDT_FK_PK = @PRECAR_CDF_CODE_CACDT_FK_PK) AND (P" & _
                "RECAR_COCONT_NUM_FK_PK = @PRECAR_COCONT_NUM_FK_PK) AND (PRECAR_PRE_CODE_FK_PK = " & _
                "@PRECAR_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRECAR_PRESENTATION_CARACTCOMP] SET [PRECAR_PRE_CODE_FK_PK] =" & _
                " @PRECAR_PRE_CODE_FK_PK, [PRECAR_COCONT_NUM_FK_PK] = @PRECAR_COCONT_NUM_FK_PK, [" & _
                "PRECAR_CDF_CODE_CACDT_FK_PK] = @PRECAR_CDF_CODE_CACDT_FK_PK, [PRECAR_NUMORD] = @" & _
                "PRECAR_NUMORD WHERE (([PRECAR_PRE_CODE_FK_PK] = @Original_PRECAR_PRE_CODE_FK_PK)" & _
                " AND ([PRECAR_COCONT_NUM_FK_PK] = @Original_PRECAR_COCONT_NUM_FK_PK) AND ([PRECA" & _
                "R_CDF_CODE_CACDT_FK_PK] = @Original_PRECAR_CDF_CODE_CACDT_FK_PK) AND ((@IsNull_P" & _
                "RECAR_NUMORD = 1 AND [PRECAR_NUMORD] IS NULL) OR ([PRECAR_NUMORD] = @Original_PR" & _
                "ECAR_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECAR_PRE_CODE_FK_PK, PRECAR_COCONT_NUM_FK_PK, PRECAR_C" & _
                "DF_CODE_CACDT_FK_PK, PRECAR_NUMORD FROM THERIAQUE.PRECAR_PRESENTATION_CARACTCOMP" & _
                " WHERE (PRECAR_CDF_CODE_CACDT_FK_PK = @PRECAR_CDF_CODE_CACDT_FK_PK) AND (PRECAR_" & _
                "COCONT_NUM_FK_PK = @PRECAR_COCONT_NUM_FK_PK) AND (PRECAR_PRE_CODE_FK_PK = @PRECA" & _
                "R_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_COCONT_NUM_FK_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_COCONT_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_CDF_CODE_CACDT_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECAR_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECAR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRECAR_PRE_CODE_FK_PK, PRECAR_COCONT_NUM_FK_PK, PRECAR_CDF_CODE_CACDT_FK_P" & _
                "K, PRECAR_NUMORD FROM THERIAQUE.PRECAR_PRESENTATION_CARACTCOMP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRECAR_PRE_CODE_FK_PK, PRECAR_COCONT_NUM_FK_PK, PRECAR_CDF_CODE_CACDT_FK_P" & _
                "K, PRECAR_NUMORD FROM THERIAQUE.PRECAR_PRESENTATION_CARACTCOMP" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRECAR_PRE" & _
                "_CODE_FK_PK = @PRECAR_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECAR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECAR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable = New dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable, ByVal PRECAR_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECAR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECAR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECAR_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRECAR_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECAR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECAR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECAR_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable = New dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRECAR_PRESENTATION_CARACTCOMPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRECAR_PRESENTATION_CARACTCOMP")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRECAR_PRE_CODE_FK_PK As String, ByVal Original_PRECAR_COCONT_NUM_FK_PK As Byte, ByVal Original_PRECAR_CDF_CODE_CACDT_FK_PK As String, ByVal Original_PRECAR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRECAR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECAR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRECAR_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRECAR_COCONT_NUM_FK_PK, Byte)
            If (Original_PRECAR_CDF_CODE_CACDT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECAR_CDF_CODE_CACDT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRECAR_CDF_CODE_CACDT_FK_PK, String)
            End If
            If (Original_PRECAR_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRECAR_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRECAR_PRE_CODE_FK_PK As String, ByVal PRECAR_COCONT_NUM_FK_PK As Byte, ByVal PRECAR_CDF_CODE_CACDT_FK_PK As String, ByVal PRECAR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRECAR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECAR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRECAR_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRECAR_COCONT_NUM_FK_PK, Byte)
            If (PRECAR_CDF_CODE_CACDT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECAR_CDF_CODE_CACDT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRECAR_CDF_CODE_CACDT_FK_PK, String)
            End If
            If (PRECAR_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRECAR_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRECAR_PRE_CODE_FK_PK As String, ByVal PRECAR_COCONT_NUM_FK_PK As Byte, ByVal PRECAR_CDF_CODE_CACDT_FK_PK As String, ByVal PRECAR_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRECAR_PRE_CODE_FK_PK As String, ByVal Original_PRECAR_COCONT_NUM_FK_PK As Byte, ByVal Original_PRECAR_CDF_CODE_CACDT_FK_PK As String, ByVal Original_PRECAR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRECAR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECAR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRECAR_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRECAR_COCONT_NUM_FK_PK, Byte)
            If (PRECAR_CDF_CODE_CACDT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECAR_CDF_CODE_CACDT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRECAR_CDF_CODE_CACDT_FK_PK, String)
            End If
            If (PRECAR_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRECAR_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECAR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECAR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRECAR_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PRECAR_COCONT_NUM_FK_PK, Byte)
            If (Original_PRECAR_CDF_CODE_CACDT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECAR_CDF_CODE_CACDT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRECAR_CDF_CODE_CACDT_FK_PK, String)
            End If
            If (Original_PRECAR_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PRECAR_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRECAR_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRECAR_PRE_CODE_FK_PK As String, ByVal Original_PRECAR_COCONT_NUM_FK_PK As Byte, ByVal Original_PRECAR_CDF_CODE_CACDT_FK_PK As String, ByVal Original_PRECAR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRECAR_PRE_CODE_FK_PK, Original_PRECAR_COCONT_NUM_FK_PK, Original_PRECAR_CDF_CODE_CACDT_FK_PK, PRECAR_NUMORD, Original_PRECAR_PRE_CODE_FK_PK, Original_PRECAR_COCONT_NUM_FK_PK, Original_PRECAR_CDF_CODE_CACDT_FK_PK, Original_PRECAR_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRECEMB_PRE_CAREMBALLAGETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRECEMB_PRE_CAREMBALLAGE"
            tableMapping.ColumnMappings.Add("PRECEMB_PRE_CODE_FK_PK", "PRECEMB_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECEMB_CDF_CAREMB_CODE_FK_PK", "PRECEMB_CDF_CAREMB_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECEMB_NUMORD", "PRECEMB_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRECEMB_PRE_CAREMBALLAGE] WHERE (([PRECEMB_PRE_CODE_FK_P" & _
                "K] = @Original_PRECEMB_PRE_CODE_FK_PK) AND ([PRECEMB_CDF_CAREMB_CODE_FK_PK] = @O" & _
                "riginal_PRECEMB_CDF_CAREMB_CODE_FK_PK) AND ((@IsNull_PRECEMB_NUMORD = 1 AND [PRE" & _
                "CEMB_NUMORD] IS NULL) OR ([PRECEMB_NUMORD] = @Original_PRECEMB_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECEMB_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECEMB_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECEMB_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRECEMB_PRE_CAREMBALLAGE] ([PRECEMB_PRE_CODE_FK_PK], [PR" & _
                "ECEMB_CDF_CAREMB_CODE_FK_PK], [PRECEMB_NUMORD]) VALUES (@PRECEMB_PRE_CODE_FK_PK," & _
                " @PRECEMB_CDF_CAREMB_CODE_FK_PK, @PRECEMB_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECEMB_PRE_CODE_FK_P" & _
                "K, PRECEMB_CDF_CAREMB_CODE_FK_PK, PRECEMB_NUMORD FROM THERIAQUE.PRECEMB_PRE_CARE" & _
                "MBALLAGE WHERE (PRECEMB_CDF_CAREMB_CODE_FK_PK = @PRECEMB_CDF_CAREMB_CODE_FK_PK) " & _
                "AND (PRECEMB_PRE_CODE_FK_PK = @PRECEMB_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRECEMB_PRE_CAREMBALLAGE] SET [PRECEMB_PRE_CODE_FK_PK] = @PRE" & _
                "CEMB_PRE_CODE_FK_PK, [PRECEMB_CDF_CAREMB_CODE_FK_PK] = @PRECEMB_CDF_CAREMB_CODE_" & _
                "FK_PK, [PRECEMB_NUMORD] = @PRECEMB_NUMORD WHERE (([PRECEMB_PRE_CODE_FK_PK] = @Or" & _
                "iginal_PRECEMB_PRE_CODE_FK_PK) AND ([PRECEMB_CDF_CAREMB_CODE_FK_PK] = @Original_" & _
                "PRECEMB_CDF_CAREMB_CODE_FK_PK) AND ((@IsNull_PRECEMB_NUMORD = 1 AND [PRECEMB_NUM" & _
                "ORD] IS NULL) OR ([PRECEMB_NUMORD] = @Original_PRECEMB_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECEM" & _
                "B_PRE_CODE_FK_PK, PRECEMB_CDF_CAREMB_CODE_FK_PK, PRECEMB_NUMORD FROM THERIAQUE.P" & _
                "RECEMB_PRE_CAREMBALLAGE WHERE (PRECEMB_CDF_CAREMB_CODE_FK_PK = @PRECEMB_CDF_CARE" & _
                "MB_CODE_FK_PK) AND (PRECEMB_PRE_CODE_FK_PK = @PRECEMB_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECEMB_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_CDF_CAREMB_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECEMB_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECEMB_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRECEMB_PRE_CODE_FK_PK, PRECEMB_CDF_CAREMB_CODE_FK_PK, PRECEMB_NUMORD FROM" & _
                " THERIAQUE.PRECEMB_PRE_CAREMBALLAGE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRECEMB_PRE_CODE_FK_PK, PRECEMB_CDF_CAREMB_CODE_FK_PK, PRECEMB_NUMORD FROM" & _
                " THERIAQUE.PRECEMB_PRE_CAREMBALLAGE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRECEMB_PRE_CODE_FK_PK = @PRECEMB_PRE" & _
                "_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECEMB_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECEMB_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable = New dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable, ByVal PRECEMB_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECEMB_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECEMB_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECEMB_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRECEMB_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECEMB_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECEMB_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECEMB_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable = New dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRECEMB_PRE_CAREMBALLAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRECEMB_PRE_CAREMBALLAGE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRECEMB_PRE_CODE_FK_PK As String, ByVal Original_PRECEMB_CDF_CAREMB_CODE_FK_PK As String, ByVal Original_PRECEMB_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRECEMB_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECEMB_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRECEMB_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRECEMB_CDF_CAREMB_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECEMB_CDF_CAREMB_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRECEMB_CDF_CAREMB_CODE_FK_PK, String)
            End If
            If (Original_PRECEMB_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRECEMB_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRECEMB_PRE_CODE_FK_PK As String, ByVal PRECEMB_CDF_CAREMB_CODE_FK_PK As String, ByVal PRECEMB_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRECEMB_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECEMB_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRECEMB_PRE_CODE_FK_PK, String)
            End If
            If (PRECEMB_CDF_CAREMB_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECEMB_CDF_CAREMB_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRECEMB_CDF_CAREMB_CODE_FK_PK, String)
            End If
            If (PRECEMB_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRECEMB_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRECEMB_PRE_CODE_FK_PK As String, ByVal PRECEMB_CDF_CAREMB_CODE_FK_PK As String, ByVal PRECEMB_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRECEMB_PRE_CODE_FK_PK As String, ByVal Original_PRECEMB_CDF_CAREMB_CODE_FK_PK As String, ByVal Original_PRECEMB_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRECEMB_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECEMB_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRECEMB_PRE_CODE_FK_PK, String)
            End If
            If (PRECEMB_CDF_CAREMB_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECEMB_CDF_CAREMB_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRECEMB_CDF_CAREMB_CODE_FK_PK, String)
            End If
            If (PRECEMB_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRECEMB_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PRECEMB_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECEMB_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PRECEMB_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRECEMB_CDF_CAREMB_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECEMB_CDF_CAREMB_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRECEMB_CDF_CAREMB_CODE_FK_PK, String)
            End If
            If (Original_PRECEMB_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRECEMB_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRECEMB_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRECEMB_PRE_CODE_FK_PK As String, ByVal Original_PRECEMB_CDF_CAREMB_CODE_FK_PK As String, ByVal Original_PRECEMB_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRECEMB_PRE_CODE_FK_PK, Original_PRECEMB_CDF_CAREMB_CODE_FK_PK, PRECEMB_NUMORD, Original_PRECEMB_PRE_CODE_FK_PK, Original_PRECEMB_CDF_CAREMB_CODE_FK_PK, Original_PRECEMB_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRETSS_PRESENTATION_TAUXTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRETSS_PRESENTATION_TAUX"
            tableMapping.ColumnMappings.Add("PRETSS_PRE_CODE_FK_PK", "PRETSS_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRETSS_CDF_TSS_CODE_FK_PK", "PRETSS_CDF_TSS_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRETSS_NUMSEQ", "PRETSS_NUMSEQ")
            tableMapping.ColumnMappings.Add("PRETSS_DATE_APPLI_PK", "PRETSS_DATE_APPLI_PK")
            tableMapping.ColumnMappings.Add("PRETSS_DATE_APPLIQUEE", "PRETSS_DATE_APPLIQUEE")
            tableMapping.ColumnMappings.Add("PRETSS_TEXTE", "PRETSS_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRETSS_PRESENTATION_TAUX] WHERE (([PRETSS_PRE_CODE_FK_PK" & _
                "] = @Original_PRETSS_PRE_CODE_FK_PK) AND ([PRETSS_CDF_TSS_CODE_FK_PK] = @Origina" & _
                "l_PRETSS_CDF_TSS_CODE_FK_PK) AND ([PRETSS_NUMSEQ] = @Original_PRETSS_NUMSEQ) AND" & _
                " ((@IsNull_PRETSS_DATE_APPLI_PK = 1 AND [PRETSS_DATE_APPLI_PK] IS NULL) OR ([PRE" & _
                "TSS_DATE_APPLI_PK] = @Original_PRETSS_DATE_APPLI_PK)) AND ((@IsNull_PRETSS_DATE_" & _
                "APPLIQUEE = 1 AND [PRETSS_DATE_APPLIQUEE] IS NULL) OR ([PRETSS_DATE_APPLIQUEE] =" & _
                " @Original_PRETSS_DATE_APPLIQUEE)) AND ((@IsNull_PRETSS_TEXTE = 1 AND [PRETSS_TE" & _
                "XTE] IS NULL) OR ([PRETSS_TEXTE] = @Original_PRETSS_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_NUMSEQ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSS_DATE_APPLIQUEE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSS_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRETSS_PRESENTATION_TAUX] ([PRETSS_PRE_CODE_FK_PK], [PRE" & _
                "TSS_CDF_TSS_CODE_FK_PK], [PRETSS_NUMSEQ], [PRETSS_DATE_APPLI_PK], [PRETSS_DATE_A" & _
                "PPLIQUEE], [PRETSS_TEXTE]) VALUES (@PRETSS_PRE_CODE_FK_PK, @PRETSS_CDF_TSS_CODE_" & _
                "FK_PK, @PRETSS_NUMSEQ, @PRETSS_DATE_APPLI_PK, @PRETSS_DATE_APPLIQUEE, @PRETSS_TE" & _
                "XTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRETSS_PRE_CODE_FK_PK, PRETSS_CDF_TSS_CODE_FK_PK, PRETSS_NUMSEQ, P" & _
                "RETSS_DATE_APPLI_PK, PRETSS_DATE_APPLIQUEE, PRETSS_TEXTE FROM THERIAQUE.PRETSS_P" & _
                "RESENTATION_TAUX WHERE (PRETSS_CDF_TSS_CODE_FK_PK = @PRETSS_CDF_TSS_CODE_FK_PK) " & _
                "AND (PRETSS_NUMSEQ = @PRETSS_NUMSEQ) AND (PRETSS_PRE_CODE_FK_PK = @PRETSS_PRE_CO" & _
                "DE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_NUMSEQ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRETSS_PRESENTATION_TAUX] SET [PRETSS_PRE_CODE_FK_PK] = @PRET" & _
                "SS_PRE_CODE_FK_PK, [PRETSS_CDF_TSS_CODE_FK_PK] = @PRETSS_CDF_TSS_CODE_FK_PK, [PR" & _
                "ETSS_NUMSEQ] = @PRETSS_NUMSEQ, [PRETSS_DATE_APPLI_PK] = @PRETSS_DATE_APPLI_PK, [" & _
                "PRETSS_DATE_APPLIQUEE] = @PRETSS_DATE_APPLIQUEE, [PRETSS_TEXTE] = @PRETSS_TEXTE " & _
                "WHERE (([PRETSS_PRE_CODE_FK_PK] = @Original_PRETSS_PRE_CODE_FK_PK) AND ([PRETSS_" & _
                "CDF_TSS_CODE_FK_PK] = @Original_PRETSS_CDF_TSS_CODE_FK_PK) AND ([PRETSS_NUMSEQ] " & _
                "= @Original_PRETSS_NUMSEQ) AND ((@IsNull_PRETSS_DATE_APPLI_PK = 1 AND [PRETSS_DA" & _
                "TE_APPLI_PK] IS NULL) OR ([PRETSS_DATE_APPLI_PK] = @Original_PRETSS_DATE_APPLI_P" & _
                "K)) AND ((@IsNull_PRETSS_DATE_APPLIQUEE = 1 AND [PRETSS_DATE_APPLIQUEE] IS NULL)" & _
                " OR ([PRETSS_DATE_APPLIQUEE] = @Original_PRETSS_DATE_APPLIQUEE)) AND ((@IsNull_P" & _
                "RETSS_TEXTE = 1 AND [PRETSS_TEXTE] IS NULL) OR ([PRETSS_TEXTE] = @Original_PRETS" & _
                "S_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRETSS_PRE_CODE_FK_PK, PRETSS_CDF_TSS_CODE_FK_PK, PRETSS_NUM" & _
                "SEQ, PRETSS_DATE_APPLI_PK, PRETSS_DATE_APPLIQUEE, PRETSS_TEXTE FROM THERIAQUE.PR" & _
                "ETSS_PRESENTATION_TAUX WHERE (PRETSS_CDF_TSS_CODE_FK_PK = @PRETSS_CDF_TSS_CODE_F" & _
                "K_PK) AND (PRETSS_NUMSEQ = @PRETSS_NUMSEQ) AND (PRETSS_PRE_CODE_FK_PK = @PRETSS_" & _
                "PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_NUMSEQ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_NUMSEQ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSS_DATE_APPLIQUEE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSS_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSS_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRETSS_PRE_CODE_FK_PK, PRETSS_CDF_TSS_CODE_FK_PK, PRETSS_NUMSEQ, PRETSS_DA" & _
                "TE_APPLI_PK, PRETSS_DATE_APPLIQUEE, PRETSS_TEXTE FROM THERIAQUE.PRETSS_PRESENTAT" & _
                "ION_TAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRETSS_PRE_CODE_FK_PK, PRETSS_CDF_TSS_CODE_FK_PK, PRETSS_NUMSEQ, PRETSS_DA" & _
                "TE_APPLI_PK, PRETSS_DATE_APPLIQUEE, PRETSS_TEXTE FROM THERIAQUE.PRETSS_PRESENTAT" & _
                "ION_TAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRETSS_PRE_CODE_FK_PK = @PRETSS_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable = New dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable, ByVal PRETSS_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRETSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRETSS_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRETSS_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRETSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRETSS_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable = New dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRETSS_PRESENTATION_TAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRETSS_PRESENTATION_TAUX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRETSS_PRE_CODE_FK_PK As String, ByVal Original_PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal Original_PRETSS_NUMSEQ As Short, ByVal Original_PRETSS_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal Original_PRETSS_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal Original_PRETSS_TEXTE As String) As Integer
            If (Original_PRETSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRETSS_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRETSS_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSS_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRETSS_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRETSS_NUMSEQ, Short)
            If (Original_PRETSS_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRETSS_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSS_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRETSS_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSS_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PRETSS_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRETSS_PRE_CODE_FK_PK As String, ByVal PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal PRETSS_NUMSEQ As Short, ByVal PRETSS_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal PRETSS_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal PRETSS_TEXTE As String) As Integer
            If (PRETSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRETSS_PRE_CODE_FK_PK, String)
            End If
            If (PRETSS_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSS_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRETSS_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRETSS_NUMSEQ, Short)
            If (PRETSS_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRETSS_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRETSS_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRETSS_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PRETSS_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRETSS_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRETSS_PRE_CODE_FK_PK As String, ByVal PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal PRETSS_NUMSEQ As Short, ByVal PRETSS_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal PRETSS_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal PRETSS_TEXTE As String, ByVal Original_PRETSS_PRE_CODE_FK_PK As String, ByVal Original_PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal Original_PRETSS_NUMSEQ As Short, ByVal Original_PRETSS_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal Original_PRETSS_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal Original_PRETSS_TEXTE As String) As Integer
            If (PRETSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRETSS_PRE_CODE_FK_PK, String)
            End If
            If (PRETSS_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSS_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRETSS_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRETSS_NUMSEQ, Short)
            If (PRETSS_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRETSS_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRETSS_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRETSS_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PRETSS_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRETSS_TEXTE, String)
            End If
            If (Original_PRETSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRETSS_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRETSS_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSS_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRETSS_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PRETSS_NUMSEQ, Short)
            If (Original_PRETSS_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PRETSS_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSS_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PRETSS_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSS_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PRETSS_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRETSS_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal PRETSS_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal PRETSS_TEXTE As String, ByVal Original_PRETSS_PRE_CODE_FK_PK As String, ByVal Original_PRETSS_CDF_TSS_CODE_FK_PK As String, ByVal Original_PRETSS_NUMSEQ As Short, ByVal Original_PRETSS_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal Original_PRETSS_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal Original_PRETSS_TEXTE As String) As Integer
            Return Me.Update(Original_PRETSS_PRE_CODE_FK_PK, Original_PRETSS_CDF_TSS_CODE_FK_PK, Original_PRETSS_NUMSEQ, PRETSS_DATE_APPLI_PK, PRETSS_DATE_APPLIQUEE, PRETSS_TEXTE, Original_PRETSS_PRE_CODE_FK_PK, Original_PRETSS_CDF_TSS_CODE_FK_PK, Original_PRETSS_NUMSEQ, Original_PRETSS_DATE_APPLI_PK, Original_PRETSS_DATE_APPLIQUEE, Original_PRETSS_TEXTE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRETSSH_PRE_TAUX_HOPTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRETSSH_PRE_TAUX_HOP"
            tableMapping.ColumnMappings.Add("PRETSSH_PRE_CODE_FK_PK", "PRETSSH_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRETSSH_CDF_TSS_CODE_FK_PK", "PRETSSH_CDF_TSS_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRETSSH_NUMSEQ", "PRETSSH_NUMSEQ")
            tableMapping.ColumnMappings.Add("PRETSSH_DATE_APPLI_PK", "PRETSSH_DATE_APPLI_PK")
            tableMapping.ColumnMappings.Add("PRETSSH_DATE_APPLIQUEE", "PRETSSH_DATE_APPLIQUEE")
            tableMapping.ColumnMappings.Add("PRETSSH_TEXTE", "PRETSSH_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRETSSH_PRE_TAUX_HOP] WHERE (([PRETSSH_PRE_CODE_FK_PK] =" & _
                " @Original_PRETSSH_PRE_CODE_FK_PK) AND ([PRETSSH_CDF_TSS_CODE_FK_PK] = @Original" & _
                "_PRETSSH_CDF_TSS_CODE_FK_PK) AND ([PRETSSH_NUMSEQ] = @Original_PRETSSH_NUMSEQ) A" & _
                "ND ((@IsNull_PRETSSH_DATE_APPLI_PK = 1 AND [PRETSSH_DATE_APPLI_PK] IS NULL) OR (" & _
                "[PRETSSH_DATE_APPLI_PK] = @Original_PRETSSH_DATE_APPLI_PK)) AND ((@IsNull_PRETSS" & _
                "H_DATE_APPLIQUEE = 1 AND [PRETSSH_DATE_APPLIQUEE] IS NULL) OR ([PRETSSH_DATE_APP" & _
                "LIQUEE] = @Original_PRETSSH_DATE_APPLIQUEE)) AND ((@IsNull_PRETSSH_TEXTE = 1 AND" & _
                " [PRETSSH_TEXTE] IS NULL) OR ([PRETSSH_TEXTE] = @Original_PRETSSH_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_NUMSEQ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSSH_DATE_APPLI_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSSH_DATE_APPLIQUEE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSSH_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRETSSH_PRE_TAUX_HOP] ([PRETSSH_PRE_CODE_FK_PK], [PRETSS" & _
                "H_CDF_TSS_CODE_FK_PK], [PRETSSH_NUMSEQ], [PRETSSH_DATE_APPLI_PK], [PRETSSH_DATE_" & _
                "APPLIQUEE], [PRETSSH_TEXTE]) VALUES (@PRETSSH_PRE_CODE_FK_PK, @PRETSSH_CDF_TSS_C" & _
                "ODE_FK_PK, @PRETSSH_NUMSEQ, @PRETSSH_DATE_APPLI_PK, @PRETSSH_DATE_APPLIQUEE, @PR" & _
                "ETSSH_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRETSSH_PRE_CODE_FK_PK, PRETSSH_CDF_TSS_CODE_FK_PK, PRETSS" & _
                "H_NUMSEQ, PRETSSH_DATE_APPLI_PK, PRETSSH_DATE_APPLIQUEE, PRETSSH_TEXTE FROM THER" & _
                "IAQUE.PRETSSH_PRE_TAUX_HOP WHERE (PRETSSH_CDF_TSS_CODE_FK_PK = @PRETSSH_CDF_TSS_" & _
                "CODE_FK_PK) AND (PRETSSH_NUMSEQ = @PRETSSH_NUMSEQ) AND (PRETSSH_PRE_CODE_FK_PK =" & _
                " @PRETSSH_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_NUMSEQ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRETSSH_PRE_TAUX_HOP] SET [PRETSSH_PRE_CODE_FK_PK] = @PRETSSH" & _
                "_PRE_CODE_FK_PK, [PRETSSH_CDF_TSS_CODE_FK_PK] = @PRETSSH_CDF_TSS_CODE_FK_PK, [PR" & _
                "ETSSH_NUMSEQ] = @PRETSSH_NUMSEQ, [PRETSSH_DATE_APPLI_PK] = @PRETSSH_DATE_APPLI_P" & _
                "K, [PRETSSH_DATE_APPLIQUEE] = @PRETSSH_DATE_APPLIQUEE, [PRETSSH_TEXTE] = @PRETSS" & _
                "H_TEXTE WHERE (([PRETSSH_PRE_CODE_FK_PK] = @Original_PRETSSH_PRE_CODE_FK_PK) AND" & _
                " ([PRETSSH_CDF_TSS_CODE_FK_PK] = @Original_PRETSSH_CDF_TSS_CODE_FK_PK) AND ([PRE" & _
                "TSSH_NUMSEQ] = @Original_PRETSSH_NUMSEQ) AND ((@IsNull_PRETSSH_DATE_APPLI_PK = 1" & _
                " AND [PRETSSH_DATE_APPLI_PK] IS NULL) OR ([PRETSSH_DATE_APPLI_PK] = @Original_PR" & _
                "ETSSH_DATE_APPLI_PK)) AND ((@IsNull_PRETSSH_DATE_APPLIQUEE = 1 AND [PRETSSH_DATE" & _
                "_APPLIQUEE] IS NULL) OR ([PRETSSH_DATE_APPLIQUEE] = @Original_PRETSSH_DATE_APPLI" & _
                "QUEE)) AND ((@IsNull_PRETSSH_TEXTE = 1 AND [PRETSSH_TEXTE] IS NULL) OR ([PRETSSH" & _
                "_TEXTE] = @Original_PRETSSH_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRETSSH_PRE_CODE_FK_PK, PRETSSH_CD" & _
                "F_TSS_CODE_FK_PK, PRETSSH_NUMSEQ, PRETSSH_DATE_APPLI_PK, PRETSSH_DATE_APPLIQUEE," & _
                " PRETSSH_TEXTE FROM THERIAQUE.PRETSSH_PRE_TAUX_HOP WHERE (PRETSSH_CDF_TSS_CODE_F" & _
                "K_PK = @PRETSSH_CDF_TSS_CODE_FK_PK) AND (PRETSSH_NUMSEQ = @PRETSSH_NUMSEQ) AND (" & _
                "PRETSSH_PRE_CODE_FK_PK = @PRETSSH_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_NUMSEQ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_CDF_TSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_NUMSEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_NUMSEQ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSSH_DATE_APPLI_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSSH_DATE_APPLIQUEE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_DATE_APPLIQUEE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_DATE_APPLIQUEE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRETSSH_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRETSSH_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRETSSH_PRE_CODE_FK_PK, PRETSSH_CDF_TSS_CODE_FK_PK, PRETSSH_NUMSEQ, PRETSS" & _
                "H_DATE_APPLI_PK, PRETSSH_DATE_APPLIQUEE, PRETSSH_TEXTE FROM THERIAQUE.PRETSSH_PR" & _
                "E_TAUX_HOP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRETSSH_PRE_CODE_FK_PK, PRETSSH_CDF_TSS_CODE_FK_PK, PRETSSH_NUMSEQ, PRETSS" & _
                "H_DATE_APPLI_PK, PRETSSH_DATE_APPLIQUEE, PRETSSH_TEXTE FROM THERIAQUE.PRETSSH_PR" & _
                "E_TAUX_HOP" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRETSSH_PRE_CODE_FK_PK = @PRETSSH_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRETSSH_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRETSSH_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable = New dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable, ByVal PRETSSH_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRETSSH_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSSH_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRETSSH_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRETSSH_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRETSSH_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSSH_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRETSSH_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable = New dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRETSSH_PRE_TAUX_HOPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRETSSH_PRE_TAUX_HOP")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRETSSH_PRE_CODE_FK_PK As String, ByVal Original_PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal Original_PRETSSH_NUMSEQ As Short, ByVal Original_PRETSSH_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal Original_PRETSSH_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal Original_PRETSSH_TEXTE As String) As Integer
            If (Original_PRETSSH_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSSH_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRETSSH_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRETSSH_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSSH_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRETSSH_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRETSSH_NUMSEQ, Short)
            If (Original_PRETSSH_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRETSSH_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSSH_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRETSSH_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSSH_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PRETSSH_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRETSSH_PRE_CODE_FK_PK As String, ByVal PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal PRETSSH_NUMSEQ As Short, ByVal PRETSSH_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal PRETSSH_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal PRETSSH_TEXTE As String) As Integer
            If (PRETSSH_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSSH_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRETSSH_PRE_CODE_FK_PK, String)
            End If
            If (PRETSSH_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSSH_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRETSSH_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRETSSH_NUMSEQ, Short)
            If (PRETSSH_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRETSSH_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRETSSH_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRETSSH_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PRETSSH_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRETSSH_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRETSSH_PRE_CODE_FK_PK As String, ByVal PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal PRETSSH_NUMSEQ As Short, ByVal PRETSSH_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal PRETSSH_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal PRETSSH_TEXTE As String, ByVal Original_PRETSSH_PRE_CODE_FK_PK As String, ByVal Original_PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal Original_PRETSSH_NUMSEQ As Short, ByVal Original_PRETSSH_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal Original_PRETSSH_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal Original_PRETSSH_TEXTE As String) As Integer
            If (PRETSSH_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSSH_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRETSSH_PRE_CODE_FK_PK, String)
            End If
            If (PRETSSH_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRETSSH_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRETSSH_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRETSSH_NUMSEQ, Short)
            If (PRETSSH_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRETSSH_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRETSSH_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRETSSH_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PRETSSH_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRETSSH_TEXTE, String)
            End If
            If (Original_PRETSSH_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSSH_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRETSSH_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRETSSH_CDF_TSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRETSSH_CDF_TSS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRETSSH_CDF_TSS_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PRETSSH_NUMSEQ, Short)
            If (Original_PRETSSH_DATE_APPLI_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PRETSSH_DATE_APPLI_PK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSSH_DATE_APPLIQUEE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PRETSSH_DATE_APPLIQUEE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PRETSSH_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PRETSSH_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRETSSH_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal PRETSSH_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal PRETSSH_TEXTE As String, ByVal Original_PRETSSH_PRE_CODE_FK_PK As String, ByVal Original_PRETSSH_CDF_TSS_CODE_FK_PK As String, ByVal Original_PRETSSH_NUMSEQ As Short, ByVal Original_PRETSSH_DATE_APPLI_PK As Global.System.Nullable(Of Date), ByVal Original_PRETSSH_DATE_APPLIQUEE As Global.System.Nullable(Of Date), ByVal Original_PRETSSH_TEXTE As String) As Integer
            Return Me.Update(Original_PRETSSH_PRE_CODE_FK_PK, Original_PRETSSH_CDF_TSS_CODE_FK_PK, Original_PRETSSH_NUMSEQ, PRETSSH_DATE_APPLI_PK, PRETSSH_DATE_APPLIQUEE, PRETSSH_TEXTE, Original_PRETSSH_PRE_CODE_FK_PK, Original_PRETSSH_CDF_TSS_CODE_FK_PK, Original_PRETSSH_NUMSEQ, Original_PRETSSH_DATE_APPLI_PK, Original_PRETSSH_DATE_APPLIQUEE, Original_PRETSSH_TEXTE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRESTP_PRE_STPTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRESTP_PRE_STP"
            tableMapping.ColumnMappings.Add("PRESTP_PRE_CODE_FK_PK", "PRESTP_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTP_CDF_STP_CODE_FK_PK", "PRESTP_CDF_STP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTP_DATE_AFSSAPS", "PRESTP_DATE_AFSSAPS")
            tableMapping.ColumnMappings.Add("PRESTP_NUMORD", "PRESTP_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRESTP_PRE_STP] WHERE (([PRESTP_PRE_CODE_FK_PK] = @Origi" & _
                "nal_PRESTP_PRE_CODE_FK_PK) AND ([PRESTP_CDF_STP_CODE_FK_PK] = @Original_PRESTP_C" & _
                "DF_STP_CODE_FK_PK) AND ((@IsNull_PRESTP_DATE_AFSSAPS = 1 AND [PRESTP_DATE_AFSSAP" & _
                "S] IS NULL) OR ([PRESTP_DATE_AFSSAPS] = @Original_PRESTP_DATE_AFSSAPS)) AND ((@I" & _
                "sNull_PRESTP_NUMORD = 1 AND [PRESTP_NUMORD] IS NULL) OR ([PRESTP_NUMORD] = @Orig" & _
                "inal_PRESTP_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTP_DATE_AFSSAPS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_DATE_AFSSAPS", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_DATE_AFSSAPS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_DATE_AFSSAPS", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRESTP_PRE_STP] ([PRESTP_PRE_CODE_FK_PK], [PRESTP_CDF_ST" & _
                "P_CODE_FK_PK], [PRESTP_DATE_AFSSAPS], [PRESTP_NUMORD]) VALUES (@PRESTP_PRE_CODE_" & _
                "FK_PK, @PRESTP_CDF_STP_CODE_FK_PK, @PRESTP_DATE_AFSSAPS, @PRESTP_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T PRESTP_PRE_CODE_FK_PK, PRESTP_CDF_STP_CODE_FK_PK, PRESTP_DATE_AFSSAPS, PRESTP_" & _
                "NUMORD FROM THERIAQUE.PRESTP_PRE_STP WHERE (PRESTP_CDF_STP_CODE_FK_PK = @PRESTP_" & _
                "CDF_STP_CODE_FK_PK) AND (PRESTP_PRE_CODE_FK_PK = @PRESTP_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_DATE_AFSSAPS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_DATE_AFSSAPS", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRESTP_PRE_STP] SET [PRESTP_PRE_CODE_FK_PK] = @PRESTP_PRE_COD" & _
                "E_FK_PK, [PRESTP_CDF_STP_CODE_FK_PK] = @PRESTP_CDF_STP_CODE_FK_PK, [PRESTP_DATE_" & _
                "AFSSAPS] = @PRESTP_DATE_AFSSAPS, [PRESTP_NUMORD] = @PRESTP_NUMORD WHERE (([PREST" & _
                "P_PRE_CODE_FK_PK] = @Original_PRESTP_PRE_CODE_FK_PK) AND ([PRESTP_CDF_STP_CODE_F" & _
                "K_PK] = @Original_PRESTP_CDF_STP_CODE_FK_PK) AND ((@IsNull_PRESTP_DATE_AFSSAPS =" & _
                " 1 AND [PRESTP_DATE_AFSSAPS] IS NULL) OR ([PRESTP_DATE_AFSSAPS] = @Original_PRES" & _
                "TP_DATE_AFSSAPS)) AND ((@IsNull_PRESTP_NUMORD = 1 AND [PRESTP_NUMORD] IS NULL) O" & _
                "R ([PRESTP_NUMORD] = @Original_PRESTP_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESTP_PRE_CODE_FK_PK, " & _
                "PRESTP_CDF_STP_CODE_FK_PK, PRESTP_DATE_AFSSAPS, PRESTP_NUMORD FROM THERIAQUE.PRE" & _
                "STP_PRE_STP WHERE (PRESTP_CDF_STP_CODE_FK_PK = @PRESTP_CDF_STP_CODE_FK_PK) AND (" & _
                "PRESTP_PRE_CODE_FK_PK = @PRESTP_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_DATE_AFSSAPS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_DATE_AFSSAPS", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_CDF_STP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTP_DATE_AFSSAPS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_DATE_AFSSAPS", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_DATE_AFSSAPS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_DATE_AFSSAPS", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRESTP_PRE_CODE_FK_PK, PRESTP_CDF_STP_CODE_FK_PK, PRESTP_DATE_AFSSAPS, PRE" & _
                "STP_NUMORD FROM THERIAQUE.PRESTP_PRE_STP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRESTP_PRE_CODE_FK_PK, PRESTP_CDF_STP_CODE_FK_PK, PRESTP_DATE_AFSSAPS, PRE" & _
                "STP_NUMORD FROM THERIAQUE.PRESTP_PRE_STP" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE PRESTP_PRE_CODE_FK_PK = @PRESTP_" & _
                "PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable = New dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable, ByVal PRESTP_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTP_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRESTP_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTP_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable = New dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTP_PRE_STPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRESTP_PRE_STP")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRESTP_PRE_CODE_FK_PK As String, ByVal Original_PRESTP_CDF_STP_CODE_FK_PK As String, ByVal Original_PRESTP_DATE_AFSSAPS As Global.System.Nullable(Of Date), ByVal Original_PRESTP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRESTP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRESTP_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTP_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTP_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRESTP_CDF_STP_CODE_FK_PK, String)
            End If
            If (Original_PRESTP_DATE_AFSSAPS.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRESTP_DATE_AFSSAPS.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PRESTP_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PRESTP_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRESTP_PRE_CODE_FK_PK As String, ByVal PRESTP_CDF_STP_CODE_FK_PK As String, ByVal PRESTP_DATE_AFSSAPS As Global.System.Nullable(Of Date), ByVal PRESTP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRESTP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRESTP_PRE_CODE_FK_PK, String)
            End If
            If (PRESTP_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTP_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRESTP_CDF_STP_CODE_FK_PK, String)
            End If
            If (PRESTP_DATE_AFSSAPS.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRESTP_DATE_AFSSAPS.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PRESTP_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRESTP_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTP_PRE_CODE_FK_PK As String, ByVal PRESTP_CDF_STP_CODE_FK_PK As String, ByVal PRESTP_DATE_AFSSAPS As Global.System.Nullable(Of Date), ByVal PRESTP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRESTP_PRE_CODE_FK_PK As String, ByVal Original_PRESTP_CDF_STP_CODE_FK_PK As String, ByVal Original_PRESTP_DATE_AFSSAPS As Global.System.Nullable(Of Date), ByVal Original_PRESTP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRESTP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRESTP_PRE_CODE_FK_PK, String)
            End If
            If (PRESTP_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTP_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRESTP_CDF_STP_CODE_FK_PK, String)
            End If
            If (PRESTP_DATE_AFSSAPS.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRESTP_DATE_AFSSAPS.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PRESTP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRESTP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PRESTP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRESTP_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTP_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTP_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PRESTP_CDF_STP_CODE_FK_PK, String)
            End If
            If (Original_PRESTP_DATE_AFSSAPS.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRESTP_DATE_AFSSAPS.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PRESTP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PRESTP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTP_DATE_AFSSAPS As Global.System.Nullable(Of Date), ByVal PRESTP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRESTP_PRE_CODE_FK_PK As String, ByVal Original_PRESTP_CDF_STP_CODE_FK_PK As String, ByVal Original_PRESTP_DATE_AFSSAPS As Global.System.Nullable(Of Date), ByVal Original_PRESTP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRESTP_PRE_CODE_FK_PK, Original_PRESTP_CDF_STP_CODE_FK_PK, PRESTP_DATE_AFSSAPS, PRESTP_NUMORD, Original_PRESTP_PRE_CODE_FK_PK, Original_PRESTP_CDF_STP_CODE_FK_PK, Original_PRESTP_DATE_AFSSAPS, Original_PRESTP_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRESTC_STATUTCOMP_PRESENTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRESTC_STATUTCOMP_PRESENT"
            tableMapping.ColumnMappings.Add("PRESTC_PRE_CODE_FK_PK", "PRESTC_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTC_CDF_STCOMP_CODE_FK_PK", "PRESTC_CDF_STCOMP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTC_CODE_IDENT", "PRESTC_CODE_IDENT")
            tableMapping.ColumnMappings.Add("PRESTC_NUMORD", "PRESTC_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRESTC_STATUTCOMP_PRESENT] WHERE (([PRESTC_PRE_CODE_FK_P" & _
                "K] = @Original_PRESTC_PRE_CODE_FK_PK) AND ([PRESTC_CDF_STCOMP_CODE_FK_PK] = @Ori" & _
                "ginal_PRESTC_CDF_STCOMP_CODE_FK_PK) AND ([PRESTC_CODE_IDENT] = @Original_PRESTC_" & _
                "CODE_IDENT) AND ((@IsNull_PRESTC_NUMORD = 1 AND [PRESTC_NUMORD] IS NULL) OR ([PR" & _
                "ESTC_NUMORD] = @Original_PRESTC_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_CODE_IDENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CODE_IDENT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRESTC_STATUTCOMP_PRESENT] ([PRESTC_PRE_CODE_FK_PK], [PR" & _
                "ESTC_CDF_STCOMP_CODE_FK_PK], [PRESTC_CODE_IDENT], [PRESTC_NUMORD]) VALUES (@PRES" & _
                "TC_PRE_CODE_FK_PK, @PRESTC_CDF_STCOMP_CODE_FK_PK, @PRESTC_CODE_IDENT, @PRESTC_NU" & _
                "MORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESTC_PRE_CODE_FK_PK, PRESTC_CDF_STCOMP_CODE_FK_PK, PRESTC_CODE_" & _
                "IDENT, PRESTC_NUMORD FROM THERIAQUE.PRESTC_STATUTCOMP_PRESENT WHERE (PRESTC_CDF_" & _
                "STCOMP_CODE_FK_PK = @PRESTC_CDF_STCOMP_CODE_FK_PK) AND (PRESTC_CODE_IDENT = @PRE" & _
                "STC_CODE_IDENT) AND (PRESTC_PRE_CODE_FK_PK = @PRESTC_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_CODE_IDENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CODE_IDENT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRESTC_STATUTCOMP_PRESENT] SET [PRESTC_PRE_CODE_FK_PK] = @PRE" & _
                "STC_PRE_CODE_FK_PK, [PRESTC_CDF_STCOMP_CODE_FK_PK] = @PRESTC_CDF_STCOMP_CODE_FK_" & _
                "PK, [PRESTC_CODE_IDENT] = @PRESTC_CODE_IDENT, [PRESTC_NUMORD] = @PRESTC_NUMORD W" & _
                "HERE (([PRESTC_PRE_CODE_FK_PK] = @Original_PRESTC_PRE_CODE_FK_PK) AND ([PRESTC_C" & _
                "DF_STCOMP_CODE_FK_PK] = @Original_PRESTC_CDF_STCOMP_CODE_FK_PK) AND ([PRESTC_COD" & _
                "E_IDENT] = @Original_PRESTC_CODE_IDENT) AND ((@IsNull_PRESTC_NUMORD = 1 AND [PRE" & _
                "STC_NUMORD] IS NULL) OR ([PRESTC_NUMORD] = @Original_PRESTC_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT P" & _
                "RESTC_PRE_CODE_FK_PK, PRESTC_CDF_STCOMP_CODE_FK_PK, PRESTC_CODE_IDENT, PRESTC_NU" & _
                "MORD FROM THERIAQUE.PRESTC_STATUTCOMP_PRESENT WHERE (PRESTC_CDF_STCOMP_CODE_FK_P" & _
                "K = @PRESTC_CDF_STCOMP_CODE_FK_PK) AND (PRESTC_CODE_IDENT = @PRESTC_CODE_IDENT) " & _
                "AND (PRESTC_PRE_CODE_FK_PK = @PRESTC_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_CODE_IDENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CODE_IDENT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CDF_STCOMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_CODE_IDENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_CODE_IDENT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRESTC_PRE_CODE_FK_PK, PRESTC_CDF_STCOMP_CODE_FK_PK, PRESTC_CODE_IDENT, PR" & _
                "ESTC_NUMORD FROM THERIAQUE.PRESTC_STATUTCOMP_PRESENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRESTC_PRE_CODE_FK_PK, PRESTC_CDF_STCOMP_CODE_FK_PK, PRESTC_CODE_IDENT, PR" & _
                "ESTC_NUMORD FROM THERIAQUE.PRESTC_STATUTCOMP_PRESENT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRESTC_PRE_CODE_FK_P" & _
                "K = @PRESTC_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTC_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTC_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable = New dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable, ByVal PRESTC_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTC_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTC_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRESTC_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTC_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTC_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable = New dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTC_STATUTCOMP_PRESENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRESTC_STATUTCOMP_PRESENT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRESTC_PRE_CODE_FK_PK As String, ByVal Original_PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal Original_PRESTC_CODE_IDENT As String, ByVal Original_PRESTC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRESTC_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTC_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRESTC_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTC_CDF_STCOMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTC_CDF_STCOMP_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRESTC_CDF_STCOMP_CODE_FK_PK, String)
            End If
            If (Original_PRESTC_CODE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTC_CODE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRESTC_CODE_IDENT, String)
            End If
            If (Original_PRESTC_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRESTC_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRESTC_PRE_CODE_FK_PK As String, ByVal PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal PRESTC_CODE_IDENT As String, ByVal PRESTC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRESTC_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRESTC_PRE_CODE_FK_PK, String)
            End If
            If (PRESTC_CDF_STCOMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_CDF_STCOMP_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRESTC_CDF_STCOMP_CODE_FK_PK, String)
            End If
            If (PRESTC_CODE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_CODE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRESTC_CODE_IDENT, String)
            End If
            If (PRESTC_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRESTC_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTC_PRE_CODE_FK_PK As String, ByVal PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal PRESTC_CODE_IDENT As String, ByVal PRESTC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRESTC_PRE_CODE_FK_PK As String, ByVal Original_PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal Original_PRESTC_CODE_IDENT As String, ByVal Original_PRESTC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRESTC_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRESTC_PRE_CODE_FK_PK, String)
            End If
            If (PRESTC_CDF_STCOMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_CDF_STCOMP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRESTC_CDF_STCOMP_CODE_FK_PK, String)
            End If
            If (PRESTC_CODE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTC_CODE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRESTC_CODE_IDENT, String)
            End If
            If (PRESTC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRESTC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PRESTC_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTC_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRESTC_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTC_CDF_STCOMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTC_CDF_STCOMP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PRESTC_CDF_STCOMP_CODE_FK_PK, String)
            End If
            If (Original_PRESTC_CODE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTC_CODE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRESTC_CODE_IDENT, String)
            End If
            If (Original_PRESTC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PRESTC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRESTC_PRE_CODE_FK_PK As String, ByVal Original_PRESTC_CDF_STCOMP_CODE_FK_PK As String, ByVal Original_PRESTC_CODE_IDENT As String, ByVal Original_PRESTC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRESTC_PRE_CODE_FK_PK, Original_PRESTC_CDF_STCOMP_CODE_FK_PK, Original_PRESTC_CODE_IDENT, PRESTC_NUMORD, Original_PRESTC_PRE_CODE_FK_PK, Original_PRESTC_CDF_STCOMP_CODE_FK_PK, Original_PRESTC_CODE_IDENT, Original_PRESTC_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRESTR_STATUT_REMBOURSTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRESTR_STATUT_REMBOURST"
            tableMapping.ColumnMappings.Add("PRESTR_PRE_CODE_FK_PK", "PRESTR_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTR_CDF_STR_CODE_FK_PK", "PRESTR_CDF_STR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTR_NUMORD", "PRESTR_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRESTR_STATUT_REMBOURST] WHERE (([PRESTR_PRE_CODE_FK_PK]" & _
                " = @Original_PRESTR_PRE_CODE_FK_PK) AND ([PRESTR_CDF_STR_CODE_FK_PK] = @Original" & _
                "_PRESTR_CDF_STR_CODE_FK_PK) AND ((@IsNull_PRESTR_NUMORD = 1 AND [PRESTR_NUMORD] " & _
                "IS NULL) OR ([PRESTR_NUMORD] = @Original_PRESTR_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTR_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRESTR_STATUT_REMBOURST] ([PRESTR_PRE_CODE_FK_PK], [PRES" & _
                "TR_CDF_STR_CODE_FK_PK], [PRESTR_NUMORD]) VALUES (@PRESTR_PRE_CODE_FK_PK, @PRESTR" & _
                "_CDF_STR_CODE_FK_PK, @PRESTR_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESTR_PRE_CODE_FK_PK, PRESTR_CDF_" & _
                "STR_CODE_FK_PK, PRESTR_NUMORD FROM THERIAQUE.PRESTR_STATUT_REMBOURST WHERE (PRES" & _
                "TR_CDF_STR_CODE_FK_PK = @PRESTR_CDF_STR_CODE_FK_PK) AND (PRESTR_PRE_CODE_FK_PK =" & _
                " @PRESTR_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRESTR_STATUT_REMBOURST] SET [PRESTR_PRE_CODE_FK_PK] = @PREST" & _
                "R_PRE_CODE_FK_PK, [PRESTR_CDF_STR_CODE_FK_PK] = @PRESTR_CDF_STR_CODE_FK_PK, [PRE" & _
                "STR_NUMORD] = @PRESTR_NUMORD WHERE (([PRESTR_PRE_CODE_FK_PK] = @Original_PRESTR_" & _
                "PRE_CODE_FK_PK) AND ([PRESTR_CDF_STR_CODE_FK_PK] = @Original_PRESTR_CDF_STR_CODE" & _
                "_FK_PK) AND ((@IsNull_PRESTR_NUMORD = 1 AND [PRESTR_NUMORD] IS NULL) OR ([PRESTR" & _
                "_NUMORD] = @Original_PRESTR_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESTR_PRE_CODE_FK_PK, PRESTR_CDF" & _
                "_STR_CODE_FK_PK, PRESTR_NUMORD FROM THERIAQUE.PRESTR_STATUT_REMBOURST WHERE (PRE" & _
                "STR_CDF_STR_CODE_FK_PK = @PRESTR_CDF_STR_CODE_FK_PK) AND (PRESTR_PRE_CODE_FK_PK " & _
                "= @PRESTR_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_CDF_STR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTR_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRESTR_PRE_CODE_FK_PK, PRESTR_CDF_STR_CODE_FK_PK, PRESTR_NUMORD FROM THERI" & _
                "AQUE.PRESTR_STATUT_REMBOURST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRESTR_PRE_CODE_FK_PK, PRESTR_CDF_STR_CODE_FK_PK, PRESTR_NUMORD FROM THERI" & _
                "AQUE.PRESTR_STATUT_REMBOURST" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRESTR_PRE_CODE_FK_PK = @PRESTR_PRE_CODE_FK_" & _
                "PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable = New dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable, ByVal PRESTR_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTR_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRESTR_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTR_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable = New dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTR_STATUT_REMBOURSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRESTR_STATUT_REMBOURST")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRESTR_PRE_CODE_FK_PK As String, ByVal Original_PRESTR_CDF_STR_CODE_FK_PK As String, ByVal Original_PRESTR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRESTR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRESTR_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTR_CDF_STR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTR_CDF_STR_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRESTR_CDF_STR_CODE_FK_PK, String)
            End If
            If (Original_PRESTR_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRESTR_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRESTR_PRE_CODE_FK_PK As String, ByVal PRESTR_CDF_STR_CODE_FK_PK As String, ByVal PRESTR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRESTR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRESTR_PRE_CODE_FK_PK, String)
            End If
            If (PRESTR_CDF_STR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTR_CDF_STR_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRESTR_CDF_STR_CODE_FK_PK, String)
            End If
            If (PRESTR_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRESTR_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTR_PRE_CODE_FK_PK As String, ByVal PRESTR_CDF_STR_CODE_FK_PK As String, ByVal PRESTR_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRESTR_PRE_CODE_FK_PK As String, ByVal Original_PRESTR_CDF_STR_CODE_FK_PK As String, ByVal Original_PRESTR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PRESTR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRESTR_PRE_CODE_FK_PK, String)
            End If
            If (PRESTR_CDF_STR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTR_CDF_STR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRESTR_CDF_STR_CODE_FK_PK, String)
            End If
            If (PRESTR_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRESTR_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PRESTR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PRESTR_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTR_CDF_STR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTR_CDF_STR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRESTR_CDF_STR_CODE_FK_PK, String)
            End If
            If (Original_PRESTR_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRESTR_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTR_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PRESTR_PRE_CODE_FK_PK As String, ByVal Original_PRESTR_CDF_STR_CODE_FK_PK As String, ByVal Original_PRESTR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRESTR_PRE_CODE_FK_PK, Original_PRESTR_CDF_STR_CODE_FK_PK, PRESTR_NUMORD, Original_PRESTR_PRE_CODE_FK_PK, Original_PRESTR_CDF_STR_CODE_FK_PK, Original_PRESTR_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRESTRTX_TEXTE_STAT_REMBOURSTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRESTRTX_TEXTE_STAT_REMBOURST"
            tableMapping.ColumnMappings.Add("PRESTRTX_PRE_CODE_FK_PK", "PRESTRTX_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESTRTX_TEXTE", "PRESTRTX_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRESTRTX_TEXTE_STAT_REMBOURST] WHERE (([PRESTRTX_PRE_COD" & _
                "E_FK_PK] = @Original_PRESTRTX_PRE_CODE_FK_PK) AND ((@IsNull_PRESTRTX_TEXTE = 1 A" & _
                "ND [PRESTRTX_TEXTE] IS NULL) OR ([PRESTRTX_TEXTE] = @Original_PRESTRTX_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTRTX_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTRTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRESTRTX_TEXTE_STAT_REMBOURST] ([PRESTRTX_PRE_CODE_FK_PK" & _
                "], [PRESTRTX_TEXTE]) VALUES (@PRESTRTX_PRE_CODE_FK_PK, @PRESTRTX_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " PRESTRTX_PRE_CODE_FK_PK, PRESTRTX_TEXTE FROM THERIAQUE.PRESTRTX_TEXTE_STAT_REMB" & _
                "OURST WHERE (PRESTRTX_PRE_CODE_FK_PK = @PRESTRTX_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTRTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRESTRTX_TEXTE_STAT_REMBOURST] SET [PRESTRTX_PRE_CODE_FK_PK] " & _
                "= @PRESTRTX_PRE_CODE_FK_PK, [PRESTRTX_TEXTE] = @PRESTRTX_TEXTE WHERE (([PRESTRTX" & _
                "_PRE_CODE_FK_PK] = @Original_PRESTRTX_PRE_CODE_FK_PK) AND ((@IsNull_PRESTRTX_TEX" & _
                "TE = 1 AND [PRESTRTX_TEXTE] IS NULL) OR ([PRESTRTX_TEXTE] = @Original_PRESTRTX_T" & _
                "EXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESTRTX_PRE_CODE_FK_PK, PRESTRTX_TEXTE FROM THERIAQUE.PRESTRTX" & _
                "_TEXTE_STAT_REMBOURST WHERE (PRESTRTX_PRE_CODE_FK_PK = @PRESTRTX_PRE_CODE_FK_PK)" & _
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTRTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESTRTX_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESTRTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRESTRTX_PRE_CODE_FK_PK, PRESTRTX_TEXTE FROM THERIAQUE.PRESTRTX_TEXTE_STAT" & _
                "_REMBOURST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRESTRTX_PRE_CODE_FK_PK, PRESTRTX_TEXTE FROM THERIAQUE.PRESTRTX_TEXTE_STAT" & _
                "_REMBOURST" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRESTRTX_PRE_CODE_FK_PK = @PRESTRTX_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESTRTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable = New dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable, ByVal PRESTRTX_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTRTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTRTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTRTX_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRESTRTX_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESTRTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTRTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESTRTX_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable = New dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRESTRTX_TEXTE_STAT_REMBOURSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRESTRTX_TEXTE_STAT_REMBOURST")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRESTRTX_PRE_CODE_FK_PK As String, ByVal Original_PRESTRTX_TEXTE As String) As Integer
            If (Original_PRESTRTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTRTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRESTRTX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTRTX_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRESTRTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRESTRTX_PRE_CODE_FK_PK As String, ByVal PRESTRTX_TEXTE As String) As Integer
            If (PRESTRTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTRTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRESTRTX_PRE_CODE_FK_PK, String)
            End If
            If (PRESTRTX_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRESTRTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTRTX_PRE_CODE_FK_PK As String, ByVal PRESTRTX_TEXTE As String, ByVal Original_PRESTRTX_PRE_CODE_FK_PK As String, ByVal Original_PRESTRTX_TEXTE As String) As Integer
            If (PRESTRTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESTRTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRESTRTX_PRE_CODE_FK_PK, String)
            End If
            If (PRESTRTX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRESTRTX_TEXTE, String)
            End If
            If (Original_PRESTRTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESTRTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_PRESTRTX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESTRTX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRESTRTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESTRTX_TEXTE As String, ByVal Original_PRESTRTX_PRE_CODE_FK_PK As String, ByVal Original_PRESTRTX_TEXTE As String) As Integer
            Return Me.Update(Original_PRESTRTX_PRE_CODE_FK_PK, PRESTRTX_TEXTE, Original_PRESTRTX_PRE_CODE_FK_PK, Original_PRESTRTX_TEXTE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREPER_PRESENTATION_PERIO_CSVTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREPER_PRESENTATION_PERIO_CSV"
            tableMapping.ColumnMappings.Add("PREPER_NUM_CODE_PK", "PREPER_NUM_CODE_PK")
            tableMapping.ColumnMappings.Add("PREPER_PRE_CODE_FK_PK", "PREPER_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREPER_CDF_UT_CODE_FK", "PREPER_CDF_UT_CODE_FK")
            tableMapping.ColumnMappings.Add("PREPER_DUREE", "PREPER_DUREE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PREPER_PRESENTATION_PERIO_CSV] WHERE (([PREPER_NUM_CODE_" & _
                "PK] = @Original_PREPER_NUM_CODE_PK) AND ([PREPER_PRE_CODE_FK_PK] = @Original_PRE" & _
                "PER_PRE_CODE_FK_PK) AND ([PREPER_CDF_UT_CODE_FK] = @Original_PREPER_CDF_UT_CODE_" & _
                "FK) AND ([PREPER_DUREE] = @Original_PREPER_DUREE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_NUM_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_CDF_UT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_CDF_UT_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_DUREE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_DUREE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PREPER_PRESENTATION_PERIO_CSV] ([PREPER_NUM_CODE_PK], [P" & _
                "REPER_PRE_CODE_FK_PK], [PREPER_CDF_UT_CODE_FK], [PREPER_DUREE]) VALUES (@PREPER_" & _
                "NUM_CODE_PK, @PREPER_PRE_CODE_FK_PK, @PREPER_CDF_UT_CODE_FK, @PREPER_DUREE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SE" & _
                "LECT PREPER_NUM_CODE_PK, PREPER_PRE_CODE_FK_PK, PREPER_CDF_UT_CODE_FK, PREPER_DU" & _
                "REE FROM THERIAQUE.PREPER_PRESENTATION_PERIO_CSV WHERE (PREPER_NUM_CODE_PK = @PR" & _
                "EPER_NUM_CODE_PK) AND (PREPER_PRE_CODE_FK_PK = @PREPER_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_NUM_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_CDF_UT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_CDF_UT_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_DUREE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_DUREE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PREPER_PRESENTATION_PERIO_CSV] SET [PREPER_NUM_CODE_PK] = @PR" & _
                "EPER_NUM_CODE_PK, [PREPER_PRE_CODE_FK_PK] = @PREPER_PRE_CODE_FK_PK, [PREPER_CDF_" & _
                "UT_CODE_FK] = @PREPER_CDF_UT_CODE_FK, [PREPER_DUREE] = @PREPER_DUREE WHERE (([PR" & _
                "EPER_NUM_CODE_PK] = @Original_PREPER_NUM_CODE_PK) AND ([PREPER_PRE_CODE_FK_PK] =" & _
                " @Original_PREPER_PRE_CODE_FK_PK) AND ([PREPER_CDF_UT_CODE_FK] = @Original_PREPE" & _
                "R_CDF_UT_CODE_FK) AND ([PREPER_DUREE] = @Original_PREPER_DUREE));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREPER" & _
                "_NUM_CODE_PK, PREPER_PRE_CODE_FK_PK, PREPER_CDF_UT_CODE_FK, PREPER_DUREE FROM TH" & _
                "ERIAQUE.PREPER_PRESENTATION_PERIO_CSV WHERE (PREPER_NUM_CODE_PK = @PREPER_NUM_CO" & _
                "DE_PK) AND (PREPER_PRE_CODE_FK_PK = @PREPER_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_NUM_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_CDF_UT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_CDF_UT_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_DUREE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_DUREE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_NUM_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_CDF_UT_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_CDF_UT_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREPER_DUREE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_DUREE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREPER_NUM_CODE_PK, PREPER_PRE_CODE_FK_PK, PREPER_CDF_UT_CODE_FK, PREPER_D" & _
                "UREE FROM THERIAQUE.PREPER_PRESENTATION_PERIO_CSV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREPER_NUM_CODE_PK, PREPER_PRE_CODE_FK_PK, PREPER_CDF_UT_CODE_FK, PREPER_D" & _
                "UREE FROM THERIAQUE.PREPER_PRESENTATION_PERIO_CSV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PREPER_PRE_CODE_FK_PK =" & _
                " @PREPER_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREPER_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREPER_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable = New dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable, ByVal PREPER_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREPER_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREPER_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREPER_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREPER_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREPER_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREPER_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREPER_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable = New dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREPER_PRESENTATION_PERIO_CSVDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREPER_PRESENTATION_PERIO_CSV")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREPER_NUM_CODE_PK As Integer, ByVal Original_PREPER_PRE_CODE_FK_PK As String, ByVal Original_PREPER_CDF_UT_CODE_FK As String, ByVal Original_PREPER_DUREE As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREPER_NUM_CODE_PK, Integer)
            If (Original_PREPER_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREPER_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREPER_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREPER_CDF_UT_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREPER_CDF_UT_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREPER_CDF_UT_CODE_FK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREPER_DUREE, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREPER_NUM_CODE_PK As Integer, ByVal PREPER_PRE_CODE_FK_PK As String, ByVal PREPER_CDF_UT_CODE_FK As String, ByVal PREPER_DUREE As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREPER_NUM_CODE_PK, Integer)
            If (PREPER_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREPER_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREPER_PRE_CODE_FK_PK, String)
            End If
            If (PREPER_CDF_UT_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREPER_CDF_UT_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREPER_CDF_UT_CODE_FK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREPER_DUREE, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREPER_NUM_CODE_PK As Integer, ByVal PREPER_PRE_CODE_FK_PK As String, ByVal PREPER_CDF_UT_CODE_FK As String, ByVal PREPER_DUREE As Integer, ByVal Original_PREPER_NUM_CODE_PK As Integer, ByVal Original_PREPER_PRE_CODE_FK_PK As String, ByVal Original_PREPER_CDF_UT_CODE_FK As String, ByVal Original_PREPER_DUREE As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREPER_NUM_CODE_PK, Integer)
            If (PREPER_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREPER_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREPER_PRE_CODE_FK_PK, String)
            End If
            If (PREPER_CDF_UT_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREPER_CDF_UT_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREPER_CDF_UT_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREPER_DUREE, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREPER_NUM_CODE_PK, Integer)
            If (Original_PREPER_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREPER_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PREPER_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREPER_CDF_UT_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREPER_CDF_UT_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PREPER_CDF_UT_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PREPER_DUREE, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREPER_CDF_UT_CODE_FK As String, ByVal PREPER_DUREE As Integer, ByVal Original_PREPER_NUM_CODE_PK As Integer, ByVal Original_PREPER_PRE_CODE_FK_PK As String, ByVal Original_PREPER_CDF_UT_CODE_FK As String, ByVal Original_PREPER_DUREE As Integer) As Integer
            Return Me.Update(Original_PREPER_NUM_CODE_PK, Original_PREPER_PRE_CODE_FK_PK, PREPER_CDF_UT_CODE_FK, PREPER_DUREE, Original_PREPER_NUM_CODE_PK, Original_PREPER_PRE_CODE_FK_PK, Original_PREPER_CDF_UT_CODE_FK, Original_PREPER_DUREE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PERCS_PERIODE_COND_CSVTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PERCS_PERIODE_COND_CSV"
            tableMapping.ColumnMappings.Add("PERCS_NUM_CODE_PK", "PERCS_NUM_CODE_PK")
            tableMapping.ColumnMappings.Add("PERCS_PRE_CODE_FK_PK", "PERCS_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PERCS_CDF_CSV_CODE_FK_PK", "PERCS_CDF_CSV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PERCS_NUMORD", "PERCS_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PERCS_PERIODE_COND_CSV] WHERE (([PERCS_NUM_CODE_PK] = @O" & _
                "riginal_PERCS_NUM_CODE_PK) AND ([PERCS_PRE_CODE_FK_PK] = @Original_PERCS_PRE_COD" & _
                "E_FK_PK) AND ([PERCS_CDF_CSV_CODE_FK_PK] = @Original_PERCS_CDF_CSV_CODE_FK_PK) A" & _
                "ND ((@IsNull_PERCS_NUMORD = 1 AND [PERCS_NUMORD] IS NULL) OR ([PERCS_NUMORD] = @" & _
                "Original_PERCS_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUM_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PERCS_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PERCS_PERIODE_COND_CSV] ([PERCS_NUM_CODE_PK], [PERCS_PRE" & _
                "_CODE_FK_PK], [PERCS_CDF_CSV_CODE_FK_PK], [PERCS_NUMORD]) VALUES (@PERCS_NUM_COD" & _
                "E_PK, @PERCS_PRE_CODE_FK_PK, @PERCS_CDF_CSV_CODE_FK_PK, @PERCS_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT " & _
                "PERCS_NUM_CODE_PK, PERCS_PRE_CODE_FK_PK, PERCS_CDF_CSV_CODE_FK_PK, PERCS_NUMORD " & _
                "FROM THERIAQUE.PERCS_PERIODE_COND_CSV WHERE (PERCS_CDF_CSV_CODE_FK_PK = @PERCS_C" & _
                "DF_CSV_CODE_FK_PK) AND (PERCS_NUM_CODE_PK = @PERCS_NUM_CODE_PK) AND (PERCS_PRE_C" & _
                "ODE_FK_PK = @PERCS_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUM_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PERCS_PERIODE_COND_CSV] SET [PERCS_NUM_CODE_PK] = @PERCS_NUM_" & _
                "CODE_PK, [PERCS_PRE_CODE_FK_PK] = @PERCS_PRE_CODE_FK_PK, [PERCS_CDF_CSV_CODE_FK_" & _
                "PK] = @PERCS_CDF_CSV_CODE_FK_PK, [PERCS_NUMORD] = @PERCS_NUMORD WHERE (([PERCS_N" & _
                "UM_CODE_PK] = @Original_PERCS_NUM_CODE_PK) AND ([PERCS_PRE_CODE_FK_PK] = @Origin" & _
                "al_PERCS_PRE_CODE_FK_PK) AND ([PERCS_CDF_CSV_CODE_FK_PK] = @Original_PERCS_CDF_C" & _
                "SV_CODE_FK_PK) AND ((@IsNull_PERCS_NUMORD = 1 AND [PERCS_NUMORD] IS NULL) OR ([P" & _
                "ERCS_NUMORD] = @Original_PERCS_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PERCS_NUM_CODE_PK, PERCS_PRE_C" & _
                "ODE_FK_PK, PERCS_CDF_CSV_CODE_FK_PK, PERCS_NUMORD FROM THERIAQUE.PERCS_PERIODE_C" & _
                "OND_CSV WHERE (PERCS_CDF_CSV_CODE_FK_PK = @PERCS_CDF_CSV_CODE_FK_PK) AND (PERCS_" & _
                "NUM_CODE_PK = @PERCS_NUM_CODE_PK) AND (PERCS_PRE_CODE_FK_PK = @PERCS_PRE_CODE_FK" & _
                "_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUM_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_NUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUM_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_CDF_CSV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PERCS_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PERCS_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PERCS_NUM_CODE_PK, PERCS_PRE_CODE_FK_PK, PERCS_CDF_CSV_CODE_FK_PK, PERCS_N" & _
                "UMORD FROM THERIAQUE.PERCS_PERIODE_COND_CSV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PERCS_NUM_CODE_PK, PERCS_PRE_CODE_FK_PK, PERCS_CDF_CSV_CODE_FK_PK, PERCS_N" & _
                "UMORD FROM THERIAQUE.PERCS_PERIODE_COND_CSV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PERCS_PRE_CODE_FK_PK = @PERCS" & _
                "_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable = New dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable, ByVal PERCS_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PERCS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PERCS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PERCS_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PERCS_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PERCS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PERCS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PERCS_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable = New dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PERCS_PERIODE_COND_CSVDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PERCS_PERIODE_COND_CSV")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PERCS_NUM_CODE_PK As Integer, ByVal Original_PERCS_PRE_CODE_FK_PK As String, ByVal Original_PERCS_CDF_CSV_CODE_FK_PK As String, ByVal Original_PERCS_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PERCS_NUM_CODE_PK, Integer)
            If (Original_PERCS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PERCS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PERCS_PRE_CODE_FK_PK, String)
            End If
            If (Original_PERCS_CDF_CSV_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PERCS_CDF_CSV_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PERCS_CDF_CSV_CODE_FK_PK, String)
            End If
            If (Original_PERCS_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PERCS_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PERCS_NUM_CODE_PK As Integer, ByVal PERCS_PRE_CODE_FK_PK As String, ByVal PERCS_CDF_CSV_CODE_FK_PK As String, ByVal PERCS_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PERCS_NUM_CODE_PK, Integer)
            If (PERCS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PERCS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PERCS_PRE_CODE_FK_PK, String)
            End If
            If (PERCS_CDF_CSV_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PERCS_CDF_CSV_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PERCS_CDF_CSV_CODE_FK_PK, String)
            End If
            If (PERCS_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PERCS_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PERCS_NUM_CODE_PK As Integer, ByVal PERCS_PRE_CODE_FK_PK As String, ByVal PERCS_CDF_CSV_CODE_FK_PK As String, ByVal PERCS_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PERCS_NUM_CODE_PK As Integer, ByVal Original_PERCS_PRE_CODE_FK_PK As String, ByVal Original_PERCS_CDF_CSV_CODE_FK_PK As String, ByVal Original_PERCS_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PERCS_NUM_CODE_PK, Integer)
            If (PERCS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PERCS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PERCS_PRE_CODE_FK_PK, String)
            End If
            If (PERCS_CDF_CSV_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PERCS_CDF_CSV_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PERCS_CDF_CSV_CODE_FK_PK, String)
            End If
            If (PERCS_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PERCS_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PERCS_NUM_CODE_PK, Integer)
            If (Original_PERCS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PERCS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PERCS_PRE_CODE_FK_PK, String)
            End If
            If (Original_PERCS_CDF_CSV_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PERCS_CDF_CSV_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PERCS_CDF_CSV_CODE_FK_PK, String)
            End If
            If (Original_PERCS_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PERCS_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PERCS_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PERCS_NUM_CODE_PK As Integer, ByVal Original_PERCS_PRE_CODE_FK_PK As String, ByVal Original_PERCS_CDF_CSV_CODE_FK_PK As String, ByVal Original_PERCS_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PERCS_NUM_CODE_PK, Original_PERCS_PRE_CODE_FK_PK, Original_PERCS_CDF_CSV_CODE_FK_PK, PERCS_NUMORD, Original_PERCS_NUM_CODE_PK, Original_PERCS_PRE_CODE_FK_PK, Original_PERCS_CDF_CSV_CODE_FK_PK, Original_PERCS_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRECSVTX_TEXTE_CONSERVTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRECSVTX_TEXTE_CONSERV"
            tableMapping.ColumnMappings.Add("PRECSVTX_PRE_CODE_FK_PK", "PRECSVTX_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECSVTX_TEXTE", "PRECSVTX_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRECSVTX_TEXTE_CONSERV] WHERE (([PRECSVTX_PRE_CODE_FK_PK" & _
                "] = @Original_PRECSVTX_PRE_CODE_FK_PK) AND ((@IsNull_PRECSVTX_TEXTE = 1 AND [PRE" & _
                "CSVTX_TEXTE] IS NULL) OR ([PRECSVTX_TEXTE] = @Original_PRECSVTX_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECSVTX_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECSVTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRECSVTX_TEXTE_CONSERV] ([PRECSVTX_PRE_CODE_FK_PK], [PRE" & _
                "CSVTX_TEXTE]) VALUES (@PRECSVTX_PRE_CODE_FK_PK, @PRECSVTX_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECSV" & _
                "TX_PRE_CODE_FK_PK, PRECSVTX_TEXTE FROM THERIAQUE.PRECSVTX_TEXTE_CONSERV WHERE (P" & _
                "RECSVTX_PRE_CODE_FK_PK = @PRECSVTX_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECSVTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRECSVTX_TEXTE_CONSERV] SET [PRECSVTX_PRE_CODE_FK_PK] = @PREC" & _
                "SVTX_PRE_CODE_FK_PK, [PRECSVTX_TEXTE] = @PRECSVTX_TEXTE WHERE (([PRECSVTX_PRE_CO" & _
                "DE_FK_PK] = @Original_PRECSVTX_PRE_CODE_FK_PK) AND ((@IsNull_PRECSVTX_TEXTE = 1 " & _
                "AND [PRECSVTX_TEXTE] IS NULL) OR ([PRECSVTX_TEXTE] = @Original_PRECSVTX_TEXTE)))" & _
                ";" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRECSVTX_PRE_CODE_FK_PK, PRECSVTX_TEXTE FROM THERIAQUE.PRECSVTX_TEXTE_" & _
                "CONSERV WHERE (PRECSVTX_PRE_CODE_FK_PK = @PRECSVTX_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECSVTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECSVTX_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECSVTX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRECSVTX_PRE_CODE_FK_PK, PRECSVTX_TEXTE FROM THERIAQUE.PRECSVTX_TEXTE_CONS" & _
                "ERV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRECSVTX_PRE_CODE_FK_PK, PRECSVTX_TEXTE FROM THERIAQUE.PRECSVTX_TEXTE_CONS" & _
                "ERV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRECSVTX_PRE_CODE_FK_PK = @PRECSVTX_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECSVTX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable = New dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable, ByVal PRECSVTX_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECSVTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECSVTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECSVTX_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRECSVTX_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECSVTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECSVTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECSVTX_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable = New dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRECSVTX_TEXTE_CONSERVDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRECSVTX_TEXTE_CONSERV")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRECSVTX_PRE_CODE_FK_PK As String, ByVal Original_PRECSVTX_TEXTE As String) As Integer
            If (Original_PRECSVTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECSVTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRECSVTX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRECSVTX_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRECSVTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRECSVTX_PRE_CODE_FK_PK As String, ByVal PRECSVTX_TEXTE As String) As Integer
            If (PRECSVTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECSVTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRECSVTX_PRE_CODE_FK_PK, String)
            End If
            If (PRECSVTX_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRECSVTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRECSVTX_PRE_CODE_FK_PK As String, ByVal PRECSVTX_TEXTE As String, ByVal Original_PRECSVTX_PRE_CODE_FK_PK As String, ByVal Original_PRECSVTX_TEXTE As String) As Integer
            If (PRECSVTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECSVTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRECSVTX_PRE_CODE_FK_PK, String)
            End If
            If (PRECSVTX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRECSVTX_TEXTE, String)
            End If
            If (Original_PRECSVTX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECSVTX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_PRECSVTX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRECSVTX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRECSVTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRECSVTX_TEXTE As String, ByVal Original_PRECSVTX_PRE_CODE_FK_PK As String, ByVal Original_PRECSVTX_TEXTE As String) As Integer
            Return Me.Update(Original_PRECSVTX_PRE_CODE_FK_PK, PRECSVTX_TEXTE, Original_PRECSVTX_PRE_CODE_FK_PK, Original_PRECSVTX_TEXTE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREDILI_LIEU_DISPENSATTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREDILI_LIEU_DISPENSAT"
            tableMapping.ColumnMappings.Add("PREDILI_PRE_CODE_FK_PK", "PREDILI_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDILI_CDF_LIEU_CODE_FK_PK", "PREDILI_CDF_LIEU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDILI_NUMORD", "PREDILI_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PREDILI_LIEU_DISPENSAT] WHERE (([PREDILI_PRE_CODE_FK_PK]" & _
                " = @Original_PREDILI_PRE_CODE_FK_PK) AND ([PREDILI_CDF_LIEU_CODE_FK_PK] = @Origi" & _
                "nal_PREDILI_CDF_LIEU_CODE_FK_PK) AND ((@IsNull_PREDILI_NUMORD = 1 AND [PREDILI_N" & _
                "UMORD] IS NULL) OR ([PREDILI_NUMORD] = @Original_PREDILI_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDILI_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDILI_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDILI_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PREDILI_LIEU_DISPENSAT] ([PREDILI_PRE_CODE_FK_PK], [PRED" & _
                "ILI_CDF_LIEU_CODE_FK_PK], [PREDILI_NUMORD]) VALUES (@PREDILI_PRE_CODE_FK_PK, @PR" & _
                "EDILI_CDF_LIEU_CODE_FK_PK, @PREDILI_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDILI_PRE_CODE_FK_PK, PRE" & _
                "DILI_CDF_LIEU_CODE_FK_PK, PREDILI_NUMORD FROM THERIAQUE.PREDILI_LIEU_DISPENSAT W" & _
                "HERE (PREDILI_CDF_LIEU_CODE_FK_PK = @PREDILI_CDF_LIEU_CODE_FK_PK) AND (PREDILI_P" & _
                "RE_CODE_FK_PK = @PREDILI_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PREDILI_LIEU_DISPENSAT] SET [PREDILI_PRE_CODE_FK_PK] = @PREDI" & _
                "LI_PRE_CODE_FK_PK, [PREDILI_CDF_LIEU_CODE_FK_PK] = @PREDILI_CDF_LIEU_CODE_FK_PK," & _
                " [PREDILI_NUMORD] = @PREDILI_NUMORD WHERE (([PREDILI_PRE_CODE_FK_PK] = @Original" & _
                "_PREDILI_PRE_CODE_FK_PK) AND ([PREDILI_CDF_LIEU_CODE_FK_PK] = @Original_PREDILI_" & _
                "CDF_LIEU_CODE_FK_PK) AND ((@IsNull_PREDILI_NUMORD = 1 AND [PREDILI_NUMORD] IS NU" & _
                "LL) OR ([PREDILI_NUMORD] = @Original_PREDILI_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDILI_PRE_CODE" & _
                "_FK_PK, PREDILI_CDF_LIEU_CODE_FK_PK, PREDILI_NUMORD FROM THERIAQUE.PREDILI_LIEU_" & _
                "DISPENSAT WHERE (PREDILI_CDF_LIEU_CODE_FK_PK = @PREDILI_CDF_LIEU_CODE_FK_PK) AND" & _
                " (PREDILI_PRE_CODE_FK_PK = @PREDILI_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDILI_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_CDF_LIEU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDILI_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDILI_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREDILI_PRE_CODE_FK_PK, PREDILI_CDF_LIEU_CODE_FK_PK, PREDILI_NUMORD FROM T" & _
                "HERIAQUE.PREDILI_LIEU_DISPENSAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREDILI_PRE_CODE_FK_PK, PREDILI_CDF_LIEU_CODE_FK_PK, PREDILI_NUMORD FROM T" & _
                "HERIAQUE.PREDILI_LIEU_DISPENSAT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PREDILI_PRE_CODE_FK_PK = @PREDILI_PRE_COD" & _
                "E_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDILI_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDILI_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable = New dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable, ByVal PREDILI_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDILI_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDILI_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDILI_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREDILI_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDILI_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDILI_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDILI_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable = New dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREDILI_LIEU_DISPENSATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREDILI_LIEU_DISPENSAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREDILI_PRE_CODE_FK_PK As String, ByVal Original_PREDILI_CDF_LIEU_CODE_FK_PK As String, ByVal Original_PREDILI_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PREDILI_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDILI_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREDILI_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDILI_CDF_LIEU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDILI_CDF_LIEU_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREDILI_CDF_LIEU_CODE_FK_PK, String)
            End If
            If (Original_PREDILI_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREDILI_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREDILI_PRE_CODE_FK_PK As String, ByVal PREDILI_CDF_LIEU_CODE_FK_PK As String, ByVal PREDILI_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREDILI_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDILI_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREDILI_PRE_CODE_FK_PK, String)
            End If
            If (PREDILI_CDF_LIEU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDILI_CDF_LIEU_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREDILI_CDF_LIEU_CODE_FK_PK, String)
            End If
            If (PREDILI_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREDILI_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDILI_PRE_CODE_FK_PK As String, ByVal PREDILI_CDF_LIEU_CODE_FK_PK As String, ByVal PREDILI_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREDILI_PRE_CODE_FK_PK As String, ByVal Original_PREDILI_CDF_LIEU_CODE_FK_PK As String, ByVal Original_PREDILI_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREDILI_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDILI_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREDILI_PRE_CODE_FK_PK, String)
            End If
            If (PREDILI_CDF_LIEU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDILI_CDF_LIEU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREDILI_CDF_LIEU_CODE_FK_PK, String)
            End If
            If (PREDILI_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREDILI_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDILI_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDILI_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PREDILI_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDILI_CDF_LIEU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDILI_CDF_LIEU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREDILI_CDF_LIEU_CODE_FK_PK, String)
            End If
            If (Original_PREDILI_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PREDILI_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDILI_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREDILI_PRE_CODE_FK_PK As String, ByVal Original_PREDILI_CDF_LIEU_CODE_FK_PK As String, ByVal Original_PREDILI_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PREDILI_PRE_CODE_FK_PK, Original_PREDILI_CDF_LIEU_CODE_FK_PK, PREDILI_NUMORD, Original_PREDILI_PRE_CODE_FK_PK, Original_PREDILI_CDF_LIEU_CODE_FK_PK, Original_PREDILI_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREDICO_COMMENT_DISPENSATTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREDICO_COMMENT_DISPENSAT"
            tableMapping.ColumnMappings.Add("PREDICO_PRE_CODE_FK_PK", "PREDICO_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDICO_CDF_COM_CODE_FK_PK", "PREDICO_CDF_COM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDICO_NUMORD", "PREDICO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PREDICO_COMMENT_DISPENSAT] WHERE (([PREDICO_PRE_CODE_FK_" & _
                "PK] = @Original_PREDICO_PRE_CODE_FK_PK) AND ([PREDICO_CDF_COM_CODE_FK_PK] = @Ori" & _
                "ginal_PREDICO_CDF_COM_CODE_FK_PK) AND ((@IsNull_PREDICO_NUMORD = 1 AND [PREDICO_" & _
                "NUMORD] IS NULL) OR ([PREDICO_NUMORD] = @Original_PREDICO_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDICO_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDICO_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDICO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PREDICO_COMMENT_DISPENSAT] ([PREDICO_PRE_CODE_FK_PK], [P" & _
                "REDICO_CDF_COM_CODE_FK_PK], [PREDICO_NUMORD]) VALUES (@PREDICO_PRE_CODE_FK_PK, @" & _
                "PREDICO_CDF_COM_CODE_FK_PK, @PREDICO_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDICO_PRE_CODE_FK_PK, PR" & _
                "EDICO_CDF_COM_CODE_FK_PK, PREDICO_NUMORD FROM THERIAQUE.PREDICO_COMMENT_DISPENSA" & _
                "T WHERE (PREDICO_CDF_COM_CODE_FK_PK = @PREDICO_CDF_COM_CODE_FK_PK) AND (PREDICO_" & _
                "PRE_CODE_FK_PK = @PREDICO_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PREDICO_COMMENT_DISPENSAT] SET [PREDICO_PRE_CODE_FK_PK] = @PR" & _
                "EDICO_PRE_CODE_FK_PK, [PREDICO_CDF_COM_CODE_FK_PK] = @PREDICO_CDF_COM_CODE_FK_PK" & _
                ", [PREDICO_NUMORD] = @PREDICO_NUMORD WHERE (([PREDICO_PRE_CODE_FK_PK] = @Origina" & _
                "l_PREDICO_PRE_CODE_FK_PK) AND ([PREDICO_CDF_COM_CODE_FK_PK] = @Original_PREDICO_" & _
                "CDF_COM_CODE_FK_PK) AND ((@IsNull_PREDICO_NUMORD = 1 AND [PREDICO_NUMORD] IS NUL" & _
                "L) OR ([PREDICO_NUMORD] = @Original_PREDICO_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDICO_PRE_CODE_" & _
                "FK_PK, PREDICO_CDF_COM_CODE_FK_PK, PREDICO_NUMORD FROM THERIAQUE.PREDICO_COMMENT" & _
                "_DISPENSAT WHERE (PREDICO_CDF_COM_CODE_FK_PK = @PREDICO_CDF_COM_CODE_FK_PK) AND " & _
                "(PREDICO_PRE_CODE_FK_PK = @PREDICO_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDICO_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDICO_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDICO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREDICO_PRE_CODE_FK_PK, PREDICO_CDF_COM_CODE_FK_PK, PREDICO_NUMORD FROM TH" & _
                "ERIAQUE.PREDICO_COMMENT_DISPENSAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREDICO_PRE_CODE_FK_PK, PREDICO_CDF_COM_CODE_FK_PK, PREDICO_NUMORD FROM TH" & _
                "ERIAQUE.PREDICO_COMMENT_DISPENSAT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PREDICO_PRE_CODE_FK_PK = @PREDICO_PRE_C" & _
                "ODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDICO_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDICO_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable = New dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable, ByVal PREDICO_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDICO_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDICO_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDICO_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREDICO_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDICO_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDICO_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDICO_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable = New dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREDICO_COMMENT_DISPENSATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREDICO_COMMENT_DISPENSAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREDICO_PRE_CODE_FK_PK As String, ByVal Original_PREDICO_CDF_COM_CODE_FK_PK As String, ByVal Original_PREDICO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (Original_PREDICO_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDICO_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREDICO_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDICO_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDICO_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREDICO_CDF_COM_CODE_FK_PK, String)
            End If
            If (Original_PREDICO_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREDICO_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREDICO_PRE_CODE_FK_PK As String, ByVal PREDICO_CDF_COM_CODE_FK_PK As String, ByVal PREDICO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREDICO_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDICO_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREDICO_PRE_CODE_FK_PK, String)
            End If
            If (PREDICO_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDICO_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREDICO_CDF_COM_CODE_FK_PK, String)
            End If
            If (PREDICO_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREDICO_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDICO_PRE_CODE_FK_PK As String, ByVal PREDICO_CDF_COM_CODE_FK_PK As String, ByVal PREDICO_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREDICO_PRE_CODE_FK_PK As String, ByVal Original_PREDICO_CDF_COM_CODE_FK_PK As String, ByVal Original_PREDICO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            If (PREDICO_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDICO_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREDICO_PRE_CODE_FK_PK, String)
            End If
            If (PREDICO_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDICO_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREDICO_CDF_COM_CODE_FK_PK, String)
            End If
            If (PREDICO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREDICO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDICO_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDICO_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PREDICO_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDICO_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDICO_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREDICO_CDF_COM_CODE_FK_PK, String)
            End If
            If (Original_PREDICO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PREDICO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDICO_NUMORD As Global.System.Nullable(Of Short), ByVal Original_PREDICO_PRE_CODE_FK_PK As String, ByVal Original_PREDICO_CDF_COM_CODE_FK_PK As String, ByVal Original_PREDICO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PREDICO_PRE_CODE_FK_PK, Original_PREDICO_CDF_COM_CODE_FK_PK, PREDICO_NUMORD, Original_PREDICO_PRE_CODE_FK_PK, Original_PREDICO_CDF_COM_CODE_FK_PK, Original_PREDICO_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREDITX_TEXTE_DISPENSATTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREDITX_TEXTE_DISPENSAT"
            tableMapping.ColumnMappings.Add("PREDITX_PRE_CODE_FK_PK", "PREDITX_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDITX_TEXTE", "PREDITX_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PREDITX_TEXTE_DISPENSAT] WHERE (([PREDITX_PRE_CODE_FK_PK" & _
                "] = @Original_PREDITX_PRE_CODE_FK_PK) AND ((@IsNull_PREDITX_TEXTE = 1 AND [PREDI" & _
                "TX_TEXTE] IS NULL) OR ([PREDITX_TEXTE] = @Original_PREDITX_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDITX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDITX_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDITX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PREDITX_TEXTE_DISPENSAT] ([PREDITX_PRE_CODE_FK_PK], [PRE" & _
                "DITX_TEXTE]) VALUES (@PREDITX_PRE_CODE_FK_PK, @PREDITX_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDITX_P" & _
                "RE_CODE_FK_PK, PREDITX_TEXTE FROM THERIAQUE.PREDITX_TEXTE_DISPENSAT WHERE (PREDI" & _
                "TX_PRE_CODE_FK_PK = @PREDITX_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDITX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDITX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PREDITX_TEXTE_DISPENSAT] SET [PREDITX_PRE_CODE_FK_PK] = @PRED" & _
                "ITX_PRE_CODE_FK_PK, [PREDITX_TEXTE] = @PREDITX_TEXTE WHERE (([PREDITX_PRE_CODE_F" & _
                "K_PK] = @Original_PREDITX_PRE_CODE_FK_PK) AND ((@IsNull_PREDITX_TEXTE = 1 AND [P" & _
                "REDITX_TEXTE] IS NULL) OR ([PREDITX_TEXTE] = @Original_PREDITX_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " PREDITX_PRE_CODE_FK_PK, PREDITX_TEXTE FROM THERIAQUE.PREDITX_TEXTE_DISPENSAT WH" & _
                "ERE (PREDITX_PRE_CODE_FK_PK = @PREDITX_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDITX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDITX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDITX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDITX_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_TEXTE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDITX_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_TEXTE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREDITX_PRE_CODE_FK_PK, PREDITX_TEXTE FROM THERIAQUE.PREDITX_TEXTE_DISPENS" & _
                "AT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREDITX_PRE_CODE_FK_PK, PREDITX_TEXTE FROM THERIAQUE.PREDITX_TEXTE_DISPENS" & _
                "AT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PREDITX_PRE_CODE_FK_PK = @PREDITX_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDITX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDITX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable = New dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable, ByVal PREDITX_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDITX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDITX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDITX_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREDITX_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDITX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDITX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDITX_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable = New dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREDITX_TEXTE_DISPENSATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREDITX_TEXTE_DISPENSAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREDITX_PRE_CODE_FK_PK As String, ByVal Original_PREDITX_TEXTE As String) As Integer
            If (Original_PREDITX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDITX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREDITX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDITX_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREDITX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREDITX_PRE_CODE_FK_PK As String, ByVal PREDITX_TEXTE As String) As Integer
            If (PREDITX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDITX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREDITX_PRE_CODE_FK_PK, String)
            End If
            If (PREDITX_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREDITX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDITX_PRE_CODE_FK_PK As String, ByVal PREDITX_TEXTE As String, ByVal Original_PREDITX_PRE_CODE_FK_PK As String, ByVal Original_PREDITX_TEXTE As String) As Integer
            If (PREDITX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDITX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREDITX_PRE_CODE_FK_PK, String)
            End If
            If (PREDITX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREDITX_TEXTE, String)
            End If
            If (Original_PREDITX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDITX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_PREDITX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDITX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREDITX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDITX_TEXTE As String, ByVal Original_PREDITX_PRE_CODE_FK_PK As String, ByVal Original_PREDITX_TEXTE As String) As Integer
            Return Me.Update(Original_PREDITX_PRE_CODE_FK_PK, PREDITX_TEXTE, Original_PREDITX_PRE_CODE_FK_PK, Original_PREDITX_TEXTE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRESMR_PRE_SMR_ATRTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRESMR_PRE_SMR_ATR"
            tableMapping.ColumnMappings.Add("PRESMR_PRE_CODE_FK_PK", "PRESMR_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESMR_CDF_SMR_CODE_FK_PK", "PRESMR_CDF_SMR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRESMR_DATE_SMR_PK", "PRESMR_DATE_SMR_PK")
            tableMapping.ColumnMappings.Add("PRESMR_ATR_CODE_FK_PK", "PRESMR_ATR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRESMR_PRE_SMR_ATR] WHERE (([PRESMR_PRE_CODE_FK_PK] = @O" & _
                "riginal_PRESMR_PRE_CODE_FK_PK) AND ([PRESMR_CDF_SMR_CODE_FK_PK] = @Original_PRES" & _
                "MR_CDF_SMR_CODE_FK_PK) AND ([PRESMR_DATE_SMR_PK] = @Original_PRESMR_DATE_SMR_PK)" & _
                " AND ([PRESMR_ATR_CODE_FK_PK] = @Original_PRESMR_ATR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRESMR_PRE_SMR_ATR] ([PRESMR_PRE_CODE_FK_PK], [PRESMR_CD" & _
                "F_SMR_CODE_FK_PK], [PRESMR_DATE_SMR_PK], [PRESMR_ATR_CODE_FK_PK]) VALUES (@PRESM" & _
                "R_PRE_CODE_FK_PK, @PRESMR_CDF_SMR_CODE_FK_PK, @PRESMR_DATE_SMR_PK, @PRESMR_ATR_C" & _
                "ODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESMR_PRE_CODE_FK_PK, PRESMR_CDF_SMR_CODE_FK_PK, PRESMR_DAT" & _
                "E_SMR_PK, PRESMR_ATR_CODE_FK_PK FROM THERIAQUE.PRESMR_PRE_SMR_ATR WHERE (PRESMR_" & _
                "ATR_CODE_FK_PK = @PRESMR_ATR_CODE_FK_PK) AND (PRESMR_CDF_SMR_CODE_FK_PK = @PRESM" & _
                "R_CDF_SMR_CODE_FK_PK) AND (PRESMR_DATE_SMR_PK = @PRESMR_DATE_SMR_PK) AND (PRESMR" & _
                "_PRE_CODE_FK_PK = @PRESMR_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRESMR_PRE_SMR_ATR] SET [PRESMR_PRE_CODE_FK_PK] = @PRESMR_PRE" & _
                "_CODE_FK_PK, [PRESMR_CDF_SMR_CODE_FK_PK] = @PRESMR_CDF_SMR_CODE_FK_PK, [PRESMR_D" & _
                "ATE_SMR_PK] = @PRESMR_DATE_SMR_PK, [PRESMR_ATR_CODE_FK_PK] = @PRESMR_ATR_CODE_FK" & _
                "_PK WHERE (([PRESMR_PRE_CODE_FK_PK] = @Original_PRESMR_PRE_CODE_FK_PK) AND ([PRE" & _
                "SMR_CDF_SMR_CODE_FK_PK] = @Original_PRESMR_CDF_SMR_CODE_FK_PK) AND ([PRESMR_DATE" & _
                "_SMR_PK] = @Original_PRESMR_DATE_SMR_PK) AND ([PRESMR_ATR_CODE_FK_PK] = @Origina" & _
                "l_PRESMR_ATR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRESMR_PRE_CODE_FK_PK, PRESMR_CDF_SMR_CODE_FK" & _
                "_PK, PRESMR_DATE_SMR_PK, PRESMR_ATR_CODE_FK_PK FROM THERIAQUE.PRESMR_PRE_SMR_ATR" & _
                " WHERE (PRESMR_ATR_CODE_FK_PK = @PRESMR_ATR_CODE_FK_PK) AND (PRESMR_CDF_SMR_CODE" & _
                "_FK_PK = @PRESMR_CDF_SMR_CODE_FK_PK) AND (PRESMR_DATE_SMR_PK = @PRESMR_DATE_SMR_" & _
                "PK) AND (PRESMR_PRE_CODE_FK_PK = @PRESMR_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRESMR_PRE_CODE_FK_PK, PRESMR_CDF_SMR_CODE_FK_PK, PRESMR_DATE_SMR_PK, PRES" & _
                "MR_ATR_CODE_FK_PK FROM THERIAQUE.PRESMR_PRE_SMR_ATR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRESMR_PRE_CODE_FK_PK, PRESMR_CDF_SMR_CODE_FK_PK, PRESMR_DATE_SMR_PK, PRES" & _
                "MR_ATR_CODE_FK_PK FROM THERIAQUE.PRESMR_PRE_SMR_ATR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRESMR_PRE_CODE_FK_PK" & _
                " = @PRESMR_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESMR_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESMR_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable = New dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable, ByVal PRESMR_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESMR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESMR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESMR_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRESMR_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRESMR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESMR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRESMR_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable = New dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRESMR_PRE_SMR_ATRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRESMR_PRE_SMR_ATR")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRESMR_PRE_CODE_FK_PK As String, ByVal Original_PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_PRESMR_DATE_SMR_PK As Date, ByVal Original_PRESMR_ATR_CODE_FK_PK As Integer) As Integer
            If (Original_PRESMR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESMR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRESMR_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRESMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRESMR_DATE_SMR_PK, Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRESMR_ATR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRESMR_PRE_CODE_FK_PK As String, ByVal PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal PRESMR_DATE_SMR_PK As Date, ByVal PRESMR_ATR_CODE_FK_PK As Integer) As Integer
            If (PRESMR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESMR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRESMR_PRE_CODE_FK_PK, String)
            End If
            If (PRESMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRESMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRESMR_DATE_SMR_PK, Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRESMR_ATR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRESMR_PRE_CODE_FK_PK As String, ByVal PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal PRESMR_DATE_SMR_PK As Date, ByVal PRESMR_ATR_CODE_FK_PK As Integer, ByVal Original_PRESMR_PRE_CODE_FK_PK As String, ByVal Original_PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_PRESMR_DATE_SMR_PK As Date, ByVal Original_PRESMR_ATR_CODE_FK_PK As Integer) As Integer
            If (PRESMR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESMR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRESMR_PRE_CODE_FK_PK, String)
            End If
            If (PRESMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRESMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRESMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRESMR_DATE_SMR_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRESMR_ATR_CODE_FK_PK, Integer)
            If (Original_PRESMR_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESMR_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRESMR_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRESMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRESMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PRESMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRESMR_DATE_SMR_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRESMR_ATR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_PRESMR_PRE_CODE_FK_PK As String, ByVal Original_PRESMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_PRESMR_DATE_SMR_PK As Date, ByVal Original_PRESMR_ATR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_PRESMR_PRE_CODE_FK_PK, Original_PRESMR_CDF_SMR_CODE_FK_PK, Original_PRESMR_DATE_SMR_PK, Original_PRESMR_ATR_CODE_FK_PK, Original_PRESMR_PRE_CODE_FK_PK, Original_PRESMR_CDF_SMR_CODE_FK_PK, Original_PRESMR_DATE_SMR_PK, Original_PRESMR_ATR_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class GSAC_PERE_SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GSAC_PERE_SUBACT"
            tableMapping.ColumnMappings.Add("GSAC_CODE_SQ_PK", "GSAC_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("GSAC_NOM", "GSAC_NOM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[GSAC_PERE_SUBACT] WHERE (([GSAC_CODE_SQ_PK] = @Original_" & _
                "GSAC_CODE_SQ_PK) AND ([GSAC_NOM] = @Original_GSAC_NOM))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[GSAC_PERE_SUBACT] ([GSAC_CODE_SQ_PK], [GSAC_NOM]) VALUES" & _
                " (@GSAC_CODE_SQ_PK, @GSAC_NOM);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GSAC_CODE_SQ_PK, GSAC_NOM FROM THERIAQUE" & _
                ".GSAC_PERE_SUBACT WHERE (GSAC_CODE_SQ_PK = @GSAC_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[GSAC_PERE_SUBACT] SET [GSAC_CODE_SQ_PK] = @GSAC_CODE_SQ_PK, [" & _
                "GSAC_NOM] = @GSAC_NOM WHERE (([GSAC_CODE_SQ_PK] = @Original_GSAC_CODE_SQ_PK) AND" & _
                " ([GSAC_NOM] = @Original_GSAC_NOM));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GSAC_CODE_SQ_PK, GSAC_NOM FROM THER" & _
                "IAQUE.GSAC_PERE_SUBACT WHERE (GSAC_CODE_SQ_PK = @GSAC_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GSAC_CODE_SQ_PK, GSAC_NOM FROM THERIAQUE.GSAC_PERE_SUBACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT GSAC_CODE_SQ_PK, GSAC_NOM FROM THERIAQUE.GSAC_PERE_SUBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where GSAC_CODE" & _
                "_SQ_PK = @GSAC_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable = New dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable, ByVal GSAC_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GSAC_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal GSAC_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GSAC_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable = New dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.GSAC_PERE_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "GSAC_PERE_SUBACT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GSAC_CODE_SQ_PK As Integer, ByVal Original_GSAC_NOM As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GSAC_CODE_SQ_PK, Integer)
            If (Original_GSAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSAC_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GSAC_NOM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GSAC_CODE_SQ_PK As Integer, ByVal GSAC_NOM As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GSAC_CODE_SQ_PK, Integer)
            If (GSAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSAC_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GSAC_NOM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GSAC_CODE_SQ_PK As Integer, ByVal GSAC_NOM As String, ByVal Original_GSAC_CODE_SQ_PK As Integer, ByVal Original_GSAC_NOM As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GSAC_CODE_SQ_PK, Integer)
            If (GSAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSAC_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GSAC_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_GSAC_CODE_SQ_PK, Integer)
            If (Original_GSAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSAC_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_GSAC_NOM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GSAC_NOM As String, ByVal Original_GSAC_CODE_SQ_PK As Integer, ByVal Original_GSAC_NOM As String) As Integer
            Return Me.Update(Original_GSAC_CODE_SQ_PK, GSAC_NOM, Original_GSAC_CODE_SQ_PK, Original_GSAC_NOM)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class GREF_GROUPE_SPECIALITE_REFTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GREF_GROUPE_SPECIALITE_REF"
            tableMapping.ColumnMappings.Add("GREF_CODE_SQ_PK", "GREF_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("GREF_LIBELLE", "GREF_LIBELLE")
            tableMapping.ColumnMappings.Add("GREF_DATECR_PK", "GREF_DATECR_PK")
            tableMapping.ColumnMappings.Add("GREF_DATESUSP", "GREF_DATESUSP")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[GREF_GROUPE_SPECIALITE_REF] WHERE (([GREF_CODE_SQ_PK] = " & _
                "@Original_GREF_CODE_SQ_PK) AND ((@IsNull_GREF_LIBELLE = 1 AND [GREF_LIBELLE] IS " & _
                "NULL) OR ([GREF_LIBELLE] = @Original_GREF_LIBELLE)) AND ([GREF_DATECR_PK] = @Ori" & _
                "ginal_GREF_DATECR_PK) AND ((@IsNull_GREF_DATESUSP = 1 AND [GREF_DATESUSP] IS NUL" & _
                "L) OR ([GREF_DATESUSP] = @Original_GREF_DATESUSP)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GREF_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_DATECR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATECR_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GREF_DATESUSP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATESUSP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_DATESUSP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATESUSP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[GREF_GROUPE_SPECIALITE_REF] ([GREF_CODE_SQ_PK], [GREF_LI" & _
                "BELLE], [GREF_DATECR_PK], [GREF_DATESUSP]) VALUES (@GREF_CODE_SQ_PK, @GREF_LIBEL" & _
                "LE, @GREF_DATECR_PK, @GREF_DATESUSP);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GREF_CODE_SQ_PK, GREF_LIBELLE, GRE" & _
                "F_DATECR_PK, GREF_DATESUSP FROM THERIAQUE.GREF_GROUPE_SPECIALITE_REF WHERE (GREF" & _
                "_CODE_SQ_PK = @GREF_CODE_SQ_PK) AND (GREF_DATECR_PK = @GREF_DATECR_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_DATECR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATECR_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_DATESUSP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATESUSP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[GREF_GROUPE_SPECIALITE_REF] SET [GREF_CODE_SQ_PK] = @GREF_COD" & _
                "E_SQ_PK, [GREF_LIBELLE] = @GREF_LIBELLE, [GREF_DATECR_PK] = @GREF_DATECR_PK, [GR" & _
                "EF_DATESUSP] = @GREF_DATESUSP WHERE (([GREF_CODE_SQ_PK] = @Original_GREF_CODE_SQ" & _
                "_PK) AND ((@IsNull_GREF_LIBELLE = 1 AND [GREF_LIBELLE] IS NULL) OR ([GREF_LIBELL" & _
                "E] = @Original_GREF_LIBELLE)) AND ([GREF_DATECR_PK] = @Original_GREF_DATECR_PK) " & _
                "AND ((@IsNull_GREF_DATESUSP = 1 AND [GREF_DATESUSP] IS NULL) OR ([GREF_DATESUSP]" & _
                " = @Original_GREF_DATESUSP)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GREF_CODE_SQ_PK, GREF_LIBELLE, GREF_DATEC" & _
                "R_PK, GREF_DATESUSP FROM THERIAQUE.GREF_GROUPE_SPECIALITE_REF WHERE (GREF_CODE_S" & _
                "Q_PK = @GREF_CODE_SQ_PK) AND (GREF_DATECR_PK = @GREF_DATECR_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_DATECR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATECR_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_DATESUSP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATESUSP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GREF_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_DATECR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATECR_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GREF_DATESUSP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATESUSP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREF_DATESUSP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_DATESUSP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GREF_CODE_SQ_PK, GREF_LIBELLE, GREF_DATECR_PK, GREF_DATESUSP FROM THERIAQU" & _
                "E.GREF_GROUPE_SPECIALITE_REF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT GREF_CODE_SQ_PK, GREF_LIBELLE, GREF_DATECR_PK, GREF_DATESUSP FROM THERIAQU" & _
                "E.GREF_GROUPE_SPECIALITE_REF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  GREF_CODE_SQ_PK = @GREF_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREF_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "GREF_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable = New dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable, ByVal GREF_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GREF_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal GREF_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GREF_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable = New dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.GREF_GROUPE_SPECIALITE_REFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "GREF_GROUPE_SPECIALITE_REF")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GREF_CODE_SQ_PK As Integer, ByVal Original_GREF_LIBELLE As String, ByVal Original_GREF_DATECR_PK As Date, ByVal Original_GREF_DATESUSP As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GREF_CODE_SQ_PK, Integer)
            If (Original_GREF_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_GREF_LIBELLE, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_GREF_DATECR_PK, Date)
            If (Original_GREF_DATESUSP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_GREF_DATESUSP.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GREF_CODE_SQ_PK As Integer, ByVal GREF_LIBELLE As String, ByVal GREF_DATECR_PK As Date, ByVal GREF_DATESUSP As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GREF_CODE_SQ_PK, Integer)
            If (GREF_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GREF_LIBELLE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(GREF_DATECR_PK, Date)
            If (GREF_DATESUSP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(GREF_DATESUSP.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GREF_CODE_SQ_PK As Integer, ByVal GREF_LIBELLE As String, ByVal GREF_DATECR_PK As Date, ByVal GREF_DATESUSP As Global.System.Nullable(Of Date), ByVal Original_GREF_CODE_SQ_PK As Integer, ByVal Original_GREF_LIBELLE As String, ByVal Original_GREF_DATECR_PK As Date, ByVal Original_GREF_DATESUSP As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GREF_CODE_SQ_PK, Integer)
            If (GREF_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GREF_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GREF_DATECR_PK, Date)
            If (GREF_DATESUSP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(GREF_DATESUSP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_GREF_CODE_SQ_PK, Integer)
            If (Original_GREF_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_GREF_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_GREF_DATECR_PK, Date)
            If (Original_GREF_DATESUSP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_GREF_DATESUSP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GREF_LIBELLE As String, ByVal GREF_DATESUSP As Global.System.Nullable(Of Date), ByVal Original_GREF_CODE_SQ_PK As Integer, ByVal Original_GREF_LIBELLE As String, ByVal Original_GREF_DATECR_PK As Date, ByVal Original_GREF_DATESUSP As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_GREF_CODE_SQ_PK, GREF_LIBELLE, Original_GREF_DATECR_PK, GREF_DATESUSP, Original_GREF_CODE_SQ_PK, Original_GREF_LIBELLE, Original_GREF_DATECR_PK, Original_GREF_DATESUSP)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPGREFR_GROUPE_SPE_REFTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPGREFR_GROUPE_SPE_REF"
            tableMapping.ColumnMappings.Add("SPGREFR_SP_CODE_FK_PK", "SPGREFR_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPGREFR_GREF_CODE_FK_PK", "SPGREFR_GREF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPGREFR_GREF_DATECR_FK_PK", "SPGREFR_GREF_DATECR_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPGREFR_GROUPE_SPE_REF] WHERE (([SPGREFR_SP_CODE_FK_PK] " & _
                "= @Original_SPGREFR_SP_CODE_FK_PK) AND ([SPGREFR_GREF_CODE_FK_PK] = @Original_SP" & _
                "GREFR_GREF_CODE_FK_PK) AND ([SPGREFR_GREF_DATECR_FK_PK] = @Original_SPGREFR_GREF" & _
                "_DATECR_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFR_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPGREFR_GROUPE_SPE_REF] ([SPGREFR_SP_CODE_FK_PK], [SPGRE" & _
                "FR_GREF_CODE_FK_PK], [SPGREFR_GREF_DATECR_FK_PK]) VALUES (@SPGREFR_SP_CODE_FK_PK" & _
                ", @SPGREFR_GREF_CODE_FK_PK, @SPGREFR_GREF_DATECR_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPGREFR_SP_CODE" & _
                "_FK_PK, SPGREFR_GREF_CODE_FK_PK, SPGREFR_GREF_DATECR_FK_PK FROM THERIAQUE.SPGREF" & _
                "R_GROUPE_SPE_REF WHERE (SPGREFR_GREF_CODE_FK_PK = @SPGREFR_GREF_CODE_FK_PK) AND " & _
                "(SPGREFR_GREF_DATECR_FK_PK = @SPGREFR_GREF_DATECR_FK_PK) AND (SPGREFR_SP_CODE_FK" & _
                "_PK = @SPGREFR_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPGREFR_GROUPE_SPE_REF] SET [SPGREFR_SP_CODE_FK_PK] = @SPGREF" & _
                "R_SP_CODE_FK_PK, [SPGREFR_GREF_CODE_FK_PK] = @SPGREFR_GREF_CODE_FK_PK, [SPGREFR_" & _
                "GREF_DATECR_FK_PK] = @SPGREFR_GREF_DATECR_FK_PK WHERE (([SPGREFR_SP_CODE_FK_PK] " & _
                "= @Original_SPGREFR_SP_CODE_FK_PK) AND ([SPGREFR_GREF_CODE_FK_PK] = @Original_SP" & _
                "GREFR_GREF_CODE_FK_PK) AND ([SPGREFR_GREF_DATECR_FK_PK] = @Original_SPGREFR_GREF" & _
                "_DATECR_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPGREFR_SP_CODE_FK_PK, SPGREFR_GREF_CODE_FK_PK, SPGREFR" & _
                "_GREF_DATECR_FK_PK FROM THERIAQUE.SPGREFR_GROUPE_SPE_REF WHERE (SPGREFR_GREF_COD" & _
                "E_FK_PK = @SPGREFR_GREF_CODE_FK_PK) AND (SPGREFR_GREF_DATECR_FK_PK = @SPGREFR_GR" & _
                "EF_DATECR_FK_PK) AND (SPGREFR_SP_CODE_FK_PK = @SPGREFR_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFR_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPGREFR_SP_CODE_FK_PK, SPGREFR_GREF_CODE_FK_PK, SPGREFR_GREF_DATECR_FK_PK " & _
                "FROM THERIAQUE.SPGREFR_GROUPE_SPE_REF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPGREFR_SP_CODE_FK_PK, SPGREFR_GREF_CODE_FK_PK, SPGREFR_GREF_DATECR_FK_PK " & _
                "FROM THERIAQUE.SPGREFR_GROUPE_SPE_REF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SPGREFR_GREF_CODE_FK_PK = @SPGREF" & _
                "R_GREF_CODE_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SPGREFR_GREF_DATECR_FK_PK = @SPGREFR_GREF_DATECR_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFR_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable = New dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable, ByVal SPGREFR_GREF_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPGREFR_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SPGREFR_GREF_DATECR_FK_PK, Date)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPGREFR_GREF_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_DATECR_FK_PK As Date) As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPGREFR_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SPGREFR_GREF_DATECR_FK_PK, Date)
            Dim dataTable As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable = New dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SPGREFR_GROUPE_SPE_REFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SPGREFR_GROUPE_SPE_REF")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPGREFR_SP_CODE_FK_PK As Integer, ByVal Original_SPGREFR_GREF_CODE_FK_PK As Integer, ByVal Original_SPGREFR_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPGREFR_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPGREFR_GREF_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPGREFR_GREF_DATECR_FK_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPGREFR_SP_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPGREFR_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPGREFR_GREF_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPGREFR_GREF_DATECR_FK_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPGREFR_SP_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_CODE_FK_PK As Integer, ByVal SPGREFR_GREF_DATECR_FK_PK As Date, ByVal Original_SPGREFR_SP_CODE_FK_PK As Integer, ByVal Original_SPGREFR_GREF_CODE_FK_PK As Integer, ByVal Original_SPGREFR_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPGREFR_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPGREFR_GREF_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPGREFR_GREF_DATECR_FK_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPGREFR_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPGREFR_GREF_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPGREFR_GREF_DATECR_FK_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_SPGREFR_SP_CODE_FK_PK As Integer, ByVal Original_SPGREFR_GREF_CODE_FK_PK As Integer, ByVal Original_SPGREFR_GREF_DATECR_FK_PK As Date) As Integer
            Return Me.Update(Original_SPGREFR_SP_CODE_FK_PK, Original_SPGREFR_GREF_CODE_FK_PK, Original_SPGREFR_GREF_DATECR_FK_PK, Original_SPGREFR_SP_CODE_FK_PK, Original_SPGREFR_GREF_CODE_FK_PK, Original_SPGREFR_GREF_DATECR_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class GREFTX_TEXTE_GROUPE_REFTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GREFTX_TEXTE_GROUPE_REF"
            tableMapping.ColumnMappings.Add("GREFTX_GREF_CODE_FK_PK", "GREFTX_GREF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("GREFTX_GREF_DATECR_FK_PK", "GREFTX_GREF_DATECR_FK_PK")
            tableMapping.ColumnMappings.Add("GREFTX_TEXTE", "GREFTX_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[GREFTX_TEXTE_GROUPE_REF] WHERE (([GREFTX_GREF_CODE_FK_PK" & _
                "] = @Original_GREFTX_GREF_CODE_FK_PK) AND ([GREFTX_GREF_DATECR_FK_PK] = @Origina" & _
                "l_GREFTX_GREF_DATECR_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREFTX_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREFTX_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[GREFTX_TEXTE_GROUPE_REF] ([GREFTX_GREF_CODE_FK_PK], [GRE" & _
                "FTX_GREF_DATECR_FK_PK], [GREFTX_TEXTE]) VALUES (@GREFTX_GREF_CODE_FK_PK, @GREFTX" & _
                "_GREF_DATECR_FK_PK, @GREFTX_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GREFTX_GREF_CODE_FK_PK, GREFTX_GREF_" & _
                "DATECR_FK_PK, GREFTX_TEXTE FROM THERIAQUE.GREFTX_TEXTE_GROUPE_REF WHERE (GREFTX_" & _
                "GREF_CODE_FK_PK = @GREFTX_GREF_CODE_FK_PK) AND (GREFTX_GREF_DATECR_FK_PK = @GREF" & _
                "TX_GREF_DATECR_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[GREFTX_TEXTE_GROUPE_REF] SET [GREFTX_GREF_CODE_FK_PK] = @GREF" & _
                "TX_GREF_CODE_FK_PK, [GREFTX_GREF_DATECR_FK_PK] = @GREFTX_GREF_DATECR_FK_PK, [GRE" & _
                "FTX_TEXTE] = @GREFTX_TEXTE WHERE (([GREFTX_GREF_CODE_FK_PK] = @Original_GREFTX_G" & _
                "REF_CODE_FK_PK) AND ([GREFTX_GREF_DATECR_FK_PK] = @Original_GREFTX_GREF_DATECR_F" & _
                "K_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GREFTX_GREF_CODE_FK_PK, GREFTX_GREF_DATECR_FK_PK, GREFTX_TEXTE F" & _
                "ROM THERIAQUE.GREFTX_TEXTE_GROUPE_REF WHERE (GREFTX_GREF_CODE_FK_PK = @GREFTX_GR" & _
                "EF_CODE_FK_PK) AND (GREFTX_GREF_DATECR_FK_PK = @GREFTX_GREF_DATECR_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREFTX_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GREFTX_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GREFTX_GREF_CODE_FK_PK, GREFTX_GREF_DATECR_FK_PK, GREFTX_TEXTE FROM THERIA" & _
                "QUE.GREFTX_TEXTE_GROUPE_REF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT GREFTX_GREF_CODE_FK_PK, GREFTX_GREF_DATECR_FK_PK, GREFTX_TEXTE FROM THERIA" & _
                "QUE.GREFTX_TEXTE_GROUPE_REF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where GREFTX_GREF_CODE_FK_PK = @GREFTX_GREF_CODE_FK" & _
                "_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GREFTX_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "GREFTX_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable = New dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable, ByVal GREFTX_GREF_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GREFTX_GREF_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal GREFTX_GREF_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GREFTX_GREF_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable = New dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.GREFTX_TEXTE_GROUPE_REFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "GREFTX_TEXTE_GROUPE_REF")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GREFTX_GREF_CODE_FK_PK As Integer, ByVal Original_GREFTX_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GREFTX_GREF_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GREFTX_GREF_DATECR_FK_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GREFTX_GREF_CODE_FK_PK As Integer, ByVal GREFTX_GREF_DATECR_FK_PK As Date, ByVal GREFTX_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GREFTX_GREF_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(GREFTX_GREF_DATECR_FK_PK, Date)
            If (GREFTX_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(GREFTX_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GREFTX_GREF_CODE_FK_PK As Integer, ByVal GREFTX_GREF_DATECR_FK_PK As Date, ByVal GREFTX_TEXTE As String, ByVal Original_GREFTX_GREF_CODE_FK_PK As Integer, ByVal Original_GREFTX_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GREFTX_GREF_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GREFTX_GREF_DATECR_FK_PK, Date)
            If (GREFTX_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GREFTX_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_GREFTX_GREF_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_GREFTX_GREF_DATECR_FK_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GREFTX_TEXTE As String, ByVal Original_GREFTX_GREF_CODE_FK_PK As Integer, ByVal Original_GREFTX_GREF_DATECR_FK_PK As Date) As Integer
            Return Me.Update(Original_GREFTX_GREF_CODE_FK_PK, Original_GREFTX_GREF_DATECR_FK_PK, GREFTX_TEXTE, Original_GREFTX_GREF_CODE_FK_PK, Original_GREFTX_GREF_DATECR_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class COSAU_COMPO_SUBAUX1TableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COSAU_COMPO_SUBAUX1"
            tableMapping.ColumnMappings.Add("COSAU_SAU_CODE_FK_PK", "COSAU_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAU_SP_CODE_FK_PK", "COSAU_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAU_DOSAGE", "COSAU_DOSAGE")
            tableMapping.ColumnMappings.Add("COSAU_UNITEDOSAGE", "COSAU_UNITEDOSAGE")
            tableMapping.ColumnMappings.Add("COSAU_COMPO_NUM_PK", "COSAU_COMPO_NUM_PK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_CODE_FK", "COSAU_GREF_CODE_FK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_DATECR_FK", "COSAU_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_NUMORD", "COSAU_GREF_NUMORD")
            tableMapping.ColumnMappings.Add("COSAU_NUMORD", "COSAU_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[COSAU_COMPO_SUBAUX] WHERE (([COSAU_SAU_CODE_FK_PK] = @Or" & _
                "iginal_COSAU_SAU_CODE_FK_PK) AND ([COSAU_SP_CODE_FK_PK] = @Original_COSAU_SP_COD" & _
                "E_FK_PK) AND ((@IsNull_COSAU_DOSAGE = 1 AND [COSAU_DOSAGE] IS NULL) OR ([COSAU_D" & _
                "OSAGE] = @Original_COSAU_DOSAGE)) AND ((@IsNull_COSAU_UNITEDOSAGE = 1 AND [COSAU" & _
                "_UNITEDOSAGE] IS NULL) OR ([COSAU_UNITEDOSAGE] = @Original_COSAU_UNITEDOSAGE)) A" & _
                "ND ([COSAU_COMPO_NUM_PK] = @Original_COSAU_COMPO_NUM_PK) AND ((@IsNull_COSAU_GRE" & _
                "F_CODE_FK = 1 AND [COSAU_GREF_CODE_FK] IS NULL) OR ([COSAU_GREF_CODE_FK] = @Orig" & _
                "inal_COSAU_GREF_CODE_FK)) AND ((@IsNull_COSAU_GREF_DATECR_FK = 1 AND [COSAU_GREF" & _
                "_DATECR_FK] IS NULL) OR ([COSAU_GREF_DATECR_FK] = @Original_COSAU_GREF_DATECR_FK" & _
                ")) AND ((@IsNull_COSAU_GREF_NUMORD = 1 AND [COSAU_GREF_NUMORD] IS NULL) OR ([COS" & _
                "AU_GREF_NUMORD] = @Original_COSAU_GREF_NUMORD)) AND ((@IsNull_COSAU_NUMORD = 1 A" & _
                "ND [COSAU_NUMORD] IS NULL) OR ([COSAU_NUMORD] = @Original_COSAU_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[COSAU_COMPO_SUBAUX] ([COSAU_SAU_CODE_FK_PK], [COSAU_SP_C" & _
                "ODE_FK_PK], [COSAU_DOSAGE], [COSAU_UNITEDOSAGE], [COSAU_COMPO_NUM_PK], [COSAU_GR" & _
                "EF_CODE_FK], [COSAU_GREF_DATECR_FK], [COSAU_GREF_NUMORD], [COSAU_NUMORD]) VALUES" & _
                " (@COSAU_SAU_CODE_FK_PK, @COSAU_SP_CODE_FK_PK, @COSAU_DOSAGE, @COSAU_UNITEDOSAGE" & _
                ", @COSAU_COMPO_NUM_PK, @COSAU_GREF_CODE_FK, @COSAU_GREF_DATECR_FK, @COSAU_GREF_N" & _
                "UMORD, @COSAU_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_" & _
                "DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DA" & _
                "TECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD FROM THERIAQUE.COSAU_COMPO_SUBAUX WHERE" & _
                " (COSAU_COMPO_NUM_PK = @COSAU_COMPO_NUM_PK) AND (COSAU_SAU_CODE_FK_PK = @COSAU_S" & _
                "AU_CODE_FK_PK) AND (COSAU_SP_CODE_FK_PK = @COSAU_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[COSAU_COMPO_SUBAUX] SET [COSAU_SAU_CODE_FK_PK] = @COSAU_SAU_C" & _
                "ODE_FK_PK, [COSAU_SP_CODE_FK_PK] = @COSAU_SP_CODE_FK_PK, [COSAU_DOSAGE] = @COSAU" & _
                "_DOSAGE, [COSAU_UNITEDOSAGE] = @COSAU_UNITEDOSAGE, [COSAU_COMPO_NUM_PK] = @COSAU" & _
                "_COMPO_NUM_PK, [COSAU_GREF_CODE_FK] = @COSAU_GREF_CODE_FK, [COSAU_GREF_DATECR_FK" & _
                "] = @COSAU_GREF_DATECR_FK, [COSAU_GREF_NUMORD] = @COSAU_GREF_NUMORD, [COSAU_NUMO" & _
                "RD] = @COSAU_NUMORD WHERE (([COSAU_SAU_CODE_FK_PK] = @Original_COSAU_SAU_CODE_FK" & _
                "_PK) AND ([COSAU_SP_CODE_FK_PK] = @Original_COSAU_SP_CODE_FK_PK) AND ((@IsNull_C" & _
                "OSAU_DOSAGE = 1 AND [COSAU_DOSAGE] IS NULL) OR ([COSAU_DOSAGE] = @Original_COSAU" & _
                "_DOSAGE)) AND ((@IsNull_COSAU_UNITEDOSAGE = 1 AND [COSAU_UNITEDOSAGE] IS NULL) O" & _
                "R ([COSAU_UNITEDOSAGE] = @Original_COSAU_UNITEDOSAGE)) AND ([COSAU_COMPO_NUM_PK]" & _
                " = @Original_COSAU_COMPO_NUM_PK) AND ((@IsNull_COSAU_GREF_CODE_FK = 1 AND [COSAU" & _
                "_GREF_CODE_FK] IS NULL) OR ([COSAU_GREF_CODE_FK] = @Original_COSAU_GREF_CODE_FK)" & _
                ") AND ((@IsNull_COSAU_GREF_DATECR_FK = 1 AND [COSAU_GREF_DATECR_FK] IS NULL) OR " & _
                "([COSAU_GREF_DATECR_FK] = @Original_COSAU_GREF_DATECR_FK)) AND ((@IsNull_COSAU_G" & _
                "REF_NUMORD = 1 AND [COSAU_GREF_NUMORD] IS NULL) OR ([COSAU_GREF_NUMORD] = @Origi" & _
                "nal_COSAU_GREF_NUMORD)) AND ((@IsNull_COSAU_NUMORD = 1 AND [COSAU_NUMORD] IS NUL" & _
                "L) OR ([COSAU_NUMORD] = @Original_COSAU_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COSAU_SAU_CODE_FK_PK," & _
                " COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU" & _
                "_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD FROM THERIA" & _
                "QUE.COSAU_COMPO_SUBAUX WHERE (COSAU_COMPO_NUM_PK = @COSAU_COMPO_NUM_PK) AND (COS" & _
                "AU_SAU_CODE_FK_PK = @COSAU_SAU_CODE_FK_PK) AND (COSAU_SP_CODE_FK_PK = @COSAU_SP_" & _
                "CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE" & _
                ", COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMOR" & _
                "D, COSAU_NUMORD FROM THERIAQUE.COSAU_COMPO_SUBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COSAU_COMPO_NUM_PK, COSAU_DOSAGE, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK" & _
                ", COSAU_GREF_NUMORD, COSAU_NUMORD, COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, CO" & _
                "SAU_UNITEDOSAGE FROM THERIAQUE.COSAU_COMPO_SUBAUX WHERE (COSAU_GREF_CODE_FK = @C" & _
                "OSAU_GREF_CODE_FK) AND (COSAU_GREF_DATECR_FK = @COSAU_GREF_DATECR_FK)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT THERIAQUE.COSAU_COMPO_SUBAUX.COSAU_COMPO_NUM_PK, THERIAQUE.COSAU_COMPO_SUB" & _
                "AUX.COSAU_DOSAGE, THERIAQUE.COSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FK, THERIAQUE.COS" & _
                "AU_COMPO_SUBAUX.COSAU_GREF_DATECR_FK, THERIAQUE.COSAU_COMPO_SUBAUX.COSAU_GREF_NU" & _
                "MORD, THERIAQUE.COSAU_COMPO_SUBAUX.COSAU_NUMORD, THERIAQUE.COSAU_COMPO_SUBAUX.CO" & _
                "SAU_SAU_CODE_FK_PK, THERIAQUE.COSAU_COMPO_SUBAUX.COSAU_SP_CODE_FK_PK, THERIAQUE." & _
                "COSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGE FROM THERIAQUE.COSAU_COMPO_SUBAUX INNER JOI" & _
                "N THERIAQUE.SAU_SUBAUXILIAIRE ON THERIAQUE.COSAU_COMPO_SUBAUX.COSAU_SAU_CODE_FK_" & _
                "PK = THERIAQUE.SAU_SUBAUXILIAIRE.SAU_CODE_SQ_PK WHERE (THERIAQUE.SAU_SUBAUXILIAI" & _
                "RE.SAU_EFFETNOTOIRE = 'O')"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date)) As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByNotoire(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByNotoire() As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUX1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "COSAU_COMPO_SUBAUX1")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, ByVal Original_COSAU_SP_CODE_FK_PK As Integer, ByVal Original_COSAU_DOSAGE As String, ByVal Original_COSAU_UNITEDOSAGE As String, ByVal Original_COSAU_COMPO_NUM_PK As Byte, ByVal Original_COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal Original_COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COSAU_SP_CODE_FK_PK, Integer)
            If (Original_COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COSAU_DOSAGE, String)
            End If
            If (Original_COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_COSAU_COMPO_NUM_PK, Byte)
            If (Original_COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_COMPO_NUM_PK As Byte, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK, Integer)
            If (COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COSAU_DOSAGE, String)
            End If
            If (COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(COSAU_COMPO_NUM_PK, Byte)
            If (COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal COSAU_SAU_CODE_FK_PK As Integer, _
                    ByVal COSAU_SP_CODE_FK_PK As Integer, _
                    ByVal COSAU_DOSAGE As String, _
                    ByVal COSAU_UNITEDOSAGE As String, _
                    ByVal COSAU_COMPO_NUM_PK As Byte, _
                    ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), _
                    ByVal COSAU_NUMORD As Global.System.Nullable(Of Short), _
                    ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, _
                    ByVal Original_COSAU_SP_CODE_FK_PK As Integer, _
                    ByVal Original_COSAU_DOSAGE As String, _
                    ByVal Original_COSAU_UNITEDOSAGE As String, _
                    ByVal Original_COSAU_COMPO_NUM_PK As Byte, _
                    ByVal Original_COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), _
                    ByVal Original_COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), _
                    ByVal Original_COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), _
                    ByVal Original_COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK, Integer)
            If (COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COSAU_DOSAGE, String)
            End If
            If (COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COSAU_COMPO_NUM_PK, Byte)
            If (COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_COSAU_SP_CODE_FK_PK, Integer)
            If (Original_COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_COSAU_DOSAGE, String)
            End If
            If (Original_COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_COSAU_COMPO_NUM_PK, Byte)
            If (Original_COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal COSAU_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, ByVal Original_COSAU_SP_CODE_FK_PK As Integer, ByVal Original_COSAU_DOSAGE As String, ByVal Original_COSAU_UNITEDOSAGE As String, ByVal Original_COSAU_COMPO_NUM_PK As Byte, ByVal Original_COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal Original_COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_COSAU_SAU_CODE_FK_PK, Original_COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, Original_COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD, Original_COSAU_SAU_CODE_FK_PK, Original_COSAU_SP_CODE_FK_PK, Original_COSAU_DOSAGE, Original_COSAU_UNITEDOSAGE, Original_COSAU_COMPO_NUM_PK, Original_COSAU_GREF_CODE_FK, Original_COSAU_GREF_DATECR_FK, Original_COSAU_GREF_NUMORD, Original_COSAU_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class GSAU_PERE_SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GSAU_PERE_SUBAUX"
            tableMapping.ColumnMappings.Add("GSAU_CODE_SQ_PK", "GSAU_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("GSAU_NOM", "GSAU_NOM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[GSAU_PERE_SUBAUX] WHERE (([GSAU_CODE_SQ_PK] = @Original_" & _
                "GSAU_CODE_SQ_PK) AND ([GSAU_NOM] = @Original_GSAU_NOM))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAU_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAU_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[GSAU_PERE_SUBAUX] ([GSAU_CODE_SQ_PK], [GSAU_NOM]) VALUES" & _
                " (@GSAU_CODE_SQ_PK, @GSAU_NOM);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THERIAQUE" & _
                ".GSAU_PERE_SUBAUX WHERE (GSAU_CODE_SQ_PK = @GSAU_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAU_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAU_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[GSAU_PERE_SUBAUX] SET [GSAU_CODE_SQ_PK] = @GSAU_CODE_SQ_PK, [" & _
                "GSAU_NOM] = @GSAU_NOM WHERE (([GSAU_CODE_SQ_PK] = @Original_GSAU_CODE_SQ_PK) AND" & _
                " ([GSAU_NOM] = @Original_GSAU_NOM));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THER" & _
                "IAQUE.GSAU_PERE_SUBAUX WHERE (GSAU_CODE_SQ_PK = @GSAU_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAU_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSAU_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAU_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSAU_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THERIAQUE.GSAU_PERE_SUBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.GSAU_PERE_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.GSAU_PERE_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.GSAU_PERE_SUBAUXDataTable = New dsTheriaque_Nomenclature2.GSAU_PERE_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.GSAU_PERE_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "GSAU_PERE_SUBAUX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GSAU_CODE_SQ_PK As Integer, ByVal Original_GSAU_NOM As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GSAU_CODE_SQ_PK, Integer)
            If (Original_GSAU_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSAU_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GSAU_NOM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GSAU_CODE_SQ_PK As Integer, ByVal GSAU_NOM As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GSAU_CODE_SQ_PK, Integer)
            If (GSAU_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSAU_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GSAU_NOM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GSAU_CODE_SQ_PK As Integer, ByVal GSAU_NOM As String, ByVal Original_GSAU_CODE_SQ_PK As Integer, ByVal Original_GSAU_NOM As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GSAU_CODE_SQ_PK, Integer)
            If (GSAU_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSAU_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GSAU_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_GSAU_CODE_SQ_PK, Integer)
            If (Original_GSAU_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSAU_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_GSAU_NOM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GSAU_NOM As String, ByVal Original_GSAU_CODE_SQ_PK As Integer, ByVal Original_GSAU_NOM As String) As Integer
            Return Me.Update(Original_GSAU_CODE_SQ_PK, GSAU_NOM, Original_GSAU_CODE_SQ_PK, Original_GSAU_NOM)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYSAU_SYNONYME_SAUTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYSAU_SYNONYME_SAU"
            tableMapping.ColumnMappings.Add("SYSAU_NOM_PK", "SYSAU_NOM_PK")
            tableMapping.ColumnMappings.Add("SYSAU_SAU_CODE_FK", "SYSAU_SAU_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYSAU_SYNONYME_SAU] WHERE (([SYSAU_NOM_PK] = @Original_S"& _ 
                "YSAU_NOM_PK) AND ([SYSAU_SAU_CODE_FK] = @Original_SYSAU_SAU_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAU_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAU_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYSAU_SYNONYME_SAU] ([SYSAU_NOM_PK], [SYSAU_SAU_CODE_FK]"& _ 
                ") VALUES (@SYSAU_NOM_PK, @SYSAU_SAU_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYSAU_NOM_PK, SYSAU_SAU_CO"& _ 
                "DE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU WHERE (SYSAU_NOM_PK = @SYSAU_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAU_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAU_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYSAU_SYNONYME_SAU] SET [SYSAU_NOM_PK] = @SYSAU_NOM_PK, [SYSA"& _ 
                "U_SAU_CODE_FK] = @SYSAU_SAU_CODE_FK WHERE (([SYSAU_NOM_PK] = @Original_SYSAU_NOM"& _ 
                "_PK) AND ([SYSAU_SAU_CODE_FK] = @Original_SYSAU_SAU_CODE_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYSAU_NOM"& _ 
                "_PK, SYSAU_SAU_CODE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU WHERE (SYSAU_NOM_PK = @"& _ 
                "SYSAU_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAU_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAU_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAU_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAU_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYSAU_NOM_PK, SYSAU_SAU_CODE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SYSAU_SYNONYME_SAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SYSAU_SYNONYME_SAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SYSAU_SYNONYME_SAUDataTable = New dsTheriaque_Nomenclature2.SYSAU_SYNONYME_SAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SYSAU_SYNONYME_SAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SYSAU_SYNONYME_SAU")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYSAU_NOM_PK As String, ByVal Original_SYSAU_SAU_CODE_FK As Integer) As Integer
            If (Original_SYSAU_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSAU_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYSAU_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYSAU_NOM_PK As String, ByVal SYSAU_SAU_CODE_FK As Integer) As Integer
            If (SYSAU_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSAU_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYSAU_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYSAU_NOM_PK As String, ByVal SYSAU_SAU_CODE_FK As Integer, ByVal Original_SYSAU_NOM_PK As String, ByVal Original_SYSAU_SAU_CODE_FK As Integer) As Integer
            If (SYSAU_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSAU_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYSAU_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYSAU_SAU_CODE_FK, Integer)
            If (Original_SYSAU_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSAU_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYSAU_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYSAU_SAU_CODE_FK As Integer, ByVal Original_SYSAU_NOM_PK As String, ByVal Original_SYSAU_SAU_CODE_FK As Integer) As Integer
            Return Me.Update(Original_SYSAU_NOM_PK, SYSAU_SAU_CODE_FK, Original_SYSAU_NOM_PK, Original_SYSAU_SAU_CODE_FK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYFSAC_SYNONYMEFR_SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYFSAC_SYNONYMEFR_SUBACT"
            tableMapping.ColumnMappings.Add("SYFSAC_NOM_PK", "SYFSAC_NOM_PK")
            tableMapping.ColumnMappings.Add("SYFSAC_SAC_CODE_FK", "SYFSAC_SAC_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYFSAC_SYNONYMEFR_SUBACT] WHERE (([SYFSAC_NOM_PK] = @Ori" & _
                "ginal_SYFSAC_NOM_PK) AND ([SYFSAC_SAC_CODE_FK] = @Original_SYFSAC_SAC_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_NOM_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYFSAC_SYNONYMEFR_SUBACT] ([SYFSAC_NOM_PK], [SYFSAC_SAC_" & _
                "CODE_FK]) VALUES (@SYFSAC_NOM_PK, @SYFSAC_SAC_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYFSAC_NOM_PK, S" & _
                "YFSAC_SAC_CODE_FK FROM THERIAQUE.SYFSAC_SYNONYMEFR_SUBACT WHERE (SYFSAC_NOM_PK =" & _
                " @SYFSAC_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_NOM_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYFSAC_SYNONYMEFR_SUBACT] SET [SYFSAC_NOM_PK] = @SYFSAC_NOM_P" & _
                "K, [SYFSAC_SAC_CODE_FK] = @SYFSAC_SAC_CODE_FK WHERE (([SYFSAC_NOM_PK] = @Origina" & _
                "l_SYFSAC_NOM_PK) AND ([SYFSAC_SAC_CODE_FK] = @Original_SYFSAC_SAC_CODE_FK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SE" & _
                "LECT SYFSAC_NOM_PK, SYFSAC_SAC_CODE_FK FROM THERIAQUE.SYFSAC_SYNONYMEFR_SUBACT W" & _
                "HERE (SYFSAC_NOM_PK = @SYFSAC_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_NOM_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_NOM_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYFSAC_NOM_PK, SYFSAC_SAC_CODE_FK FROM THERIAQUE.SYFSAC_SYNONYMEFR_SUBACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYFSAC_NOM_PK, SYFSAC_SAC_CODE_FK FROM THERIAQUE.SYFSAC_SYNONYMEFR_SUBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYFSAC_SAC_CODE_FK = @SYFSAC_SAC_CODE_FK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable = New dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable, ByVal SYFSAC_SAC_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFSAC_SAC_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYFSAC_SAC_CODE_FK As Integer) As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFSAC_SAC_CODE_FK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable = New dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SYFSAC_SYNONYMEFR_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SYFSAC_SYNONYMEFR_SUBACT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYFSAC_NOM_PK As String, ByVal Original_SYFSAC_SAC_CODE_FK As Integer) As Integer
            If (Original_SYFSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYFSAC_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYFSAC_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYFSAC_SAC_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYFSAC_NOM_PK As String, ByVal SYFSAC_SAC_CODE_FK As Integer) As Integer
            If (SYFSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYFSAC_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYFSAC_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYFSAC_SAC_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYFSAC_NOM_PK As String, ByVal SYFSAC_SAC_CODE_FK As Integer, ByVal Original_SYFSAC_NOM_PK As String, ByVal Original_SYFSAC_SAC_CODE_FK As Integer) As Integer
            If (SYFSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYFSAC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYFSAC_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYFSAC_SAC_CODE_FK, Integer)
            If (Original_SYFSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYFSAC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYFSAC_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYFSAC_SAC_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYFSAC_SAC_CODE_FK As Integer, ByVal Original_SYFSAC_NOM_PK As String, ByVal Original_SYFSAC_SAC_CODE_FK As Integer) As Integer
            Return Me.Update(Original_SYFSAC_NOM_PK, SYFSAC_SAC_CODE_FK, Original_SYFSAC_NOM_PK, Original_SYFSAC_SAC_CODE_FK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYASAC_SYNONYMEANGLAIS_SACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYASAC_SYNONYMEANGLAIS_SAC"
            tableMapping.ColumnMappings.Add("SYASAC_NOM_PK", "SYASAC_NOM_PK")
            tableMapping.ColumnMappings.Add("SYASAC_SAC_CODE_FK_PK", "SYASAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYASAC_SYNONYMEANGLAIS_SAC] WHERE (([SYASAC_NOM_PK] = @O"& _ 
                "riginal_SYASAC_NOM_PK) AND ([SYASAC_SAC_CODE_FK_PK] = @Original_SYASAC_SAC_CODE_"& _ 
                "FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYASAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYASAC_SYNONYMEANGLAIS_SAC] ([SYASAC_NOM_PK], [SYASAC_SA"& _ 
                "C_CODE_FK_PK]) VALUES (@SYASAC_NOM_PK, @SYASAC_SAC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYASAC_N"& _ 
                "OM_PK, SYASAC_SAC_CODE_FK_PK FROM THERIAQUE.SYASAC_SYNONYMEANGLAIS_SAC WHERE (SY"& _ 
                "ASAC_NOM_PK = @SYASAC_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYASAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYASAC_SYNONYMEANGLAIS_SAC] SET [SYASAC_NOM_PK] = @SYASAC_NOM"& _ 
                "_PK, [SYASAC_SAC_CODE_FK_PK] = @SYASAC_SAC_CODE_FK_PK WHERE (([SYASAC_NOM_PK] = "& _ 
                "@Original_SYASAC_NOM_PK) AND ([SYASAC_SAC_CODE_FK_PK] = @Original_SYASAC_SAC_COD"& _ 
                "E_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYASAC_NOM_PK, SYASAC_SAC_CODE_FK_PK FROM THERIAQUE.SYASAC_SY"& _ 
                "NONYMEANGLAIS_SAC WHERE (SYASAC_NOM_PK = @SYASAC_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYASAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYASAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYASAC_NOM_PK, SYASAC_SAC_CODE_FK_PK FROM THERIAQUE.SYASAC_SYNONYMEANGLAIS" & _
                "_SAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYASAC_NOM_PK, SYASAC_SAC_CODE_FK_PK FROM THERIAQUE.SYASAC_SYNONYMEANGLAIS" & _
                "_SAC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYASAC_SAC_CODE_FK_PK = @SYASAC_SAC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable = New dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable, ByVal SYASAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYASAC_SAC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYASAC_SAC_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYASAC_SAC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable = New dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SYASAC_SYNONYMEANGLAIS_SACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SYASAC_SYNONYMEANGLAIS_SAC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYASAC_NOM_PK As String, ByVal Original_SYASAC_SAC_CODE_FK_PK As Integer) As Integer
            If (Original_SYASAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYASAC_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYASAC_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYASAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYASAC_NOM_PK As String, ByVal SYASAC_SAC_CODE_FK_PK As Integer) As Integer
            If (SYASAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYASAC_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYASAC_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYASAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYASAC_NOM_PK As String, ByVal SYASAC_SAC_CODE_FK_PK As Integer, ByVal Original_SYASAC_NOM_PK As String, ByVal Original_SYASAC_SAC_CODE_FK_PK As Integer) As Integer
            If (SYASAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYASAC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYASAC_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYASAC_SAC_CODE_FK_PK, Integer)
            If (Original_SYASAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYASAC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYASAC_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYASAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYASAC_SAC_CODE_FK_PK As Integer, ByVal Original_SYASAC_NOM_PK As String, ByVal Original_SYASAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_SYASAC_NOM_PK, SYASAC_SAC_CODE_FK_PK, Original_SYASAC_NOM_PK, Original_SYASAC_SAC_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SACCAS_SUBACT_CASTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SACCAS_SUBACT_CAS"
            tableMapping.ColumnMappings.Add("SACCAS_CAS_CODE_PK", "SACCAS_CAS_CODE_PK")
            tableMapping.ColumnMappings.Add("SACCAS_SAC_CODE_FK_PK", "SACCAS_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SACCAS_SUBACT_CAS] WHERE (([SACCAS_CAS_CODE_PK] = @Origi" & _
                "nal_SACCAS_CAS_CODE_PK) AND ([SACCAS_SAC_CODE_FK_PK] = @Original_SACCAS_SAC_CODE" & _
                "_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCAS_CAS_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_CAS_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCAS_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SACCAS_SUBACT_CAS] ([SACCAS_CAS_CODE_PK], [SACCAS_SAC_CO" & _
                "DE_FK_PK]) VALUES (@SACCAS_CAS_CODE_PK, @SACCAS_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SACCAS_" & _
                "CAS_CODE_PK, SACCAS_SAC_CODE_FK_PK FROM THERIAQUE.SACCAS_SUBACT_CAS WHERE (SACCA" & _
                "S_CAS_CODE_PK = @SACCAS_CAS_CODE_PK) AND (SACCAS_SAC_CODE_FK_PK = @SACCAS_SAC_CO" & _
                "DE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCAS_CAS_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_CAS_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCAS_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SACCAS_SUBACT_CAS] SET [SACCAS_CAS_CODE_PK] = @SACCAS_CAS_COD" & _
                "E_PK, [SACCAS_SAC_CODE_FK_PK] = @SACCAS_SAC_CODE_FK_PK WHERE (([SACCAS_CAS_CODE_" & _
                "PK] = @Original_SACCAS_CAS_CODE_PK) AND ([SACCAS_SAC_CODE_FK_PK] = @Original_SAC" & _
                "CAS_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SACCAS_CAS_CODE_PK, SACCAS_SAC_CODE_FK_PK FROM THE" & _
                "RIAQUE.SACCAS_SUBACT_CAS WHERE (SACCAS_CAS_CODE_PK = @SACCAS_CAS_CODE_PK) AND (S" & _
                "ACCAS_SAC_CODE_FK_PK = @SACCAS_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCAS_CAS_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_CAS_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCAS_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCAS_CAS_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_CAS_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCAS_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SACCAS_CAS_CODE_PK, SACCAS_SAC_CODE_FK_PK FROM THERIAQUE.SACCAS_SUBACT_CAS" & _
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SACCAS_CAS_CODE_PK, SACCAS_SAC_CODE_FK_PK FROM THERIAQUE.SACCAS_SUBACT_CAS" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SACCAS_SAC_CODE_FK_PK = @SACCAS_SAC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCAS_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCAS_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable = New dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable, ByVal SACCAS_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCAS_SAC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SACCAS_SAC_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCAS_SAC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable = New dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SACCAS_SUBACT_CASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SACCAS_SUBACT_CAS")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SACCAS_CAS_CODE_PK As String, ByVal Original_SACCAS_SAC_CODE_FK_PK As Integer) As Integer
            If (Original_SACCAS_CAS_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCAS_CAS_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SACCAS_CAS_CODE_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SACCAS_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SACCAS_CAS_CODE_PK As String, ByVal SACCAS_SAC_CODE_FK_PK As Integer) As Integer
            If (SACCAS_CAS_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCAS_CAS_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SACCAS_CAS_CODE_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SACCAS_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SACCAS_CAS_CODE_PK As String, ByVal SACCAS_SAC_CODE_FK_PK As Integer, ByVal Original_SACCAS_CAS_CODE_PK As String, ByVal Original_SACCAS_SAC_CODE_FK_PK As Integer) As Integer
            If (SACCAS_CAS_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCAS_CAS_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SACCAS_CAS_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SACCAS_SAC_CODE_FK_PK, Integer)
            If (Original_SACCAS_CAS_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCAS_CAS_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SACCAS_CAS_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SACCAS_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_SACCAS_CAS_CODE_PK As String, ByVal Original_SACCAS_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_SACCAS_CAS_CODE_PK, Original_SACCAS_SAC_CODE_FK_PK, Original_SACCAS_CAS_CODE_PK, Original_SACCAS_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ADSAC_AUTRE_DENOMINATION_SUBACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ADSAC_AUTRE_DENOMINATION_SUBAC"
            tableMapping.ColumnMappings.Add("ADSAC_NOM_PK", "ADSAC_NOM_PK")
            tableMapping.ColumnMappings.Add("ADSAC_SAC_CODE_FK", "ADSAC_SAC_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ADSAC_AUTRE_DENOMINATION_SUBAC] WHERE (([ADSAC_NOM_PK] ="& _ 
                " @Original_ADSAC_NOM_PK) AND ([ADSAC_SAC_CODE_FK] = @Original_ADSAC_SAC_CODE_FK)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ADSAC_AUTRE_DENOMINATION_SUBAC] ([ADSAC_NOM_PK], [ADSAC_"& _ 
                "SAC_CODE_FK]) VALUES (@ADSAC_NOM_PK, @ADSAC_SAC_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ADSAC_NOM_PK, "& _ 
                "ADSAC_SAC_CODE_FK FROM THERIAQUE.ADSAC_AUTRE_DENOMINATION_SUBAC WHERE (ADSAC_NOM"& _ 
                "_PK = @ADSAC_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ADSAC_AUTRE_DENOMINATION_SUBAC] SET [ADSAC_NOM_PK] = @ADSAC_N"& _ 
                "OM_PK, [ADSAC_SAC_CODE_FK] = @ADSAC_SAC_CODE_FK WHERE (([ADSAC_NOM_PK] = @Origin"& _ 
                "al_ADSAC_NOM_PK) AND ([ADSAC_SAC_CODE_FK] = @Original_ADSAC_SAC_CODE_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT ADSAC_NOM_PK, ADSAC_SAC_CODE_FK FROM THERIAQUE.ADSAC_AUTRE_DENOMINATION_SUBAC"& _ 
                " WHERE (ADSAC_NOM_PK = @ADSAC_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_NOM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADSAC_NOM_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_NOM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ADSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ADSAC_NOM_PK, ADSAC_SAC_CODE_FK FROM THERIAQUE.ADSAC_AUTRE_DENOMINATION_SU" & _
                "BAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ADSAC_NOM_PK, ADSAC_SAC_CODE_FK FROM THERIAQUE.ADSAC_AUTRE_DENOMINATION_SU" & _
                "BAC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where ADSAC_SAC_CODE_FK = @ADSAC_SAC_CODE_FK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADSAC_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ADSAC_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable = New dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable, ByVal ADSAC_SAC_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADSAC_SAC_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ADSAC_SAC_CODE_FK As Integer) As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADSAC_SAC_CODE_FK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable = New dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.ADSAC_AUTRE_DENOMINATION_SUBACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "ADSAC_AUTRE_DENOMINATION_SUBAC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ADSAC_NOM_PK As String, ByVal Original_ADSAC_SAC_CODE_FK As Integer) As Integer
            If (Original_ADSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADSAC_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ADSAC_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ADSAC_SAC_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ADSAC_NOM_PK As String, ByVal ADSAC_SAC_CODE_FK As Integer) As Integer
            If (ADSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADSAC_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ADSAC_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ADSAC_SAC_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ADSAC_NOM_PK As String, ByVal ADSAC_SAC_CODE_FK As Integer, ByVal Original_ADSAC_NOM_PK As String, ByVal Original_ADSAC_SAC_CODE_FK As Integer) As Integer
            If (ADSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADSAC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ADSAC_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ADSAC_SAC_CODE_FK, Integer)
            If (Original_ADSAC_NOM_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADSAC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ADSAC_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ADSAC_SAC_CODE_FK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ADSAC_SAC_CODE_FK As Integer, ByVal Original_ADSAC_NOM_PK As String, ByVal Original_ADSAC_SAC_CODE_FK As Integer) As Integer
            Return Me.Update(Original_ADSAC_NOM_PK, ADSAC_SAC_CODE_FK, Original_ADSAC_NOM_PK, Original_ADSAC_SAC_CODE_FK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SACCCH_SUBACT_CLASSECHTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SACCCH_SUBACT_CLASSECH"
            tableMapping.ColumnMappings.Add("SACCCH_SAC_CODE_FK_PK", "SACCCH_SAC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SACCCH_CCH_CODE_FK_PK", "SACCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SACCCH_SUBACT_CLASSECH] WHERE (([SACCCH_SAC_CODE_FK_PK] " & _
                "= @Original_SACCCH_SAC_CODE_FK_PK) AND ([SACCCH_CCH_CODE_FK_PK] = @Original_SACC" & _
                "CH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCCH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SACCCH_SUBACT_CLASSECH] ([SACCCH_SAC_CODE_FK_PK], [SACCC" & _
                "H_CCH_CODE_FK_PK]) VALUES (@SACCCH_SAC_CODE_FK_PK, @SACCCH_CCH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SEL" & _
                "ECT SACCCH_SAC_CODE_FK_PK, SACCCH_CCH_CODE_FK_PK FROM THERIAQUE.SACCCH_SUBACT_CL" & _
                "ASSECH WHERE (SACCCH_CCH_CODE_FK_PK = @SACCCH_CCH_CODE_FK_PK) AND (SACCCH_SAC_CO" & _
                "DE_FK_PK = @SACCCH_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCCH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SACCCH_SUBACT_CLASSECH] SET [SACCCH_SAC_CODE_FK_PK] = @SACCCH" & _
                "_SAC_CODE_FK_PK, [SACCCH_CCH_CODE_FK_PK] = @SACCCH_CCH_CODE_FK_PK WHERE (([SACCC" & _
                "H_SAC_CODE_FK_PK] = @Original_SACCCH_SAC_CODE_FK_PK) AND ([SACCCH_CCH_CODE_FK_PK" & _
                "] = @Original_SACCCH_CCH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SACCCH_SAC_CODE_FK_PK, SACCCH_CCH" & _
                "_CODE_FK_PK FROM THERIAQUE.SACCCH_SUBACT_CLASSECH WHERE (SACCCH_CCH_CODE_FK_PK =" & _
                " @SACCCH_CCH_CODE_FK_PK) AND (SACCCH_SAC_CODE_FK_PK = @SACCCH_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCCH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCCH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SACCCH_SAC_CODE_FK_PK, SACCCH_CCH_CODE_FK_PK FROM THERIAQUE.SACCCH_SUBACT_" & _
                "CLASSECH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SACCCH_SAC_CODE_FK_PK, SACCCH_CCH_CODE_FK_PK FROM THERIAQUE.SACCCH_SUBACT_" & _
                "CLASSECH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SACCCH_SAC_CODE_FK_PK = @SACCCH_SAC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCCH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCCH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable = New dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable, ByVal SACCCH_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCCH_SAC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SACCCH_SAC_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCCH_SAC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable = New dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SACCCH_SUBACT_CLASSECHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SACCCH_SUBACT_CLASSECH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SACCCH_SAC_CODE_FK_PK As Integer, ByVal Original_SACCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SACCCH_SAC_CODE_FK_PK, Integer)
            If (Original_SACCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SACCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SACCCH_SAC_CODE_FK_PK As Integer, ByVal SACCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SACCCH_SAC_CODE_FK_PK, Integer)
            If (SACCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SACCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SACCCH_SAC_CODE_FK_PK As Integer, ByVal SACCCH_CCH_CODE_FK_PK As String, ByVal Original_SACCCH_SAC_CODE_FK_PK As Integer, ByVal Original_SACCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SACCCH_SAC_CODE_FK_PK, Integer)
            If (SACCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SACCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SACCCH_SAC_CODE_FK_PK, Integer)
            If (Original_SACCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SACCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_SACCCH_SAC_CODE_FK_PK As Integer, ByVal Original_SACCCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_SACCCH_SAC_CODE_FK_PK, Original_SACCCH_CCH_CODE_FK_PK, Original_SACCCH_SAC_CODE_FK_PK, Original_SACCCH_CCH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SACCPH_SUBACT_CLASSEPHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SACCPH_SUBACT_CLASSEPH"
            tableMapping.ColumnMappings.Add("SACCPH_SAC_CODE_FK_PK", "SACCPH_SAC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SACCPH_CPH_CODE_FK_PK", "SACCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SACCPH_SUBACT_CLASSEPH] WHERE (([SACCPH_SAC_CODE_FK_PK] "& _ 
                "= @Original_SACCPH_SAC_CODE_FK_PK) AND ([SACCPH_CPH_CODE_FK_PK] = @Original_SACC"& _ 
                "PH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCPH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SACCPH_SUBACT_CLASSEPH] ([SACCPH_SAC_CODE_FK_PK], [SACCP"& _ 
                "H_CPH_CODE_FK_PK]) VALUES (@SACCPH_SAC_CODE_FK_PK, @SACCPH_CPH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT SACCPH_SAC_CODE_FK_PK, SACCPH_CPH_CODE_FK_PK FROM THERIAQUE.SACCPH_SUBACT_CL"& _ 
                "ASSEPH WHERE (SACCPH_CPH_CODE_FK_PK = @SACCPH_CPH_CODE_FK_PK) AND (SACCPH_SAC_CO"& _ 
                "DE_FK_PK = @SACCPH_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCPH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SACCPH_SUBACT_CLASSEPH] SET [SACCPH_SAC_CODE_FK_PK] = @SACCPH"& _ 
                "_SAC_CODE_FK_PK, [SACCPH_CPH_CODE_FK_PK] = @SACCPH_CPH_CODE_FK_PK WHERE (([SACCP"& _ 
                "H_SAC_CODE_FK_PK] = @Original_SACCPH_SAC_CODE_FK_PK) AND ([SACCPH_CPH_CODE_FK_PK"& _ 
                "] = @Original_SACCPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SACCPH_SAC_CODE_FK_PK, SACCPH_CPH"& _ 
                "_CODE_FK_PK FROM THERIAQUE.SACCPH_SUBACT_CLASSEPH WHERE (SACCPH_CPH_CODE_FK_PK ="& _ 
                " @SACCPH_CPH_CODE_FK_PK) AND (SACCPH_SAC_CODE_FK_PK = @SACCPH_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCPH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCPH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SACCPH_SAC_CODE_FK_PK, SACCPH_CPH_CODE_FK_PK FROM THERIAQUE.SACCPH_SUBACT_" & _
                "CLASSEPH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SACCPH_SAC_CODE_FK_PK, SACCPH_CPH_CODE_FK_PK FROM THERIAQUE.SACCPH_SUBACT_" & _
                "CLASSEPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " SACCPH_SAC_CODE_FK_PK = @SACCPH_SAC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCPH_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCPH_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable = New dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable, ByVal SACCPH_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCPH_SAC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SACCPH_SAC_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCPH_SAC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable = New dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SACCPH_SUBACT_CLASSEPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SACCPH_SUBACT_CLASSEPH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SACCPH_SAC_CODE_FK_PK As Integer, ByVal Original_SACCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SACCPH_SAC_CODE_FK_PK, Integer)
            If (Original_SACCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SACCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SACCPH_SAC_CODE_FK_PK As Integer, ByVal SACCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SACCPH_SAC_CODE_FK_PK, Integer)
            If (SACCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SACCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SACCPH_SAC_CODE_FK_PK As Integer, ByVal SACCPH_CPH_CODE_FK_PK As String, ByVal Original_SACCPH_SAC_CODE_FK_PK As Integer, ByVal Original_SACCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SACCPH_SAC_CODE_FK_PK, Integer)
            If (SACCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SACCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SACCPH_SAC_CODE_FK_PK, Integer)
            If (Original_SACCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SACCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_SACCPH_SAC_CODE_FK_PK As Integer, ByVal Original_SACCPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_SACCPH_SAC_CODE_FK_PK, Original_SACCPH_CPH_CODE_FK_PK, Original_SACCPH_SAC_CODE_FK_PK, Original_SACCPH_CPH_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SACCATC_SUBACT_CLASSEATCTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SACCATC_SUBACT_CLASSEATC"
            tableMapping.ColumnMappings.Add("SACCATC_CATC_CODE_FK_PK", "SACCATC_CATC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SACCATC_SAC_CODE_FK_PK", "SACCATC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SACCATC_SUBACT_CLASSEATC] WHERE (([SACCATC_CATC_CODE_FK_" & _
                "PK] = @Original_SACCATC_CATC_CODE_FK_PK) AND ([SACCATC_SAC_CODE_FK_PK] = @Origin" & _
                "al_SACCATC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCATC_CATC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_CATC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCATC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SACCATC_SUBACT_CLASSEATC] ([SACCATC_CATC_CODE_FK_PK], [S" & _
                "ACCATC_SAC_CODE_FK_PK]) VALUES (@SACCATC_CATC_CODE_FK_PK, @SACCATC_SAC_CODE_FK_P" & _
                "K);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SACCATC_CATC_CODE_FK_PK, SACCATC_SAC_CODE_FK_PK FROM THERIAQUE.SACCA" & _
                "TC_SUBACT_CLASSEATC WHERE (SACCATC_CATC_CODE_FK_PK = @SACCATC_CATC_CODE_FK_PK) A" & _
                "ND (SACCATC_SAC_CODE_FK_PK = @SACCATC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCATC_CATC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_CATC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCATC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SACCATC_SUBACT_CLASSEATC] SET [SACCATC_CATC_CODE_FK_PK] = @SA" & _
                "CCATC_CATC_CODE_FK_PK, [SACCATC_SAC_CODE_FK_PK] = @SACCATC_SAC_CODE_FK_PK WHERE " & _
                "(([SACCATC_CATC_CODE_FK_PK] = @Original_SACCATC_CATC_CODE_FK_PK) AND ([SACCATC_S" & _
                "AC_CODE_FK_PK] = @Original_SACCATC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SACCATC_CATC_CODE_F" & _
                "K_PK, SACCATC_SAC_CODE_FK_PK FROM THERIAQUE.SACCATC_SUBACT_CLASSEATC WHERE (SACC" & _
                "ATC_CATC_CODE_FK_PK = @SACCATC_CATC_CODE_FK_PK) AND (SACCATC_SAC_CODE_FK_PK = @S" & _
                "ACCATC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCATC_CATC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_CATC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCATC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCATC_CATC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_CATC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SACCATC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SACCATC_CATC_CODE_FK_PK, SACCATC_SAC_CODE_FK_PK FROM THERIAQUE.SACCATC_SUB" & _
                "ACT_CLASSEATC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SACCATC_CATC_CODE_FK_PK, SACCATC_SAC_CODE_FK_PK FROM THERIAQUE.SACCATC_SUB" & _
                "ACT_CLASSEATC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SACCATC_SAC_CODE_FK_PK = @SACCATC_SAC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SACCATC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SACCATC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable = New dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable, ByVal SACCATC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCATC_SAC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SACCATC_SAC_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SACCATC_SAC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable = New dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SACCATC_SUBACT_CLASSEATCDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SACCATC_SUBACT_CLASSEATC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SACCATC_CATC_CODE_FK_PK As String, ByVal Original_SACCATC_SAC_CODE_FK_PK As Integer) As Integer
            If (Original_SACCATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SACCATC_CATC_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SACCATC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SACCATC_CATC_CODE_FK_PK As String, ByVal SACCATC_SAC_CODE_FK_PK As Integer) As Integer
            If (SACCATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SACCATC_CATC_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SACCATC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SACCATC_CATC_CODE_FK_PK As String, ByVal SACCATC_SAC_CODE_FK_PK As Integer, ByVal Original_SACCATC_CATC_CODE_FK_PK As String, ByVal Original_SACCATC_SAC_CODE_FK_PK As Integer) As Integer
            If (SACCATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SACCATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SACCATC_CATC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SACCATC_SAC_CODE_FK_PK, Integer)
            If (Original_SACCATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SACCATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SACCATC_CATC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SACCATC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_SACCATC_CATC_CODE_FK_PK As String, ByVal Original_SACCATC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_SACCATC_CATC_CODE_FK_PK, Original_SACCATC_SAC_CODE_FK_PK, Original_SACCATC_CATC_CODE_FK_PK, Original_SACCATC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAC_SUBACTIVETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAC_SUBACTIVE"
            tableMapping.ColumnMappings.Add("SAC_CODE_SQ_PK", "SAC_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SAC_CDF_ORN_CODE_FK", "SAC_CDF_ORN_CODE_FK")
            tableMapping.ColumnMappings.Add("SAC_SAU_CODE_FK", "SAC_SAU_CODE_FK")
            tableMapping.ColumnMappings.Add("SAC_GSAC_CODE_FK", "SAC_GSAC_CODE_FK")
            tableMapping.ColumnMappings.Add("SAC_NOM", "SAC_NOM")
            tableMapping.ColumnMappings.Add("SAC_NOMA", "SAC_NOMA")
            tableMapping.ColumnMappings.Add("SAC_DATECR", "SAC_DATECR")
            tableMapping.ColumnMappings.Add("SAC_DATEMJ", "SAC_DATEMJ")
            tableMapping.ColumnMappings.Add("SAC_ETAT_COMMER", "SAC_ETAT_COMMER")
            tableMapping.ColumnMappings.Add("SAC_DATECOMMER", "SAC_DATECOMMER")
            tableMapping.ColumnMappings.Add("SAC_CODE_REF", "SAC_CODE_REF")
            tableMapping.ColumnMappings.Add("SAC_LIBELLE_REF", "SAC_LIBELLE_REF")
            tableMapping.ColumnMappings.Add("SAC_TYPE_REF", "SAC_TYPE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SAC_SUBACTIVE] WHERE (([SAC_CODE_SQ_PK] = @Original_SAC_"& _ 
                "CODE_SQ_PK) AND ((@IsNull_SAC_CDF_ORN_CODE_FK = 1 AND [SAC_CDF_ORN_CODE_FK] IS N"& _ 
                "ULL) OR ([SAC_CDF_ORN_CODE_FK] = @Original_SAC_CDF_ORN_CODE_FK)) AND ((@IsNull_S"& _ 
                "AC_SAU_CODE_FK = 1 AND [SAC_SAU_CODE_FK] IS NULL) OR ([SAC_SAU_CODE_FK] = @Origi"& _ 
                "nal_SAC_SAU_CODE_FK)) AND ((@IsNull_SAC_GSAC_CODE_FK = 1 AND [SAC_GSAC_CODE_FK] "& _ 
                "IS NULL) OR ([SAC_GSAC_CODE_FK] = @Original_SAC_GSAC_CODE_FK)) AND ([SAC_NOM] = "& _ 
                "@Original_SAC_NOM) AND ((@IsNull_SAC_NOMA = 1 AND [SAC_NOMA] IS NULL) OR ([SAC_N"& _ 
                "OMA] = @Original_SAC_NOMA)) AND ([SAC_DATECR] = @Original_SAC_DATECR) AND ((@IsN"& _ 
                "ull_SAC_DATEMJ = 1 AND [SAC_DATEMJ] IS NULL) OR ([SAC_DATEMJ] = @Original_SAC_DA"& _ 
                "TEMJ)) AND ((@IsNull_SAC_ETAT_COMMER = 1 AND [SAC_ETAT_COMMER] IS NULL) OR ([SAC"& _ 
                "_ETAT_COMMER] = @Original_SAC_ETAT_COMMER)) AND ((@IsNull_SAC_DATECOMMER = 1 AND"& _ 
                " [SAC_DATECOMMER] IS NULL) OR ([SAC_DATECOMMER] = @Original_SAC_DATECOMMER)) AND"& _ 
                " ((@IsNull_SAC_CODE_REF = 1 AND [SAC_CODE_REF] IS NULL) OR ([SAC_CODE_REF] = @Or"& _ 
                "iginal_SAC_CODE_REF)) AND ((@IsNull_SAC_LIBELLE_REF = 1 AND [SAC_LIBELLE_REF] IS"& _ 
                " NULL) OR ([SAC_LIBELLE_REF] = @Original_SAC_LIBELLE_REF)) AND ((@IsNull_SAC_TYP"& _ 
                "E_REF = 1 AND [SAC_TYPE_REF] IS NULL) OR ([SAC_TYPE_REF] = @Original_SAC_TYPE_RE"& _ 
                "F)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_NOMA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATECOMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_TYPE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SAC_SUBACTIVE] ([SAC_CODE_SQ_PK], [SAC_CDF_ORN_CODE_FK],"& _ 
                " [SAC_SAU_CODE_FK], [SAC_GSAC_CODE_FK], [SAC_NOM], [SAC_NOMA], [SAC_DATECR], [SA"& _ 
                "C_DATEMJ], [SAC_ETAT_COMMER], [SAC_DATECOMMER], [SAC_CODE_REF], [SAC_LIBELLE_REF"& _ 
                "], [SAC_TYPE_REF]) VALUES (@SAC_CODE_SQ_PK, @SAC_CDF_ORN_CODE_FK, @SAC_SAU_CODE_"& _ 
                "FK, @SAC_GSAC_CODE_FK, @SAC_NOM, @SAC_NOMA, @SAC_DATECR, @SAC_DATEMJ, @SAC_ETAT_"& _ 
                "COMMER, @SAC_DATECOMMER, @SAC_CODE_REF, @SAC_LIBELLE_REF, @SAC_TYPE_REF);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NO"& _ 
                "M, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_R"& _ 
                "EF, SAC_LIBELLE_REF, SAC_TYPE_REF FROM theriaque.SAC_SUBACTIVE WHERE (SAC_CODE_S"& _ 
                "Q_PK = @SAC_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SAC_SUBACTIVE] SET [SAC_CODE_SQ_PK] = @SAC_CODE_SQ_PK, [SAC_C"& _ 
                "DF_ORN_CODE_FK] = @SAC_CDF_ORN_CODE_FK, [SAC_SAU_CODE_FK] = @SAC_SAU_CODE_FK, [S"& _ 
                "AC_GSAC_CODE_FK] = @SAC_GSAC_CODE_FK, [SAC_NOM] = @SAC_NOM, [SAC_NOMA] = @SAC_NO"& _ 
                "MA, [SAC_DATECR] = @SAC_DATECR, [SAC_DATEMJ] = @SAC_DATEMJ, [SAC_ETAT_COMMER] = "& _ 
                "@SAC_ETAT_COMMER, [SAC_DATECOMMER] = @SAC_DATECOMMER, [SAC_CODE_REF] = @SAC_CODE"& _ 
                "_REF, [SAC_LIBELLE_REF] = @SAC_LIBELLE_REF, [SAC_TYPE_REF] = @SAC_TYPE_REF WHERE"& _ 
                " (([SAC_CODE_SQ_PK] = @Original_SAC_CODE_SQ_PK) AND ((@IsNull_SAC_CDF_ORN_CODE_F"& _ 
                "K = 1 AND [SAC_CDF_ORN_CODE_FK] IS NULL) OR ([SAC_CDF_ORN_CODE_FK] = @Original_S"& _ 
                "AC_CDF_ORN_CODE_FK)) AND ((@IsNull_SAC_SAU_CODE_FK = 1 AND [SAC_SAU_CODE_FK] IS "& _ 
                "NULL) OR ([SAC_SAU_CODE_FK] = @Original_SAC_SAU_CODE_FK)) AND ((@IsNull_SAC_GSAC"& _ 
                "_CODE_FK = 1 AND [SAC_GSAC_CODE_FK] IS NULL) OR ([SAC_GSAC_CODE_FK] = @Original_"& _ 
                "SAC_GSAC_CODE_FK)) AND ([SAC_NOM] = @Original_SAC_NOM) AND ((@IsNull_SAC_NOMA = "& _ 
                "1 AND [SAC_NOMA] IS NULL) OR ([SAC_NOMA] = @Original_SAC_NOMA)) AND ([SAC_DATECR"& _ 
                "] = @Original_SAC_DATECR) AND ((@IsNull_SAC_DATEMJ = 1 AND [SAC_DATEMJ] IS NULL)"& _ 
                " OR ([SAC_DATEMJ] = @Original_SAC_DATEMJ)) AND ((@IsNull_SAC_ETAT_COMMER = 1 AND"& _ 
                " [SAC_ETAT_COMMER] IS NULL) OR ([SAC_ETAT_COMMER] = @Original_SAC_ETAT_COMMER)) "& _ 
                "AND ((@IsNull_SAC_DATECOMMER = 1 AND [SAC_DATECOMMER] IS NULL) OR ([SAC_DATECOMM"& _ 
                "ER] = @Original_SAC_DATECOMMER)) AND ((@IsNull_SAC_CODE_REF = 1 AND [SAC_CODE_RE"& _ 
                "F] IS NULL) OR ([SAC_CODE_REF] = @Original_SAC_CODE_REF)) AND ((@IsNull_SAC_LIBE"& _ 
                "LLE_REF = 1 AND [SAC_LIBELLE_REF] IS NULL) OR ([SAC_LIBELLE_REF] = @Original_SAC"& _ 
                "_LIBELLE_REF)) AND ((@IsNull_SAC_TYPE_REF = 1 AND [SAC_TYPE_REF] IS NULL) OR ([S"& _ 
                "AC_TYPE_REF] = @Original_SAC_TYPE_REF)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAC_CODE_SQ_PK, SAC_CDF_ORN_CO"& _ 
                "DE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NOM, SAC_NOMA, SAC_DATECR, SAC_DAT"& _ 
                "EMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_REF, SAC_LIBELLE_REF, SAC_TYPE_RE"& _ 
                "F FROM theriaque.SAC_SUBACTIVE WHERE (SAC_CODE_SQ_PK = @SAC_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_NOMA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATECOMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_TYPE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.THERIAQUEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SA"& _ 
                "C_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CO"& _ 
                "DE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF FROM theriaque.SAC_SUBACTIVE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SA"& _ 
                "C_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CO"& _ 
                "DE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF FROM theriaque.SAC_SUBACTIVE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where SAC_CO"& _ 
                "DE_SQ_PK =@SAC_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable = New dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable, ByVal SAC_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAC_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal SAC_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAC_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable = New dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SAC_SUBACTIVEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SAC_SUBACTIVE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SAC_CODE_SQ_PK As Integer, ByVal Original_SAC_CDF_ORN_CODE_FK As String, ByVal Original_SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_SAC_NOM As String, ByVal Original_SAC_NOMA As String, ByVal Original_SAC_DATECR As Date, ByVal Original_SAC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_SAC_ETAT_COMMER As String, ByVal Original_SAC_DATECOMMER As Global.System.Nullable(Of Date), ByVal Original_SAC_CODE_REF As String, ByVal Original_SAC_LIBELLE_REF As String, ByVal Original_SAC_TYPE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAC_CODE_SQ_PK,Integer)
            If (Original_SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAC_CDF_ORN_CODE_FK,String)
            End If
            If (Original_SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAC_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_SAC_NOM,String)
            End If
            If (Original_SAC_NOMA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_SAC_NOMA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SAC_DATECR,Date)
            If (Original_SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SAC_ETAT_COMMER,String)
            End If
            If (Original_SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SAC_CODE_REF,String)
            End If
            If (Original_SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SAC_LIBELLE_REF,String)
            End If
            If (Original_SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SAC_TYPE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SAC_CODE_SQ_PK As Integer, ByVal SAC_CDF_ORN_CODE_FK As String, ByVal SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer), ByVal SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal SAC_NOM As String, ByVal SAC_NOMA As String, ByVal SAC_DATECR As Date, ByVal SAC_DATEMJ As Global.System.Nullable(Of Date), ByVal SAC_ETAT_COMMER As String, ByVal SAC_DATECOMMER As Global.System.Nullable(Of Date), ByVal SAC_CODE_REF As String, ByVal SAC_LIBELLE_REF As String, ByVal SAC_TYPE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAC_CODE_SQ_PK,Integer)
            If (SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAC_CDF_ORN_CODE_FK,String)
            End If
            If (SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAC_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SAC_NOM,String)
            End If
            If (SAC_NOMA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SAC_NOMA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(SAC_DATECR,Date)
            If (SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SAC_ETAT_COMMER,String)
            End If
            If (SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SAC_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SAC_CODE_REF,String)
            End If
            If (SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SAC_LIBELLE_REF,String)
            End If
            If (SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SAC_TYPE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SAC_CODE_SQ_PK As Integer,  _
                    ByVal SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_NOM As String,  _
                    ByVal SAC_NOMA As String,  _
                    ByVal SAC_DATECR As Date,  _
                    ByVal SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SAC_ETAT_COMMER As String,  _
                    ByVal SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal SAC_CODE_REF As String,  _
                    ByVal SAC_LIBELLE_REF As String,  _
                    ByVal SAC_TYPE_REF As String,  _
                    ByVal Original_SAC_CODE_SQ_PK As Integer,  _
                    ByVal Original_SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal Original_SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_NOM As String,  _
                    ByVal Original_SAC_NOMA As String,  _
                    ByVal Original_SAC_DATECR As Date,  _
                    ByVal Original_SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_ETAT_COMMER As String,  _
                    ByVal Original_SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_CODE_REF As String,  _
                    ByVal Original_SAC_LIBELLE_REF As String,  _
                    ByVal Original_SAC_TYPE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAC_CODE_SQ_PK,Integer)
            If (SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAC_CDF_ORN_CODE_FK,String)
            End If
            If (SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAC_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SAC_NOM,String)
            End If
            If (SAC_NOMA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SAC_NOMA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SAC_DATECR,Date)
            If (SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SAC_ETAT_COMMER,String)
            End If
            If (SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SAC_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SAC_CODE_REF,String)
            End If
            If (SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SAC_LIBELLE_REF,String)
            End If
            If (SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SAC_TYPE_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SAC_CODE_SQ_PK,Integer)
            If (Original_SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_SAC_CDF_ORN_CODE_FK,String)
            End If
            If (Original_SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAC_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_SAC_NOM,String)
            End If
            If (Original_SAC_NOMA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SAC_NOMA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_SAC_DATECR,Date)
            If (Original_SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SAC_ETAT_COMMER,String)
            End If
            If (Original_SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_SAC_CODE_REF,String)
            End If
            If (Original_SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SAC_LIBELLE_REF,String)
            End If
            If (Original_SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_SAC_TYPE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_NOM As String,  _
                    ByVal SAC_NOMA As String,  _
                    ByVal SAC_DATECR As Date,  _
                    ByVal SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SAC_ETAT_COMMER As String,  _
                    ByVal SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal SAC_CODE_REF As String,  _
                    ByVal SAC_LIBELLE_REF As String,  _
                    ByVal SAC_TYPE_REF As String,  _
                    ByVal Original_SAC_CODE_SQ_PK As Integer,  _
                    ByVal Original_SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal Original_SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_NOM As String,  _
                    ByVal Original_SAC_NOMA As String,  _
                    ByVal Original_SAC_DATECR As Date,  _
                    ByVal Original_SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_ETAT_COMMER As String,  _
                    ByVal Original_SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_CODE_REF As String,  _
                    ByVal Original_SAC_LIBELLE_REF As String,  _
                    ByVal Original_SAC_TYPE_REF As String) As Integer
            Return Me.Update(Original_SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF, Original_SAC_CODE_SQ_PK, Original_SAC_CDF_ORN_CODE_FK, Original_SAC_SAU_CODE_FK, Original_SAC_GSAC_CODE_FK, Original_SAC_NOM, Original_SAC_NOMA, Original_SAC_DATECR, Original_SAC_DATEMJ, Original_SAC_ETAT_COMMER, Original_SAC_DATECOMMER, Original_SAC_CODE_REF, Original_SAC_LIBELLE_REF, Original_SAC_TYPE_REF)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRECPSSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRECPSS"
            tableMapping.ColumnMappings.Add("PRECPSS_PRE_CODE_FK_PK", "PRECPSS_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECPSS_CDF_CPSS_CODE_FK_PK", "PRECPSS_CDF_CPSS_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRECPSS_CIP13", "PRECPSS_CIP13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PRECPSS] WHERE (([PRECPSS_PRE_CODE_FK_PK] = @Original_PR"& _ 
                "ECPSS_PRE_CODE_FK_PK) AND ([PRECPSS_CDF_CPSS_CODE_FK_PK] = @Original_PRECPSS_CDF"& _ 
                "_CPSS_CODE_FK_PK) AND ((@IsNull_PRECPSS_CIP13 = 1 AND [PRECPSS_CIP13] IS NULL) O"& _ 
                "R ([PRECPSS_CIP13] = @Original_PRECPSS_CIP13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECPSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECPSS_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECPSS_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PRECPSS] ([PRECPSS_PRE_CODE_FK_PK], [PRECPSS_CDF_CPSS_CO"& _ 
                "DE_FK_PK], [PRECPSS_CIP13]) VALUES (@PRECPSS_PRE_CODE_FK_PK, @PRECPSS_CDF_CPSS_C"& _ 
                "ODE_FK_PK, @PRECPSS_CIP13);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRECPSS_PRE_CODE_FK_PK, PRECPSS_CDF_CPSS_COD"& _ 
                "E_FK_PK, PRECPSS_CIP13 FROM theriaque.PRECPSS WHERE (PRECPSS_CDF_CPSS_CODE_FK_PK"& _ 
                " = @PRECPSS_CDF_CPSS_CODE_FK_PK) AND (PRECPSS_PRE_CODE_FK_PK = @PRECPSS_PRE_CODE"& _ 
                "_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PRECPSS] SET [PRECPSS_PRE_CODE_FK_PK] = @PRECPSS_PRE_CODE_FK_"& _ 
                "PK, [PRECPSS_CDF_CPSS_CODE_FK_PK] = @PRECPSS_CDF_CPSS_CODE_FK_PK, [PRECPSS_CIP13"& _ 
                "] = @PRECPSS_CIP13 WHERE (([PRECPSS_PRE_CODE_FK_PK] = @Original_PRECPSS_PRE_CODE"& _ 
                "_FK_PK) AND ([PRECPSS_CDF_CPSS_CODE_FK_PK] = @Original_PRECPSS_CDF_CPSS_CODE_FK_"& _ 
                "PK) AND ((@IsNull_PRECPSS_CIP13 = 1 AND [PRECPSS_CIP13] IS NULL) OR ([PRECPSS_CI"& _ 
                "P13] = @Original_PRECPSS_CIP13)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRECPSS_PRE_CODE_FK_PK, PRECPSS_CDF_C"& _ 
                "PSS_CODE_FK_PK, PRECPSS_CIP13 FROM theriaque.PRECPSS WHERE (PRECPSS_CDF_CPSS_COD"& _ 
                "E_FK_PK = @PRECPSS_CDF_CPSS_CODE_FK_PK) AND (PRECPSS_PRE_CODE_FK_PK = @PRECPSS_P"& _ 
                "RE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECPSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CDF_CPSS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRECPSS_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRECPSS_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRECPSS_PRE_CODE_FK_PK, PRECPSS_CDF_CPSS_CODE_FK_PK, PRECPSS_CIP13 FROM th"& _ 
                "eriaque.PRECPSS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRECPSS_PRE_CODE_FK_PK, PRECPSS_CDF_CPSS_CODE_FK_PK, PRECPSS_CIP13 FROM th"& _ 
                "eriaque.PRECPSS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE PRECPSS_PRE_CODE_FK_PK = @PRECPSS_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECPSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECPSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRECPSSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Nomenclature2.PRECPSSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRECPSSDataTable = New dsTheriaque_Nomenclature2.PRECPSSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRECPSSDataTable, ByVal PRECPSS_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECPSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECPSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECPSS_PRE_CODE_FK_PK,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal PRECPSS_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRECPSSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRECPSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECPSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRECPSS_PRE_CODE_FK_PK,String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRECPSSDataTable = New dsTheriaque_Nomenclature2.PRECPSSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRECPSSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRECPSS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRECPSS_PRE_CODE_FK_PK As String, ByVal Original_PRECPSS_CDF_CPSS_CODE_FK_PK As String, ByVal Original_PRECPSS_CIP13 As String) As Integer
            If (Original_PRECPSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECPSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRECPSS_PRE_CODE_FK_PK,String)
            End If
            If (Original_PRECPSS_CDF_CPSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECPSS_CDF_CPSS_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRECPSS_CDF_CPSS_CODE_FK_PK,String)
            End If
            If (Original_PRECPSS_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRECPSS_CIP13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRECPSS_PRE_CODE_FK_PK As String, ByVal PRECPSS_CDF_CPSS_CODE_FK_PK As String, ByVal PRECPSS_CIP13 As String) As Integer
            If (PRECPSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECPSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRECPSS_PRE_CODE_FK_PK,String)
            End If
            If (PRECPSS_CDF_CPSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECPSS_CDF_CPSS_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRECPSS_CDF_CPSS_CODE_FK_PK,String)
            End If
            If (PRECPSS_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRECPSS_CIP13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PRECPSS_PRE_CODE_FK_PK As String, ByVal PRECPSS_CDF_CPSS_CODE_FK_PK As String, ByVal PRECPSS_CIP13 As String, ByVal Original_PRECPSS_PRE_CODE_FK_PK As String, ByVal Original_PRECPSS_CDF_CPSS_CODE_FK_PK As String, ByVal Original_PRECPSS_CIP13 As String) As Integer
            If (PRECPSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECPSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRECPSS_PRE_CODE_FK_PK,String)
            End If
            If (PRECPSS_CDF_CPSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRECPSS_CDF_CPSS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRECPSS_CDF_CPSS_CODE_FK_PK,String)
            End If
            If (PRECPSS_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRECPSS_CIP13,String)
            End If
            If (Original_PRECPSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECPSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PRECPSS_PRE_CODE_FK_PK,String)
            End If
            If (Original_PRECPSS_CDF_CPSS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRECPSS_CDF_CPSS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRECPSS_CDF_CPSS_CODE_FK_PK,String)
            End If
            If (Original_PRECPSS_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRECPSS_CIP13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PRECPSS_CIP13 As String, ByVal Original_PRECPSS_PRE_CODE_FK_PK As String, ByVal Original_PRECPSS_CDF_CPSS_CODE_FK_PK As String, ByVal Original_PRECPSS_CIP13 As String) As Integer
            Return Me.Update(Original_PRECPSS_PRE_CODE_FK_PK, Original_PRECPSS_CDF_CPSS_CODE_FK_PK, PRECPSS_CIP13, Original_PRECPSS_PRE_CODE_FK_PK, Original_PRECPSS_CDF_CPSS_CODE_FK_PK, Original_PRECPSS_CIP13)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COSAU_COMPO_SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COSAU_COMPO_SUBAUX"
            tableMapping.ColumnMappings.Add("COSAU_SAU_CODE_FK_PK", "COSAU_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAU_SP_CODE_FK_PK", "COSAU_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAU_DOSAGE", "COSAU_DOSAGE")
            tableMapping.ColumnMappings.Add("COSAU_UNITEDOSAGE", "COSAU_UNITEDOSAGE")
            tableMapping.ColumnMappings.Add("COSAU_COMPO_NUM_PK", "COSAU_COMPO_NUM_PK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_CODE_FK", "COSAU_GREF_CODE_FK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_DATECR_FK", "COSAU_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_NUMORD", "COSAU_GREF_NUMORD")
            tableMapping.ColumnMappings.Add("COSAU_NUMORD", "COSAU_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[COSAU_COMPO_SUBAUX] WHERE (([COSAU_SAU_CODE_FK_PK] = @Or"& _ 
                "iginal_COSAU_SAU_CODE_FK_PK) AND ([COSAU_SP_CODE_FK_PK] = @Original_COSAU_SP_COD"& _ 
                "E_FK_PK) AND ((@IsNull_COSAU_DOSAGE = 1 AND [COSAU_DOSAGE] IS NULL) OR ([COSAU_D"& _ 
                "OSAGE] = @Original_COSAU_DOSAGE)) AND ((@IsNull_COSAU_UNITEDOSAGE = 1 AND [COSAU"& _ 
                "_UNITEDOSAGE] IS NULL) OR ([COSAU_UNITEDOSAGE] = @Original_COSAU_UNITEDOSAGE)) A"& _ 
                "ND ([COSAU_COMPO_NUM_PK] = @Original_COSAU_COMPO_NUM_PK) AND ((@IsNull_COSAU_GRE"& _ 
                "F_CODE_FK = 1 AND [COSAU_GREF_CODE_FK] IS NULL) OR ([COSAU_GREF_CODE_FK] = @Orig"& _ 
                "inal_COSAU_GREF_CODE_FK)) AND ((@IsNull_COSAU_GREF_DATECR_FK = 1 AND [COSAU_GREF"& _ 
                "_DATECR_FK] IS NULL) OR ([COSAU_GREF_DATECR_FK] = @Original_COSAU_GREF_DATECR_FK"& _ 
                ")) AND ((@IsNull_COSAU_GREF_NUMORD = 1 AND [COSAU_GREF_NUMORD] IS NULL) OR ([COS"& _ 
                "AU_GREF_NUMORD] = @Original_COSAU_GREF_NUMORD)) AND ((@IsNull_COSAU_NUMORD = 1 A"& _ 
                "ND [COSAU_NUMORD] IS NULL) OR ([COSAU_NUMORD] = @Original_COSAU_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[COSAU_COMPO_SUBAUX] ([COSAU_SAU_CODE_FK_PK], [COSAU_SP_C"& _ 
                "ODE_FK_PK], [COSAU_DOSAGE], [COSAU_UNITEDOSAGE], [COSAU_COMPO_NUM_PK], [COSAU_GR"& _ 
                "EF_CODE_FK], [COSAU_GREF_DATECR_FK], [COSAU_GREF_NUMORD], [COSAU_NUMORD]) VALUES"& _ 
                " (@COSAU_SAU_CODE_FK_PK, @COSAU_SP_CODE_FK_PK, @COSAU_DOSAGE, @COSAU_UNITEDOSAGE"& _ 
                ", @COSAU_COMPO_NUM_PK, @COSAU_GREF_CODE_FK, @COSAU_GREF_DATECR_FK, @COSAU_GREF_N"& _ 
                "UMORD, @COSAU_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_"& _ 
                "DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DA"& _ 
                "TECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD FROM theriaque.COSAU_COMPO_SUBAUX WHERE"& _ 
                " (COSAU_COMPO_NUM_PK = @COSAU_COMPO_NUM_PK) AND (COSAU_SAU_CODE_FK_PK = @COSAU_S"& _ 
                "AU_CODE_FK_PK) AND (COSAU_SP_CODE_FK_PK = @COSAU_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[COSAU_COMPO_SUBAUX] SET [COSAU_SAU_CODE_FK_PK] = @COSAU_SAU_C"& _ 
                "ODE_FK_PK, [COSAU_SP_CODE_FK_PK] = @COSAU_SP_CODE_FK_PK, [COSAU_DOSAGE] = @COSAU"& _ 
                "_DOSAGE, [COSAU_UNITEDOSAGE] = @COSAU_UNITEDOSAGE, [COSAU_COMPO_NUM_PK] = @COSAU"& _ 
                "_COMPO_NUM_PK, [COSAU_GREF_CODE_FK] = @COSAU_GREF_CODE_FK, [COSAU_GREF_DATECR_FK"& _ 
                "] = @COSAU_GREF_DATECR_FK, [COSAU_GREF_NUMORD] = @COSAU_GREF_NUMORD, [COSAU_NUMO"& _ 
                "RD] = @COSAU_NUMORD WHERE (([COSAU_SAU_CODE_FK_PK] = @Original_COSAU_SAU_CODE_FK"& _ 
                "_PK) AND ([COSAU_SP_CODE_FK_PK] = @Original_COSAU_SP_CODE_FK_PK) AND ((@IsNull_C"& _ 
                "OSAU_DOSAGE = 1 AND [COSAU_DOSAGE] IS NULL) OR ([COSAU_DOSAGE] = @Original_COSAU"& _ 
                "_DOSAGE)) AND ((@IsNull_COSAU_UNITEDOSAGE = 1 AND [COSAU_UNITEDOSAGE] IS NULL) O"& _ 
                "R ([COSAU_UNITEDOSAGE] = @Original_COSAU_UNITEDOSAGE)) AND ([COSAU_COMPO_NUM_PK]"& _ 
                " = @Original_COSAU_COMPO_NUM_PK) AND ((@IsNull_COSAU_GREF_CODE_FK = 1 AND [COSAU"& _ 
                "_GREF_CODE_FK] IS NULL) OR ([COSAU_GREF_CODE_FK] = @Original_COSAU_GREF_CODE_FK)"& _ 
                ") AND ((@IsNull_COSAU_GREF_DATECR_FK = 1 AND [COSAU_GREF_DATECR_FK] IS NULL) OR "& _ 
                "([COSAU_GREF_DATECR_FK] = @Original_COSAU_GREF_DATECR_FK)) AND ((@IsNull_COSAU_G"& _ 
                "REF_NUMORD = 1 AND [COSAU_GREF_NUMORD] IS NULL) OR ([COSAU_GREF_NUMORD] = @Origi"& _ 
                "nal_COSAU_GREF_NUMORD)) AND ((@IsNull_COSAU_NUMORD = 1 AND [COSAU_NUMORD] IS NUL"& _ 
                "L) OR ([COSAU_NUMORD] = @Original_COSAU_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COSAU_SAU_CODE_FK_PK,"& _ 
                " COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU"& _ 
                "_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD FROM theria"& _ 
                "que.COSAU_COMPO_SUBAUX WHERE (COSAU_COMPO_NUM_PK = @COSAU_COMPO_NUM_PK) AND (COS"& _ 
                "AU_SAU_CODE_FK_PK = @COSAU_SAU_CODE_FK_PK) AND (COSAU_SP_CODE_FK_PK = @COSAU_SP_"& _ 
                "CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_DOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_UNITEDOSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_COMPO_NUM_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COSAU_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COSAU_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE"& _ 
                ", COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMOR"& _ 
                "D, COSAU_NUMORD FROM theriaque.COSAU_COMPO_SUBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE"& _ 
                ", COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMOR"& _ 
                "D, COSAU_NUMORD FROM theriaque.COSAU_COMPO_SUBAUX "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where COSAU_GREF_CODE_FK = @"& _ 
                "COSAU_GREF_CODE_FK and COSAU_GREF_DATECR_FK =@COSAU_GREF_DATECR_FK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        theriaque.COSAU_COMPO_SUBAUX.*  from  theriaque.COSAU_COMPO_SUBAUX,"& _ 
                "  theriaque.SAU_SUBAUXILIAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where COSAU_SAU_CODE_FK_PK = SAU_CODE_SQ_PK and S"& _ 
                "AU_EFFETNOTOIRE = 'O'"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        theriaque.COSAU_COMPO_SUBAUX.*  from  theriaque.COSAU_COMPO_SUBAUX,"& _ 
                "  theriaque.SAU_SUBAUXILIAIRE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where COSAU_SAU_CODE_FK_PK = SAU_CODE_SQ_PK and S"& _ 
                "AU_EFFETNOTOIRE = 'O'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and COSAU_GREF_CODE_FK=@COSAU_GREF_CODE_FK and COSAU_SP_C"& _ 
                "ODE_FK_PK=@COSAU_SP_CODE_FK_PK"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COSAU_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date)) As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COSAU_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNotoire(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNotoire() As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySPGrp(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySPGrp(ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable = New dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.COSAU_COMPO_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "COSAU_COMPO_SUBAUX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, ByVal Original_COSAU_SP_CODE_FK_PK As Integer, ByVal Original_COSAU_DOSAGE As String, ByVal Original_COSAU_UNITEDOSAGE As String, ByVal Original_COSAU_COMPO_NUM_PK As Byte, ByVal Original_COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal Original_COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COSAU_SAU_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COSAU_SP_CODE_FK_PK,Integer)
            If (Original_COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COSAU_DOSAGE,String)
            End If
            If (Original_COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COSAU_UNITEDOSAGE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_COSAU_COMPO_NUM_PK,Byte)
            If (Original_COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COSAU_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_COSAU_GREF_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_COSAU_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_COMPO_NUM_PK As Byte, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COSAU_SAU_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK,Integer)
            If (COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COSAU_DOSAGE,String)
            End If
            If (COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COSAU_UNITEDOSAGE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(COSAU_COMPO_NUM_PK,Byte)
            If (COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(COSAU_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COSAU_GREF_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COSAU_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COSAU_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COSAU_SAU_CODE_FK_PK As Integer,  _
                    ByVal COSAU_SP_CODE_FK_PK As Integer,  _
                    ByVal COSAU_DOSAGE As String,  _
                    ByVal COSAU_UNITEDOSAGE As String,  _
                    ByVal COSAU_COMPO_NUM_PK As Byte,  _
                    ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal COSAU_GREF_NUMORD As Global.System.Nullable(Of Short),  _
                    ByVal COSAU_NUMORD As Global.System.Nullable(Of Short),  _
                    ByVal Original_COSAU_SAU_CODE_FK_PK As Integer,  _
                    ByVal Original_COSAU_SP_CODE_FK_PK As Integer,  _
                    ByVal Original_COSAU_DOSAGE As String,  _
                    ByVal Original_COSAU_UNITEDOSAGE As String,  _
                    ByVal Original_COSAU_COMPO_NUM_PK As Byte,  _
                    ByVal Original_COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal Original_COSAU_GREF_NUMORD As Global.System.Nullable(Of Short),  _
                    ByVal Original_COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COSAU_SAU_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK,Integer)
            If (COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COSAU_DOSAGE,String)
            End If
            If (COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COSAU_UNITEDOSAGE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COSAU_COMPO_NUM_PK,Byte)
            If (COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(COSAU_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (COSAU_GREF_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COSAU_GREF_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COSAU_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COSAU_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COSAU_SAU_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_COSAU_SP_CODE_FK_PK,Integer)
            If (Original_COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_COSAU_DOSAGE,String)
            End If
            If (Original_COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_COSAU_UNITEDOSAGE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_COSAU_COMPO_NUM_PK,Byte)
            If (Original_COSAU_GREF_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_COSAU_GREF_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_COSAU_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_GREF_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_COSAU_GREF_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_COSAU_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_COSAU_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal COSAU_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, ByVal Original_COSAU_SP_CODE_FK_PK As Integer, ByVal Original_COSAU_DOSAGE As String, ByVal Original_COSAU_UNITEDOSAGE As String, ByVal Original_COSAU_COMPO_NUM_PK As Byte, ByVal Original_COSAU_GREF_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_COSAU_GREF_DATECR_FK As Global.System.Nullable(Of Date), ByVal Original_COSAU_GREF_NUMORD As Global.System.Nullable(Of Short), ByVal Original_COSAU_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_COSAU_SAU_CODE_FK_PK, Original_COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, Original_COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD, Original_COSAU_SAU_CODE_FK_PK, Original_COSAU_SP_CODE_FK_PK, Original_COSAU_DOSAGE, Original_COSAU_UNITEDOSAGE, Original_COSAU_COMPO_NUM_PK, Original_COSAU_GREF_CODE_FK, Original_COSAU_GREF_DATECR_FK, Original_COSAU_GREF_NUMORD, Original_COSAU_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PREGREF_PRE_GROUPE_REFTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREGREF_PRE_GROUPE_REF"
            tableMapping.ColumnMappings.Add("PREGREF_GREF_CODE_FK_PK", "PREGREF_GREF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREGREF_PRE_CODE_FK_PK", "PREGREF_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREGREF_DATEENTREE_PK", "PREGREF_DATEENTREE_PK")
            tableMapping.ColumnMappings.Add("PREGREF_GREF_DATECR_FK_PK", "PREGREF_GREF_DATECR_FK_PK")
            tableMapping.ColumnMappings.Add("PREGREF_DATESORTIE", "PREGREF_DATESORTIE")
            tableMapping.ColumnMappings.Add("PREGREF_TYPE_PRE", "PREGREF_TYPE_PRE")
            tableMapping.ColumnMappings.Add("PREGREF_CIP13", "PREGREF_CIP13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PREGREF_PRE_GROUPE_REF] WHERE (([PREGREF_GREF_CODE_FK_PK"& _ 
                "] = @Original_PREGREF_GREF_CODE_FK_PK) AND ([PREGREF_PRE_CODE_FK_PK] = @Original"& _ 
                "_PREGREF_PRE_CODE_FK_PK) AND ([PREGREF_DATEENTREE_PK] = @Original_PREGREF_DATEEN"& _ 
                "TREE_PK) AND ([PREGREF_GREF_DATECR_FK_PK] = @Original_PREGREF_GREF_DATECR_FK_PK)"& _ 
                " AND ((@IsNull_PREGREF_DATESORTIE = 1 AND [PREGREF_DATESORTIE] IS NULL) OR ([PRE"& _ 
                "GREF_DATESORTIE] = @Original_PREGREF_DATESORTIE)) AND ((@IsNull_PREGREF_TYPE_PRE"& _ 
                " = 1 AND [PREGREF_TYPE_PRE] IS NULL) OR ([PREGREF_TYPE_PRE] = @Original_PREGREF_"& _ 
                "TYPE_PRE)) AND ((@IsNull_PREGREF_CIP13 = 1 AND [PREGREF_CIP13] IS NULL) OR ([PRE"& _ 
                "GREF_CIP13] = @Original_PREGREF_CIP13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PREGREF_PRE_GROUPE_REF] ([PREGREF_GREF_CODE_FK_PK], [PRE"& _ 
                "GREF_PRE_CODE_FK_PK], [PREGREF_DATEENTREE_PK], [PREGREF_GREF_DATECR_FK_PK], [PRE"& _ 
                "GREF_DATESORTIE], [PREGREF_TYPE_PRE], [PREGREF_CIP13]) VALUES (@PREGREF_GREF_COD"& _ 
                "E_FK_PK, @PREGREF_PRE_CODE_FK_PK, @PREGREF_DATEENTREE_PK, @PREGREF_GREF_DATECR_F"& _ 
                "K_PK, @PREGREF_DATESORTIE, @PREGREF_TYPE_PRE, @PREGREF_CIP13);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREGREF_G"& _ 
                "REF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATE"& _ 
                "CR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13 FROM theriaque.PRE"& _ 
                "GREF_PRE_GROUPE_REF WHERE (PREGREF_DATEENTREE_PK = @PREGREF_DATEENTREE_PK) AND ("& _ 
                "PREGREF_GREF_CODE_FK_PK = @PREGREF_GREF_CODE_FK_PK) AND (PREGREF_GREF_DATECR_FK_"& _ 
                "PK = @PREGREF_GREF_DATECR_FK_PK) AND (PREGREF_PRE_CODE_FK_PK = @PREGREF_PRE_CODE"& _ 
                "_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PREGREF_PRE_GROUPE_REF] SET [PREGREF_GREF_CODE_FK_PK] = @PREG"& _ 
                "REF_GREF_CODE_FK_PK, [PREGREF_PRE_CODE_FK_PK] = @PREGREF_PRE_CODE_FK_PK, [PREGRE"& _ 
                "F_DATEENTREE_PK] = @PREGREF_DATEENTREE_PK, [PREGREF_GREF_DATECR_FK_PK] = @PREGRE"& _ 
                "F_GREF_DATECR_FK_PK, [PREGREF_DATESORTIE] = @PREGREF_DATESORTIE, [PREGREF_TYPE_P"& _ 
                "RE] = @PREGREF_TYPE_PRE, [PREGREF_CIP13] = @PREGREF_CIP13 WHERE (([PREGREF_GREF_"& _ 
                "CODE_FK_PK] = @Original_PREGREF_GREF_CODE_FK_PK) AND ([PREGREF_PRE_CODE_FK_PK] ="& _ 
                " @Original_PREGREF_PRE_CODE_FK_PK) AND ([PREGREF_DATEENTREE_PK] = @Original_PREG"& _ 
                "REF_DATEENTREE_PK) AND ([PREGREF_GREF_DATECR_FK_PK] = @Original_PREGREF_GREF_DAT"& _ 
                "ECR_FK_PK) AND ((@IsNull_PREGREF_DATESORTIE = 1 AND [PREGREF_DATESORTIE] IS NULL"& _ 
                ") OR ([PREGREF_DATESORTIE] = @Original_PREGREF_DATESORTIE)) AND ((@IsNull_PREGRE"& _ 
                "F_TYPE_PRE = 1 AND [PREGREF_TYPE_PRE] IS NULL) OR ([PREGREF_TYPE_PRE] = @Origina"& _ 
                "l_PREGREF_TYPE_PRE)) AND ((@IsNull_PREGREF_CIP13 = 1 AND [PREGREF_CIP13] IS NULL"& _ 
                ") OR ([PREGREF_CIP13] = @Original_PREGREF_CIP13)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREGREF_GREF_CODE_FK"& _ 
                "_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATECR_FK_PK, P"& _ 
                "REGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13 FROM theriaque.PREGREF_PRE_GR"& _ 
                "OUPE_REF WHERE (PREGREF_DATEENTREE_PK = @PREGREF_DATEENTREE_PK) AND (PREGREF_GRE"& _ 
                "F_CODE_FK_PK = @PREGREF_GREF_CODE_FK_PK) AND (PREGREF_GREF_DATECR_FK_PK = @PREGR"& _ 
                "EF_GREF_DATECR_FK_PK) AND (PREGREF_PRE_CODE_FK_PK = @PREGREF_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PR" & _
                "EGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13 FRO" & _
                "M theriaque.PREGREF_PRE_GROUPE_REF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE" & _
                "_PK, PREGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         P" & _
                "REGREF_TYPE_PRE, PREGREF_CIP13" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            theriaque.PREGREF_PRE_GROUPE_REF" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (PREGREF_GREF_CODE_FK_PK = @PREGREF_GREF_CODE_FK_PK) AND (PREGREF" & _
                "_GREF_DATECR_FK_PK = @PREGREF_GREF_DATECR_FK_PK)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable = New dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable, ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_GREF_DATECR_FK_PK As Date) As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            Dim dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable = New dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREGREF_PRE_GROUPE_REF")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREGREF_GREF_CODE_FK_PK As Integer, ByVal Original_PREGREF_PRE_CODE_FK_PK As String, ByVal Original_PREGREF_DATEENTREE_PK As Date, ByVal Original_PREGREF_GREF_DATECR_FK_PK As Date, ByVal Original_PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal Original_PREGREF_TYPE_PRE As String, ByVal Original_PREGREF_CIP13 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREGREF_GREF_CODE_FK_PK, Integer)
            If (Original_PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREGREF_GREF_DATECR_FK_PK, Date)
            If (Original_PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PREGREF_TYPE_PRE, String)
            End If
            If (Original_PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PREGREF_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date, ByVal PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            If (PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            If (PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PREGREF_TYPE_PRE, String)
            End If
            If (PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PREGREF_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date, ByVal PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String, ByVal Original_PREGREF_GREF_CODE_FK_PK As Integer, ByVal Original_PREGREF_PRE_CODE_FK_PK As String, ByVal Original_PREGREF_DATEENTREE_PK As Date, ByVal Original_PREGREF_GREF_DATECR_FK_PK As Date, ByVal Original_PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal Original_PREGREF_TYPE_PRE As String, ByVal Original_PREGREF_CIP13 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            If (PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            If (PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PREGREF_TYPE_PRE, String)
            End If
            If (PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PREGREF_CIP13, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PREGREF_GREF_CODE_FK_PK, Integer)
            If (Original_PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PREGREF_GREF_DATECR_FK_PK, Date)
            If (Original_PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PREGREF_TYPE_PRE, String)
            End If
            If (Original_PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PREGREF_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String, ByVal Original_PREGREF_GREF_CODE_FK_PK As Integer, ByVal Original_PREGREF_PRE_CODE_FK_PK As String, ByVal Original_PREGREF_DATEENTREE_PK As Date, ByVal Original_PREGREF_GREF_DATECR_FK_PK As Date, ByVal Original_PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal Original_PREGREF_TYPE_PRE As String, ByVal Original_PREGREF_CIP13 As String) As Integer
            Return Me.Update(Original_PREGREF_GREF_CODE_FK_PK, Original_PREGREF_PRE_CODE_FK_PK, Original_PREGREF_DATEENTREE_PK, Original_PREGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13, Original_PREGREF_GREF_CODE_FK_PK, Original_PREGREF_PRE_CODE_FK_PK, Original_PREGREF_DATEENTREE_PK, Original_PREGREF_GREF_DATECR_FK_PK, Original_PREGREF_DATESORTIE, Original_PREGREF_TYPE_PRE, Original_PREGREF_CIP13)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPGREFG_GROUPE_SPE_GENETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPGREFG_GROUPE_SPE_GENE"
            tableMapping.ColumnMappings.Add("SPGREFG_SP_CODE_FK_PK", "SPGREFG_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPGREFG_GREF_CODE_FK_PK", "SPGREFG_GREF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPGREFG_GREF_DATECR_FK_PK", "SPGREFG_GREF_DATECR_FK_PK")
            tableMapping.ColumnMappings.Add("SPGREFG_DATEEG_PK", "SPGREFG_DATEEG_PK")
            tableMapping.ColumnMappings.Add("SPGREFG_DATESG", "SPGREFG_DATESG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SPGREFG_GROUPE_SPE_GENE] WHERE (([SPGREFG_SP_CODE_FK_PK]" & _
                " = @Original_SPGREFG_SP_CODE_FK_PK) AND ([SPGREFG_GREF_CODE_FK_PK] = @Original_S" & _
                "PGREFG_GREF_CODE_FK_PK) AND ([SPGREFG_GREF_DATECR_FK_PK] = @Original_SPGREFG_GRE" & _
                "F_DATECR_FK_PK) AND ([SPGREFG_DATEEG_PK] = @Original_SPGREFG_DATEEG_PK) AND ((@I" & _
                "sNull_SPGREFG_DATESG = 1 AND [SPGREFG_DATESG] IS NULL) OR ([SPGREFG_DATESG] = @O" & _
                "riginal_SPGREFG_DATESG)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_DATEEG_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATEEG_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPGREFG_DATESG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATESG", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_DATESG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATESG", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SPGREFG_GROUPE_SPE_GENE] ([SPGREFG_SP_CODE_FK_PK], [SPGR" & _
                "EFG_GREF_CODE_FK_PK], [SPGREFG_GREF_DATECR_FK_PK], [SPGREFG_DATEEG_PK], [SPGREFG" & _
                "_DATESG]) VALUES (@SPGREFG_SP_CODE_FK_PK, @SPGREFG_GREF_CODE_FK_PK, @SPGREFG_GRE" & _
                "F_DATECR_FK_PK, @SPGREFG_DATEEG_PK, @SPGREFG_DATESG);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPGREFG_SP_CODE_FK" & _
                "_PK, SPGREFG_GREF_CODE_FK_PK, SPGREFG_GREF_DATECR_FK_PK, SPGREFG_DATEEG_PK, SPGR" & _
                "EFG_DATESG FROM theriaque.SPGREFG_GROUPE_SPE_GENE WHERE (SPGREFG_DATEEG_PK = @SP" & _
                "GREFG_DATEEG_PK) AND (SPGREFG_GREF_CODE_FK_PK = @SPGREFG_GREF_CODE_FK_PK) AND (S" & _
                "PGREFG_GREF_DATECR_FK_PK = @SPGREFG_GREF_DATECR_FK_PK) AND (SPGREFG_SP_CODE_FK_P" & _
                "K = @SPGREFG_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_DATEEG_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATEEG_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_DATESG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATESG", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SPGREFG_GROUPE_SPE_GENE] SET [SPGREFG_SP_CODE_FK_PK] = @SPGRE" & _
                "FG_SP_CODE_FK_PK, [SPGREFG_GREF_CODE_FK_PK] = @SPGREFG_GREF_CODE_FK_PK, [SPGREFG" & _
                "_GREF_DATECR_FK_PK] = @SPGREFG_GREF_DATECR_FK_PK, [SPGREFG_DATEEG_PK] = @SPGREFG" & _
                "_DATEEG_PK, [SPGREFG_DATESG] = @SPGREFG_DATESG WHERE (([SPGREFG_SP_CODE_FK_PK] =" & _
                " @Original_SPGREFG_SP_CODE_FK_PK) AND ([SPGREFG_GREF_CODE_FK_PK] = @Original_SPG" & _
                "REFG_GREF_CODE_FK_PK) AND ([SPGREFG_GREF_DATECR_FK_PK] = @Original_SPGREFG_GREF_" & _
                "DATECR_FK_PK) AND ([SPGREFG_DATEEG_PK] = @Original_SPGREFG_DATEEG_PK) AND ((@IsN" & _
                "ull_SPGREFG_DATESG = 1 AND [SPGREFG_DATESG] IS NULL) OR ([SPGREFG_DATESG] = @Ori" & _
                "ginal_SPGREFG_DATESG)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPGREFG_SP_CODE_FK_PK, SPGREFG_GREF_CODE_FK_PK," & _
                " SPGREFG_GREF_DATECR_FK_PK, SPGREFG_DATEEG_PK, SPGREFG_DATESG FROM theriaque.SPG" & _
                "REFG_GROUPE_SPE_GENE WHERE (SPGREFG_DATEEG_PK = @SPGREFG_DATEEG_PK) AND (SPGREFG" & _
                "_GREF_CODE_FK_PK = @SPGREFG_GREF_CODE_FK_PK) AND (SPGREFG_GREF_DATECR_FK_PK = @S" & _
                "PGREFG_GREF_DATECR_FK_PK) AND (SPGREFG_SP_CODE_FK_PK = @SPGREFG_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_DATEEG_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATEEG_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_DATESG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATESG", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_DATEEG_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATEEG_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPGREFG_DATESG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATESG", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPGREFG_DATESG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_DATESG", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPGREFG_SP_CODE_FK_PK, SPGREFG_GREF_CODE_FK_PK, SPGREFG_GREF_DATECR_FK_PK," & _
                " SPGREFG_DATEEG_PK, SPGREFG_DATESG FROM theriaque.SPGREFG_GROUPE_SPE_GENE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where" & _
                " SPGREFG_GREF_CODE_FK_PK =@SPGREFG_GREF_CODE_FK_PK " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and SPGREFG_GREF_DATECR_FK_" & _
                "PK=@SPGREFG_GREF_DATECR_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SPGREFG_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPGREFG_DATEEG_PK, SPGREFG_DATESG, SPGREFG_GREF_CODE_FK_PK, SPGREFG_GREF_D" & _
                "ATECR_FK_PK, SPGREFG_SP_CODE_FK_PK FROM theriaque.SPGREFG_GROUPE_SPE_GENE "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable, ByVal SPGREFG_GREF_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPGREFG_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SPGREFG_GREF_DATECR_FK_PK, Date)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPGREFG_GREF_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_DATECR_FK_PK As Date) As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPGREFG_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SPGREFG_GREF_DATECR_FK_PK, Date)
            Dim dataTable As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable = New dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable = New dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SPGREFG_GROUPE_SPE_GENEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SPGREFG_GROUPE_SPE_GENE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPGREFG_SP_CODE_FK_PK As Integer, ByVal Original_SPGREFG_GREF_CODE_FK_PK As Integer, ByVal Original_SPGREFG_GREF_DATECR_FK_PK As Date, ByVal Original_SPGREFG_DATEEG_PK As Date, ByVal Original_SPGREFG_DATESG As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPGREFG_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPGREFG_GREF_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPGREFG_GREF_DATECR_FK_PK, Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPGREFG_DATEEG_PK, Date)
            If (Original_SPGREFG_DATESG.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SPGREFG_DATESG.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPGREFG_SP_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_DATECR_FK_PK As Date, ByVal SPGREFG_DATEEG_PK As Date, ByVal SPGREFG_DATESG As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPGREFG_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPGREFG_GREF_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPGREFG_GREF_DATECR_FK_PK, Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPGREFG_DATEEG_PK, Date)
            If (SPGREFG_DATESG.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPGREFG_DATESG.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPGREFG_SP_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_CODE_FK_PK As Integer, ByVal SPGREFG_GREF_DATECR_FK_PK As Date, ByVal SPGREFG_DATEEG_PK As Date, ByVal SPGREFG_DATESG As Global.System.Nullable(Of Date), ByVal Original_SPGREFG_SP_CODE_FK_PK As Integer, ByVal Original_SPGREFG_GREF_CODE_FK_PK As Integer, ByVal Original_SPGREFG_GREF_DATECR_FK_PK As Date, ByVal Original_SPGREFG_DATEEG_PK As Date, ByVal Original_SPGREFG_DATESG As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPGREFG_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPGREFG_GREF_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPGREFG_GREF_DATECR_FK_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPGREFG_DATEEG_PK, Date)
            If (SPGREFG_DATESG.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPGREFG_DATESG.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPGREFG_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPGREFG_GREF_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SPGREFG_GREF_DATECR_FK_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPGREFG_DATEEG_PK, Date)
            If (Original_SPGREFG_DATESG.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SPGREFG_DATESG.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPGREFG_DATESG As Global.System.Nullable(Of Date), ByVal Original_SPGREFG_SP_CODE_FK_PK As Integer, ByVal Original_SPGREFG_GREF_CODE_FK_PK As Integer, ByVal Original_SPGREFG_GREF_DATECR_FK_PK As Date, ByVal Original_SPGREFG_DATEEG_PK As Date, ByVal Original_SPGREFG_DATESG As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_SPGREFG_SP_CODE_FK_PK, Original_SPGREFG_GREF_CODE_FK_PK, Original_SPGREFG_GREF_DATECR_FK_PK, Original_SPGREFG_DATEEG_PK, SPGREFG_DATESG, Original_SPGREFG_SP_CODE_FK_PK, Original_SPGREFG_GREF_CODE_FK_PK, Original_SPGREFG_GREF_DATECR_FK_PK, Original_SPGREFG_DATEEG_PK, Original_SPGREFG_DATESG)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PREGREF_PRE_GROUPE_REF1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREGREF_PRE_GROUPE_REF1"
            tableMapping.ColumnMappings.Add("PREGREF_GREF_CODE_FK_PK", "PREGREF_GREF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREGREF_PRE_CODE_FK_PK", "PREGREF_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREGREF_DATEENTREE_PK", "PREGREF_DATEENTREE_PK")
            tableMapping.ColumnMappings.Add("PREGREF_GREF_DATECR_FK_PK", "PREGREF_GREF_DATECR_FK_PK")
            tableMapping.ColumnMappings.Add("PREGREF_DATESORTIE", "PREGREF_DATESORTIE")
            tableMapping.ColumnMappings.Add("PREGREF_TYPE_PRE", "PREGREF_TYPE_PRE")
            tableMapping.ColumnMappings.Add("PREGREF_CIP13", "PREGREF_CIP13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PREGREF_PRE_GROUPE_REF] WHERE (([PREGREF_GREF_CODE_FK_PK"& _ 
                "] = @Original_PREGREF_GREF_CODE_FK_PK) AND ([PREGREF_PRE_CODE_FK_PK] = @Original"& _ 
                "_PREGREF_PRE_CODE_FK_PK) AND ([PREGREF_DATEENTREE_PK] = @Original_PREGREF_DATEEN"& _ 
                "TREE_PK) AND ([PREGREF_GREF_DATECR_FK_PK] = @Original_PREGREF_GREF_DATECR_FK_PK)"& _ 
                " AND ((@IsNull_PREGREF_DATESORTIE = 1 AND [PREGREF_DATESORTIE] IS NULL) OR ([PRE"& _ 
                "GREF_DATESORTIE] = @Original_PREGREF_DATESORTIE)) AND ((@IsNull_PREGREF_TYPE_PRE"& _ 
                " = 1 AND [PREGREF_TYPE_PRE] IS NULL) OR ([PREGREF_TYPE_PRE] = @Original_PREGREF_"& _ 
                "TYPE_PRE)) AND ((@IsNull_PREGREF_CIP13 = 1 AND [PREGREF_CIP13] IS NULL) OR ([PRE"& _ 
                "GREF_CIP13] = @Original_PREGREF_CIP13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PREGREF_PRE_GROUPE_REF] ([PREGREF_GREF_CODE_FK_PK], [PRE"& _ 
                "GREF_PRE_CODE_FK_PK], [PREGREF_DATEENTREE_PK], [PREGREF_GREF_DATECR_FK_PK], [PRE"& _ 
                "GREF_DATESORTIE], [PREGREF_TYPE_PRE], [PREGREF_CIP13]) VALUES (@PREGREF_GREF_COD"& _ 
                "E_FK_PK, @PREGREF_PRE_CODE_FK_PK, @PREGREF_DATEENTREE_PK, @PREGREF_GREF_DATECR_F"& _ 
                "K_PK, @PREGREF_DATESORTIE, @PREGREF_TYPE_PRE, @PREGREF_CIP13);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREGREF_G"& _ 
                "REF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATE"& _ 
                "CR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13 FROM theriaque.PRE"& _ 
                "GREF_PRE_GROUPE_REF WHERE (PREGREF_DATEENTREE_PK = @PREGREF_DATEENTREE_PK) AND ("& _ 
                "PREGREF_GREF_CODE_FK_PK = @PREGREF_GREF_CODE_FK_PK) AND (PREGREF_GREF_DATECR_FK_"& _ 
                "PK = @PREGREF_GREF_DATECR_FK_PK) AND (PREGREF_PRE_CODE_FK_PK = @PREGREF_PRE_CODE"& _ 
                "_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PREGREF_PRE_GROUPE_REF] SET [PREGREF_GREF_CODE_FK_PK] = @PREG"& _ 
                "REF_GREF_CODE_FK_PK, [PREGREF_PRE_CODE_FK_PK] = @PREGREF_PRE_CODE_FK_PK, [PREGRE"& _ 
                "F_DATEENTREE_PK] = @PREGREF_DATEENTREE_PK, [PREGREF_GREF_DATECR_FK_PK] = @PREGRE"& _ 
                "F_GREF_DATECR_FK_PK, [PREGREF_DATESORTIE] = @PREGREF_DATESORTIE, [PREGREF_TYPE_P"& _ 
                "RE] = @PREGREF_TYPE_PRE, [PREGREF_CIP13] = @PREGREF_CIP13 WHERE (([PREGREF_GREF_"& _ 
                "CODE_FK_PK] = @Original_PREGREF_GREF_CODE_FK_PK) AND ([PREGREF_PRE_CODE_FK_PK] ="& _ 
                " @Original_PREGREF_PRE_CODE_FK_PK) AND ([PREGREF_DATEENTREE_PK] = @Original_PREG"& _ 
                "REF_DATEENTREE_PK) AND ([PREGREF_GREF_DATECR_FK_PK] = @Original_PREGREF_GREF_DAT"& _ 
                "ECR_FK_PK) AND ((@IsNull_PREGREF_DATESORTIE = 1 AND [PREGREF_DATESORTIE] IS NULL"& _ 
                ") OR ([PREGREF_DATESORTIE] = @Original_PREGREF_DATESORTIE)) AND ((@IsNull_PREGRE"& _ 
                "F_TYPE_PRE = 1 AND [PREGREF_TYPE_PRE] IS NULL) OR ([PREGREF_TYPE_PRE] = @Origina"& _ 
                "l_PREGREF_TYPE_PRE)) AND ((@IsNull_PREGREF_CIP13 = 1 AND [PREGREF_CIP13] IS NULL"& _ 
                ") OR ([PREGREF_CIP13] = @Original_PREGREF_CIP13)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREGREF_GREF_CODE_FK"& _ 
                "_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PREGREF_GREF_DATECR_FK_PK, P"& _ 
                "REGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13 FROM theriaque.PREGREF_PRE_GR"& _ 
                "OUPE_REF WHERE (PREGREF_DATEENTREE_PK = @PREGREF_DATEENTREE_PK) AND (PREGREF_GRE"& _ 
                "F_CODE_FK_PK = @PREGREF_GREF_CODE_FK_PK) AND (PREGREF_GREF_DATECR_FK_PK = @PREGR"& _ 
                "EF_GREF_DATECR_FK_PK) AND (PREGREF_PRE_CODE_FK_PK = @PREGREF_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATEENTREE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATEENTREE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_DATESORTIE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_DATESORTIE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_TYPE_PRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_TYPE_PRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREGREF_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREGREF_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE_PK, PR" & _
                "EGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13 FRO" & _
                "M theriaque.PREGREF_PRE_GROUPE_REF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        PREGREF_GREF_CODE_FK_PK, PREGREF_PRE_CODE_FK_PK, PREGREF_DATEENTREE" & _
                "_PK, PREGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         P" & _
                "REGREF_TYPE_PRE, PREGREF_CIP13" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            theriaque.PREGREF_PRE_GROUPE_REF" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (PREGREF_GREF_CODE_FK_PK = @PREGREF_GREF_CODE_FK_PK) AND (PREGREF" & _
                "_GREF_DATECR_FK_PK = @PREGREF_GREF_DATECR_FK_PK)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREGREF_GREF_DATECR_FK_PK", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PREGREF_GREF_DATECR_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable = New dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable, ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_GREF_DATECR_FK_PK As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_GREF_DATECR_FK_PK As Date) As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            Dim dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable = New dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREGREF_PRE_GROUPE_REF1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREGREF_PRE_GROUPE_REF1")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREGREF_GREF_CODE_FK_PK As Integer, ByVal Original_PREGREF_PRE_CODE_FK_PK As String, ByVal Original_PREGREF_DATEENTREE_PK As Date, ByVal Original_PREGREF_GREF_DATECR_FK_PK As Date, ByVal Original_PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal Original_PREGREF_TYPE_PRE As String, ByVal Original_PREGREF_CIP13 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREGREF_GREF_CODE_FK_PK, Integer)
            If (Original_PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREGREF_GREF_DATECR_FK_PK, Date)
            If (Original_PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PREGREF_TYPE_PRE, String)
            End If
            If (Original_PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PREGREF_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date, ByVal PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            If (PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            If (PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PREGREF_TYPE_PRE, String)
            End If
            If (PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PREGREF_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREGREF_GREF_CODE_FK_PK As Integer, ByVal PREGREF_PRE_CODE_FK_PK As String, ByVal PREGREF_DATEENTREE_PK As Date, ByVal PREGREF_GREF_DATECR_FK_PK As Date, ByVal PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String, ByVal Original_PREGREF_GREF_CODE_FK_PK As Integer, ByVal Original_PREGREF_PRE_CODE_FK_PK As String, ByVal Original_PREGREF_DATEENTREE_PK As Date, ByVal Original_PREGREF_GREF_DATECR_FK_PK As Date, ByVal Original_PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal Original_PREGREF_TYPE_PRE As String, ByVal Original_PREGREF_CIP13 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREGREF_GREF_CODE_FK_PK, Integer)
            If (PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREGREF_GREF_DATECR_FK_PK, Date)
            If (PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PREGREF_TYPE_PRE, String)
            End If
            If (PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PREGREF_CIP13, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PREGREF_GREF_CODE_FK_PK, Integer)
            If (Original_PREGREF_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREGREF_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PREGREF_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PREGREF_DATEENTREE_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PREGREF_GREF_DATECR_FK_PK, Date)
            If (Original_PREGREF_DATESORTIE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PREGREF_DATESORTIE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PREGREF_TYPE_PRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PREGREF_TYPE_PRE, String)
            End If
            If (Original_PREGREF_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PREGREF_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal PREGREF_TYPE_PRE As String, ByVal PREGREF_CIP13 As String, ByVal Original_PREGREF_GREF_CODE_FK_PK As Integer, ByVal Original_PREGREF_PRE_CODE_FK_PK As String, ByVal Original_PREGREF_DATEENTREE_PK As Date, ByVal Original_PREGREF_GREF_DATECR_FK_PK As Date, ByVal Original_PREGREF_DATESORTIE As Global.System.Nullable(Of Date), ByVal Original_PREGREF_TYPE_PRE As String, ByVal Original_PREGREF_CIP13 As String) As Integer
            Return Me.Update(Original_PREGREF_GREF_CODE_FK_PK, Original_PREGREF_PRE_CODE_FK_PK, Original_PREGREF_DATEENTREE_PK, Original_PREGREF_GREF_DATECR_FK_PK, PREGREF_DATESORTIE, PREGREF_TYPE_PRE, PREGREF_CIP13, Original_PREGREF_GREF_CODE_FK_PK, Original_PREGREF_PRE_CODE_FK_PK, Original_PREGREF_DATEENTREE_PK, Original_PREGREF_GREF_DATECR_FK_PK, Original_PREGREF_DATESORTIE, Original_PREGREF_TYPE_PRE, Original_PREGREF_CIP13)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRIPRE_PRIX_PRESENTATIONTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRIPRE_PRIX_PRESENTATION"
            tableMapping.ColumnMappings.Add("PRIPRE_DATE_APPLI_PK", "PRIPRE_DATE_APPLI_PK")
            tableMapping.ColumnMappings.Add("PRIPRE_PRE_CODE_FK_PK", "PRIPRE_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PRIPRE_PRIX", "PRIPRE_PRIX")
            tableMapping.ColumnMappings.Add("PRIPRE_PRIX_EURO", "PRIPRE_PRIX_EURO")
            tableMapping.ColumnMappings.Add("PRIPRE_Valide", "PRIPRE_Valide")
            tableMapping.ColumnMappings.Add("PRIPRE_CIP13", "PRIPRE_CIP13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PRIPRE_PRIX_PRESENTATION] WHERE (([PRIPRE_DATE_APPLI_PK]" & _
                " = @Original_PRIPRE_DATE_APPLI_PK) AND ([PRIPRE_PRE_CODE_FK_PK] = @Original_PRIP" & _
                "RE_PRE_CODE_FK_PK) AND ((@IsNull_PRIPRE_PRIX = 1 AND [PRIPRE_PRIX] IS NULL) OR (" & _
                "[PRIPRE_PRIX] = @Original_PRIPRE_PRIX)) AND ((@IsNull_PRIPRE_PRIX_EURO = 1 AND [" & _
                "PRIPRE_PRIX_EURO] IS NULL) OR ([PRIPRE_PRIX_EURO] = @Original_PRIPRE_PRIX_EURO))" & _
                " AND ((@IsNull_PRIPRE_Valide = 1 AND [PRIPRE_Valide] IS NULL) OR ([PRIPRE_Valide" & _
                "] = @Original_PRIPRE_Valide)) AND ((@IsNull_PRIPRE_CIP13 = 1 AND [PRIPRE_CIP13] " & _
                "IS NULL) OR ([PRIPRE_CIP13] = @Original_PRIPRE_CIP13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_PRIX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRIX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_PRIX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "PRIPRE_PRIX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_PRIX_EURO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRIX_EURO", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_PRIX_EURO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "PRIPRE_PRIX_EURO", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_Valide", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_Valide", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_Valide", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_CIP13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_CIP13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PRIPRE_PRIX_PRESENTATION] ([PRIPRE_DATE_APPLI_PK], [PRIP" & _
                "RE_PRE_CODE_FK_PK], [PRIPRE_PRIX], [PRIPRE_PRIX_EURO], [PRIPRE_Valide], [PRIPRE_" & _
                "CIP13]) VALUES (@PRIPRE_DATE_APPLI_PK, @PRIPRE_PRE_CODE_FK_PK, @PRIPRE_PRIX, @PR" & _
                "IPRE_PRIX_EURO, @PRIPRE_Valide, @PRIPRE_CIP13);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRIPRE_DATE_APPLI_PK, PR" & _
                "IPRE_PRE_CODE_FK_PK, PRIPRE_PRIX, PRIPRE_PRIX_EURO, PRIPRE_Valide, PRIPRE_CIP13 " & _
                "FROM theriaque.PRIPRE_PRIX_PRESENTATION WHERE (PRIPRE_DATE_APPLI_PK = @PRIPRE_DA" & _
                "TE_APPLI_PK) AND (PRIPRE_PRE_CODE_FK_PK = @PRIPRE_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRIX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "PRIPRE_PRIX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRIX_EURO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "PRIPRE_PRIX_EURO", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_Valide", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_CIP13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PRIPRE_PRIX_PRESENTATION] SET [PRIPRE_DATE_APPLI_PK] = @PRIPR" & _
                "E_DATE_APPLI_PK, [PRIPRE_PRE_CODE_FK_PK] = @PRIPRE_PRE_CODE_FK_PK, [PRIPRE_PRIX]" & _
                " = @PRIPRE_PRIX, [PRIPRE_PRIX_EURO] = @PRIPRE_PRIX_EURO, [PRIPRE_Valide] = @PRIP" & _
                "RE_Valide, [PRIPRE_CIP13] = @PRIPRE_CIP13 WHERE (([PRIPRE_DATE_APPLI_PK] = @Orig" & _
                "inal_PRIPRE_DATE_APPLI_PK) AND ([PRIPRE_PRE_CODE_FK_PK] = @Original_PRIPRE_PRE_C" & _
                "ODE_FK_PK) AND ((@IsNull_PRIPRE_PRIX = 1 AND [PRIPRE_PRIX] IS NULL) OR ([PRIPRE_" & _
                "PRIX] = @Original_PRIPRE_PRIX)) AND ((@IsNull_PRIPRE_PRIX_EURO = 1 AND [PRIPRE_P" & _
                "RIX_EURO] IS NULL) OR ([PRIPRE_PRIX_EURO] = @Original_PRIPRE_PRIX_EURO)) AND ((@" & _
                "IsNull_PRIPRE_Valide = 1 AND [PRIPRE_Valide] IS NULL) OR ([PRIPRE_Valide] = @Ori" & _
                "ginal_PRIPRE_Valide)) AND ((@IsNull_PRIPRE_CIP13 = 1 AND [PRIPRE_CIP13] IS NULL)" & _
                " OR ([PRIPRE_CIP13] = @Original_PRIPRE_CIP13)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRIPRE_DATE_APPLI_PK, P" & _
                "RIPRE_PRE_CODE_FK_PK, PRIPRE_PRIX, PRIPRE_PRIX_EURO, PRIPRE_Valide, PRIPRE_CIP13" & _
                " FROM theriaque.PRIPRE_PRIX_PRESENTATION WHERE (PRIPRE_DATE_APPLI_PK = @PRIPRE_D" & _
                "ATE_APPLI_PK) AND (PRIPRE_PRE_CODE_FK_PK = @PRIPRE_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRIX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "PRIPRE_PRIX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRIX_EURO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "PRIPRE_PRIX_EURO", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_Valide", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_CIP13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_PRIX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRIX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_PRIX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "PRIPRE_PRIX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_PRIX_EURO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRIX_EURO", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_PRIX_EURO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "PRIPRE_PRIX_EURO", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_Valide", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_Valide", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_Valide", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRIPRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_CIP13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRIPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_CIP13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRIPRE_DATE_APPLI_PK, PRIPRE_PRE_CODE_FK_PK, PRIPRE_PRIX, PRIPRE_PRIX_EURO" & _
                ", PRIPRE_Valide, PRIPRE_CIP13 FROM theriaque.PRIPRE_PRIX_PRESENTATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRIPRE_DATE_APPLI_PK, PRIPRE_PRE_CODE_FK_PK, PRIPRE_PRIX, PRIPRE_PRIX_EURO" & _
                ", PRIPRE_Valide, PRIPRE_CIP13 FROM theriaque.PRIPRE_PRIX_PRESENTATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRI" & _
                "PRE_PRE_CODE_FK_PK=@PRIPRE_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRIPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PRIPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable = New dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable, ByVal PRIPRE_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRIPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRIPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRIPRE_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRIPRE_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRIPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRIPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRIPRE_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable = New dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PRIPRE_PRIX_PRESENTATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PRIPRE_PRIX_PRESENTATION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRIPRE_DATE_APPLI_PK As Date, ByVal Original_PRIPRE_PRE_CODE_FK_PK As String, ByVal Original_PRIPRE_PRIX As Global.System.Nullable(Of Decimal), ByVal Original_PRIPRE_PRIX_EURO As Global.System.Nullable(Of Decimal), ByVal Original_PRIPRE_Valide As Global.System.Nullable(Of Boolean), ByVal Original_PRIPRE_CIP13 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRIPRE_DATE_APPLI_PK, Date)
            If (Original_PRIPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRIPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRIPRE_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRIPRE_PRIX.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRIPRE_PRIX.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIPRE_PRIX_EURO.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PRIPRE_PRIX_EURO.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIPRE_Valide.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PRIPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIPRE_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PRIPRE_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRIPRE_DATE_APPLI_PK As Date, ByVal PRIPRE_PRE_CODE_FK_PK As String, ByVal PRIPRE_PRIX As Global.System.Nullable(Of Decimal), ByVal PRIPRE_PRIX_EURO As Global.System.Nullable(Of Decimal), ByVal PRIPRE_Valide As Global.System.Nullable(Of Boolean), ByVal PRIPRE_CIP13 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRIPRE_DATE_APPLI_PK, Date)
            If (PRIPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRIPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRIPRE_PRE_CODE_FK_PK, String)
            End If
            If (PRIPRE_PRIX.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRIPRE_PRIX.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PRIPRE_PRIX_EURO.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRIPRE_PRIX_EURO.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRIPRE_Valide.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRIPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PRIPRE_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRIPRE_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRIPRE_DATE_APPLI_PK As Date, ByVal PRIPRE_PRE_CODE_FK_PK As String, ByVal PRIPRE_PRIX As Global.System.Nullable(Of Decimal), ByVal PRIPRE_PRIX_EURO As Global.System.Nullable(Of Decimal), ByVal PRIPRE_Valide As Global.System.Nullable(Of Boolean), ByVal PRIPRE_CIP13 As String, ByVal Original_PRIPRE_DATE_APPLI_PK As Date, ByVal Original_PRIPRE_PRE_CODE_FK_PK As String, ByVal Original_PRIPRE_PRIX As Global.System.Nullable(Of Decimal), ByVal Original_PRIPRE_PRIX_EURO As Global.System.Nullable(Of Decimal), ByVal Original_PRIPRE_Valide As Global.System.Nullable(Of Boolean), ByVal Original_PRIPRE_CIP13 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRIPRE_DATE_APPLI_PK, Date)
            If (PRIPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRIPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRIPRE_PRE_CODE_FK_PK, String)
            End If
            If (PRIPRE_PRIX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRIPRE_PRIX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PRIPRE_PRIX_EURO.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRIPRE_PRIX_EURO.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRIPRE_Valide.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRIPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PRIPRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRIPRE_CIP13, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRIPRE_DATE_APPLI_PK, Date)
            If (Original_PRIPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRIPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRIPRE_PRE_CODE_FK_PK, String)
            End If
            If (Original_PRIPRE_PRIX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PRIPRE_PRIX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIPRE_PRIX_EURO.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PRIPRE_PRIX_EURO.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIPRE_Valide.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PRIPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIPRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PRIPRE_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRIPRE_PRIX As Global.System.Nullable(Of Decimal), ByVal PRIPRE_PRIX_EURO As Global.System.Nullable(Of Decimal), ByVal PRIPRE_Valide As Global.System.Nullable(Of Boolean), ByVal PRIPRE_CIP13 As String, ByVal Original_PRIPRE_DATE_APPLI_PK As Date, ByVal Original_PRIPRE_PRE_CODE_FK_PK As String, ByVal Original_PRIPRE_PRIX As Global.System.Nullable(Of Decimal), ByVal Original_PRIPRE_PRIX_EURO As Global.System.Nullable(Of Decimal), ByVal Original_PRIPRE_Valide As Global.System.Nullable(Of Boolean), ByVal Original_PRIPRE_CIP13 As String) As Integer
            Return Me.Update(Original_PRIPRE_DATE_APPLI_PK, Original_PRIPRE_PRE_CODE_FK_PK, PRIPRE_PRIX, PRIPRE_PRIX_EURO, PRIPRE_Valide, PRIPRE_CIP13, Original_PRIPRE_DATE_APPLI_PK, Original_PRIPRE_PRE_CODE_FK_PK, Original_PRIPRE_PRIX, Original_PRIPRE_PRIX_EURO, Original_PRIPRE_Valide, Original_PRIPRE_CIP13)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FORPRE_FORFAIT_PRETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FORPRE_FORFAIT_PRE"
            tableMapping.ColumnMappings.Add("FORPRE_PRE_CODE_FK_PK", "FORPRE_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FORPRE_DATE_PK", "FORPRE_DATE_PK")
            tableMapping.ColumnMappings.Add("FORPRE_FORFAIT", "FORPRE_FORFAIT")
            tableMapping.ColumnMappings.Add("FORPRE_Valide", "FORPRE_Valide")
            tableMapping.ColumnMappings.Add("FORPRE_CIP13", "FORPRE_CIP13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FORPRE_FORFAIT_PRE] WHERE (([FORPRE_PRE_CODE_FK_PK] = @O"& _ 
                "riginal_FORPRE_PRE_CODE_FK_PK) AND ([FORPRE_DATE_PK] = @Original_FORPRE_DATE_PK)"& _ 
                " AND ((@IsNull_FORPRE_FORFAIT = 1 AND [FORPRE_FORFAIT] IS NULL) OR ([FORPRE_FORF"& _ 
                "AIT] = @Original_FORPRE_FORFAIT)) AND ((@IsNull_FORPRE_Valide = 1 AND [FORPRE_Va"& _ 
                "lide] IS NULL) OR ([FORPRE_Valide] = @Original_FORPRE_Valide)) AND ((@IsNull_FOR"& _ 
                "PRE_CIP13 = 1 AND [FORPRE_CIP13] IS NULL) OR ([FORPRE_CIP13] = @Original_FORPRE_"& _ 
                "CIP13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORPRE_FORFAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_FORFAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_FORFAIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "FORPRE_FORFAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORPRE_Valide", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_Valide", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_Valide", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORPRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FORPRE_FORFAIT_PRE] ([FORPRE_PRE_CODE_FK_PK], [FORPRE_DA"& _ 
                "TE_PK], [FORPRE_FORFAIT], [FORPRE_Valide], [FORPRE_CIP13]) VALUES (@FORPRE_PRE_C"& _ 
                "ODE_FK_PK, @FORPRE_DATE_PK, @FORPRE_FORFAIT, @FORPRE_Valide, @FORPRE_CIP13);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT FORPRE_PRE_CODE_FK_PK, FORPRE_DATE_PK, FORPRE_FORFAIT, FORPRE_Valide, FORPR"& _ 
                "E_CIP13 FROM theriaque.FORPRE_FORFAIT_PRE WHERE (FORPRE_DATE_PK = @FORPRE_DATE_P"& _ 
                "K) AND (FORPRE_PRE_CODE_FK_PK = @FORPRE_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_FORFAIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "FORPRE_FORFAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_Valide", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FORPRE_FORFAIT_PRE] SET [FORPRE_PRE_CODE_FK_PK] = @FORPRE_PRE"& _ 
                "_CODE_FK_PK, [FORPRE_DATE_PK] = @FORPRE_DATE_PK, [FORPRE_FORFAIT] = @FORPRE_FORF"& _ 
                "AIT, [FORPRE_Valide] = @FORPRE_Valide, [FORPRE_CIP13] = @FORPRE_CIP13 WHERE (([F"& _ 
                "ORPRE_PRE_CODE_FK_PK] = @Original_FORPRE_PRE_CODE_FK_PK) AND ([FORPRE_DATE_PK] ="& _ 
                " @Original_FORPRE_DATE_PK) AND ((@IsNull_FORPRE_FORFAIT = 1 AND [FORPRE_FORFAIT]"& _ 
                " IS NULL) OR ([FORPRE_FORFAIT] = @Original_FORPRE_FORFAIT)) AND ((@IsNull_FORPRE"& _ 
                "_Valide = 1 AND [FORPRE_Valide] IS NULL) OR ([FORPRE_Valide] = @Original_FORPRE_"& _ 
                "Valide)) AND ((@IsNull_FORPRE_CIP13 = 1 AND [FORPRE_CIP13] IS NULL) OR ([FORPRE_"& _ 
                "CIP13] = @Original_FORPRE_CIP13)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FORPRE_PRE_CODE_FK_PK, FORPRE_DATE_P"& _ 
                "K, FORPRE_FORFAIT, FORPRE_Valide, FORPRE_CIP13 FROM theriaque.FORPRE_FORFAIT_PRE"& _ 
                " WHERE (FORPRE_DATE_PK = @FORPRE_DATE_PK) AND (FORPRE_PRE_CODE_FK_PK = @FORPRE_P"& _ 
                "RE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_FORFAIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "FORPRE_FORFAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_Valide", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORPRE_FORFAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_FORFAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_FORFAIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "FORPRE_FORFAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORPRE_Valide", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_Valide", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_Valide", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_Valide", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORPRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORPRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FORPRE_PRE_CODE_FK_PK, FORPRE_DATE_PK, FORPRE_FORFAIT, FORPRE_Valide, FORP" & _
                "RE_CIP13 FROM theriaque.FORPRE_FORFAIT_PRE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FORPRE_PRE_CODE_FK_PK, FORPRE_DATE_PK, FORPRE_FORFAIT, FORPRE_Valide, FORP" & _
                "RE_CIP13 FROM theriaque.FORPRE_FORFAIT_PRE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FORPRE_PRE_CODE_FK_PK=@FORPRE" & _
                "_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORPRE_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "FORPRE_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable = New dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable, ByVal FORPRE_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FORPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FORPRE_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FORPRE_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (FORPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FORPRE_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable = New dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.FORPRE_FORFAIT_PREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "FORPRE_FORFAIT_PRE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FORPRE_PRE_CODE_FK_PK As String, ByVal Original_FORPRE_DATE_PK As Date, ByVal Original_FORPRE_FORFAIT As Global.System.Nullable(Of Decimal), ByVal Original_FORPRE_Valide As Global.System.Nullable(Of Boolean), ByVal Original_FORPRE_CIP13 As String) As Integer
            If (Original_FORPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FORPRE_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FORPRE_DATE_PK, Date)
            If (Original_FORPRE_FORFAIT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FORPRE_FORFAIT.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_FORPRE_Valide.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FORPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_FORPRE_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FORPRE_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FORPRE_PRE_CODE_FK_PK As String, ByVal FORPRE_DATE_PK As Date, ByVal FORPRE_FORFAIT As Global.System.Nullable(Of Decimal), ByVal FORPRE_Valide As Global.System.Nullable(Of Boolean), ByVal FORPRE_CIP13 As String) As Integer
            If (FORPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FORPRE_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FORPRE_DATE_PK, Date)
            If (FORPRE_FORFAIT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FORPRE_FORFAIT.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FORPRE_Valide.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FORPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FORPRE_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FORPRE_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FORPRE_PRE_CODE_FK_PK As String, ByVal FORPRE_DATE_PK As Date, ByVal FORPRE_FORFAIT As Global.System.Nullable(Of Decimal), ByVal FORPRE_Valide As Global.System.Nullable(Of Boolean), ByVal FORPRE_CIP13 As String, ByVal Original_FORPRE_PRE_CODE_FK_PK As String, ByVal Original_FORPRE_DATE_PK As Date, ByVal Original_FORPRE_FORFAIT As Global.System.Nullable(Of Decimal), ByVal Original_FORPRE_Valide As Global.System.Nullable(Of Boolean), ByVal Original_FORPRE_CIP13 As String) As Integer
            If (FORPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FORPRE_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FORPRE_DATE_PK, Date)
            If (FORPRE_FORFAIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FORPRE_FORFAIT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FORPRE_Valide.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FORPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FORPRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FORPRE_CIP13, String)
            End If
            If (Original_FORPRE_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORPRE_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FORPRE_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FORPRE_DATE_PK, Date)
            If (Original_FORPRE_FORFAIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FORPRE_FORFAIT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_FORPRE_Valide.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FORPRE_Valide.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_FORPRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FORPRE_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FORPRE_FORFAIT As Global.System.Nullable(Of Decimal), ByVal FORPRE_Valide As Global.System.Nullable(Of Boolean), ByVal FORPRE_CIP13 As String, ByVal Original_FORPRE_PRE_CODE_FK_PK As String, ByVal Original_FORPRE_DATE_PK As Date, ByVal Original_FORPRE_FORFAIT As Global.System.Nullable(Of Decimal), ByVal Original_FORPRE_Valide As Global.System.Nullable(Of Boolean), ByVal Original_FORPRE_CIP13 As String) As Integer
            Return Me.Update(Original_FORPRE_PRE_CODE_FK_PK, Original_FORPRE_DATE_PK, FORPRE_FORFAIT, FORPRE_Valide, FORPRE_CIP13, Original_FORPRE_PRE_CODE_FK_PK, Original_FORPRE_DATE_PK, Original_FORPRE_FORFAIT, Original_FORPRE_Valide, Original_FORPRE_CIP13)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CDF_CODIFTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDF_CODIF"
            tableMapping.ColumnMappings.Add("CDF_NUMERO_PK", "CDF_NUMERO_PK")
            tableMapping.ColumnMappings.Add("CDF_CODE_PK", "CDF_CODE_PK")
            tableMapping.ColumnMappings.Add("CDF_NOM", "CDF_NOM")
            tableMapping.ColumnMappings.Add("CDF_DATECR", "CDF_DATECR")
            tableMapping.ColumnMappings.Add("CDF_DATEMJ", "CDF_DATEMJ")
            tableMapping.ColumnMappings.Add("CDF_VAL_NUM", "CDF_VAL_NUM")
            tableMapping.ColumnMappings.Add("CDF_NOMABRG", "CDF_NOMABRG")
            tableMapping.ColumnMappings.Add("CDF_UNIT_NUM", "CDF_UNIT_NUM")
            tableMapping.ColumnMappings.Add("CDF_TEXTE", "CDF_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[CDF_CODIF] WHERE (([CDF_NUMERO_PK] = @Original_CDF_NUMER" & _
                "O_PK) AND ([CDF_CODE_PK] = @Original_CDF_CODE_PK) AND ([CDF_NOM] = @Original_CDF" & _
                "_NOM) AND ([CDF_DATECR] = @Original_CDF_DATECR) AND ((@IsNull_CDF_DATEMJ = 1 AND" & _
                " [CDF_DATEMJ] IS NULL) OR ([CDF_DATEMJ] = @Original_CDF_DATEMJ)) AND ((@IsNull_C" & _
                "DF_VAL_NUM = 1 AND [CDF_VAL_NUM] IS NULL) OR ([CDF_VAL_NUM] = @Original_CDF_VAL_" & _
                "NUM)) AND ([CDF_NOMABRG] = @Original_CDF_NOMABRG) AND ([CDF_UNIT_NUM] = @Origina" & _
                "l_CDF_UNIT_NUM))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_VAL_NUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CDF_CODIF] ([CDF_NUMERO_PK], [CDF_CODE_PK], [CDF_NOM], [" & _
                "CDF_DATECR], [CDF_DATEMJ], [CDF_VAL_NUM], [CDF_NOMABRG], [CDF_UNIT_NUM], [CDF_TE" & _
                "XTE]) VALUES (@CDF_NUMERO_PK, @CDF_CODE_PK, @CDF_NOM, @CDF_DATECR, @CDF_DATEMJ, " & _
                "@CDF_VAL_NUM, @CDF_NOMABRG, @CDF_UNIT_NUM, @CDF_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDF_NUMERO_PK, C" & _
                "DF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_" & _
                "NUM, CDF_TEXTE FROM theriaque.CDF_CODIF WHERE (CDF_CODE_PK = @CDF_CODE_PK) AND (" & _
                "CDF_NUMERO_PK = @CDF_NUMERO_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[CDF_CODIF] SET [CDF_NUMERO_PK] = @CDF_NUMERO_PK, [CDF_CODE_PK" & _
                "] = @CDF_CODE_PK, [CDF_NOM] = @CDF_NOM, [CDF_DATECR] = @CDF_DATECR, [CDF_DATEMJ]" & _
                " = @CDF_DATEMJ, [CDF_VAL_NUM] = @CDF_VAL_NUM, [CDF_NOMABRG] = @CDF_NOMABRG, [CDF" & _
                "_UNIT_NUM] = @CDF_UNIT_NUM, [CDF_TEXTE] = @CDF_TEXTE WHERE (([CDF_NUMERO_PK] = @" & _
                "Original_CDF_NUMERO_PK) AND ([CDF_CODE_PK] = @Original_CDF_CODE_PK) AND ([CDF_NO" & _
                "M] = @Original_CDF_NOM) AND ([CDF_DATECR] = @Original_CDF_DATECR) AND ((@IsNull_" & _
                "CDF_DATEMJ = 1 AND [CDF_DATEMJ] IS NULL) OR ([CDF_DATEMJ] = @Original_CDF_DATEMJ" & _
                ")) AND ((@IsNull_CDF_VAL_NUM = 1 AND [CDF_VAL_NUM] IS NULL) OR ([CDF_VAL_NUM] = " & _
                "@Original_CDF_VAL_NUM)) AND ([CDF_NOMABRG] = @Original_CDF_NOMABRG) AND ([CDF_UN" & _
                "IT_NUM] = @Original_CDF_UNIT_NUM));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM," & _
                " CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM " & _
                "theriaque.CDF_CODIF WHERE (CDF_CODE_PK = @CDF_CODE_PK) AND (CDF_NUMERO_PK = @CDF" & _
                "_NUMERO_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_VAL_NUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, " & _
                "CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM theriaque.CDF_CODIF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, " & _
                "CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM theriaque.CDF_CODIF " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CDF_NUMERO" & _
                "_PK=@CDF_NUMERO_PK and CDF_CODE_PK=@CDF_CODE_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, " & _
                "CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM theriaque.CDF_CODIF " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  CDF_NUMER" & _
                "O_PK='19'"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, " & _
                "CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM theriaque.CDF_CODIF " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CDF_NUMERO" & _
                "_PK=@CDF_NUMERO_PK"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, " & _
                "CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM theriaque.CDF_CODIF " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CDF_NUMERO" & _
                "_PK='18'"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable = New dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable, ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable = New dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByDosage(ByVal dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByDosage() As dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable = New dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByNumero(ByVal dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable, ByVal CDF_NUMERO_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByNumero(ByVal CDF_NUMERO_PK As String) As dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable = New dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByVoieAdministration(ByVal dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByVoieAdministration() As dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Dim dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable = New dsTheriaque_Nomenclature2.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.CDF_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "CDF_CODIF")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDF_NUMERO_PK As String, ByVal Original_CDF_CODE_PK As String, ByVal Original_CDF_NOM As String, ByVal Original_CDF_DATECR As Date, ByVal Original_CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal Original_CDF_NOMABRG As String, ByVal Original_CDF_UNIT_NUM As String) As Integer
            If (Original_CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDF_NUMERO_PK, String)
            End If
            If (Original_CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDF_CODE_PK, String)
            End If
            If (Original_CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CDF_NOM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDF_DATECR, Date)
            If (Original_CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_VAL_NUM.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CDF_VAL_NUM.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOMABRG")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CDF_NOMABRG, String)
            End If
            If (Original_CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_UNIT_NUM")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CDF_UNIT_NUM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String) As Integer
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            If (CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDF_NOM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDF_DATECR, Date)
            If (CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CDF_VAL_NUM.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CDF_VAL_NUM.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOMABRG")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CDF_NOMABRG, String)
            End If
            If (CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_UNIT_NUM")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CDF_UNIT_NUM, String)
            End If
            If (CDF_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CDF_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal CDF_NUMERO_PK As String, _
                    ByVal CDF_CODE_PK As String, _
                    ByVal CDF_NOM As String, _
                    ByVal CDF_DATECR As Date, _
                    ByVal CDF_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal CDF_VAL_NUM As Global.System.Nullable(Of Decimal), _
                    ByVal CDF_NOMABRG As String, _
                    ByVal CDF_UNIT_NUM As String, _
                    ByVal CDF_TEXTE As String, _
                    ByVal Original_CDF_NUMERO_PK As String, _
                    ByVal Original_CDF_CODE_PK As String, _
                    ByVal Original_CDF_NOM As String, _
                    ByVal Original_CDF_DATECR As Date, _
                    ByVal Original_CDF_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_CDF_VAL_NUM As Global.System.Nullable(Of Decimal), _
                    ByVal Original_CDF_NOMABRG As String, _
                    ByVal Original_CDF_UNIT_NUM As String) As Integer
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            If (CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDF_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDF_DATECR, Date)
            If (CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CDF_VAL_NUM.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CDF_VAL_NUM.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOMABRG")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CDF_NOMABRG, String)
            End If
            If (CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_UNIT_NUM")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CDF_UNIT_NUM, String)
            End If
            If (CDF_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CDF_TEXTE, String)
            End If
            If (Original_CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CDF_NUMERO_PK, String)
            End If
            If (Original_CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDF_CODE_PK, String)
            End If
            If (Original_CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CDF_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CDF_DATECR, Date)
            If (Original_CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_VAL_NUM.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CDF_VAL_NUM.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOMABRG")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CDF_NOMABRG, String)
            End If
            If (Original_CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_UNIT_NUM")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CDF_UNIT_NUM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDF_NOM As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String, ByVal Original_CDF_NUMERO_PK As String, ByVal Original_CDF_CODE_PK As String, ByVal Original_CDF_NOM As String, ByVal Original_CDF_DATECR As Date, ByVal Original_CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal Original_CDF_NOMABRG As String, ByVal Original_CDF_UNIT_NUM As String) As Integer
            Return Me.Update(Original_CDF_NUMERO_PK, Original_CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE, Original_CDF_NUMERO_PK, Original_CDF_CODE_PK, Original_CDF_NOM, Original_CDF_DATECR, Original_CDF_DATEMJ, Original_CDF_VAL_NUM, Original_CDF_NOMABRG, Original_CDF_UNIT_NUM)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CDFCDFU_CDFUTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFCDFU_CDFU"
            tableMapping.ColumnMappings.Add("CDFCDFU_CDFUCUM_CODE_FK_PK", "CDFCDFU_CDFUCUM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CDFCDFU_CDF_NUMERO_FK_PK", "CDFCDFU_CDF_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("CDFCDFU_CDF_CODE_FK_PK", "CDFCDFU_CDF_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CDFCDFU_CDFU] ([CDFCDFU_CDFUCUM_CODE_FK_PK], [CDFCDFU_CD"& _ 
                "F_NUMERO_FK_PK], [CDFCDFU_CDF_CODE_FK_PK]) VALUES (@CDFCDFU_CDFUCUM_CODE_FK_PK, "& _ 
                "@CDFCDFU_CDF_NUMERO_FK_PK, @CDFCDFU_CDF_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFCDFU_CDFUCUM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFCDFU_CDFUCUM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFCDFU_CDF_NUMERO_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFCDFU_CDF_NUMERO_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFCDFU_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFCDFU_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFCDFU_CDFUCUM_CODE_FK_PK, CDFCDFU_CDF_NUMERO_FK_PK, CDFCDFU_CDF_CODE_FK_" & _
                "PK FROM theriaque.CDFCDFU_CDFU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFCDFU_CDFUCUM_CODE_FK_PK, CDFCDFU_CDF_NUMERO_FK_PK, CDFCDFU_CDF_CODE_FK_" & _
                "PK FROM theriaque.CDFCDFU_CDFU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CDFCDFU_CDF_NUMERO_FK_PK=@CDFCDFU_CDF_NUME" & _
                "RO_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CDFCDFU_CDF_CODE_FK_PK=@CDFCDFU_CDF_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFCDFU_CDF_NUMERO_FK_PK", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFCDFU_CDF_NUMERO_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFCDFU_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFCDFU_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable = New dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable, ByVal CDFCDFU_CDF_NUMERO_FK_PK As String, ByVal CDFCDFU_CDF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFCDFU_CDF_NUMERO_FK_PK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFCDFU_CDF_NUMERO_FK_PK, String)
            End If
            If (CDFCDFU_CDF_CODE_FK_PK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFCDFU_CDF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFCDFU_CDF_NUMERO_FK_PK As String, ByVal CDFCDFU_CDF_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFCDFU_CDF_NUMERO_FK_PK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFCDFU_CDF_NUMERO_FK_PK, String)
            End If
            If (CDFCDFU_CDF_CODE_FK_PK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFCDFU_CDF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable = New dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.CDFCDFU_CDFUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "CDFCDFU_CDFU")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFCDFU_CDFUCUM_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal CDFCDFU_CDF_NUMERO_FK_PK As String, ByVal CDFCDFU_CDF_CODE_FK_PK As String) As Integer
            If (CDFCDFU_CDFUCUM_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFCDFU_CDFUCUM_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CDFCDFU_CDF_NUMERO_FK_PK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFCDFU_CDF_NUMERO_FK_PK, String)
            End If
            If (CDFCDFU_CDF_CODE_FK_PK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFCDFU_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CATVO_CATEGORIEVOIETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CATVO_CATEGORIEVOIE"
            tableMapping.ColumnMappings.Add("CATVO_CDF_CAT_CODE_FK_PK", "CATVO_CDF_CAT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CATVO_CDF_VO_CODE_FK_PK", "CATVO_CDF_VO_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[CATVO_CATEGORIEVOIE] WHERE (([CATVO_CDF_CAT_CODE_FK_PK] " & _
                "= @Original_CATVO_CDF_CAT_CODE_FK_PK) AND ([CATVO_CDF_VO_CODE_FK_PK] = @Original" & _
                "_CATVO_CDF_VO_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CATVO_CATEGORIEVOIE] ([CATVO_CDF_CAT_CODE_FK_PK], [CATVO" & _
                "_CDF_VO_CODE_FK_PK]) VALUES (@CATVO_CDF_CAT_CODE_FK_PK, @CATVO_CDF_VO_CODE_FK_PK" & _
                ");" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CATVO_CDF_CAT_CODE_FK_PK, CATVO_CDF_VO_CODE_FK_PK FROM theriaque.CATV" & _
                "O_CATEGORIEVOIE WHERE (CATVO_CDF_CAT_CODE_FK_PK = @CATVO_CDF_CAT_CODE_FK_PK) AND" & _
                " (CATVO_CDF_VO_CODE_FK_PK = @CATVO_CDF_VO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[CATVO_CATEGORIEVOIE] SET [CATVO_CDF_CAT_CODE_FK_PK] = @CATVO_" & _
                "CDF_CAT_CODE_FK_PK, [CATVO_CDF_VO_CODE_FK_PK] = @CATVO_CDF_VO_CODE_FK_PK WHERE (" & _
                "([CATVO_CDF_CAT_CODE_FK_PK] = @Original_CATVO_CDF_CAT_CODE_FK_PK) AND ([CATVO_CD" & _
                "F_VO_CODE_FK_PK] = @Original_CATVO_CDF_VO_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CATVO_CDF_CAT_CO" & _
                "DE_FK_PK, CATVO_CDF_VO_CODE_FK_PK FROM theriaque.CATVO_CATEGORIEVOIE WHERE (CATV" & _
                "O_CDF_CAT_CODE_FK_PK = @CATVO_CDF_CAT_CODE_FK_PK) AND (CATVO_CDF_VO_CODE_FK_PK =" & _
                " @CATVO_CDF_VO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CATVO_CDF_CAT_CODE_FK_PK, CATVO_CDF_VO_CODE_FK_PK FROM theriaque.CATVO_CAT" & _
                "EGORIEVOIE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CATVO_CDF_CAT_CODE_FK_PK, CATVO_CDF_VO_CODE_FK_PK FROM theriaque.CATVO_CAT" & _
                "EGORIEVOIE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CATVO_CDF_VO_CODE_FK_PK=@CATVO_CDF_VO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CATVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable = New dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable, ByVal CATVO_CDF_VO_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CATVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CATVO_CDF_VO_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CATVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATVO_CDF_VO_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable = New dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.CATVO_CATEGORIEVOIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "CATVO_CATEGORIEVOIE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CATVO_CDF_CAT_CODE_FK_PK As String, ByVal Original_CATVO_CDF_VO_CODE_FK_PK As String) As Integer
            If (Original_CATVO_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATVO_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CATVO_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_CATVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CATVO_CDF_VO_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CATVO_CDF_CAT_CODE_FK_PK As String, ByVal CATVO_CDF_VO_CODE_FK_PK As String) As Integer
            If (CATVO_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATVO_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CATVO_CDF_CAT_CODE_FK_PK, String)
            End If
            If (CATVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CATVO_CDF_VO_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CATVO_CDF_CAT_CODE_FK_PK As String, ByVal CATVO_CDF_VO_CODE_FK_PK As String, ByVal Original_CATVO_CDF_CAT_CODE_FK_PK As String, ByVal Original_CATVO_CDF_VO_CODE_FK_PK As String) As Integer
            If (CATVO_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATVO_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CATVO_CDF_CAT_CODE_FK_PK, String)
            End If
            If (CATVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CATVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_CATVO_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATVO_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_CATVO_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_CATVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CATVO_CDF_VO_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_CATVO_CDF_CAT_CODE_FK_PK As String, ByVal Original_CATVO_CDF_VO_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_CATVO_CDF_CAT_CODE_FK_PK, Original_CATVO_CDF_VO_CODE_FK_PK, Original_CATVO_CDF_CAT_CODE_FK_PK, Original_CATVO_CDF_VO_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FOV_FORME_VIRTUELLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FOV_FORME_VIRTUELLE"
            tableMapping.ColumnMappings.Add("FOV_CODE_SQ_PK", "FOV_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FOV_LIBELLE", "FOV_LIBELLE")
            tableMapping.ColumnMappings.Add("FOV_CODE_REF", "FOV_CODE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FOV_FORME_VIRTUELLE] WHERE (([FOV_CODE_SQ_PK] = @Origina"& _ 
                "l_FOV_CODE_SQ_PK) AND ((@IsNull_FOV_LIBELLE = 1 AND [FOV_LIBELLE] IS NULL) OR (["& _ 
                "FOV_LIBELLE] = @Original_FOV_LIBELLE)) AND ((@IsNull_FOV_CODE_REF = 1 AND [FOV_C"& _ 
                "ODE_REF] IS NULL) OR ([FOV_CODE_REF] = @Original_FOV_CODE_REF)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FOV_FORME_VIRTUELLE] ([FOV_CODE_SQ_PK], [FOV_LIBELLE], ["& _ 
                "FOV_CODE_REF]) VALUES (@FOV_CODE_SQ_PK, @FOV_LIBELLE, @FOV_CODE_REF);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FO"& _ 
                "V_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF FROM theriaque.FOV_FORME_VIRTUELLE WHERE"& _ 
                " (FOV_CODE_SQ_PK = @FOV_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FOV_FORME_VIRTUELLE] SET [FOV_CODE_SQ_PK] = @FOV_CODE_SQ_PK, "& _ 
                "[FOV_LIBELLE] = @FOV_LIBELLE, [FOV_CODE_REF] = @FOV_CODE_REF WHERE (([FOV_CODE_S"& _ 
                "Q_PK] = @Original_FOV_CODE_SQ_PK) AND ((@IsNull_FOV_LIBELLE = 1 AND [FOV_LIBELLE"& _ 
                "] IS NULL) OR ([FOV_LIBELLE] = @Original_FOV_LIBELLE)) AND ((@IsNull_FOV_CODE_RE"& _ 
                "F = 1 AND [FOV_CODE_REF] IS NULL) OR ([FOV_CODE_REF] = @Original_FOV_CODE_REF)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF FROM theriaque.FOV_FORME_VIR"& _ 
                "TUELLE WHERE (FOV_CODE_SQ_PK = @FOV_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF FROM theriaque.FOV_FORME_VIRTUEL" & _
                "LE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.FOV_FORME_VIRTUELLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.FOV_FORME_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.FOV_FORME_VIRTUELLEDataTable = New dsTheriaque_Nomenclature2.FOV_FORME_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.FOV_FORME_VIRTUELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "FOV_FORME_VIRTUELLE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FOV_CODE_SQ_PK As Integer, ByVal Original_FOV_LIBELLE As String, ByVal Original_FOV_CODE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FOV_CODE_SQ_PK, Integer)
            If (Original_FOV_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FOV_LIBELLE, String)
            End If
            If (Original_FOV_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FOV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FOV_CODE_SQ_PK As Integer, ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FOV_CODE_SQ_PK, Integer)
            If (FOV_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FOV_LIBELLE, String)
            End If
            If (FOV_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FOV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FOV_CODE_SQ_PK As Integer, ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String, ByVal Original_FOV_CODE_SQ_PK As Integer, ByVal Original_FOV_LIBELLE As String, ByVal Original_FOV_CODE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FOV_CODE_SQ_PK, Integer)
            If (FOV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FOV_LIBELLE, String)
            End If
            If (FOV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FOV_CODE_REF, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FOV_CODE_SQ_PK, Integer)
            If (Original_FOV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FOV_LIBELLE, String)
            End If
            If (Original_FOV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FOV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String, ByVal Original_FOV_CODE_SQ_PK As Integer, ByVal Original_FOV_LIBELLE As String, ByVal Original_FOV_CODE_REF As String) As Integer
            Return Me.Update(Original_FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF, Original_FOV_CODE_SQ_PK, Original_FOV_LIBELLE, Original_FOV_CODE_REF)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SAV_SUBSTANCE_VIRTUELLETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAV_SUBSTANCE_VIRTUELLE"
            tableMapping.ColumnMappings.Add("SAV_CODE_SQ_PK", "SAV_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SAV_LIBELLE", "SAV_LIBELLE")
            tableMapping.ColumnMappings.Add("SAV_CODE_REF", "SAV_CODE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SAV_SUBSTANCE_VIRTUELLE] WHERE (([SAV_CODE_SQ_PK] = @Ori" & _
                "ginal_SAV_CODE_SQ_PK) AND ((@IsNull_SAV_LIBELLE = 1 AND [SAV_LIBELLE] IS NULL) O" & _
                "R ([SAV_LIBELLE] = @Original_SAV_LIBELLE)) AND ((@IsNull_SAV_CODE_REF = 1 AND [S" & _
                "AV_CODE_REF] IS NULL) OR ([SAV_CODE_REF] = @Original_SAV_CODE_REF)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SAV_SUBSTANCE_VIRTUELLE] ([SAV_CODE_SQ_PK], [SAV_LIBELLE" & _
                "], [SAV_CODE_REF]) VALUES (@SAV_CODE_SQ_PK, @SAV_LIBELLE, @SAV_CODE_REF);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBSTANCE_VIRTUEL" & _
                "LE WHERE (SAV_CODE_SQ_PK = @SAV_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SAV_SUBSTANCE_VIRTUELLE] SET [SAV_CODE_SQ_PK] = @SAV_CODE_SQ_" & _
                "PK, [SAV_LIBELLE] = @SAV_LIBELLE, [SAV_CODE_REF] = @SAV_CODE_REF WHERE (([SAV_CO" & _
                "DE_SQ_PK] = @Original_SAV_CODE_SQ_PK) AND ((@IsNull_SAV_LIBELLE = 1 AND [SAV_LIB" & _
                "ELLE] IS NULL) OR ([SAV_LIBELLE] = @Original_SAV_LIBELLE)) AND ((@IsNull_SAV_COD" & _
                "E_REF = 1 AND [SAV_CODE_REF] IS NULL) OR ([SAV_CODE_REF] = @Original_SAV_CODE_RE" & _
                "F)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBST" & _
                "ANCE_VIRTUELLE WHERE (SAV_CODE_SQ_PK = @SAV_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBSTANCE_VIR" & _
                "TUELLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SAV_SUBSTANCE_VIRTUELLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SAV_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SAV_SUBSTANCE_VIRTUELLEDataTable = New dsTheriaque_Nomenclature2.SAV_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SAV_SUBSTANCE_VIRTUELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SAV_SUBSTANCE_VIRTUELLE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAV_CODE_SQ_PK As Integer, ByVal Original_SAV_LIBELLE As String, ByVal Original_SAV_CODE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAV_CODE_SQ_PK, Integer)
            If (Original_SAV_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAV_LIBELLE, String)
            End If
            If (Original_SAV_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SAV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAV_CODE_SQ_PK As Integer, ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAV_CODE_SQ_PK, Integer)
            If (SAV_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAV_LIBELLE, String)
            End If
            If (SAV_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAV_CODE_SQ_PK As Integer, ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String, ByVal Original_SAV_CODE_SQ_PK As Integer, ByVal Original_SAV_LIBELLE As String, ByVal Original_SAV_CODE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAV_CODE_SQ_PK, Integer)
            If (SAV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAV_LIBELLE, String)
            End If
            If (SAV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAV_CODE_REF, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAV_CODE_SQ_PK, Integer)
            If (Original_SAV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SAV_LIBELLE, String)
            End If
            If (Original_SAV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SAV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String, ByVal Original_SAV_CODE_SQ_PK As Integer, ByVal Original_SAV_LIBELLE As String, ByVal Original_SAV_CODE_REF As String) As Integer
            Return Me.Update(Original_SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF, Original_SAV_CODE_SQ_PK, Original_SAV_LIBELLE, Original_SAV_CODE_REF)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MVPF_MED_VIR_PERE_FORMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPF_MED_VIR_PERE_FORME"
            tableMapping.ColumnMappings.Add("MVPF_GSP_CODE_FK_PK", "MVPF_GSP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPF_FOV_CODE_FK_PK", "MVPF_FOV_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPF_MED_VIR_PERE_FORME] WHERE (([MVPF_GSP_CODE_FK_PK] ="& _ 
                " @Original_MVPF_GSP_CODE_FK_PK) AND ([MVPF_FOV_CODE_FK_PK] = @Original_MVPF_FOV_"& _ 
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPF_MED_VIR_PERE_FORME] ([MVPF_GSP_CODE_FK_PK], [MVPF_F"& _ 
                "OV_CODE_FK_PK]) VALUES (@MVPF_GSP_CODE_FK_PK, @MVPF_FOV_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVP"& _ 
                "F_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM theriaque.MVPF_MED_VIR_PERE_FORME WHE"& _ 
                "RE (MVPF_FOV_CODE_FK_PK = @MVPF_FOV_CODE_FK_PK) AND (MVPF_GSP_CODE_FK_PK = @MVPF"& _ 
                "_GSP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPF_MED_VIR_PERE_FORME] SET [MVPF_GSP_CODE_FK_PK] = @MVPF_GS"& _ 
                "P_CODE_FK_PK, [MVPF_FOV_CODE_FK_PK] = @MVPF_FOV_CODE_FK_PK WHERE (([MVPF_GSP_COD"& _ 
                "E_FK_PK] = @Original_MVPF_GSP_CODE_FK_PK) AND ([MVPF_FOV_CODE_FK_PK] = @Original"& _ 
                "_MVPF_FOV_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM th"& _ 
                "eriaque.MVPF_MED_VIR_PERE_FORME WHERE (MVPF_FOV_CODE_FK_PK = @MVPF_FOV_CODE_FK_P"& _ 
                "K) AND (MVPF_GSP_CODE_FK_PK = @MVPF_GSP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM theriaque.MVPF_MED_VIR_PERE_" & _
                "FORME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM theriaque.MVPF_MED_VIR_PERE_" & _
                "FORME" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE MVPF_GSP_CODE_FK_PK=@MVPF_GSP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable = New dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable, ByVal MVPF_GSP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPF_GSP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MVPF_GSP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPF_GSP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable = New dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.MVPF_MED_VIR_PERE_FORMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "MVPF_MED_VIR_PERE_FORME")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPF_GSP_CODE_FK_PK As Integer, ByVal Original_MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPF_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPF_GSP_CODE_FK_PK As Integer, ByVal MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPF_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPF_GSP_CODE_FK_PK As Integer, ByVal MVPF_FOV_CODE_FK_PK As Integer, ByVal Original_MVPF_GSP_CODE_FK_PK As Integer, ByVal Original_MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPF_FOV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MVPF_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_MVPF_GSP_CODE_FK_PK As Integer, ByVal Original_MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_MVPF_GSP_CODE_FK_PK, Original_MVPF_FOV_CODE_FK_PK, Original_MVPF_GSP_CODE_FK_PK, Original_MVPF_FOV_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CDFUCUM_UCUMTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFUCUM_UCUM"
            tableMapping.ColumnMappings.Add("CDFUCUM_CODE_PK", "CDFUCUM_CODE_PK")
            tableMapping.ColumnMappings.Add("CDFUCUM_SYMBOLE", "CDFUCUM_SYMBOLE")
            tableMapping.ColumnMappings.Add("CDFUCUM_DATECR", "CDFUCUM_DATECR")
            tableMapping.ColumnMappings.Add("CDFUCUM_DATEMJ", "CDFUCUM_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[CDFUCUM_UCUM] WHERE (([CDFUCUM_CODE_PK] = @Original_CDFU" & _
                "CUM_CODE_PK) AND ([CDFUCUM_SYMBOLE] = @Original_CDFUCUM_SYMBOLE) AND ((@IsNull_C" & _
                "DFUCUM_DATECR = 1 AND [CDFUCUM_DATECR] IS NULL) OR ([CDFUCUM_DATECR] = @Original" & _
                "_CDFUCUM_DATECR)) AND ((@IsNull_CDFUCUM_DATEMJ = 1 AND [CDFUCUM_DATEMJ] IS NULL)" & _
                " OR ([CDFUCUM_DATEMJ] = @Original_CDFUCUM_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_SYMBOLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_SYMBOLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDFUCUM_DATECR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATECR", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDFUCUM_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CDFUCUM_UCUM] ([CDFUCUM_SYMBOLE], [CDFUCUM_DATECR], [CDF" & _
                "UCUM_DATEMJ]) VALUES (@CDFUCUM_SYMBOLE, @CDFUCUM_DATECR, @CDFUCUM_DATEMJ);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELE" & _
                "CT CDFUCUM_CODE_PK, CDFUCUM_SYMBOLE, CDFUCUM_DATECR, CDFUCUM_DATEMJ FROM theriaq" & _
                "ue.CDFUCUM_UCUM WHERE (CDFUCUM_CODE_PK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_SYMBOLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_SYMBOLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[CDFUCUM_UCUM] SET [CDFUCUM_SYMBOLE] = @CDFUCUM_SYMBOLE, [CDFU" & _
                "CUM_DATECR] = @CDFUCUM_DATECR, [CDFUCUM_DATEMJ] = @CDFUCUM_DATEMJ WHERE (([CDFUC" & _
                "UM_CODE_PK] = @Original_CDFUCUM_CODE_PK) AND ([CDFUCUM_SYMBOLE] = @Original_CDFU" & _
                "CUM_SYMBOLE) AND ((@IsNull_CDFUCUM_DATECR = 1 AND [CDFUCUM_DATECR] IS NULL) OR (" & _
                "[CDFUCUM_DATECR] = @Original_CDFUCUM_DATECR)) AND ((@IsNull_CDFUCUM_DATEMJ = 1 A" & _
                "ND [CDFUCUM_DATEMJ] IS NULL) OR ([CDFUCUM_DATEMJ] = @Original_CDFUCUM_DATEMJ)));" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDFUCUM_CODE_PK, CDFUCUM_SYMBOLE, CDFUCUM_DATECR, CDFUCUM_DATEMJ FROM t" & _
                "heriaque.CDFUCUM_UCUM WHERE (CDFUCUM_CODE_PK = @CDFUCUM_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_SYMBOLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_SYMBOLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_CODE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_SYMBOLE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_SYMBOLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDFUCUM_DATECR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATECR", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDFUCUM_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDFUCUM_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_CODE_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFUCUM_CODE_PK, CDFUCUM_SYMBOLE, CDFUCUM_DATECR, CDFUCUM_DATEMJ FROM ther" & _
                "iaque.CDFUCUM_UCUM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFUCUM_CODE_PK, CDFUCUM_SYMBOLE, CDFUCUM_DATECR, CDFUCUM_DATEMJ FROM ther" & _
                "iaque.CDFUCUM_UCUM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CDFUCUM_CODE_PK=@CDFUCUM_CODE_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDFUCUM_CODE_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CDFUCUM_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable = New dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable, ByVal CDFUCUM_CODE_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFUCUM_CODE_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFUCUM_CODE_PK As Integer) As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFUCUM_CODE_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable = New dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.CDFUCUM_UCUMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "CDFUCUM_UCUM")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDFUCUM_CODE_PK As Integer, ByVal Original_CDFUCUM_SYMBOLE As String, ByVal Original_CDFUCUM_DATECR As Global.System.Nullable(Of Date), ByVal Original_CDFUCUM_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDFUCUM_CODE_PK, Integer)
            If (Original_CDFUCUM_SYMBOLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDFUCUM_SYMBOLE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDFUCUM_SYMBOLE, String)
            End If
            If (Original_CDFUCUM_DATECR.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDFUCUM_DATECR.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_CDFUCUM_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDFUCUM_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFUCUM_SYMBOLE As String, ByVal CDFUCUM_DATECR As Global.System.Nullable(Of Date), ByVal CDFUCUM_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (CDFUCUM_SYMBOLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDFUCUM_SYMBOLE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFUCUM_SYMBOLE, String)
            End If
            If (CDFUCUM_DATECR.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFUCUM_DATECR.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CDFUCUM_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFUCUM_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFUCUM_SYMBOLE As String, ByVal CDFUCUM_DATECR As Global.System.Nullable(Of Date), ByVal CDFUCUM_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CDFUCUM_CODE_PK As Integer, ByVal Original_CDFUCUM_SYMBOLE As String, ByVal Original_CDFUCUM_DATECR As Global.System.Nullable(Of Date), ByVal Original_CDFUCUM_DATEMJ As Global.System.Nullable(Of Date), ByVal CDFUCUM_CODE_PK As Integer) As Integer
            If (CDFUCUM_SYMBOLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDFUCUM_SYMBOLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDFUCUM_SYMBOLE, String)
            End If
            If (CDFUCUM_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDFUCUM_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CDFUCUM_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDFUCUM_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CDFUCUM_CODE_PK, Integer)
            If (Original_CDFUCUM_SYMBOLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDFUCUM_SYMBOLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CDFUCUM_SYMBOLE, String)
            End If
            If (Original_CDFUCUM_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CDFUCUM_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_CDFUCUM_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CDFUCUM_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CDFUCUM_CODE_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFUCUM_SYMBOLE As String, ByVal CDFUCUM_DATECR As Global.System.Nullable(Of Date), ByVal CDFUCUM_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CDFUCUM_CODE_PK As Integer, ByVal Original_CDFUCUM_SYMBOLE As String, ByVal Original_CDFUCUM_DATECR As Global.System.Nullable(Of Date), ByVal Original_CDFUCUM_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(CDFUCUM_SYMBOLE, CDFUCUM_DATECR, CDFUCUM_DATEMJ, Original_CDFUCUM_CODE_PK, Original_CDFUCUM_SYMBOLE, Original_CDFUCUM_DATECR, Original_CDFUCUM_DATEMJ, Original_CDFUCUM_CODE_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MVPR_MEDICAMENT_VIRTUEL_PERETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPR_MEDICAMENT_VIRTUEL_PERE"
            tableMapping.ColumnMappings.Add("MVPR_CODE_SQ_PK", "MVPR_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("MVPR_DATECR", "MVPR_DATECR")
            tableMapping.ColumnMappings.Add("MVPR_DATEMJ", "MVPR_DATEMJ")
            tableMapping.ColumnMappings.Add("MVPR_LIBELLE", "MVPR_LIBELLE")
            tableMapping.ColumnMappings.Add("MVPR_ETAT_DISPO", "MVPR_ETAT_DISPO")
            tableMapping.ColumnMappings.Add("MVPR_DATE_DISPO", "MVPR_DATE_DISPO")
            tableMapping.ColumnMappings.Add("MVPR_DATE_RETRAIT", "MVPR_DATE_RETRAIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPR_MEDICAMENT_VIRTUEL_PERE] WHERE (([MVPR_CODE_SQ_PK] "& _ 
                "= @Original_MVPR_CODE_SQ_PK) AND ([MVPR_DATECR] = @Original_MVPR_DATECR) AND ([M"& _ 
                "VPR_DATEMJ] = @Original_MVPR_DATEMJ) AND ((@IsNull_MVPR_LIBELLE = 1 AND [MVPR_LI"& _ 
                "BELLE] IS NULL) OR ([MVPR_LIBELLE] = @Original_MVPR_LIBELLE)) AND ([MVPR_ETAT_DI"& _ 
                "SPO] = @Original_MVPR_ETAT_DISPO) AND ((@IsNull_MVPR_DATE_DISPO = 1 AND [MVPR_DA"& _ 
                "TE_DISPO] IS NULL) OR ([MVPR_DATE_DISPO] = @Original_MVPR_DATE_DISPO)) AND ((@Is"& _ 
                "Null_MVPR_DATE_RETRAIT = 1 AND [MVPR_DATE_RETRAIT] IS NULL) OR ([MVPR_DATE_RETRA"& _ 
                "IT] = @Original_MVPR_DATE_RETRAIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPR_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_ETAT_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPR_DATE_DISPO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_DISPO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPR_DATE_RETRAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPR_MEDICAMENT_VIRTUEL_PERE] ([MVPR_CODE_SQ_PK], [MVPR_"& _ 
                "DATECR], [MVPR_DATEMJ], [MVPR_LIBELLE], [MVPR_ETAT_DISPO], [MVPR_DATE_DISPO], [M"& _ 
                "VPR_DATE_RETRAIT]) VALUES (@MVPR_CODE_SQ_PK, @MVPR_DATECR, @MVPR_DATEMJ, @MVPR_L"& _ 
                "IBELLE, @MVPR_ETAT_DISPO, @MVPR_DATE_DISPO, @MVPR_DATE_RETRAIT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPR_CO"& _ 
                "DE_SQ_PK, MVPR_DATECR, MVPR_DATEMJ, MVPR_LIBELLE, MVPR_ETAT_DISPO, MVPR_DATE_DIS"& _ 
                "PO, MVPR_DATE_RETRAIT FROM theriaque.MVPR_MEDICAMENT_VIRTUEL_PERE WHERE (MVPR_CO"& _ 
                "DE_SQ_PK = @MVPR_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_ETAT_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_RETRAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPR_MEDICAMENT_VIRTUEL_PERE] SET [MVPR_CODE_SQ_PK] = @MVPR_C"& _ 
                "ODE_SQ_PK, [MVPR_DATECR] = @MVPR_DATECR, [MVPR_DATEMJ] = @MVPR_DATEMJ, [MVPR_LIB"& _ 
                "ELLE] = @MVPR_LIBELLE, [MVPR_ETAT_DISPO] = @MVPR_ETAT_DISPO, [MVPR_DATE_DISPO] ="& _ 
                " @MVPR_DATE_DISPO, [MVPR_DATE_RETRAIT] = @MVPR_DATE_RETRAIT WHERE (([MVPR_CODE_S"& _ 
                "Q_PK] = @Original_MVPR_CODE_SQ_PK) AND ([MVPR_DATECR] = @Original_MVPR_DATECR) A"& _ 
                "ND ([MVPR_DATEMJ] = @Original_MVPR_DATEMJ) AND ((@IsNull_MVPR_LIBELLE = 1 AND [M"& _ 
                "VPR_LIBELLE] IS NULL) OR ([MVPR_LIBELLE] = @Original_MVPR_LIBELLE)) AND ([MVPR_E"& _ 
                "TAT_DISPO] = @Original_MVPR_ETAT_DISPO) AND ((@IsNull_MVPR_DATE_DISPO = 1 AND [M"& _ 
                "VPR_DATE_DISPO] IS NULL) OR ([MVPR_DATE_DISPO] = @Original_MVPR_DATE_DISPO)) AND"& _ 
                " ((@IsNull_MVPR_DATE_RETRAIT = 1 AND [MVPR_DATE_RETRAIT] IS NULL) OR ([MVPR_DATE"& _ 
                "_RETRAIT] = @Original_MVPR_DATE_RETRAIT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPR_CODE_SQ_PK, MVPR_DATECR"& _ 
                ", MVPR_DATEMJ, MVPR_LIBELLE, MVPR_ETAT_DISPO, MVPR_DATE_DISPO, MVPR_DATE_RETRAIT"& _ 
                " FROM theriaque.MVPR_MEDICAMENT_VIRTUEL_PERE WHERE (MVPR_CODE_SQ_PK = @MVPR_CODE"& _ 
                "_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_ETAT_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_RETRAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPR_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_ETAT_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPR_DATE_DISPO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_DISPO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPR_DATE_RETRAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPR_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPR_CODE_SQ_PK, MVPR_DATECR, MVPR_DATEMJ, MVPR_LIBELLE, MVPR_ETAT_DISPO, " & _
                "MVPR_DATE_DISPO, MVPR_DATE_RETRAIT FROM theriaque.MVPR_MEDICAMENT_VIRTUEL_PERE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MVPR_CODE_SQ_PK, MVPR_DATECR, MVPR_DATEMJ, MVPR_LIBELLE, MVPR_ETAT_DISPO, " & _
                "MVPR_DATE_DISPO, MVPR_DATE_RETRAIT FROM theriaque.MVPR_MEDICAMENT_VIRTUEL_PERE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE MVPR_CODE_SQ_PK=@MVPR_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable = New dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable, ByVal MVPR_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPR_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MVPR_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPR_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable = New dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.MVPR_MEDICAMENT_VIRTUEL_PEREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "MVPR_MEDICAMENT_VIRTUEL_PERE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPR_CODE_SQ_PK As Integer, ByVal Original_MVPR_DATECR As Date, ByVal Original_MVPR_DATEMJ As Date, ByVal Original_MVPR_LIBELLE As String, ByVal Original_MVPR_ETAT_DISPO As String, ByVal Original_MVPR_DATE_DISPO As Global.System.Nullable(Of Date), ByVal Original_MVPR_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPR_CODE_SQ_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPR_DATECR, Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MVPR_DATEMJ, Date)
            If (Original_MVPR_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MVPR_LIBELLE, String)
            End If
            If (Original_MVPR_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MVPR_ETAT_DISPO")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MVPR_ETAT_DISPO, String)
            End If
            If (Original_MVPR_DATE_DISPO.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MVPR_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPR_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MVPR_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPR_CODE_SQ_PK As Integer, ByVal MVPR_DATECR As Date, ByVal MVPR_DATEMJ As Date, ByVal MVPR_LIBELLE As String, ByVal MVPR_ETAT_DISPO As String, ByVal MVPR_DATE_DISPO As Global.System.Nullable(Of Date), ByVal MVPR_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPR_CODE_SQ_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPR_DATECR, Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MVPR_DATEMJ, Date)
            If (MVPR_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MVPR_LIBELLE, String)
            End If
            If (MVPR_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MVPR_ETAT_DISPO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MVPR_ETAT_DISPO, String)
            End If
            If (MVPR_DATE_DISPO.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MVPR_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MVPR_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MVPR_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPR_CODE_SQ_PK As Integer, ByVal MVPR_DATECR As Date, ByVal MVPR_DATEMJ As Date, ByVal MVPR_LIBELLE As String, ByVal MVPR_ETAT_DISPO As String, ByVal MVPR_DATE_DISPO As Global.System.Nullable(Of Date), ByVal MVPR_DATE_RETRAIT As Global.System.Nullable(Of Date), ByVal Original_MVPR_CODE_SQ_PK As Integer, ByVal Original_MVPR_DATECR As Date, ByVal Original_MVPR_DATEMJ As Date, ByVal Original_MVPR_LIBELLE As String, ByVal Original_MVPR_ETAT_DISPO As String, ByVal Original_MVPR_DATE_DISPO As Global.System.Nullable(Of Date), ByVal Original_MVPR_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPR_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPR_DATECR, Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MVPR_DATEMJ, Date)
            If (MVPR_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MVPR_LIBELLE, String)
            End If
            If (MVPR_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MVPR_ETAT_DISPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MVPR_ETAT_DISPO, String)
            End If
            If (MVPR_DATE_DISPO.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MVPR_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MVPR_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MVPR_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MVPR_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MVPR_DATECR, Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MVPR_DATEMJ, Date)
            If (Original_MVPR_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MVPR_LIBELLE, String)
            End If
            If (Original_MVPR_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MVPR_ETAT_DISPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MVPR_ETAT_DISPO, String)
            End If
            If (Original_MVPR_DATE_DISPO.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MVPR_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPR_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MVPR_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPR_DATECR As Date, ByVal MVPR_DATEMJ As Date, ByVal MVPR_LIBELLE As String, ByVal MVPR_ETAT_DISPO As String, ByVal MVPR_DATE_DISPO As Global.System.Nullable(Of Date), ByVal MVPR_DATE_RETRAIT As Global.System.Nullable(Of Date), ByVal Original_MVPR_CODE_SQ_PK As Integer, ByVal Original_MVPR_DATECR As Date, ByVal Original_MVPR_DATEMJ As Date, ByVal Original_MVPR_LIBELLE As String, ByVal Original_MVPR_ETAT_DISPO As String, ByVal Original_MVPR_DATE_DISPO As Global.System.Nullable(Of Date), ByVal Original_MVPR_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_MVPR_CODE_SQ_PK, MVPR_DATECR, MVPR_DATEMJ, MVPR_LIBELLE, MVPR_ETAT_DISPO, MVPR_DATE_DISPO, MVPR_DATE_RETRAIT, Original_MVPR_CODE_SQ_PK, Original_MVPR_DATECR, Original_MVPR_DATEMJ, Original_MVPR_LIBELLE, Original_MVPR_ETAT_DISPO, Original_MVPR_DATE_DISPO, Original_MVPR_DATE_RETRAIT)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYMVPR_SYN_MEDIC_VIRTUEL_PERETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYMVPR_SYN_MEDIC_VIRTUEL_PERE"
            tableMapping.ColumnMappings.Add("SYMVPR_CODE_SQ_PK", "SYMVPR_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SYMVPR_MVPR_CODE_FK_PK", "SYMVPR_MVPR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SYMVPR_LIBELLE", "SYMVPR_LIBELLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SYMVPR_SYN_MEDIC_VIRTUEL_PERE] WHERE (([SYMVPR_CODE_SQ_P" & _
                "K] = @Original_SYMVPR_CODE_SQ_PK) AND ((@IsNull_SYMVPR_MVPR_CODE_FK_PK = 1 AND [" & _
                "SYMVPR_MVPR_CODE_FK_PK] IS NULL) OR ([SYMVPR_MVPR_CODE_FK_PK] = @Original_SYMVPR" & _
                "_MVPR_CODE_FK_PK)) AND ((@IsNull_SYMVPR_LIBELLE = 1 AND [SYMVPR_LIBELLE] IS NULL" & _
                ") OR ([SYMVPR_LIBELLE] = @Original_SYMVPR_LIBELLE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYMVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYMVPR_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYMVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SYMVPR_SYN_MEDIC_VIRTUEL_PERE] ([SYMVPR_CODE_SQ_PK], [SY" & _
                "MVPR_MVPR_CODE_FK_PK], [SYMVPR_LIBELLE]) VALUES (@SYMVPR_CODE_SQ_PK, @SYMVPR_MVP" & _
                "R_CODE_FK_PK, @SYMVPR_LIBELLE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYMVPR_CODE_SQ_PK, SYMVPR_MVPR_CODE_FK_P" & _
                "K, SYMVPR_LIBELLE FROM theriaque.SYMVPR_SYN_MEDIC_VIRTUEL_PERE WHERE (SYMVPR_COD" & _
                "E_SQ_PK = @SYMVPR_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SYMVPR_SYN_MEDIC_VIRTUEL_PERE] SET [SYMVPR_CODE_SQ_PK] = @SYM" & _
                "VPR_CODE_SQ_PK, [SYMVPR_MVPR_CODE_FK_PK] = @SYMVPR_MVPR_CODE_FK_PK, [SYMVPR_LIBE" & _
                "LLE] = @SYMVPR_LIBELLE WHERE (([SYMVPR_CODE_SQ_PK] = @Original_SYMVPR_CODE_SQ_PK" & _
                ") AND ((@IsNull_SYMVPR_MVPR_CODE_FK_PK = 1 AND [SYMVPR_MVPR_CODE_FK_PK] IS NULL)" & _
                " OR ([SYMVPR_MVPR_CODE_FK_PK] = @Original_SYMVPR_MVPR_CODE_FK_PK)) AND ((@IsNull" & _
                "_SYMVPR_LIBELLE = 1 AND [SYMVPR_LIBELLE] IS NULL) OR ([SYMVPR_LIBELLE] = @Origin" & _
                "al_SYMVPR_LIBELLE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYMVPR_CODE_SQ_PK, SYMVPR_MVPR_CODE_FK_PK, SYMVPR_" & _
                "LIBELLE FROM theriaque.SYMVPR_SYN_MEDIC_VIRTUEL_PERE WHERE (SYMVPR_CODE_SQ_PK = " & _
                "@SYMVPR_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYMVPR_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYMVPR_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYMVPR_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYMVPR_CODE_SQ_PK, SYMVPR_MVPR_CODE_FK_PK, SYMVPR_LIBELLE FROM theriaque.S" & _
                "YMVPR_SYN_MEDIC_VIRTUEL_PERE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYMVPR_CODE_SQ_PK, SYMVPR_MVPR_CODE_FK_PK, SYMVPR_LIBELLE FROM theriaque.S" & _
                "YMVPR_SYN_MEDIC_VIRTUEL_PERE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SYMVPR_MVPR_CODE_FK_PK=@SYMVPR_MVPR_CODE_FK" & _
                "_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYMVPR_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable = New dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable, ByVal SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYMVPR_MVPR_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYMVPR_MVPR_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer)) As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYMVPR_MVPR_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYMVPR_MVPR_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable = New dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.SYMVPR_SYN_MEDIC_VIRTUEL_PEREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "SYMVPR_SYN_MEDIC_VIRTUEL_PERE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYMVPR_CODE_SQ_PK As Integer, ByVal Original_SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal Original_SYMVPR_LIBELLE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYMVPR_CODE_SQ_PK, Integer)
            If (Original_SYMVPR_MVPR_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYMVPR_MVPR_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SYMVPR_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYMVPR_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYMVPR_CODE_SQ_PK As Integer, ByVal SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal SYMVPR_LIBELLE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYMVPR_CODE_SQ_PK, Integer)
            If (SYMVPR_MVPR_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYMVPR_MVPR_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SYMVPR_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYMVPR_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYMVPR_CODE_SQ_PK As Integer, ByVal SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal SYMVPR_LIBELLE As String, ByVal Original_SYMVPR_CODE_SQ_PK As Integer, ByVal Original_SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal Original_SYMVPR_LIBELLE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYMVPR_CODE_SQ_PK, Integer)
            If (SYMVPR_MVPR_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYMVPR_MVPR_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SYMVPR_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYMVPR_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYMVPR_CODE_SQ_PK, Integer)
            If (Original_SYMVPR_MVPR_CODE_FK_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SYMVPR_MVPR_CODE_FK_PK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_SYMVPR_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SYMVPR_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal SYMVPR_LIBELLE As String, ByVal Original_SYMVPR_CODE_SQ_PK As Integer, ByVal Original_SYMVPR_MVPR_CODE_FK_PK As Global.System.Nullable(Of Integer), ByVal Original_SYMVPR_LIBELLE As String) As Integer
            Return Me.Update(Original_SYMVPR_CODE_SQ_PK, SYMVPR_MVPR_CODE_FK_PK, SYMVPR_LIBELLE, Original_SYMVPR_CODE_SQ_PK, Original_SYMVPR_MVPR_CODE_FK_PK, Original_SYMVPR_LIBELLE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MVPRMV_MED_VIR_VIR_PERETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPRMV_MED_VIR_VIR_PERE"
            tableMapping.ColumnMappings.Add("MVPRMV_MVPR_CODE_FK_PK", "MVPRMV_MVPR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPRMV_MV_CODE_FK_PK", "MVPRMV_MV_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPRMV_MED_VIR_VIR_PERE] WHERE (([MVPRMV_MVPR_CODE_FK_PK"& _ 
                "] = @Original_MVPRMV_MVPR_CODE_FK_PK) AND ([MVPRMV_MV_CODE_FK_PK] = @Original_MV"& _ 
                "PRMV_MV_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRMV_MV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPRMV_MED_VIR_VIR_PERE] ([MVPRMV_MVPR_CODE_FK_PK], [MVP"& _ 
                "RMV_MV_CODE_FK_PK]) VALUES (@MVPRMV_MVPR_CODE_FK_PK, @MVPRMV_MV_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT MVPRMV_MVPR_CODE_FK_PK, MVPRMV_MV_CODE_FK_PK FROM theriaque.MVPRMV_MED_VIR_"& _ 
                "VIR_PERE WHERE (MVPRMV_MVPR_CODE_FK_PK = @MVPRMV_MVPR_CODE_FK_PK) AND (MVPRMV_MV"& _ 
                "_CODE_FK_PK = @MVPRMV_MV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRMV_MV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPRMV_MED_VIR_VIR_PERE] SET [MVPRMV_MVPR_CODE_FK_PK] = @MVPR"& _ 
                "MV_MVPR_CODE_FK_PK, [MVPRMV_MV_CODE_FK_PK] = @MVPRMV_MV_CODE_FK_PK WHERE (([MVPR"& _ 
                "MV_MVPR_CODE_FK_PK] = @Original_MVPRMV_MVPR_CODE_FK_PK) AND ([MVPRMV_MV_CODE_FK_"& _ 
                "PK] = @Original_MVPRMV_MV_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPRMV_MVPR_CODE_FK_PK, MVPRMV_M"& _ 
                "V_CODE_FK_PK FROM theriaque.MVPRMV_MED_VIR_VIR_PERE WHERE (MVPRMV_MVPR_CODE_FK_P"& _ 
                "K = @MVPRMV_MVPR_CODE_FK_PK) AND (MVPRMV_MV_CODE_FK_PK = @MVPRMV_MV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRMV_MV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRMV_MV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPRMV_MVPR_CODE_FK_PK, MVPRMV_MV_CODE_FK_PK FROM theriaque.MVPRMV_MED_VIR" & _
                "_VIR_PERE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MVPRMV_MVPR_CODE_FK_PK, MVPRMV_MV_CODE_FK_PK FROM theriaque.MVPRMV_MED_VIR" & _
                "_VIR_PERE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE MVPRMV_MVPR_CODE_FK_PK=@MVPRMV_MVPR_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRMV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable = New dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable, ByVal MVPRMV_MVPR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPRMV_MVPR_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MVPRMV_MVPR_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPRMV_MVPR_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable = New dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRMV_MED_VIR_VIR_PEREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "MVPRMV_MED_VIR_VIR_PERE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPRMV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRMV_MV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPRMV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPRMV_MV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPRMV_MVPR_CODE_FK_PK As Integer, ByVal MVPRMV_MV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPRMV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPRMV_MV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPRMV_MVPR_CODE_FK_PK As Integer, ByVal MVPRMV_MV_CODE_FK_PK As Integer, ByVal Original_MVPRMV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRMV_MV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPRMV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPRMV_MV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MVPRMV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MVPRMV_MV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_MVPRMV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRMV_MV_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_MVPRMV_MVPR_CODE_FK_PK, Original_MVPRMV_MV_CODE_FK_PK, Original_MVPRMV_MVPR_CODE_FK_PK, Original_MVPRMV_MV_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE"
            tableMapping.ColumnMappings.Add("MVPRSAV_MVPR_CODE_FK_PK", "MVPRSAV_MVPR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPRSAV_SAV_CODE_FK_PK", "MVPRSAV_SAV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPRSAV_NUM_ORD", "MVPRSAV_NUM_ORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE] WHERE (([MVPRS" & _
                "AV_MVPR_CODE_FK_PK] = @Original_MVPRSAV_MVPR_CODE_FK_PK) AND ([MVPRSAV_SAV_CODE_" & _
                "FK_PK] = @Original_MVPRSAV_SAV_CODE_FK_PK) AND ((@IsNull_MVPRSAV_NUM_ORD = 1 AND" & _
                " [MVPRSAV_NUM_ORD] IS NULL) OR ([MVPRSAV_NUM_ORD] = @Original_MVPRSAV_NUM_ORD)))" & _
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPRSAV_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_NUM_ORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRSAV_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE] ([MVPRSAV_MVPR" & _
                "_CODE_FK_PK], [MVPRSAV_SAV_CODE_FK_PK], [MVPRSAV_NUM_ORD]) VALUES (@MVPRSAV_MVPR" & _
                "_CODE_FK_PK, @MVPRSAV_SAV_CODE_FK_PK, @MVPRSAV_NUM_ORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT MVPRSAV_MVPR_CO" & _
                "DE_FK_PK, MVPRSAV_SAV_CODE_FK_PK, MVPRSAV_NUM_ORD FROM theriaque.MVPRSAV_MED_VIR" & _
                "_PERE_SUBSTANCE_VIRTUELLE WHERE (MVPRSAV_MVPR_CODE_FK_PK = @MVPRSAV_MVPR_CODE_FK" & _
                "_PK) AND (MVPRSAV_SAV_CODE_FK_PK = @MVPRSAV_SAV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE] SET [MVPRSAV_MVPR_C" & _
                "ODE_FK_PK] = @MVPRSAV_MVPR_CODE_FK_PK, [MVPRSAV_SAV_CODE_FK_PK] = @MVPRSAV_SAV_C" & _
                "ODE_FK_PK, [MVPRSAV_NUM_ORD] = @MVPRSAV_NUM_ORD WHERE (([MVPRSAV_MVPR_CODE_FK_PK" & _
                "] = @Original_MVPRSAV_MVPR_CODE_FK_PK) AND ([MVPRSAV_SAV_CODE_FK_PK] = @Original" & _
                "_MVPRSAV_SAV_CODE_FK_PK) AND ((@IsNull_MVPRSAV_NUM_ORD = 1 AND [MVPRSAV_NUM_ORD]" & _
                " IS NULL) OR ([MVPRSAV_NUM_ORD] = @Original_MVPRSAV_NUM_ORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT MVPRSAV_" & _
                "MVPR_CODE_FK_PK, MVPRSAV_SAV_CODE_FK_PK, MVPRSAV_NUM_ORD FROM theriaque.MVPRSAV_" & _
                "MED_VIR_PERE_SUBSTANCE_VIRTUELLE WHERE (MVPRSAV_MVPR_CODE_FK_PK = @MVPRSAV_MVPR_" & _
                "CODE_FK_PK) AND (MVPRSAV_SAV_CODE_FK_PK = @MVPRSAV_SAV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPRSAV_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_NUM_ORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRSAV_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPRSAV_MVPR_CODE_FK_PK, MVPRSAV_SAV_CODE_FK_PK, MVPRSAV_NUM_ORD FROM ther" & _
                "iaque.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MVPRSAV_MVPR_CODE_FK_PK, MVPRSAV_SAV_CODE_FK_PK, MVPRSAV_NUM_ORD FROM ther" & _
                "iaque.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE MVPRSAV_MVPR_CODE_FK_PK=@" & _
                "MVPRSAV_MVPR_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRSAV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable = New dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable, ByVal MVPRSAV_MVPR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPRSAV_MVPR_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MVPRSAV_MVPR_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPRSAV_MVPR_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable = New dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "MVPRSAV_MED_VIR_PERE_SUBSTANCE_VIRTUELLE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPRSAV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRSAV_SAV_CODE_FK_PK As Integer, ByVal Original_MVPRSAV_NUM_ORD As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPRSAV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPRSAV_SAV_CODE_FK_PK, Integer)
            If (Original_MVPRSAV_NUM_ORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MVPRSAV_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPRSAV_MVPR_CODE_FK_PK As Integer, ByVal MVPRSAV_SAV_CODE_FK_PK As Integer, ByVal MVPRSAV_NUM_ORD As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPRSAV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPRSAV_SAV_CODE_FK_PK, Integer)
            If (MVPRSAV_NUM_ORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MVPRSAV_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPRSAV_MVPR_CODE_FK_PK As Integer, ByVal MVPRSAV_SAV_CODE_FK_PK As Integer, ByVal MVPRSAV_NUM_ORD As Global.System.Nullable(Of Integer), ByVal Original_MVPRSAV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRSAV_SAV_CODE_FK_PK As Integer, ByVal Original_MVPRSAV_NUM_ORD As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPRSAV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPRSAV_SAV_CODE_FK_PK, Integer)
            If (MVPRSAV_NUM_ORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MVPRSAV_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MVPRSAV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_MVPRSAV_SAV_CODE_FK_PK, Integer)
            If (Original_MVPRSAV_NUM_ORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MVPRSAV_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPRSAV_NUM_ORD As Global.System.Nullable(Of Integer), ByVal Original_MVPRSAV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRSAV_SAV_CODE_FK_PK As Integer, ByVal Original_MVPRSAV_NUM_ORD As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_MVPRSAV_MVPR_CODE_FK_PK, Original_MVPRSAV_SAV_CODE_FK_PK, MVPRSAV_NUM_ORD, Original_MVPRSAV_MVPR_CODE_FK_PK, Original_MVPRSAV_SAV_CODE_FK_PK, Original_MVPRSAV_NUM_ORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE"
            tableMapping.ColumnMappings.Add("MVPRFOV_MVPR_CODE_FK_PK", "MVPRFOV_MVPR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPRFOV_FOV_CODE_FK_PK", "MVPRFOV_FOV_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE] WHERE (([MVPRFOV_M"& _ 
                "VPR_CODE_FK_PK] = @Original_MVPRFOV_MVPR_CODE_FK_PK) AND ([MVPRFOV_FOV_CODE_FK_P"& _ 
                "K] = @Original_MVPRFOV_FOV_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE] ([MVPRFOV_MVPR_COD"& _ 
                "E_FK_PK], [MVPRFOV_FOV_CODE_FK_PK]) VALUES (@MVPRFOV_MVPR_CODE_FK_PK, @MVPRFOV_F"& _ 
                "OV_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPRFOV_MVPR_CODE_FK_PK, MVPRFOV_FOV_CODE_FK_PK FROM the"& _ 
                "riaque.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE WHERE (MVPRFOV_FOV_CODE_FK_PK = @MVP"& _ 
                "RFOV_FOV_CODE_FK_PK) AND (MVPRFOV_MVPR_CODE_FK_PK = @MVPRFOV_MVPR_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE] SET [MVPRFOV_MVPR_CODE_"& _ 
                "FK_PK] = @MVPRFOV_MVPR_CODE_FK_PK, [MVPRFOV_FOV_CODE_FK_PK] = @MVPRFOV_FOV_CODE_"& _ 
                "FK_PK WHERE (([MVPRFOV_MVPR_CODE_FK_PK] = @Original_MVPRFOV_MVPR_CODE_FK_PK) AND"& _ 
                " ([MVPRFOV_FOV_CODE_FK_PK] = @Original_MVPRFOV_FOV_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPRFOV"& _ 
                "_MVPR_CODE_FK_PK, MVPRFOV_FOV_CODE_FK_PK FROM theriaque.MVPRFOV_MED_VIR_PERE_FOR"& _ 
                "ME_VIRTUELLE WHERE (MVPRFOV_FOV_CODE_FK_PK = @MVPRFOV_FOV_CODE_FK_PK) AND (MVPRF"& _ 
                "OV_MVPR_CODE_FK_PK = @MVPRFOV_MVPR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPRFOV_MVPR_CODE_FK_PK, MVPRFOV_FOV_CODE_FK_PK FROM theriaque.MVPRFOV_MED" & _
                "_VIR_PERE_FORME_VIRTUELLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MVPRFOV_MVPR_CODE_FK_PK, MVPRFOV_FOV_CODE_FK_PK FROM theriaque.MVPRFOV_MED" & _
                "_VIR_PERE_FORME_VIRTUELLE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE MVPRFOV_MVPR_CODE_FK_PK=@MVPRFOV_MVPR_CODE_FK_" & _
                "PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPRFOV_MVPR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable = New dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable, ByVal MVPRFOV_MVPR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPRFOV_MVPR_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MVPRFOV_MVPR_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPRFOV_MVPR_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable = New dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "MVPRFOV_MED_VIR_PERE_FORME_VIRTUELLE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPRFOV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRFOV_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPRFOV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPRFOV_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPRFOV_MVPR_CODE_FK_PK As Integer, ByVal MVPRFOV_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPRFOV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPRFOV_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPRFOV_MVPR_CODE_FK_PK As Integer, ByVal MVPRFOV_FOV_CODE_FK_PK As Integer, ByVal Original_MVPRFOV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRFOV_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPRFOV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPRFOV_FOV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MVPRFOV_MVPR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MVPRFOV_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_MVPRFOV_MVPR_CODE_FK_PK As Integer, ByVal Original_MVPRFOV_FOV_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_MVPRFOV_MVPR_CODE_FK_PK, Original_MVPRFOV_FOV_CODE_FK_PK, Original_MVPRFOV_MVPR_CODE_FK_PK, Original_MVPRFOV_FOV_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class UNITFACTEQ_FACTEUR_EQUIVALENCETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UNITFACTEQ_FACTEUR_EQUIVALENCE"
            tableMapping.ColumnMappings.Add("UNITFACTEQ_CDF_CODE_FK_PK", "UNITFACTEQ_CDF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("UNITFACTEQ_REF_CDF_CODE_FK_PK", "UNITFACTEQ_REF_CDF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("UNITFACTEQ_CDF_NUM_FK_PK", "UNITFACTEQ_CDF_NUM_FK_PK")
            tableMapping.ColumnMappings.Add("UNITFACTEQ_FACTEQ", "UNITFACTEQ_FACTEQ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[UNITFACTEQ_FACTEUR_EQUIVALENCE] WHERE (([UNITFACTEQ_CDF_" & _
                "CODE_FK_PK] = @Original_UNITFACTEQ_CDF_CODE_FK_PK) AND ([UNITFACTEQ_REF_CDF_CODE" & _
                "_FK_PK] = @Original_UNITFACTEQ_REF_CDF_CODE_FK_PK) AND ([UNITFACTEQ_CDF_NUM_FK_P" & _
                "K] = @Original_UNITFACTEQ_CDF_NUM_FK_PK) AND ([UNITFACTEQ_FACTEQ] = @Original_UN" & _
                "ITFACTEQ_FACTEQ))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_FACTEQ", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 24, 12, "UNITFACTEQ_FACTEQ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[UNITFACTEQ_FACTEUR_EQUIVALENCE] ([UNITFACTEQ_CDF_CODE_FK" & _
                "_PK], [UNITFACTEQ_REF_CDF_CODE_FK_PK], [UNITFACTEQ_CDF_NUM_FK_PK], [UNITFACTEQ_F" & _
                "ACTEQ]) VALUES (@UNITFACTEQ_CDF_CODE_FK_PK, @UNITFACTEQ_REF_CDF_CODE_FK_PK, @UNI" & _
                "TFACTEQ_CDF_NUM_FK_PK, @UNITFACTEQ_FACTEQ);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT UNITFACTEQ_CDF_CODE_FK_PK, U" & _
                "NITFACTEQ_REF_CDF_CODE_FK_PK, UNITFACTEQ_CDF_NUM_FK_PK, UNITFACTEQ_FACTEQ FROM t" & _
                "heriaque.UNITFACTEQ_FACTEUR_EQUIVALENCE WHERE (UNITFACTEQ_CDF_CODE_FK_PK = @UNIT" & _
                "FACTEQ_CDF_CODE_FK_PK) AND (UNITFACTEQ_CDF_NUM_FK_PK = @UNITFACTEQ_CDF_NUM_FK_PK" & _
                ") AND (UNITFACTEQ_FACTEQ = @UNITFACTEQ_FACTEQ) AND (UNITFACTEQ_REF_CDF_CODE_FK_P" & _
                "K = @UNITFACTEQ_REF_CDF_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_FACTEQ", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 24, 12, "UNITFACTEQ_FACTEQ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[UNITFACTEQ_FACTEUR_EQUIVALENCE] SET [UNITFACTEQ_CDF_CODE_FK_P" & _
                "K] = @UNITFACTEQ_CDF_CODE_FK_PK, [UNITFACTEQ_REF_CDF_CODE_FK_PK] = @UNITFACTEQ_R" & _
                "EF_CDF_CODE_FK_PK, [UNITFACTEQ_CDF_NUM_FK_PK] = @UNITFACTEQ_CDF_NUM_FK_PK, [UNIT" & _
                "FACTEQ_FACTEQ] = @UNITFACTEQ_FACTEQ WHERE (([UNITFACTEQ_CDF_CODE_FK_PK] = @Origi" & _
                "nal_UNITFACTEQ_CDF_CODE_FK_PK) AND ([UNITFACTEQ_REF_CDF_CODE_FK_PK] = @Original_" & _
                "UNITFACTEQ_REF_CDF_CODE_FK_PK) AND ([UNITFACTEQ_CDF_NUM_FK_PK] = @Original_UNITF" & _
                "ACTEQ_CDF_NUM_FK_PK) AND ([UNITFACTEQ_FACTEQ] = @Original_UNITFACTEQ_FACTEQ));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT UNITFACTEQ_CDF_CODE_FK_PK, UNITFACTEQ_REF_CDF_CODE_FK_PK, UNITFACTEQ_CDF_" & _
                "NUM_FK_PK, UNITFACTEQ_FACTEQ FROM theriaque.UNITFACTEQ_FACTEUR_EQUIVALENCE WHERE" & _
                " (UNITFACTEQ_CDF_CODE_FK_PK = @UNITFACTEQ_CDF_CODE_FK_PK) AND (UNITFACTEQ_CDF_NU" & _
                "M_FK_PK = @UNITFACTEQ_CDF_NUM_FK_PK) AND (UNITFACTEQ_FACTEQ = @UNITFACTEQ_FACTEQ" & _
                ") AND (UNITFACTEQ_REF_CDF_CODE_FK_PK = @UNITFACTEQ_REF_CDF_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_FACTEQ", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 24, 12, "UNITFACTEQ_FACTEQ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_REF_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNITFACTEQ_FACTEQ", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 24, 12, "UNITFACTEQ_FACTEQ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT UNITFACTEQ_CDF_CODE_FK_PK, UNITFACTEQ_REF_CDF_CODE_FK_PK, UNITFACTEQ_CDF_N" & _
                "UM_FK_PK, UNITFACTEQ_FACTEQ FROM theriaque.UNITFACTEQ_FACTEUR_EQUIVALENCE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT UNITFACTEQ_CDF_CODE_FK_PK, UNITFACTEQ_REF_CDF_CODE_FK_PK, UNITFACTEQ_CDF_N" & _
                "UM_FK_PK, UNITFACTEQ_FACTEQ FROM theriaque.UNITFACTEQ_FACTEUR_EQUIVALENCE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE" & _
                " UNITFACTEQ_CDF_CODE_FK_PK=@UNITFACTEQ_CDF_CODE_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and  UNITFACTEQ_CDF_NUM_F" & _
                "K_PK=@UNITFACTEQ_CDF_NUM_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "UNITFACTEQ_CDF_NUM_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable = New dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable, ByVal UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_CDF_NUM_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (UNITFACTEQ_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(UNITFACTEQ_CDF_CODE_FK_PK, String)
            End If
            If (UNITFACTEQ_CDF_NUM_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_NUM_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(UNITFACTEQ_CDF_NUM_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_CDF_NUM_FK_PK As String) As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (UNITFACTEQ_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(UNITFACTEQ_CDF_CODE_FK_PK, String)
            End If
            If (UNITFACTEQ_CDF_NUM_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_NUM_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(UNITFACTEQ_CDF_NUM_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable = New dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.UNITFACTEQ_FACTEUR_EQUIVALENCEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "UNITFACTEQ_FACTEUR_EQUIVALENCE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal Original_UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal Original_UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal Original_UNITFACTEQ_FACTEQ As Decimal) As Integer
            If (Original_UNITFACTEQ_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNITFACTEQ_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_UNITFACTEQ_CDF_CODE_FK_PK, String)
            End If
            If (Original_UNITFACTEQ_REF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNITFACTEQ_REF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UNITFACTEQ_REF_CDF_CODE_FK_PK, String)
            End If
            If (Original_UNITFACTEQ_CDF_NUM_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNITFACTEQ_CDF_NUM_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_UNITFACTEQ_CDF_NUM_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_UNITFACTEQ_FACTEQ, Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal UNITFACTEQ_FACTEQ As Decimal) As Integer
            If (UNITFACTEQ_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(UNITFACTEQ_CDF_CODE_FK_PK, String)
            End If
            If (UNITFACTEQ_REF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_REF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(UNITFACTEQ_REF_CDF_CODE_FK_PK, String)
            End If
            If (UNITFACTEQ_CDF_NUM_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_NUM_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UNITFACTEQ_CDF_NUM_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(UNITFACTEQ_FACTEQ, Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal UNITFACTEQ_FACTEQ As Decimal, ByVal Original_UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal Original_UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal Original_UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal Original_UNITFACTEQ_FACTEQ As Decimal) As Integer
            If (UNITFACTEQ_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(UNITFACTEQ_CDF_CODE_FK_PK, String)
            End If
            If (UNITFACTEQ_REF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_REF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(UNITFACTEQ_REF_CDF_CODE_FK_PK, String)
            End If
            If (UNITFACTEQ_CDF_NUM_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNITFACTEQ_CDF_NUM_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UNITFACTEQ_CDF_NUM_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UNITFACTEQ_FACTEQ, Decimal)
            If (Original_UNITFACTEQ_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNITFACTEQ_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_UNITFACTEQ_CDF_CODE_FK_PK, String)
            End If
            If (Original_UNITFACTEQ_REF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNITFACTEQ_REF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_UNITFACTEQ_REF_CDF_CODE_FK_PK, String)
            End If
            If (Original_UNITFACTEQ_CDF_NUM_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNITFACTEQ_CDF_NUM_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_UNITFACTEQ_CDF_NUM_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_UNITFACTEQ_FACTEQ, Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_UNITFACTEQ_CDF_CODE_FK_PK As String, ByVal Original_UNITFACTEQ_REF_CDF_CODE_FK_PK As String, ByVal Original_UNITFACTEQ_CDF_NUM_FK_PK As String, ByVal Original_UNITFACTEQ_FACTEQ As Decimal) As Integer
            Return Me.Update(Original_UNITFACTEQ_CDF_CODE_FK_PK, Original_UNITFACTEQ_REF_CDF_CODE_FK_PK, Original_UNITFACTEQ_CDF_NUM_FK_PK, Original_UNITFACTEQ_FACTEQ, Original_UNITFACTEQ_CDF_CODE_FK_PK, Original_UNITFACTEQ_REF_CDF_CODE_FK_PK, Original_UNITFACTEQ_CDF_NUM_FK_PK, Original_UNITFACTEQ_FACTEQ)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GSP_GENERIQUE_SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GSP_GENERIQUE_SPECIALITE"
            tableMapping.ColumnMappings.Add("GSP_CODE_SQ_PK", "GSP_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("GSP_NOM", "GSP_NOM")
            tableMapping.ColumnMappings.Add("GSP_CODE_VIRTUEL", "GSP_CODE_VIRTUEL")
            tableMapping.ColumnMappings.Add("GSP_DATECR", "GSP_DATECR")
            tableMapping.ColumnMappings.Add("GSP_DATEMJ", "GSP_DATEMJ")
            tableMapping.ColumnMappings.Add("GSP_PRESCRIPTION_DC", "GSP_PRESCRIPTION_DC")
            tableMapping.ColumnMappings.Add("GSP_CODE_SP_REFERENCE", "GSP_CODE_SP_REFERENCE")
            tableMapping.ColumnMappings.Add("GSP_INFO_GENERAL_TEXTE", "GSP_INFO_GENERAL_TEXTE")
            tableMapping.ColumnMappings.Add("GSP_CODE_VIRTUEL13", "GSP_CODE_VIRTUEL13")
            tableMapping.ColumnMappings.Add("GSP_CODE_REF", "GSP_CODE_REF")
            tableMapping.ColumnMappings.Add("GSP_ETAT_DISPO", "GSP_ETAT_DISPO")
            tableMapping.ColumnMappings.Add("GSP_DATE_DISPO", "GSP_DATE_DISPO")
            tableMapping.ColumnMappings.Add("GSP_DATE_RETRAIT", "GSP_DATE_RETRAIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[GSP_GENERIQUE_SPECIALITE] WHERE (([GSP_CODE_SQ_PK] = @Or"& _ 
                "iginal_GSP_CODE_SQ_PK) AND ([GSP_NOM] = @Original_GSP_NOM) AND ((@IsNull_GSP_COD"& _ 
                "E_VIRTUEL = 1 AND [GSP_CODE_VIRTUEL] IS NULL) OR ([GSP_CODE_VIRTUEL] = @Original"& _ 
                "_GSP_CODE_VIRTUEL)) AND ([GSP_DATECR] = @Original_GSP_DATECR) AND ((@IsNull_GSP_"& _ 
                "DATEMJ = 1 AND [GSP_DATEMJ] IS NULL) OR ([GSP_DATEMJ] = @Original_GSP_DATEMJ)) A"& _ 
                "ND ((@IsNull_GSP_PRESCRIPTION_DC = 1 AND [GSP_PRESCRIPTION_DC] IS NULL) OR ([GSP"& _ 
                "_PRESCRIPTION_DC] = @Original_GSP_PRESCRIPTION_DC)) AND ((@IsNull_GSP_CODE_SP_RE"& _ 
                "FERENCE = 1 AND [GSP_CODE_SP_REFERENCE] IS NULL) OR ([GSP_CODE_SP_REFERENCE] = @"& _ 
                "Original_GSP_CODE_SP_REFERENCE)) AND ((@IsNull_GSP_INFO_GENERAL_TEXTE = 1 AND [G"& _ 
                "SP_INFO_GENERAL_TEXTE] IS NULL) OR ([GSP_INFO_GENERAL_TEXTE] = @Original_GSP_INF"& _ 
                "O_GENERAL_TEXTE)) AND ((@IsNull_GSP_CODE_VIRTUEL13 = 1 AND [GSP_CODE_VIRTUEL13] "& _ 
                "IS NULL) OR ([GSP_CODE_VIRTUEL13] = @Original_GSP_CODE_VIRTUEL13)) AND ((@IsNull"& _ 
                "_GSP_CODE_REF = 1 AND [GSP_CODE_REF] IS NULL) OR ([GSP_CODE_REF] = @Original_GSP"& _ 
                "_CODE_REF)) AND ([GSP_ETAT_DISPO] = @Original_GSP_ETAT_DISPO) AND ((@IsNull_GSP_"& _ 
                "DATE_DISPO = 1 AND [GSP_DATE_DISPO] IS NULL) OR ([GSP_DATE_DISPO] = @Original_GS"& _ 
                "P_DATE_DISPO)) AND ((@IsNull_GSP_DATE_RETRAIT = 1 AND [GSP_DATE_RETRAIT] IS NULL"& _ 
                ") OR ([GSP_DATE_RETRAIT] = @Original_GSP_DATE_RETRAIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_ETAT_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATE_DISPO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_DISPO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATE_RETRAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[GSP_GENERIQUE_SPECIALITE] ([GSP_CODE_SQ_PK], [GSP_NOM], "& _ 
                "[GSP_CODE_VIRTUEL], [GSP_DATECR], [GSP_DATEMJ], [GSP_PRESCRIPTION_DC], [GSP_CODE"& _ 
                "_SP_REFERENCE], [GSP_INFO_GENERAL_TEXTE], [GSP_CODE_VIRTUEL13], [GSP_CODE_REF], "& _ 
                "[GSP_ETAT_DISPO], [GSP_DATE_DISPO], [GSP_DATE_RETRAIT]) VALUES (@GSP_CODE_SQ_PK,"& _ 
                " @GSP_NOM, @GSP_CODE_VIRTUEL, @GSP_DATECR, @GSP_DATEMJ, @GSP_PRESCRIPTION_DC, @G"& _ 
                "SP_CODE_SP_REFERENCE, @GSP_INFO_GENERAL_TEXTE, @GSP_CODE_VIRTUEL13, @GSP_CODE_RE"& _ 
                "F, @GSP_ETAT_DISPO, @GSP_DATE_DISPO, @GSP_DATE_RETRAIT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GSP_CODE_SQ_PK,"& _ 
                " GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC, GSP_COD"& _ 
                "E_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_REF, GSP_ET"& _ 
                "AT_DISPO, GSP_DATE_DISPO, GSP_DATE_RETRAIT FROM theriaque.GSP_GENERIQUE_SPECIALI"& _ 
                "TE WHERE (GSP_CODE_SQ_PK = @GSP_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_ETAT_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_RETRAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[GSP_GENERIQUE_SPECIALITE] SET [GSP_CODE_SQ_PK] = @GSP_CODE_SQ"& _ 
                "_PK, [GSP_NOM] = @GSP_NOM, [GSP_CODE_VIRTUEL] = @GSP_CODE_VIRTUEL, [GSP_DATECR] "& _ 
                "= @GSP_DATECR, [GSP_DATEMJ] = @GSP_DATEMJ, [GSP_PRESCRIPTION_DC] = @GSP_PRESCRIP"& _ 
                "TION_DC, [GSP_CODE_SP_REFERENCE] = @GSP_CODE_SP_REFERENCE, [GSP_INFO_GENERAL_TEX"& _ 
                "TE] = @GSP_INFO_GENERAL_TEXTE, [GSP_CODE_VIRTUEL13] = @GSP_CODE_VIRTUEL13, [GSP_"& _ 
                "CODE_REF] = @GSP_CODE_REF, [GSP_ETAT_DISPO] = @GSP_ETAT_DISPO, [GSP_DATE_DISPO] "& _ 
                "= @GSP_DATE_DISPO, [GSP_DATE_RETRAIT] = @GSP_DATE_RETRAIT WHERE (([GSP_CODE_SQ_P"& _ 
                "K] = @Original_GSP_CODE_SQ_PK) AND ([GSP_NOM] = @Original_GSP_NOM) AND ((@IsNull"& _ 
                "_GSP_CODE_VIRTUEL = 1 AND [GSP_CODE_VIRTUEL] IS NULL) OR ([GSP_CODE_VIRTUEL] = @"& _ 
                "Original_GSP_CODE_VIRTUEL)) AND ([GSP_DATECR] = @Original_GSP_DATECR) AND ((@IsN"& _ 
                "ull_GSP_DATEMJ = 1 AND [GSP_DATEMJ] IS NULL) OR ([GSP_DATEMJ] = @Original_GSP_DA"& _ 
                "TEMJ)) AND ((@IsNull_GSP_PRESCRIPTION_DC = 1 AND [GSP_PRESCRIPTION_DC] IS NULL) "& _ 
                "OR ([GSP_PRESCRIPTION_DC] = @Original_GSP_PRESCRIPTION_DC)) AND ((@IsNull_GSP_CO"& _ 
                "DE_SP_REFERENCE = 1 AND [GSP_CODE_SP_REFERENCE] IS NULL) OR ([GSP_CODE_SP_REFERE"& _ 
                "NCE] = @Original_GSP_CODE_SP_REFERENCE)) AND ((@IsNull_GSP_INFO_GENERAL_TEXTE = "& _ 
                "1 AND [GSP_INFO_GENERAL_TEXTE] IS NULL) OR ([GSP_INFO_GENERAL_TEXTE] = @Original"& _ 
                "_GSP_INFO_GENERAL_TEXTE)) AND ((@IsNull_GSP_CODE_VIRTUEL13 = 1 AND [GSP_CODE_VIR"& _ 
                "TUEL13] IS NULL) OR ([GSP_CODE_VIRTUEL13] = @Original_GSP_CODE_VIRTUEL13)) AND ("& _ 
                "(@IsNull_GSP_CODE_REF = 1 AND [GSP_CODE_REF] IS NULL) OR ([GSP_CODE_REF] = @Orig"& _ 
                "inal_GSP_CODE_REF)) AND ([GSP_ETAT_DISPO] = @Original_GSP_ETAT_DISPO) AND ((@IsN"& _ 
                "ull_GSP_DATE_DISPO = 1 AND [GSP_DATE_DISPO] IS NULL) OR ([GSP_DATE_DISPO] = @Ori"& _ 
                "ginal_GSP_DATE_DISPO)) AND ((@IsNull_GSP_DATE_RETRAIT = 1 AND [GSP_DATE_RETRAIT]"& _ 
                " IS NULL) OR ([GSP_DATE_RETRAIT] = @Original_GSP_DATE_RETRAIT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GSP_CO"& _ 
                "DE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC"& _ 
                ", GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_RE"& _ 
                "F, GSP_ETAT_DISPO, GSP_DATE_DISPO, GSP_DATE_RETRAIT FROM theriaque.GSP_GENERIQUE"& _ 
                "_SPECIALITE WHERE (GSP_CODE_SQ_PK = @GSP_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_ETAT_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_DISPO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_RETRAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_ETAT_DISPO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_ETAT_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATE_DISPO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_DISPO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATE_DISPO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_DISPO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATE_RETRAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATE_RETRAIT", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATE_RETRAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRE" & _
                "SCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13," & _
                " GSP_CODE_REF, GSP_ETAT_DISPO, GSP_DATE_DISPO, GSP_DATE_RETRAIT FROM theriaque.G" & _
                "SP_GENERIQUE_SPECIALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRE" & _
                "SCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13," & _
                " GSP_CODE_REF, GSP_ETAT_DISPO, GSP_DATE_DISPO, GSP_DATE_RETRAIT FROM theriaque.G" & _
                "SP_GENERIQUE_SPECIALITE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE GSP_CODE_SQ_PK = @GSP_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable = New dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable, ByVal GSP_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GSP_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal GSP_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GSP_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable = New dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.GSP_GENERIQUE_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "GSP_GENERIQUE_SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GSP_CODE_SQ_PK As Integer, ByVal Original_GSP_NOM As String, ByVal Original_GSP_CODE_VIRTUEL As String, ByVal Original_GSP_DATECR As Date, ByVal Original_GSP_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), ByVal Original_GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), ByVal Original_GSP_INFO_GENERAL_TEXTE As String, ByVal Original_GSP_CODE_VIRTUEL13 As String, ByVal Original_GSP_CODE_REF As String, ByVal Original_GSP_ETAT_DISPO As String, ByVal Original_GSP_DATE_DISPO As Global.System.Nullable(Of Date), ByVal Original_GSP_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GSP_CODE_SQ_PK, Integer)
            If (Original_GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSP_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GSP_NOM, String)
            End If
            If (Original_GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_GSP_DATECR, Date)
            If (Original_GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (Original_GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_GSP_CODE_VIRTUEL13, String)
            End If
            If (Original_GSP_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_GSP_CODE_REF, String)
            End If
            If (Original_GSP_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSP_ETAT_DISPO")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_GSP_ETAT_DISPO, String)
            End If
            If (Original_GSP_DATE_DISPO.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_GSP_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_GSP_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GSP_CODE_SQ_PK As Integer, ByVal GSP_NOM As String, ByVal GSP_CODE_VIRTUEL As String, ByVal GSP_DATECR As Date, ByVal GSP_DATEMJ As Global.System.Nullable(Of Date), ByVal GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), ByVal GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), ByVal GSP_INFO_GENERAL_TEXTE As String, ByVal GSP_CODE_VIRTUEL13 As String, ByVal GSP_CODE_REF As String, ByVal GSP_ETAT_DISPO As String, ByVal GSP_DATE_DISPO As Global.System.Nullable(Of Date), ByVal GSP_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GSP_CODE_SQ_PK, Integer)
            If (GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSP_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GSP_NOM, String)
            End If
            If (GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(GSP_DATECR, Date)
            If (GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(GSP_CODE_VIRTUEL13, String)
            End If
            If (GSP_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(GSP_CODE_REF, String)
            End If
            If (GSP_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSP_ETAT_DISPO")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(GSP_ETAT_DISPO, String)
            End If
            If (GSP_DATE_DISPO.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(GSP_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (GSP_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(GSP_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal GSP_CODE_SQ_PK As Integer, _
                    ByVal GSP_NOM As String, _
                    ByVal GSP_CODE_VIRTUEL As String, _
                    ByVal GSP_DATECR As Date, _
                    ByVal GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal GSP_CODE_VIRTUEL13 As String, _
                    ByVal GSP_CODE_REF As String, _
                    ByVal GSP_ETAT_DISPO As String, _
                    ByVal GSP_DATE_DISPO As Global.System.Nullable(Of Date), _
                    ByVal GSP_DATE_RETRAIT As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_CODE_SQ_PK As Integer, _
                    ByVal Original_GSP_NOM As String, _
                    ByVal Original_GSP_CODE_VIRTUEL As String, _
                    ByVal Original_GSP_DATECR As Date, _
                    ByVal Original_GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal Original_GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal Original_GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal Original_GSP_CODE_VIRTUEL13 As String, _
                    ByVal Original_GSP_CODE_REF As String, _
                    ByVal Original_GSP_ETAT_DISPO As String, _
                    ByVal Original_GSP_DATE_DISPO As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GSP_CODE_SQ_PK, Integer)
            If (GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GSP_NOM, String)
            End If
            If (GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(GSP_DATECR, Date)
            If (GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(GSP_CODE_VIRTUEL13, String)
            End If
            If (GSP_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(GSP_CODE_REF, String)
            End If
            If (GSP_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSP_ETAT_DISPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(GSP_ETAT_DISPO, String)
            End If
            If (GSP_DATE_DISPO.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(GSP_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (GSP_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(GSP_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_GSP_CODE_SQ_PK, Integer)
            If (Original_GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_GSP_NOM, String)
            End If
            If (Original_GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_GSP_DATECR, Date)
            If (Original_GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (Original_GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_GSP_CODE_VIRTUEL13, String)
            End If
            If (Original_GSP_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_GSP_CODE_REF, String)
            End If
            If (Original_GSP_ETAT_DISPO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSP_ETAT_DISPO")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_GSP_ETAT_DISPO, String)
            End If
            If (Original_GSP_DATE_DISPO.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_GSP_DATE_DISPO.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_DATE_RETRAIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_GSP_DATE_RETRAIT.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal GSP_NOM As String, _
                    ByVal GSP_CODE_VIRTUEL As String, _
                    ByVal GSP_DATECR As Date, _
                    ByVal GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal GSP_CODE_VIRTUEL13 As String, _
                    ByVal GSP_CODE_REF As String, _
                    ByVal GSP_ETAT_DISPO As String, _
                    ByVal GSP_DATE_DISPO As Global.System.Nullable(Of Date), _
                    ByVal GSP_DATE_RETRAIT As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_CODE_SQ_PK As Integer, _
                    ByVal Original_GSP_NOM As String, _
                    ByVal Original_GSP_CODE_VIRTUEL As String, _
                    ByVal Original_GSP_DATECR As Date, _
                    ByVal Original_GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal Original_GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal Original_GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal Original_GSP_CODE_VIRTUEL13 As String, _
                    ByVal Original_GSP_CODE_REF As String, _
                    ByVal Original_GSP_ETAT_DISPO As String, _
                    ByVal Original_GSP_DATE_DISPO As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_DATE_RETRAIT As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_REF, GSP_ETAT_DISPO, GSP_DATE_DISPO, GSP_DATE_RETRAIT, Original_GSP_CODE_SQ_PK, Original_GSP_NOM, Original_GSP_CODE_VIRTUEL, Original_GSP_DATECR, Original_GSP_DATEMJ, Original_GSP_PRESCRIPTION_DC, Original_GSP_CODE_SP_REFERENCE, Original_GSP_INFO_GENERAL_TEXTE, Original_GSP_CODE_VIRTUEL13, Original_GSP_CODE_REF, Original_GSP_ETAT_DISPO, Original_GSP_DATE_DISPO, Original_GSP_DATE_RETRAIT)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class MVPSDU_MED_VIR_PERE_SATableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPSDU_MED_VIR_PERE_SA"
            tableMapping.ColumnMappings.Add("MVPSDU_GSP_CODE_FK_PK", "MVPSDU_GSP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPSDU_SAV_CODE_FK_PK", "MVPSDU_SAV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPSDU_DOSAGE", "MVPSDU_DOSAGE")
            tableMapping.ColumnMappings.Add("MVPSDU_CDF_UNITE", "MVPSDU_CDF_UNITE")
            tableMapping.ColumnMappings.Add("MVPSDU_CODE_ANSM", "MVPSDU_CODE_ANSM")
            tableMapping.ColumnMappings.Add("MVPSDU_NUM_ORD", "MVPSDU_NUM_ORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPSDU_MED_VIR_PERE_SA] WHERE (([MVPSDU_GSP_CODE_FK_PK] " & _
                "= @Original_MVPSDU_GSP_CODE_FK_PK) AND ([MVPSDU_SAV_CODE_FK_PK] = @Original_MVPS" & _
                "DU_SAV_CODE_FK_PK) AND ((@IsNull_MVPSDU_DOSAGE = 1 AND [MVPSDU_DOSAGE] IS NULL) " & _
                "OR ([MVPSDU_DOSAGE] = @Original_MVPSDU_DOSAGE)) AND ((@IsNull_MVPSDU_CDF_UNITE =" & _
                " 1 AND [MVPSDU_CDF_UNITE] IS NULL) OR ([MVPSDU_CDF_UNITE] = @Original_MVPSDU_CDF" & _
                "_UNITE)) AND ((@IsNull_MVPSDU_CODE_ANSM = 1 AND [MVPSDU_CODE_ANSM] IS NULL) OR (" & _
                "[MVPSDU_CODE_ANSM] = @Original_MVPSDU_CODE_ANSM)) AND ([MVPSDU_NUM_ORD] = @Origi" & _
                "nal_MVPSDU_NUM_ORD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPSDU_MED_VIR_PERE_SA] ([MVPSDU_GSP_CODE_FK_PK], [MVPSD" & _
                "U_SAV_CODE_FK_PK], [MVPSDU_DOSAGE], [MVPSDU_CDF_UNITE], [MVPSDU_CODE_ANSM], [MVP" & _
                "SDU_NUM_ORD]) VALUES (@MVPSDU_GSP_CODE_FK_PK, @MVPSDU_SAV_CODE_FK_PK, @MVPSDU_DO" & _
                "SAGE, @MVPSDU_CDF_UNITE, @MVPSDU_CODE_ANSM, @MVPSDU_NUM_ORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT MVPSDU_GSP" & _
                "_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, MVPSDU_CODE" & _
                "_ANSM, MVPSDU_NUM_ORD FROM theriaque.MVPSDU_MED_VIR_PERE_SA WHERE (MVPSDU_GSP_CO" & _
                "DE_FK_PK = @MVPSDU_GSP_CODE_FK_PK) AND (MVPSDU_SAV_CODE_FK_PK = @MVPSDU_SAV_CODE" & _
                "_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_DOSAGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPSDU_MED_VIR_PERE_SA] SET [MVPSDU_GSP_CODE_FK_PK] = @MVPSDU" & _
                "_GSP_CODE_FK_PK, [MVPSDU_SAV_CODE_FK_PK] = @MVPSDU_SAV_CODE_FK_PK, [MVPSDU_DOSAG" & _
                "E] = @MVPSDU_DOSAGE, [MVPSDU_CDF_UNITE] = @MVPSDU_CDF_UNITE, [MVPSDU_CODE_ANSM] " & _
                "= @MVPSDU_CODE_ANSM, [MVPSDU_NUM_ORD] = @MVPSDU_NUM_ORD WHERE (([MVPSDU_GSP_CODE" & _
                "_FK_PK] = @Original_MVPSDU_GSP_CODE_FK_PK) AND ([MVPSDU_SAV_CODE_FK_PK] = @Origi" & _
                "nal_MVPSDU_SAV_CODE_FK_PK) AND ((@IsNull_MVPSDU_DOSAGE = 1 AND [MVPSDU_DOSAGE] I" & _
                "S NULL) OR ([MVPSDU_DOSAGE] = @Original_MVPSDU_DOSAGE)) AND ((@IsNull_MVPSDU_CDF" & _
                "_UNITE = 1 AND [MVPSDU_CDF_UNITE] IS NULL) OR ([MVPSDU_CDF_UNITE] = @Original_MV" & _
                "PSDU_CDF_UNITE)) AND ((@IsNull_MVPSDU_CODE_ANSM = 1 AND [MVPSDU_CODE_ANSM] IS NU" & _
                "LL) OR ([MVPSDU_CODE_ANSM] = @Original_MVPSDU_CODE_ANSM)) AND ([MVPSDU_NUM_ORD] " & _
                "= @Original_MVPSDU_NUM_ORD));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_" & _
                "PK, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, MVPSDU_CODE_ANSM, MVPSDU_NUM_ORD FROM theri" & _
                "aque.MVPSDU_MED_VIR_PERE_SA WHERE (MVPSDU_GSP_CODE_FK_PK = @MVPSDU_GSP_CODE_FK_P" & _
                "K) AND (MVPSDU_SAV_CODE_FK_PK = @MVPSDU_SAV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_DOSAGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UN" & _
                "ITE, MVPSDU_CODE_ANSM, MVPSDU_NUM_ORD FROM theriaque.MVPSDU_MED_VIR_PERE_SA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UN" & _
                "ITE, MVPSDU_NUM_ORD, MVPSDU_CODE_ANSM FROM theriaque.MVPSDU_MED_VIR_PERE_SA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "whe" & _
                "re MVPSDU_GSP_CODE_FK_PK=@MVPSDU_GSP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable = New dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable, ByVal MVPSDU_GSP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPSDU_GSP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MVPSDU_GSP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MVPSDU_GSP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable = New dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.MVPSDU_MED_VIR_PERE_SADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "MVPSDU_MED_VIR_PERE_SA")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPSDU_GSP_CODE_FK_PK As Integer, ByVal Original_MVPSDU_SAV_CODE_FK_PK As Integer, ByVal Original_MVPSDU_DOSAGE As Global.System.Nullable(Of Decimal), ByVal Original_MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_CODE_ANSM As String, ByVal Original_MVPSDU_NUM_ORD As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPSDU_SAV_CODE_FK_PK, Integer)
            If (Original_MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MVPSDU_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MVPSDU_CODE_ANSM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MVPSDU_NUM_ORD, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPSDU_GSP_CODE_FK_PK As Integer, ByVal MVPSDU_SAV_CODE_FK_PK As Integer, ByVal MVPSDU_DOSAGE As Global.System.Nullable(Of Decimal), ByVal MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CODE_ANSM As String, ByVal MVPSDU_NUM_ORD As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPSDU_SAV_CODE_FK_PK, Integer)
            If (MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MVPSDU_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MVPSDU_CODE_ANSM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MVPSDU_NUM_ORD, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPSDU_GSP_CODE_FK_PK As Integer, ByVal MVPSDU_SAV_CODE_FK_PK As Integer, ByVal MVPSDU_DOSAGE As Global.System.Nullable(Of Decimal), ByVal MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CODE_ANSM As String, ByVal MVPSDU_NUM_ORD As Integer, ByVal Original_MVPSDU_GSP_CODE_FK_PK As Integer, ByVal Original_MVPSDU_SAV_CODE_FK_PK As Integer, ByVal Original_MVPSDU_DOSAGE As Global.System.Nullable(Of Decimal), ByVal Original_MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_CODE_ANSM As String, ByVal Original_MVPSDU_NUM_ORD As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPSDU_SAV_CODE_FK_PK, Integer)
            If (MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MVPSDU_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MVPSDU_CODE_ANSM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MVPSDU_NUM_ORD, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MVPSDU_SAV_CODE_FK_PK, Integer)
            If (Original_MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MVPSDU_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MVPSDU_CODE_ANSM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MVPSDU_NUM_ORD, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPSDU_DOSAGE As Global.System.Nullable(Of Decimal), ByVal MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CODE_ANSM As String, ByVal MVPSDU_NUM_ORD As Integer, ByVal Original_MVPSDU_GSP_CODE_FK_PK As Integer, ByVal Original_MVPSDU_SAV_CODE_FK_PK As Integer, ByVal Original_MVPSDU_DOSAGE As Global.System.Nullable(Of Decimal), ByVal Original_MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_CODE_ANSM As String, ByVal Original_MVPSDU_NUM_ORD As Integer) As Integer
            Return Me.Update(Original_MVPSDU_GSP_CODE_FK_PK, Original_MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, MVPSDU_CODE_ANSM, MVPSDU_NUM_ORD, Original_MVPSDU_GSP_CODE_FK_PK, Original_MVPSDU_SAV_CODE_FK_PK, Original_MVPSDU_DOSAGE, Original_MVPSDU_CDF_UNITE, Original_MVPSDU_CODE_ANSM, Original_MVPSDU_NUM_ORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PREDISPMAX_PRE_DISP_MAXIMALE1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREDISPMAX_PRE_DISP_MAXIMALE1"
            tableMapping.ColumnMappings.Add("PREDISPMAX_PRE_CODE_FK_PK", "PREDISPMAX_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDISPMAX_PRE_CIP13", "PREDISPMAX_PRE_CIP13")
            tableMapping.ColumnMappings.Add("PREDISPMAX_MAXUCD", "PREDISPMAX_MAXUCD")
            tableMapping.ColumnMappings.Add("PREDISPMAX_MAXCIP", "PREDISPMAX_MAXCIP")
            tableMapping.ColumnMappings.Add("PREDISPMAX_CDF_TYPE_FK_PK", "PREDISPMAX_CDF_TYPE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PREDISPMAX_PRE_DISP_MAXIMALE] WHERE (([PREDISPMAX_PRE_CO"& _ 
                "DE_FK_PK] = @Original_PREDISPMAX_PRE_CODE_FK_PK) AND ((@IsNull_PREDISPMAX_PRE_CI"& _ 
                "P13 = 1 AND [PREDISPMAX_PRE_CIP13] IS NULL) OR ([PREDISPMAX_PRE_CIP13] = @Origin"& _ 
                "al_PREDISPMAX_PRE_CIP13)) AND ((@IsNull_PREDISPMAX_MAXUCD = 1 AND [PREDISPMAX_MA"& _ 
                "XUCD] IS NULL) OR ([PREDISPMAX_MAXUCD] = @Original_PREDISPMAX_MAXUCD)) AND ((@Is"& _ 
                "Null_PREDISPMAX_MAXCIP = 1 AND [PREDISPMAX_MAXCIP] IS NULL) OR ([PREDISPMAX_MAXC"& _ 
                "IP] = @Original_PREDISPMAX_MAXCIP)) AND ([PREDISPMAX_CDF_TYPE_FK_PK] = @Original"& _ 
                "_PREDISPMAX_CDF_TYPE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PREDISPMAX_PRE_DISP_MAXIMALE] ([PREDISPMAX_PRE_CODE_FK_P"& _ 
                "K], [PREDISPMAX_PRE_CIP13], [PREDISPMAX_MAXUCD], [PREDISPMAX_MAXCIP], [PREDISPMA"& _ 
                "X_CDF_TYPE_FK_PK]) VALUES (@PREDISPMAX_PRE_CODE_FK_PK, @PREDISPMAX_PRE_CIP13, @P"& _ 
                "REDISPMAX_MAXUCD, @PREDISPMAX_MAXCIP, @PREDISPMAX_CDF_TYPE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREDI"& _ 
                "SPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP"& _ 
                ", PREDISPMAX_CDF_TYPE_FK_PK FROM theriaque.PREDISPMAX_PRE_DISP_MAXIMALE WHERE (P"& _ 
                "REDISPMAX_CDF_TYPE_FK_PK = @PREDISPMAX_CDF_TYPE_FK_PK) AND (PREDISPMAX_PRE_CODE_"& _ 
                "FK_PK = @PREDISPMAX_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PREDISPMAX_PRE_DISP_MAXIMALE] SET [PREDISPMAX_PRE_CODE_FK_PK]"& _ 
                " = @PREDISPMAX_PRE_CODE_FK_PK, [PREDISPMAX_PRE_CIP13] = @PREDISPMAX_PRE_CIP13, ["& _ 
                "PREDISPMAX_MAXUCD] = @PREDISPMAX_MAXUCD, [PREDISPMAX_MAXCIP] = @PREDISPMAX_MAXCI"& _ 
                "P, [PREDISPMAX_CDF_TYPE_FK_PK] = @PREDISPMAX_CDF_TYPE_FK_PK WHERE (([PREDISPMAX_"& _ 
                "PRE_CODE_FK_PK] = @Original_PREDISPMAX_PRE_CODE_FK_PK) AND ((@IsNull_PREDISPMAX_"& _ 
                "PRE_CIP13 = 1 AND [PREDISPMAX_PRE_CIP13] IS NULL) OR ([PREDISPMAX_PRE_CIP13] = @"& _ 
                "Original_PREDISPMAX_PRE_CIP13)) AND ((@IsNull_PREDISPMAX_MAXUCD = 1 AND [PREDISP"& _ 
                "MAX_MAXUCD] IS NULL) OR ([PREDISPMAX_MAXUCD] = @Original_PREDISPMAX_MAXUCD)) AND"& _ 
                " ((@IsNull_PREDISPMAX_MAXCIP = 1 AND [PREDISPMAX_MAXCIP] IS NULL) OR ([PREDISPMA"& _ 
                "X_MAXCIP] = @Original_PREDISPMAX_MAXCIP)) AND ([PREDISPMAX_CDF_TYPE_FK_PK] = @Or"& _ 
                "iginal_PREDISPMAX_CDF_TYPE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREDISPMAX_PRE_CODE_FK_PK, PREDISPMA"& _ 
                "X_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK FRO"& _ 
                "M theriaque.PREDISPMAX_PRE_DISP_MAXIMALE WHERE (PREDISPMAX_CDF_TYPE_FK_PK = @PRE"& _ 
                "DISPMAX_CDF_TYPE_FK_PK) AND (PREDISPMAX_PRE_CODE_FK_PK = @PREDISPMAX_PRE_CODE_FK"& _ 
                "_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDIS" & _
                "PMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK FROM theriaque.PREDISPMAX_PRE_DISP_MAXIMA" & _
                "LE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREDISP_PRE_CODE_FK_PK, PREDISP_NUMSEQ_PK, PREDISP_SAC_CODE_FK, PREDISP_UN" & _
                "ITEDISP, PREDISP_CDF_UD_CODE_FK, PREDISP_CIP13, PREDISP_DOSEFRAC FROM theriaque." & _
                "PREDISP_PRE_DISPENSATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE PREDISP_PRE_CODE_FK_PK=@PREDISP_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable = New dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable, ByVal PREDISP_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDISP_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREDISP_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDISP_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable = New dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALE1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREDISPMAX_PRE_DISP_MAXIMALE1")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREDISPMAX_PRE_CODE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CIP13 As String, ByVal Original_PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            If (Original_PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREDISPMAX_PRE_CIP13, String)
            End If
            If (Original_PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            If (PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREDISPMAX_PRE_CIP13, String)
            End If
            If (PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_CDF_TYPE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CODE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CIP13 As String, ByVal Original_PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            If (PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREDISPMAX_PRE_CIP13, String)
            End If
            If (PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            If (Original_PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PREDISPMAX_PRE_CIP13, String)
            End If
            If (Original_PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_PRE_CODE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CIP13 As String, ByVal Original_PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            Return Me.Update(Original_PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP, Original_PREDISPMAX_CDF_TYPE_FK_PK, Original_PREDISPMAX_PRE_CODE_FK_PK, Original_PREDISPMAX_PRE_CIP13, Original_PREDISPMAX_MAXUCD, Original_PREDISPMAX_MAXCIP, Original_PREDISPMAX_CDF_TYPE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREDISP_PRE_DISPENSATIONTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREDISP_PRE_DISPENSATION"
            tableMapping.ColumnMappings.Add("PREDISP_PRE_CODE_FK_PK", "PREDISP_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDISP_NUMSEQ_PK", "PREDISP_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("PREDISP_SAC_CODE_FK", "PREDISP_SAC_CODE_FK")
            tableMapping.ColumnMappings.Add("PREDISP_UNITEDISP", "PREDISP_UNITEDISP")
            tableMapping.ColumnMappings.Add("PREDISP_CDF_UD_CODE_FK", "PREDISP_CDF_UD_CODE_FK")
            tableMapping.ColumnMappings.Add("PREDISP_CIP13", "PREDISP_CIP13")
            tableMapping.ColumnMappings.Add("PREDISP_DOSEFRAC", "PREDISP_DOSEFRAC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PREDISP_PRE_DISPENSATION] WHERE (([PREDISP_PRE_CODE_FK_P" & _
                "K] = @Original_PREDISP_PRE_CODE_FK_PK) AND ([PREDISP_NUMSEQ_PK] = @Original_PRED" & _
                "ISP_NUMSEQ_PK) AND ((@IsNull_PREDISP_SAC_CODE_FK = 1 AND [PREDISP_SAC_CODE_FK] I" & _
                "S NULL) OR ([PREDISP_SAC_CODE_FK] = @Original_PREDISP_SAC_CODE_FK)) AND ([PREDIS" & _
                "P_UNITEDISP] = @Original_PREDISP_UNITEDISP) AND ([PREDISP_CDF_UD_CODE_FK] = @Ori" & _
                "ginal_PREDISP_CDF_UD_CODE_FK) AND ((@IsNull_PREDISP_CIP13 = 1 AND [PREDISP_CIP13" & _
                "] IS NULL) OR ([PREDISP_CIP13] = @Original_PREDISP_CIP13)) AND ((@IsNull_PREDISP" & _
                "_DOSEFRAC = 1 AND [PREDISP_DOSEFRAC] IS NULL) OR ([PREDISP_DOSEFRAC] = @Original" & _
                "_PREDISP_DOSEFRAC)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_NUMSEQ_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISP_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_UNITEDISP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_UNITEDISP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_CDF_UD_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CDF_UD_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISP_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CIP13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CIP13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISP_DOSEFRAC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_DOSEFRAC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_DOSEFRAC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_DOSEFRAC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PREDISP_PRE_DISPENSATION] ([PREDISP_PRE_CODE_FK_PK], [PR" & _
                "EDISP_NUMSEQ_PK], [PREDISP_SAC_CODE_FK], [PREDISP_UNITEDISP], [PREDISP_CDF_UD_CO" & _
                "DE_FK], [PREDISP_CIP13], [PREDISP_DOSEFRAC]) VALUES (@PREDISP_PRE_CODE_FK_PK, @P" & _
                "REDISP_NUMSEQ_PK, @PREDISP_SAC_CODE_FK, @PREDISP_UNITEDISP, @PREDISP_CDF_UD_CODE" & _
                "_FK, @PREDISP_CIP13, @PREDISP_DOSEFRAC);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDISP_PRE_CODE_FK_PK, PREDISP" & _
                "_NUMSEQ_PK, PREDISP_SAC_CODE_FK, PREDISP_UNITEDISP, PREDISP_CDF_UD_CODE_FK, PRED" & _
                "ISP_CIP13, PREDISP_DOSEFRAC FROM theriaque.PREDISP_PRE_DISPENSATION WHERE (PREDI" & _
                "SP_NUMSEQ_PK = @PREDISP_NUMSEQ_PK) AND (PREDISP_PRE_CODE_FK_PK = @PREDISP_PRE_CO" & _
                "DE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_NUMSEQ_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_UNITEDISP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_UNITEDISP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_CDF_UD_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CDF_UD_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CIP13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_DOSEFRAC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_DOSEFRAC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PREDISP_PRE_DISPENSATION] SET [PREDISP_PRE_CODE_FK_PK] = @PRE" & _
                "DISP_PRE_CODE_FK_PK, [PREDISP_NUMSEQ_PK] = @PREDISP_NUMSEQ_PK, [PREDISP_SAC_CODE" & _
                "_FK] = @PREDISP_SAC_CODE_FK, [PREDISP_UNITEDISP] = @PREDISP_UNITEDISP, [PREDISP_" & _
                "CDF_UD_CODE_FK] = @PREDISP_CDF_UD_CODE_FK, [PREDISP_CIP13] = @PREDISP_CIP13, [PR" & _
                "EDISP_DOSEFRAC] = @PREDISP_DOSEFRAC WHERE (([PREDISP_PRE_CODE_FK_PK] = @Original" & _
                "_PREDISP_PRE_CODE_FK_PK) AND ([PREDISP_NUMSEQ_PK] = @Original_PREDISP_NUMSEQ_PK)" & _
                " AND ((@IsNull_PREDISP_SAC_CODE_FK = 1 AND [PREDISP_SAC_CODE_FK] IS NULL) OR ([P" & _
                "REDISP_SAC_CODE_FK] = @Original_PREDISP_SAC_CODE_FK)) AND ([PREDISP_UNITEDISP] =" & _
                " @Original_PREDISP_UNITEDISP) AND ([PREDISP_CDF_UD_CODE_FK] = @Original_PREDISP_" & _
                "CDF_UD_CODE_FK) AND ((@IsNull_PREDISP_CIP13 = 1 AND [PREDISP_CIP13] IS NULL) OR " & _
                "([PREDISP_CIP13] = @Original_PREDISP_CIP13)) AND ((@IsNull_PREDISP_DOSEFRAC = 1 " & _
                "AND [PREDISP_DOSEFRAC] IS NULL) OR ([PREDISP_DOSEFRAC] = @Original_PREDISP_DOSEF" & _
                "RAC)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDISP_PRE_CODE_FK_PK, PREDISP_NUMSEQ_PK, PREDISP_SAC_CODE_FK, " & _
                "PREDISP_UNITEDISP, PREDISP_CDF_UD_CODE_FK, PREDISP_CIP13, PREDISP_DOSEFRAC FROM " & _
                "theriaque.PREDISP_PRE_DISPENSATION WHERE (PREDISP_NUMSEQ_PK = @PREDISP_NUMSEQ_PK" & _
                ") AND (PREDISP_PRE_CODE_FK_PK = @PREDISP_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_NUMSEQ_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_SAC_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_UNITEDISP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_UNITEDISP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_CDF_UD_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CDF_UD_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CIP13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_DOSEFRAC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_DOSEFRAC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_NUMSEQ_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISP_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_SAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_SAC_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_UNITEDISP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_UNITEDISP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_CDF_UD_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CDF_UD_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISP_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CIP13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_CIP13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISP_DOSEFRAC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_DOSEFRAC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISP_DOSEFRAC", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 10, "PREDISP_DOSEFRAC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREDISP_PRE_CODE_FK_PK, PREDISP_NUMSEQ_PK, PREDISP_SAC_CODE_FK, PREDISP_UN" & _
                "ITEDISP, PREDISP_CDF_UD_CODE_FK, PREDISP_CIP13, PREDISP_DOSEFRAC FROM theriaque." & _
                "PREDISP_PRE_DISPENSATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREDISP_PRE_CODE_FK_PK, PREDISP_NUMSEQ_PK, PREDISP_SAC_CODE_FK, PREDISP_UN" & _
                "ITEDISP, PREDISP_CDF_UD_CODE_FK, PREDISP_CIP13, PREDISP_DOSEFRAC FROM theriaque." & _
                "PREDISP_PRE_DISPENSATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE PREDISP_PRE_CODE_FK_PK=@PREDISP_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISP_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISP_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable = New dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable, ByVal PREDISP_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDISP_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREDISP_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDISP_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable = New dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISP_PRE_DISPENSATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREDISP_PRE_DISPENSATION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREDISP_PRE_CODE_FK_PK As String, ByVal Original_PREDISP_NUMSEQ_PK As Byte, ByVal Original_PREDISP_SAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_PREDISP_UNITEDISP As Decimal, ByVal Original_PREDISP_CDF_UD_CODE_FK As String, ByVal Original_PREDISP_CIP13 As String, ByVal Original_PREDISP_DOSEFRAC As Global.System.Nullable(Of Decimal)) As Integer
            If (Original_PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREDISP_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PREDISP_NUMSEQ_PK, Byte)
            If (Original_PREDISP_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PREDISP_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PREDISP_UNITEDISP, Decimal)
            If (Original_PREDISP_CDF_UD_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISP_CDF_UD_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PREDISP_CDF_UD_CODE_FK, String)
            End If
            If (Original_PREDISP_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PREDISP_CIP13, String)
            End If
            If (Original_PREDISP_DOSEFRAC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PREDISP_DOSEFRAC.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREDISP_PRE_CODE_FK_PK As String, ByVal PREDISP_NUMSEQ_PK As Byte, ByVal PREDISP_SAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal PREDISP_UNITEDISP As Decimal, ByVal PREDISP_CDF_UD_CODE_FK As String, ByVal PREDISP_CIP13 As String, ByVal PREDISP_DOSEFRAC As Global.System.Nullable(Of Decimal)) As Integer
            If (PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREDISP_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREDISP_NUMSEQ_PK, Byte)
            If (PREDISP_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREDISP_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREDISP_UNITEDISP, Decimal)
            If (PREDISP_CDF_UD_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_CDF_UD_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PREDISP_CDF_UD_CODE_FK, String)
            End If
            If (PREDISP_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PREDISP_CIP13, String)
            End If
            If (PREDISP_DOSEFRAC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PREDISP_DOSEFRAC.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDISP_PRE_CODE_FK_PK As String, ByVal PREDISP_NUMSEQ_PK As Byte, ByVal PREDISP_SAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal PREDISP_UNITEDISP As Decimal, ByVal PREDISP_CDF_UD_CODE_FK As String, ByVal PREDISP_CIP13 As String, ByVal PREDISP_DOSEFRAC As Global.System.Nullable(Of Decimal), ByVal Original_PREDISP_PRE_CODE_FK_PK As String, ByVal Original_PREDISP_NUMSEQ_PK As Byte, ByVal Original_PREDISP_SAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_PREDISP_UNITEDISP As Decimal, ByVal Original_PREDISP_CDF_UD_CODE_FK As String, ByVal Original_PREDISP_CIP13 As String, ByVal Original_PREDISP_DOSEFRAC As Global.System.Nullable(Of Decimal)) As Integer
            If (PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREDISP_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREDISP_NUMSEQ_PK, Byte)
            If (PREDISP_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREDISP_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREDISP_UNITEDISP, Decimal)
            If (PREDISP_CDF_UD_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISP_CDF_UD_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PREDISP_CDF_UD_CODE_FK, String)
            End If
            If (PREDISP_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PREDISP_CIP13, String)
            End If
            If (PREDISP_DOSEFRAC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PREDISP_DOSEFRAC.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISP_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISP_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PREDISP_PRE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PREDISP_NUMSEQ_PK, Byte)
            If (Original_PREDISP_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PREDISP_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PREDISP_UNITEDISP, Decimal)
            If (Original_PREDISP_CDF_UD_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISP_CDF_UD_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PREDISP_CDF_UD_CODE_FK, String)
            End If
            If (Original_PREDISP_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PREDISP_CIP13, String)
            End If
            If (Original_PREDISP_DOSEFRAC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PREDISP_DOSEFRAC.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDISP_SAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal PREDISP_UNITEDISP As Decimal, ByVal PREDISP_CDF_UD_CODE_FK As String, ByVal PREDISP_CIP13 As String, ByVal PREDISP_DOSEFRAC As Global.System.Nullable(Of Decimal), ByVal Original_PREDISP_PRE_CODE_FK_PK As String, ByVal Original_PREDISP_NUMSEQ_PK As Byte, ByVal Original_PREDISP_SAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_PREDISP_UNITEDISP As Decimal, ByVal Original_PREDISP_CDF_UD_CODE_FK As String, ByVal Original_PREDISP_CIP13 As String, ByVal Original_PREDISP_DOSEFRAC As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_PREDISP_PRE_CODE_FK_PK, Original_PREDISP_NUMSEQ_PK, PREDISP_SAC_CODE_FK, PREDISP_UNITEDISP, PREDISP_CDF_UD_CODE_FK, PREDISP_CIP13, PREDISP_DOSEFRAC, Original_PREDISP_PRE_CODE_FK_PK, Original_PREDISP_NUMSEQ_PK, Original_PREDISP_SAC_CODE_FK, Original_PREDISP_UNITEDISP, Original_PREDISP_CDF_UD_CODE_FK, Original_PREDISP_CIP13, Original_PREDISP_DOSEFRAC)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PREVOLSOL_VOLUME_SOLUTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREVOLSOL_VOLUME_SOLUTION"
            tableMapping.ColumnMappings.Add("PREVOLSOL_PRE_CODE_FK_PK", "PREVOLSOL_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREVOLSOL_VOLSOLUTION", "PREVOLSOL_VOLSOLUTION")
            tableMapping.ColumnMappings.Add("PREVOLSOL_CDF_VOL_CODE_FK", "PREVOLSOL_CDF_VOL_CODE_FK")
            tableMapping.ColumnMappings.Add("PREVOLSOL_CIP13", "PREVOLSOL_CIP13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PREVOLSOL_VOLUME_SOLUTION] WHERE (([PREVOLSOL_PRE_CODE_F"& _ 
                "K_PK] = @Original_PREVOLSOL_PRE_CODE_FK_PK) AND ((@IsNull_PREVOLSOL_VOLSOLUTION "& _ 
                "= 1 AND [PREVOLSOL_VOLSOLUTION] IS NULL) OR ([PREVOLSOL_VOLSOLUTION] = @Original"& _ 
                "_PREVOLSOL_VOLSOLUTION)) AND ((@IsNull_PREVOLSOL_CDF_VOL_CODE_FK = 1 AND [PREVOL"& _ 
                "SOL_CDF_VOL_CODE_FK] IS NULL) OR ([PREVOLSOL_CDF_VOL_CODE_FK] = @Original_PREVOL"& _ 
                "SOL_CDF_VOL_CODE_FK)) AND ((@IsNull_PREVOLSOL_CIP13 = 1 AND [PREVOLSOL_CIP13] IS"& _ 
                " NULL) OR ([PREVOLSOL_CIP13] = @Original_PREVOLSOL_CIP13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREVOLSOL_VOLSOLUTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_VOLSOLUTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_VOLSOLUTION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PREVOLSOL_VOLSOLUTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREVOLSOL_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PREVOLSOL_VOLUME_SOLUTION] ([PREVOLSOL_PRE_CODE_FK_PK], "& _ 
                "[PREVOLSOL_VOLSOLUTION], [PREVOLSOL_CDF_VOL_CODE_FK], [PREVOLSOL_CIP13]) VALUES "& _ 
                "(@PREVOLSOL_PRE_CODE_FK_PK, @PREVOLSOL_VOLSOLUTION, @PREVOLSOL_CDF_VOL_CODE_FK, "& _ 
                "@PREVOLSOL_CIP13);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREVOLSOL_PRE_CODE_FK_PK, PREVOLSOL_VOLSOLUTION, PREV"& _ 
                "OLSOL_CDF_VOL_CODE_FK, PREVOLSOL_CIP13 FROM theriaque.PREVOLSOL_VOLUME_SOLUTION "& _ 
                "WHERE (PREVOLSOL_PRE_CODE_FK_PK = @PREVOLSOL_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_VOLSOLUTION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PREVOLSOL_VOLSOLUTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PREVOLSOL_VOLUME_SOLUTION] SET [PREVOLSOL_PRE_CODE_FK_PK] = @"& _ 
                "PREVOLSOL_PRE_CODE_FK_PK, [PREVOLSOL_VOLSOLUTION] = @PREVOLSOL_VOLSOLUTION, [PRE"& _ 
                "VOLSOL_CDF_VOL_CODE_FK] = @PREVOLSOL_CDF_VOL_CODE_FK, [PREVOLSOL_CIP13] = @PREVO"& _ 
                "LSOL_CIP13 WHERE (([PREVOLSOL_PRE_CODE_FK_PK] = @Original_PREVOLSOL_PRE_CODE_FK_"& _ 
                "PK) AND ((@IsNull_PREVOLSOL_VOLSOLUTION = 1 AND [PREVOLSOL_VOLSOLUTION] IS NULL)"& _ 
                " OR ([PREVOLSOL_VOLSOLUTION] = @Original_PREVOLSOL_VOLSOLUTION)) AND ((@IsNull_P"& _ 
                "REVOLSOL_CDF_VOL_CODE_FK = 1 AND [PREVOLSOL_CDF_VOL_CODE_FK] IS NULL) OR ([PREVO"& _ 
                "LSOL_CDF_VOL_CODE_FK] = @Original_PREVOLSOL_CDF_VOL_CODE_FK)) AND ((@IsNull_PREV"& _ 
                "OLSOL_CIP13 = 1 AND [PREVOLSOL_CIP13] IS NULL) OR ([PREVOLSOL_CIP13] = @Original"& _ 
                "_PREVOLSOL_CIP13)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PREVOLSOL_PRE_CODE_FK_PK, PREVOLSOL_VOLSOLUTION, PR"& _ 
                "EVOLSOL_CDF_VOL_CODE_FK, PREVOLSOL_CIP13 FROM theriaque.PREVOLSOL_VOLUME_SOLUTIO"& _ 
                "N WHERE (PREVOLSOL_PRE_CODE_FK_PK = @PREVOLSOL_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_VOLSOLUTION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PREVOLSOL_VOLSOLUTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CIP13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREVOLSOL_VOLSOLUTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_VOLSOLUTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_VOLSOLUTION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "PREVOLSOL_VOLSOLUTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CDF_VOL_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREVOLSOL_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CIP13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREVOLSOL_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_CIP13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREVOLSOL_PRE_CODE_FK_PK, PREVOLSOL_VOLSOLUTION, PREVOLSOL_CDF_VOL_CODE_FK" & _
                ", PREVOLSOL_CIP13 FROM theriaque.PREVOLSOL_VOLUME_SOLUTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREVOLSOL_PRE_CODE_FK_PK, PREVOLSOL_VOLSOLUTION, PREVOLSOL_CDF_VOL_CODE_FK" & _
                ", PREVOLSOL_CIP13 FROM theriaque.PREVOLSOL_VOLUME_SOLUTION " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE PREVOLSOL_PRE" & _
                "_CODE_FK_PK=@PREVOLSOL_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREVOLSOL_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable = New dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable, ByVal PREVOLSOL_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREVOLSOL_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREVOLSOL_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREVOLSOL_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREVOLSOL_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREVOLSOL_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREVOLSOL_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREVOLSOL_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable = New dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREVOLSOL_VOLUME_SOLUTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREVOLSOL_VOLUME_SOLUTION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREVOLSOL_PRE_CODE_FK_PK As String, ByVal Original_PREVOLSOL_VOLSOLUTION As Global.System.Nullable(Of Decimal), ByVal Original_PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal Original_PREVOLSOL_CIP13 As String) As Integer
            If (Original_PREVOLSOL_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREVOLSOL_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREVOLSOL_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREVOLSOL_VOLSOLUTION.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREVOLSOL_VOLSOLUTION.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PREVOLSOL_CDF_VOL_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PREVOLSOL_CDF_VOL_CODE_FK, String)
            End If
            If (Original_PREVOLSOL_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PREVOLSOL_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREVOLSOL_PRE_CODE_FK_PK As String, ByVal PREVOLSOL_VOLSOLUTION As Global.System.Nullable(Of Decimal), ByVal PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal PREVOLSOL_CIP13 As String) As Integer
            If (PREVOLSOL_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREVOLSOL_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREVOLSOL_PRE_CODE_FK_PK, String)
            End If
            If (PREVOLSOL_VOLSOLUTION.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREVOLSOL_VOLSOLUTION.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PREVOLSOL_CDF_VOL_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREVOLSOL_CDF_VOL_CODE_FK, String)
            End If
            If (PREVOLSOL_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREVOLSOL_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREVOLSOL_PRE_CODE_FK_PK As String, ByVal PREVOLSOL_VOLSOLUTION As Global.System.Nullable(Of Decimal), ByVal PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal PREVOLSOL_CIP13 As String, ByVal Original_PREVOLSOL_PRE_CODE_FK_PK As String, ByVal Original_PREVOLSOL_VOLSOLUTION As Global.System.Nullable(Of Decimal), ByVal Original_PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal Original_PREVOLSOL_CIP13 As String) As Integer
            If (PREVOLSOL_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREVOLSOL_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREVOLSOL_PRE_CODE_FK_PK, String)
            End If
            If (PREVOLSOL_VOLSOLUTION.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREVOLSOL_VOLSOLUTION.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PREVOLSOL_CDF_VOL_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREVOLSOL_CDF_VOL_CODE_FK, String)
            End If
            If (PREVOLSOL_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREVOLSOL_CIP13, String)
            End If
            If (Original_PREVOLSOL_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREVOLSOL_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PREVOLSOL_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREVOLSOL_VOLSOLUTION.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PREVOLSOL_VOLSOLUTION.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PREVOLSOL_CDF_VOL_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PREVOLSOL_CDF_VOL_CODE_FK, String)
            End If
            If (Original_PREVOLSOL_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PREVOLSOL_CIP13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREVOLSOL_VOLSOLUTION As Global.System.Nullable(Of Decimal), ByVal PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal PREVOLSOL_CIP13 As String, ByVal Original_PREVOLSOL_PRE_CODE_FK_PK As String, ByVal Original_PREVOLSOL_VOLSOLUTION As Global.System.Nullable(Of Decimal), ByVal Original_PREVOLSOL_CDF_VOL_CODE_FK As String, ByVal Original_PREVOLSOL_CIP13 As String) As Integer
            Return Me.Update(Original_PREVOLSOL_PRE_CODE_FK_PK, PREVOLSOL_VOLSOLUTION, PREVOLSOL_CDF_VOL_CODE_FK, PREVOLSOL_CIP13, Original_PREVOLSOL_PRE_CODE_FK_PK, Original_PREVOLSOL_VOLSOLUTION, Original_PREVOLSOL_CDF_VOL_CODE_FK, Original_PREVOLSOL_CIP13)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PREDISPMAX_PRE_DISP_MAXIMALETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PREDISPMAX_PRE_DISP_MAXIMALE"
            tableMapping.ColumnMappings.Add("PREDISPMAX_PRE_CODE_FK_PK", "PREDISPMAX_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("PREDISPMAX_PRE_CIP13", "PREDISPMAX_PRE_CIP13")
            tableMapping.ColumnMappings.Add("PREDISPMAX_MAXUCD", "PREDISPMAX_MAXUCD")
            tableMapping.ColumnMappings.Add("PREDISPMAX_MAXCIP", "PREDISPMAX_MAXCIP")
            tableMapping.ColumnMappings.Add("PREDISPMAX_CDF_TYPE_FK_PK", "PREDISPMAX_CDF_TYPE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[PREDISPMAX_PRE_DISP_MAXIMALE] WHERE (([PREDISPMAX_PRE_CO" & _
                "DE_FK_PK] = @Original_PREDISPMAX_PRE_CODE_FK_PK) AND ((@IsNull_PREDISPMAX_PRE_CI" & _
                "P13 = 1 AND [PREDISPMAX_PRE_CIP13] IS NULL) OR ([PREDISPMAX_PRE_CIP13] = @Origin" & _
                "al_PREDISPMAX_PRE_CIP13)) AND ((@IsNull_PREDISPMAX_MAXUCD = 1 AND [PREDISPMAX_MA" & _
                "XUCD] IS NULL) OR ([PREDISPMAX_MAXUCD] = @Original_PREDISPMAX_MAXUCD)) AND ((@Is" & _
                "Null_PREDISPMAX_MAXCIP = 1 AND [PREDISPMAX_MAXCIP] IS NULL) OR ([PREDISPMAX_MAXC" & _
                "IP] = @Original_PREDISPMAX_MAXCIP)) AND ([PREDISPMAX_CDF_TYPE_FK_PK] = @Original" & _
                "_PREDISPMAX_CDF_TYPE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[PREDISPMAX_PRE_DISP_MAXIMALE] ([PREDISPMAX_PRE_CODE_FK_P" & _
                "K], [PREDISPMAX_PRE_CIP13], [PREDISPMAX_MAXUCD], [PREDISPMAX_MAXCIP], [PREDISPMA" & _
                "X_CDF_TYPE_FK_PK]) VALUES (@PREDISPMAX_PRE_CODE_FK_PK, @PREDISPMAX_PRE_CIP13, @P" & _
                "REDISPMAX_MAXUCD, @PREDISPMAX_MAXCIP, @PREDISPMAX_CDF_TYPE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDI" & _
                "SPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP" & _
                ", PREDISPMAX_CDF_TYPE_FK_PK FROM theriaque.PREDISPMAX_PRE_DISP_MAXIMALE WHERE (P" & _
                "REDISPMAX_CDF_TYPE_FK_PK = @PREDISPMAX_CDF_TYPE_FK_PK) AND (PREDISPMAX_PRE_CODE_" & _
                "FK_PK = @PREDISPMAX_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[PREDISPMAX_PRE_DISP_MAXIMALE] SET [PREDISPMAX_PRE_CODE_FK_PK]" & _
                " = @PREDISPMAX_PRE_CODE_FK_PK, [PREDISPMAX_PRE_CIP13] = @PREDISPMAX_PRE_CIP13, [" & _
                "PREDISPMAX_MAXUCD] = @PREDISPMAX_MAXUCD, [PREDISPMAX_MAXCIP] = @PREDISPMAX_MAXCI" & _
                "P, [PREDISPMAX_CDF_TYPE_FK_PK] = @PREDISPMAX_CDF_TYPE_FK_PK WHERE (([PREDISPMAX_" & _
                "PRE_CODE_FK_PK] = @Original_PREDISPMAX_PRE_CODE_FK_PK) AND ((@IsNull_PREDISPMAX_" & _
                "PRE_CIP13 = 1 AND [PREDISPMAX_PRE_CIP13] IS NULL) OR ([PREDISPMAX_PRE_CIP13] = @" & _
                "Original_PREDISPMAX_PRE_CIP13)) AND ((@IsNull_PREDISPMAX_MAXUCD = 1 AND [PREDISP" & _
                "MAX_MAXUCD] IS NULL) OR ([PREDISPMAX_MAXUCD] = @Original_PREDISPMAX_MAXUCD)) AND" & _
                " ((@IsNull_PREDISPMAX_MAXCIP = 1 AND [PREDISPMAX_MAXCIP] IS NULL) OR ([PREDISPMA" & _
                "X_MAXCIP] = @Original_PREDISPMAX_MAXCIP)) AND ([PREDISPMAX_CDF_TYPE_FK_PK] = @Or" & _
                "iginal_PREDISPMAX_CDF_TYPE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PREDISPMAX_PRE_CODE_FK_PK, PREDISPMA" & _
                "X_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK FRO" & _
                "M theriaque.PREDISPMAX_PRE_DISP_MAXIMALE WHERE (PREDISPMAX_CDF_TYPE_FK_PK = @PRE" & _
                "DISPMAX_CDF_TYPE_FK_PK) AND (PREDISPMAX_PRE_CODE_FK_PK = @PREDISPMAX_PRE_CODE_FK" & _
                "_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_PRE_CIP13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CIP13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXUCD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_MAXCIP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 12, "PREDISPMAX_MAXCIP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_CDF_TYPE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDIS" & _
                "PMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK FROM theriaque.PREDISPMAX_PRE_DISP_MAXIMA" & _
                "LE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDIS" & _
                "PMAX_MAXCIP, PREDISPMAX_CDF_TYPE_FK_PK FROM theriaque.PREDISPMAX_PRE_DISP_MAXIMA" & _
                "LE " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE PREDISPMAX_PRE_CODE_FK_PK=@PREDISPMAX_PRE_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "PREDISPMAX_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable = New dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable, ByVal PREDISPMAX_PRE_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PREDISPMAX_PRE_CODE_FK_PK As String) As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable = New dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature2.PREDISPMAX_PRE_DISP_MAXIMALEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature2) As Integer
            Return Me.Adapter.Update(dataSet, "PREDISPMAX_PRE_DISP_MAXIMALE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PREDISPMAX_PRE_CODE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CIP13 As String, ByVal Original_PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            If (Original_PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PREDISPMAX_PRE_CIP13, String)
            End If
            If (Original_PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            If (PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PREDISPMAX_PRE_CIP13, String)
            End If
            If (PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDISPMAX_PRE_CODE_FK_PK As String, ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_CDF_TYPE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CODE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CIP13 As String, ByVal Original_PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            If (PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PREDISPMAX_PRE_CIP13, String)
            End If
            If (PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            If (Original_PREDISPMAX_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PREDISPMAX_PRE_CODE_FK_PK, String)
            End If
            If (Original_PREDISPMAX_PRE_CIP13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PREDISPMAX_PRE_CIP13, String)
            End If
            If (Original_PREDISPMAX_MAXUCD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PREDISPMAX_MAXUCD.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_MAXCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PREDISPMAX_MAXCIP.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDISPMAX_CDF_TYPE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PREDISPMAX_CDF_TYPE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PREDISPMAX_CDF_TYPE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PREDISPMAX_PRE_CIP13 As String, ByVal PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_PRE_CODE_FK_PK As String, ByVal Original_PREDISPMAX_PRE_CIP13 As String, ByVal Original_PREDISPMAX_MAXUCD As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_MAXCIP As Global.System.Nullable(Of Decimal), ByVal Original_PREDISPMAX_CDF_TYPE_FK_PK As String) As Integer
            Return Me.Update(Original_PREDISPMAX_PRE_CODE_FK_PK, PREDISPMAX_PRE_CIP13, PREDISPMAX_MAXUCD, PREDISPMAX_MAXCIP, Original_PREDISPMAX_CDF_TYPE_FK_PK, Original_PREDISPMAX_PRE_CODE_FK_PK, Original_PREDISPMAX_PRE_CIP13, Original_PREDISPMAX_MAXUCD, Original_PREDISPMAX_MAXCIP, Original_PREDISPMAX_CDF_TYPE_FK_PK)
        End Function
    End Class
End Namespace
