'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Posologie"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Posologie
    Inherits Global.System.Data.DataSet
    
    Private tableFPO_FICHEPOSO As FPO_FICHEPOSODataTable
    
    Private tableFPOCPH_FPOSO_CLPH As FPOCPH_FPOSO_CLPHDataTable
    
    Private tableFPOCH_POSOCHOIX As FPOCH_POSOCHOIXDataTable
    
    Private tableFPOSAC_POSO_SUBACT As FPOSAC_POSO_SUBACTDataTable
    
    Private tableFPOPR_FPOSO_PROD As FPOPR_FPOSO_PRODDataTable
    
    Private tableFPOCCH_FPOSO_CLCH As FPOCCH_FPOSO_CLCHDataTable
    
    Private tableFPOSP_POSO_SPE As FPOSP_POSO_SPEDataTable
    
    Private tableFPOVO_FPOSO_VOIE As FPOVO_FPOSO_VOIEDataTable
    
    Private tableFPOTE_FPOSO_TERRAIN As FPOTE_FPOSO_TERRAINDataTable
    
    Private tableFIN_FICHEINDIC As FIN_FICHEINDICDataTable
    
    Private tableFPOUT_FPOSO_UTILTH As FPOUT_FPOSO_UTILTHDataTable
    
    Private tableFPOCOUT_FPOSO_COMMENTUTILTH As FPOCOUT_FPOSO_COMMENTUTILTHDataTable
    
    Private tableIPO_INFOPOSO As IPO_INFOPOSODataTable
    
    Private tableIPOCOTE_INFPO_COMMENT_TERRAIN As IPOCOTE_INFPO_COMMENT_TERRAINDataTable
    
    Private tableIPOCOFQ_INFPO_COMMENT_FREQ As IPOCOFQ_INFPO_COMMENT_FREQDataTable
    
    Private tableIPOCOD_INFPO_COMMENT_DUREE As IPOCOD_INFPO_COMMENT_DUREEDataTable
    
    Private tableFPOCOAD_FPOSO_COMMENT_ADAPT As FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
    
    Private tableFPOCOSU_FPOSO_COMMENT_SURVEIL As FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
    
    Private tableFPOCOAU_FPOSO_COMMENT_AUTRE As FPOCOAU_FPOSO_COMMENT_AUTREDataTable
    
    Private tableFPOBIB_REFERENCE_BIBLIO As FPOBIB_REFERENCE_BIBLIODataTable
    
    Private tableFPOAFS_POSO_AFSSAPS As FPOAFS_POSO_AFSSAPSDataTable
    
    Private tableIPODUREE_INFOPOSO As IPODUREE_INFOPOSODataTable
    
    Private tableIPOJ_INFOPOSO_JOURNALIERE As IPOJ_INFOPOSO_JOURNALIEREDataTable
    
    Private tableCATC_CLASSEATC As CATC_CLASSEATCDataTable
    
    Private tableIPODOSE_INFOPOSO As IPODOSE_INFOPOSODataTable
    
    Private relationFK1_CATC_CLASSEATC As Global.System.Data.DataRelation
    
    Private relationFK1_IPOCOD As Global.System.Data.DataRelation
    
    Private relationFK1_IPOCOFQ As Global.System.Data.DataRelation
    
    Private relationFK1_IPOCOTE As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FPO_FICHEPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New FPO_FICHEPOSODataTable(ds.Tables("FPO_FICHEPOSO")))
            End If
            If (Not (ds.Tables("FPOCPH_FPOSO_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCPH_FPOSO_CLPHDataTable(ds.Tables("FPOCPH_FPOSO_CLPH")))
            End If
            If (Not (ds.Tables("FPOCH_POSOCHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCH_POSOCHOIXDataTable(ds.Tables("FPOCH_POSOCHOIX")))
            End If
            If (Not (ds.Tables("FPOSAC_POSO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPOSAC_POSO_SUBACTDataTable(ds.Tables("FPOSAC_POSO_SUBACT")))
            End If
            If (Not (ds.Tables("FPOPR_FPOSO_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPOPR_FPOSO_PRODDataTable(ds.Tables("FPOPR_FPOSO_PROD")))
            End If
            If (Not (ds.Tables("FPOCCH_FPOSO_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCCH_FPOSO_CLCHDataTable(ds.Tables("FPOCCH_FPOSO_CLCH")))
            End If
            If (Not (ds.Tables("FPOSP_POSO_SPE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOSP_POSO_SPEDataTable(ds.Tables("FPOSP_POSO_SPE")))
            End If
            If (Not (ds.Tables("FPOVO_FPOSO_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOVO_FPOSO_VOIEDataTable(ds.Tables("FPOVO_FPOSO_VOIE")))
            End If
            If (Not (ds.Tables("FPOTE_FPOSO_TERRAIN")) Is Nothing) Then
                MyBase.Tables.Add(New FPOTE_FPOSO_TERRAINDataTable(ds.Tables("FPOTE_FPOSO_TERRAIN")))
            End If
            If (Not (ds.Tables("FIN_FICHEINDIC")) Is Nothing) Then
                MyBase.Tables.Add(New FIN_FICHEINDICDataTable(ds.Tables("FIN_FICHEINDIC")))
            End If
            If (Not (ds.Tables("FPOUT_FPOSO_UTILTH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOUT_FPOSO_UTILTHDataTable(ds.Tables("FPOUT_FPOSO_UTILTH")))
            End If
            If (Not (ds.Tables("FPOCOUT_FPOSO_COMMENTUTILTH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOUT_FPOSO_COMMENTUTILTHDataTable(ds.Tables("FPOCOUT_FPOSO_COMMENTUTILTH")))
            End If
            If (Not (ds.Tables("IPO_INFOPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New IPO_INFOPOSODataTable(ds.Tables("IPO_INFOPOSO")))
            End If
            If (Not (ds.Tables("IPOCOTE_INFPO_COMMENT_TERRAIN")) Is Nothing) Then
                MyBase.Tables.Add(New IPOCOTE_INFPO_COMMENT_TERRAINDataTable(ds.Tables("IPOCOTE_INFPO_COMMENT_TERRAIN")))
            End If
            If (Not (ds.Tables("IPOCOFQ_INFPO_COMMENT_FREQ")) Is Nothing) Then
                MyBase.Tables.Add(New IPOCOFQ_INFPO_COMMENT_FREQDataTable(ds.Tables("IPOCOFQ_INFPO_COMMENT_FREQ")))
            End If
            If (Not (ds.Tables("IPOCOD_INFPO_COMMENT_DUREE")) Is Nothing) Then
                MyBase.Tables.Add(New IPOCOD_INFPO_COMMENT_DUREEDataTable(ds.Tables("IPOCOD_INFPO_COMMENT_DUREE")))
            End If
            If (Not (ds.Tables("FPOCOAD_FPOSO_COMMENT_ADAPT")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOAD_FPOSO_COMMENT_ADAPTDataTable(ds.Tables("FPOCOAD_FPOSO_COMMENT_ADAPT")))
            End If
            If (Not (ds.Tables("FPOCOSU_FPOSO_COMMENT_SURVEIL")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOSU_FPOSO_COMMENT_SURVEILDataTable(ds.Tables("FPOCOSU_FPOSO_COMMENT_SURVEIL")))
            End If
            If (Not (ds.Tables("FPOCOAU_FPOSO_COMMENT_AUTRE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOAU_FPOSO_COMMENT_AUTREDataTable(ds.Tables("FPOCOAU_FPOSO_COMMENT_AUTRE")))
            End If
            If (Not (ds.Tables("FPOBIB_REFERENCE_BIBLIO")) Is Nothing) Then
                MyBase.Tables.Add(New FPOBIB_REFERENCE_BIBLIODataTable(ds.Tables("FPOBIB_REFERENCE_BIBLIO")))
            End If
            If (Not (ds.Tables("FPOAFS_POSO_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FPOAFS_POSO_AFSSAPSDataTable(ds.Tables("FPOAFS_POSO_AFSSAPS")))
            End If
            If (Not (ds.Tables("IPODUREE_INFOPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New IPODUREE_INFOPOSODataTable(ds.Tables("IPODUREE_INFOPOSO")))
            End If
            If (Not (ds.Tables("IPOJ_INFOPOSO_JOURNALIERE")) Is Nothing) Then
                MyBase.Tables.Add(New IPOJ_INFOPOSO_JOURNALIEREDataTable(ds.Tables("IPOJ_INFOPOSO_JOURNALIERE")))
            End If
            If (Not (ds.Tables("CATC_CLASSEATC")) Is Nothing) Then
                MyBase.Tables.Add(New CATC_CLASSEATCDataTable(ds.Tables("CATC_CLASSEATC")))
            End If
            If (Not (ds.Tables("IPODOSE_INFOPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New IPODOSE_INFOPOSODataTable(ds.Tables("IPODOSE_INFOPOSO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPO_FICHEPOSO() As FPO_FICHEPOSODataTable
        Get
            Return Me.tableFPO_FICHEPOSO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCPH_FPOSO_CLPH() As FPOCPH_FPOSO_CLPHDataTable
        Get
            Return Me.tableFPOCPH_FPOSO_CLPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCH_POSOCHOIX() As FPOCH_POSOCHOIXDataTable
        Get
            Return Me.tableFPOCH_POSOCHOIX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOSAC_POSO_SUBACT() As FPOSAC_POSO_SUBACTDataTable
        Get
            Return Me.tableFPOSAC_POSO_SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOPR_FPOSO_PROD() As FPOPR_FPOSO_PRODDataTable
        Get
            Return Me.tableFPOPR_FPOSO_PROD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCCH_FPOSO_CLCH() As FPOCCH_FPOSO_CLCHDataTable
        Get
            Return Me.tableFPOCCH_FPOSO_CLCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOSP_POSO_SPE() As FPOSP_POSO_SPEDataTable
        Get
            Return Me.tableFPOSP_POSO_SPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOVO_FPOSO_VOIE() As FPOVO_FPOSO_VOIEDataTable
        Get
            Return Me.tableFPOVO_FPOSO_VOIE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOTE_FPOSO_TERRAIN() As FPOTE_FPOSO_TERRAINDataTable
        Get
            Return Me.tableFPOTE_FPOSO_TERRAIN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FIN_FICHEINDIC() As FIN_FICHEINDICDataTable
        Get
            Return Me.tableFIN_FICHEINDIC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOUT_FPOSO_UTILTH() As FPOUT_FPOSO_UTILTHDataTable
        Get
            Return Me.tableFPOUT_FPOSO_UTILTH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCOUT_FPOSO_COMMENTUTILTH() As FPOCOUT_FPOSO_COMMENTUTILTHDataTable
        Get
            Return Me.tableFPOCOUT_FPOSO_COMMENTUTILTH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPO_INFOPOSO() As IPO_INFOPOSODataTable
        Get
            Return Me.tableIPO_INFOPOSO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPOCOTE_INFPO_COMMENT_TERRAIN() As IPOCOTE_INFPO_COMMENT_TERRAINDataTable
        Get
            Return Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPOCOFQ_INFPO_COMMENT_FREQ() As IPOCOFQ_INFPO_COMMENT_FREQDataTable
        Get
            Return Me.tableIPOCOFQ_INFPO_COMMENT_FREQ
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPOCOD_INFPO_COMMENT_DUREE() As IPOCOD_INFPO_COMMENT_DUREEDataTable
        Get
            Return Me.tableIPOCOD_INFPO_COMMENT_DUREE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCOAD_FPOSO_COMMENT_ADAPT() As FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
        Get
            Return Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCOSU_FPOSO_COMMENT_SURVEIL() As FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
        Get
            Return Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOCOAU_FPOSO_COMMENT_AUTRE() As FPOCOAU_FPOSO_COMMENT_AUTREDataTable
        Get
            Return Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOBIB_REFERENCE_BIBLIO() As FPOBIB_REFERENCE_BIBLIODataTable
        Get
            Return Me.tableFPOBIB_REFERENCE_BIBLIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOAFS_POSO_AFSSAPS() As FPOAFS_POSO_AFSSAPSDataTable
        Get
            Return Me.tableFPOAFS_POSO_AFSSAPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPODUREE_INFOPOSO() As IPODUREE_INFOPOSODataTable
        Get
            Return Me.tableIPODUREE_INFOPOSO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPOJ_INFOPOSO_JOURNALIERE() As IPOJ_INFOPOSO_JOURNALIEREDataTable
        Get
            Return Me.tableIPOJ_INFOPOSO_JOURNALIERE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CATC_CLASSEATC() As CATC_CLASSEATCDataTable
        Get
            Return Me.tableCATC_CLASSEATC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IPODOSE_INFOPOSO() As IPODOSE_INFOPOSODataTable
        Get
            Return Me.tableIPODOSE_INFOPOSO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Posologie = CType(MyBase.Clone,dsTheriaque_Posologie)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FPO_FICHEPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New FPO_FICHEPOSODataTable(ds.Tables("FPO_FICHEPOSO")))
            End If
            If (Not (ds.Tables("FPOCPH_FPOSO_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCPH_FPOSO_CLPHDataTable(ds.Tables("FPOCPH_FPOSO_CLPH")))
            End If
            If (Not (ds.Tables("FPOCH_POSOCHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCH_POSOCHOIXDataTable(ds.Tables("FPOCH_POSOCHOIX")))
            End If
            If (Not (ds.Tables("FPOSAC_POSO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPOSAC_POSO_SUBACTDataTable(ds.Tables("FPOSAC_POSO_SUBACT")))
            End If
            If (Not (ds.Tables("FPOPR_FPOSO_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPOPR_FPOSO_PRODDataTable(ds.Tables("FPOPR_FPOSO_PROD")))
            End If
            If (Not (ds.Tables("FPOCCH_FPOSO_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCCH_FPOSO_CLCHDataTable(ds.Tables("FPOCCH_FPOSO_CLCH")))
            End If
            If (Not (ds.Tables("FPOSP_POSO_SPE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOSP_POSO_SPEDataTable(ds.Tables("FPOSP_POSO_SPE")))
            End If
            If (Not (ds.Tables("FPOVO_FPOSO_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOVO_FPOSO_VOIEDataTable(ds.Tables("FPOVO_FPOSO_VOIE")))
            End If
            If (Not (ds.Tables("FPOTE_FPOSO_TERRAIN")) Is Nothing) Then
                MyBase.Tables.Add(New FPOTE_FPOSO_TERRAINDataTable(ds.Tables("FPOTE_FPOSO_TERRAIN")))
            End If
            If (Not (ds.Tables("FIN_FICHEINDIC")) Is Nothing) Then
                MyBase.Tables.Add(New FIN_FICHEINDICDataTable(ds.Tables("FIN_FICHEINDIC")))
            End If
            If (Not (ds.Tables("FPOUT_FPOSO_UTILTH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOUT_FPOSO_UTILTHDataTable(ds.Tables("FPOUT_FPOSO_UTILTH")))
            End If
            If (Not (ds.Tables("FPOCOUT_FPOSO_COMMENTUTILTH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOUT_FPOSO_COMMENTUTILTHDataTable(ds.Tables("FPOCOUT_FPOSO_COMMENTUTILTH")))
            End If
            If (Not (ds.Tables("IPO_INFOPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New IPO_INFOPOSODataTable(ds.Tables("IPO_INFOPOSO")))
            End If
            If (Not (ds.Tables("IPOCOTE_INFPO_COMMENT_TERRAIN")) Is Nothing) Then
                MyBase.Tables.Add(New IPOCOTE_INFPO_COMMENT_TERRAINDataTable(ds.Tables("IPOCOTE_INFPO_COMMENT_TERRAIN")))
            End If
            If (Not (ds.Tables("IPOCOFQ_INFPO_COMMENT_FREQ")) Is Nothing) Then
                MyBase.Tables.Add(New IPOCOFQ_INFPO_COMMENT_FREQDataTable(ds.Tables("IPOCOFQ_INFPO_COMMENT_FREQ")))
            End If
            If (Not (ds.Tables("IPOCOD_INFPO_COMMENT_DUREE")) Is Nothing) Then
                MyBase.Tables.Add(New IPOCOD_INFPO_COMMENT_DUREEDataTable(ds.Tables("IPOCOD_INFPO_COMMENT_DUREE")))
            End If
            If (Not (ds.Tables("FPOCOAD_FPOSO_COMMENT_ADAPT")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOAD_FPOSO_COMMENT_ADAPTDataTable(ds.Tables("FPOCOAD_FPOSO_COMMENT_ADAPT")))
            End If
            If (Not (ds.Tables("FPOCOSU_FPOSO_COMMENT_SURVEIL")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOSU_FPOSO_COMMENT_SURVEILDataTable(ds.Tables("FPOCOSU_FPOSO_COMMENT_SURVEIL")))
            End If
            If (Not (ds.Tables("FPOCOAU_FPOSO_COMMENT_AUTRE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOCOAU_FPOSO_COMMENT_AUTREDataTable(ds.Tables("FPOCOAU_FPOSO_COMMENT_AUTRE")))
            End If
            If (Not (ds.Tables("FPOBIB_REFERENCE_BIBLIO")) Is Nothing) Then
                MyBase.Tables.Add(New FPOBIB_REFERENCE_BIBLIODataTable(ds.Tables("FPOBIB_REFERENCE_BIBLIO")))
            End If
            If (Not (ds.Tables("FPOAFS_POSO_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FPOAFS_POSO_AFSSAPSDataTable(ds.Tables("FPOAFS_POSO_AFSSAPS")))
            End If
            If (Not (ds.Tables("IPODUREE_INFOPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New IPODUREE_INFOPOSODataTable(ds.Tables("IPODUREE_INFOPOSO")))
            End If
            If (Not (ds.Tables("IPOJ_INFOPOSO_JOURNALIERE")) Is Nothing) Then
                MyBase.Tables.Add(New IPOJ_INFOPOSO_JOURNALIEREDataTable(ds.Tables("IPOJ_INFOPOSO_JOURNALIERE")))
            End If
            If (Not (ds.Tables("CATC_CLASSEATC")) Is Nothing) Then
                MyBase.Tables.Add(New CATC_CLASSEATCDataTable(ds.Tables("CATC_CLASSEATC")))
            End If
            If (Not (ds.Tables("IPODOSE_INFOPOSO")) Is Nothing) Then
                MyBase.Tables.Add(New IPODOSE_INFOPOSODataTable(ds.Tables("IPODOSE_INFOPOSO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFPO_FICHEPOSO = CType(MyBase.Tables("FPO_FICHEPOSO"),FPO_FICHEPOSODataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPO_FICHEPOSO) Is Nothing) Then
                Me.tableFPO_FICHEPOSO.InitVars
            End If
        End If
        Me.tableFPOCPH_FPOSO_CLPH = CType(MyBase.Tables("FPOCPH_FPOSO_CLPH"),FPOCPH_FPOSO_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCPH_FPOSO_CLPH) Is Nothing) Then
                Me.tableFPOCPH_FPOSO_CLPH.InitVars
            End If
        End If
        Me.tableFPOCH_POSOCHOIX = CType(MyBase.Tables("FPOCH_POSOCHOIX"),FPOCH_POSOCHOIXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCH_POSOCHOIX) Is Nothing) Then
                Me.tableFPOCH_POSOCHOIX.InitVars
            End If
        End If
        Me.tableFPOSAC_POSO_SUBACT = CType(MyBase.Tables("FPOSAC_POSO_SUBACT"),FPOSAC_POSO_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOSAC_POSO_SUBACT) Is Nothing) Then
                Me.tableFPOSAC_POSO_SUBACT.InitVars
            End If
        End If
        Me.tableFPOPR_FPOSO_PROD = CType(MyBase.Tables("FPOPR_FPOSO_PROD"),FPOPR_FPOSO_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOPR_FPOSO_PROD) Is Nothing) Then
                Me.tableFPOPR_FPOSO_PROD.InitVars
            End If
        End If
        Me.tableFPOCCH_FPOSO_CLCH = CType(MyBase.Tables("FPOCCH_FPOSO_CLCH"),FPOCCH_FPOSO_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCCH_FPOSO_CLCH) Is Nothing) Then
                Me.tableFPOCCH_FPOSO_CLCH.InitVars
            End If
        End If
        Me.tableFPOSP_POSO_SPE = CType(MyBase.Tables("FPOSP_POSO_SPE"),FPOSP_POSO_SPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOSP_POSO_SPE) Is Nothing) Then
                Me.tableFPOSP_POSO_SPE.InitVars
            End If
        End If
        Me.tableFPOVO_FPOSO_VOIE = CType(MyBase.Tables("FPOVO_FPOSO_VOIE"),FPOVO_FPOSO_VOIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOVO_FPOSO_VOIE) Is Nothing) Then
                Me.tableFPOVO_FPOSO_VOIE.InitVars
            End If
        End If
        Me.tableFPOTE_FPOSO_TERRAIN = CType(MyBase.Tables("FPOTE_FPOSO_TERRAIN"),FPOTE_FPOSO_TERRAINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOTE_FPOSO_TERRAIN) Is Nothing) Then
                Me.tableFPOTE_FPOSO_TERRAIN.InitVars
            End If
        End If
        Me.tableFIN_FICHEINDIC = CType(MyBase.Tables("FIN_FICHEINDIC"),FIN_FICHEINDICDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFIN_FICHEINDIC) Is Nothing) Then
                Me.tableFIN_FICHEINDIC.InitVars
            End If
        End If
        Me.tableFPOUT_FPOSO_UTILTH = CType(MyBase.Tables("FPOUT_FPOSO_UTILTH"),FPOUT_FPOSO_UTILTHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOUT_FPOSO_UTILTH) Is Nothing) Then
                Me.tableFPOUT_FPOSO_UTILTH.InitVars
            End If
        End If
        Me.tableFPOCOUT_FPOSO_COMMENTUTILTH = CType(MyBase.Tables("FPOCOUT_FPOSO_COMMENTUTILTH"),FPOCOUT_FPOSO_COMMENTUTILTHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCOUT_FPOSO_COMMENTUTILTH) Is Nothing) Then
                Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.InitVars
            End If
        End If
        Me.tableIPO_INFOPOSO = CType(MyBase.Tables("IPO_INFOPOSO"),IPO_INFOPOSODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPO_INFOPOSO) Is Nothing) Then
                Me.tableIPO_INFOPOSO.InitVars
            End If
        End If
        Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN = CType(MyBase.Tables("IPOCOTE_INFPO_COMMENT_TERRAIN"),IPOCOTE_INFPO_COMMENT_TERRAINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN) Is Nothing) Then
                Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.InitVars
            End If
        End If
        Me.tableIPOCOFQ_INFPO_COMMENT_FREQ = CType(MyBase.Tables("IPOCOFQ_INFPO_COMMENT_FREQ"),IPOCOFQ_INFPO_COMMENT_FREQDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPOCOFQ_INFPO_COMMENT_FREQ) Is Nothing) Then
                Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.InitVars
            End If
        End If
        Me.tableIPOCOD_INFPO_COMMENT_DUREE = CType(MyBase.Tables("IPOCOD_INFPO_COMMENT_DUREE"),IPOCOD_INFPO_COMMENT_DUREEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPOCOD_INFPO_COMMENT_DUREE) Is Nothing) Then
                Me.tableIPOCOD_INFPO_COMMENT_DUREE.InitVars
            End If
        End If
        Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT = CType(MyBase.Tables("FPOCOAD_FPOSO_COMMENT_ADAPT"),FPOCOAD_FPOSO_COMMENT_ADAPTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT) Is Nothing) Then
                Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.InitVars
            End If
        End If
        Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL = CType(MyBase.Tables("FPOCOSU_FPOSO_COMMENT_SURVEIL"),FPOCOSU_FPOSO_COMMENT_SURVEILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL) Is Nothing) Then
                Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.InitVars
            End If
        End If
        Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE = CType(MyBase.Tables("FPOCOAU_FPOSO_COMMENT_AUTRE"),FPOCOAU_FPOSO_COMMENT_AUTREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE) Is Nothing) Then
                Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.InitVars
            End If
        End If
        Me.tableFPOBIB_REFERENCE_BIBLIO = CType(MyBase.Tables("FPOBIB_REFERENCE_BIBLIO"),FPOBIB_REFERENCE_BIBLIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOBIB_REFERENCE_BIBLIO) Is Nothing) Then
                Me.tableFPOBIB_REFERENCE_BIBLIO.InitVars
            End If
        End If
        Me.tableFPOAFS_POSO_AFSSAPS = CType(MyBase.Tables("FPOAFS_POSO_AFSSAPS"),FPOAFS_POSO_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOAFS_POSO_AFSSAPS) Is Nothing) Then
                Me.tableFPOAFS_POSO_AFSSAPS.InitVars
            End If
        End If
        Me.tableIPODUREE_INFOPOSO = CType(MyBase.Tables("IPODUREE_INFOPOSO"),IPODUREE_INFOPOSODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPODUREE_INFOPOSO) Is Nothing) Then
                Me.tableIPODUREE_INFOPOSO.InitVars
            End If
        End If
        Me.tableIPOJ_INFOPOSO_JOURNALIERE = CType(MyBase.Tables("IPOJ_INFOPOSO_JOURNALIERE"),IPOJ_INFOPOSO_JOURNALIEREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPOJ_INFOPOSO_JOURNALIERE) Is Nothing) Then
                Me.tableIPOJ_INFOPOSO_JOURNALIERE.InitVars
            End If
        End If
        Me.tableCATC_CLASSEATC = CType(MyBase.Tables("CATC_CLASSEATC"),CATC_CLASSEATCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCATC_CLASSEATC) Is Nothing) Then
                Me.tableCATC_CLASSEATC.InitVars
            End If
        End If
        Me.tableIPODOSE_INFOPOSO = CType(MyBase.Tables("IPODOSE_INFOPOSO"),IPODOSE_INFOPOSODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIPODOSE_INFOPOSO) Is Nothing) Then
                Me.tableIPODOSE_INFOPOSO.InitVars
            End If
        End If
        Me.relationFK1_CATC_CLASSEATC = Me.Relations("FK1_CATC_CLASSEATC")
        Me.relationFK1_IPOCOD = Me.Relations("FK1_IPOCOD")
        Me.relationFK1_IPOCOFQ = Me.Relations("FK1_IPOCOFQ")
        Me.relationFK1_IPOCOTE = Me.Relations("FK1_IPOCOTE")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Posologie"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Posologie.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFPO_FICHEPOSO = New FPO_FICHEPOSODataTable
        MyBase.Tables.Add(Me.tableFPO_FICHEPOSO)
        Me.tableFPOCPH_FPOSO_CLPH = New FPOCPH_FPOSO_CLPHDataTable
        MyBase.Tables.Add(Me.tableFPOCPH_FPOSO_CLPH)
        Me.tableFPOCH_POSOCHOIX = New FPOCH_POSOCHOIXDataTable
        MyBase.Tables.Add(Me.tableFPOCH_POSOCHOIX)
        Me.tableFPOSAC_POSO_SUBACT = New FPOSAC_POSO_SUBACTDataTable
        MyBase.Tables.Add(Me.tableFPOSAC_POSO_SUBACT)
        Me.tableFPOPR_FPOSO_PROD = New FPOPR_FPOSO_PRODDataTable
        MyBase.Tables.Add(Me.tableFPOPR_FPOSO_PROD)
        Me.tableFPOCCH_FPOSO_CLCH = New FPOCCH_FPOSO_CLCHDataTable
        MyBase.Tables.Add(Me.tableFPOCCH_FPOSO_CLCH)
        Me.tableFPOSP_POSO_SPE = New FPOSP_POSO_SPEDataTable
        MyBase.Tables.Add(Me.tableFPOSP_POSO_SPE)
        Me.tableFPOVO_FPOSO_VOIE = New FPOVO_FPOSO_VOIEDataTable
        MyBase.Tables.Add(Me.tableFPOVO_FPOSO_VOIE)
        Me.tableFPOTE_FPOSO_TERRAIN = New FPOTE_FPOSO_TERRAINDataTable
        MyBase.Tables.Add(Me.tableFPOTE_FPOSO_TERRAIN)
        Me.tableFIN_FICHEINDIC = New FIN_FICHEINDICDataTable
        MyBase.Tables.Add(Me.tableFIN_FICHEINDIC)
        Me.tableFPOUT_FPOSO_UTILTH = New FPOUT_FPOSO_UTILTHDataTable
        MyBase.Tables.Add(Me.tableFPOUT_FPOSO_UTILTH)
        Me.tableFPOCOUT_FPOSO_COMMENTUTILTH = New FPOCOUT_FPOSO_COMMENTUTILTHDataTable
        MyBase.Tables.Add(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH)
        Me.tableIPO_INFOPOSO = New IPO_INFOPOSODataTable
        MyBase.Tables.Add(Me.tableIPO_INFOPOSO)
        Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN = New IPOCOTE_INFPO_COMMENT_TERRAINDataTable
        MyBase.Tables.Add(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN)
        Me.tableIPOCOFQ_INFPO_COMMENT_FREQ = New IPOCOFQ_INFPO_COMMENT_FREQDataTable
        MyBase.Tables.Add(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ)
        Me.tableIPOCOD_INFPO_COMMENT_DUREE = New IPOCOD_INFPO_COMMENT_DUREEDataTable
        MyBase.Tables.Add(Me.tableIPOCOD_INFPO_COMMENT_DUREE)
        Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT = New FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
        MyBase.Tables.Add(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT)
        Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL = New FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
        MyBase.Tables.Add(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL)
        Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE = New FPOCOAU_FPOSO_COMMENT_AUTREDataTable
        MyBase.Tables.Add(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE)
        Me.tableFPOBIB_REFERENCE_BIBLIO = New FPOBIB_REFERENCE_BIBLIODataTable
        MyBase.Tables.Add(Me.tableFPOBIB_REFERENCE_BIBLIO)
        Me.tableFPOAFS_POSO_AFSSAPS = New FPOAFS_POSO_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFPOAFS_POSO_AFSSAPS)
        Me.tableIPODUREE_INFOPOSO = New IPODUREE_INFOPOSODataTable
        MyBase.Tables.Add(Me.tableIPODUREE_INFOPOSO)
        Me.tableIPOJ_INFOPOSO_JOURNALIERE = New IPOJ_INFOPOSO_JOURNALIEREDataTable
        MyBase.Tables.Add(Me.tableIPOJ_INFOPOSO_JOURNALIERE)
        Me.tableCATC_CLASSEATC = New CATC_CLASSEATCDataTable
        MyBase.Tables.Add(Me.tableCATC_CLASSEATC)
        Me.tableIPODOSE_INFOPOSO = New IPODOSE_INFOPOSODataTable
        MyBase.Tables.Add(Me.tableIPODOSE_INFOPOSO)
        Me.relationFK1_CATC_CLASSEATC = New Global.System.Data.DataRelation("FK1_CATC_CLASSEATC", New Global.System.Data.DataColumn() {Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn}, New Global.System.Data.DataColumn() {Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CATC_CLASSEATC)
        Me.relationFK1_IPOCOD = New Global.System.Data.DataRelation("FK1_IPOCOD", New Global.System.Data.DataColumn() {Me.tableIPO_INFOPOSO.IPO_FPO_CODE_FK_PKColumn, Me.tableIPO_INFOPOSO.IPO_NUM_SEQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_IPO_CODE_FK_PKColumn, Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_IPO_NUM_SEQ_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_IPOCOD)
        Me.relationFK1_IPOCOFQ = New Global.System.Data.DataRelation("FK1_IPOCOFQ", New Global.System.Data.DataColumn() {Me.tableIPO_INFOPOSO.IPO_FPO_CODE_FK_PKColumn, Me.tableIPO_INFOPOSO.IPO_NUM_SEQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_IPO_CODE_FK_PKColumn, Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_IPO_NUM_SEQ_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_IPOCOFQ)
        Me.relationFK1_IPOCOTE = New Global.System.Data.DataRelation("FK1_IPOCOTE", New Global.System.Data.DataColumn() {Me.tableIPO_INFOPOSO.IPO_FPO_CODE_FK_PKColumn, Me.tableIPO_INFOPOSO.IPO_NUM_SEQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_IPO_CODE_FK_PKColumn, Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_IPO_NUM_SEQ_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_IPOCOTE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPO_FICHEPOSO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCPH_FPOSO_CLPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCH_POSOCHOIX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOSAC_POSO_SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOPR_FPOSO_PROD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCCH_FPOSO_CLCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOSP_POSO_SPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOVO_FPOSO_VOIE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOTE_FPOSO_TERRAIN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFIN_FICHEINDIC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOUT_FPOSO_UTILTH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCOUT_FPOSO_COMMENTUTILTH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPO_INFOPOSO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPOCOTE_INFPO_COMMENT_TERRAIN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPOCOFQ_INFPO_COMMENT_FREQ() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPOCOD_INFPO_COMMENT_DUREE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCOAD_FPOSO_COMMENT_ADAPT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCOSU_FPOSO_COMMENT_SURVEIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOCOAU_FPOSO_COMMENT_AUTRE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOBIB_REFERENCE_BIBLIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOAFS_POSO_AFSSAPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPODUREE_INFOPOSO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPOJ_INFOPOSO_JOURNALIERE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCATC_CLASSEATC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIPODOSE_INFOPOSO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FPO_FICHEPOSORowChangeEventHandler(ByVal sender As Object, ByVal e As FPO_FICHEPOSORowChangeEvent)
    
    Public Delegate Sub FPOCPH_FPOSO_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCPH_FPOSO_CLPHRowChangeEvent)
    
    Public Delegate Sub FPOCH_POSOCHOIXRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCH_POSOCHOIXRowChangeEvent)
    
    Public Delegate Sub FPOSAC_POSO_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOSAC_POSO_SUBACTRowChangeEvent)
    
    Public Delegate Sub FPOPR_FPOSO_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOPR_FPOSO_PRODRowChangeEvent)
    
    Public Delegate Sub FPOCCH_FPOSO_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCCH_FPOSO_CLCHRowChangeEvent)
    
    Public Delegate Sub FPOSP_POSO_SPERowChangeEventHandler(ByVal sender As Object, ByVal e As FPOSP_POSO_SPERowChangeEvent)
    
    Public Delegate Sub FPOVO_FPOSO_VOIERowChangeEventHandler(ByVal sender As Object, ByVal e As FPOVO_FPOSO_VOIERowChangeEvent)
    
    Public Delegate Sub FPOTE_FPOSO_TERRAINRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOTE_FPOSO_TERRAINRowChangeEvent)
    
    Public Delegate Sub FIN_FICHEINDICRowChangeEventHandler(ByVal sender As Object, ByVal e As FIN_FICHEINDICRowChangeEvent)
    
    Public Delegate Sub FPOUT_FPOSO_UTILTHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOUT_FPOSO_UTILTHRowChangeEvent)
    
    Public Delegate Sub FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEvent)
    
    Public Delegate Sub IPO_INFOPOSORowChangeEventHandler(ByVal sender As Object, ByVal e As IPO_INFOPOSORowChangeEvent)
    
    Public Delegate Sub IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEventHandler(ByVal sender As Object, ByVal e As IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEvent)
    
    Public Delegate Sub IPOCOFQ_INFPO_COMMENT_FREQRowChangeEventHandler(ByVal sender As Object, ByVal e As IPOCOFQ_INFPO_COMMENT_FREQRowChangeEvent)
    
    Public Delegate Sub IPOCOD_INFPO_COMMENT_DUREERowChangeEventHandler(ByVal sender As Object, ByVal e As IPOCOD_INFPO_COMMENT_DUREERowChangeEvent)
    
    Public Delegate Sub FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEvent)
    
    Public Delegate Sub FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEvent)
    
    Public Delegate Sub FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEventHandler(ByVal sender As Object, ByVal e As FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEvent)
    
    Public Delegate Sub FPOBIB_REFERENCE_BIBLIORowChangeEventHandler(ByVal sender As Object, ByVal e As FPOBIB_REFERENCE_BIBLIORowChangeEvent)
    
    Public Delegate Sub FPOAFS_POSO_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOAFS_POSO_AFSSAPSRowChangeEvent)
    
    Public Delegate Sub IPODUREE_INFOPOSORowChangeEventHandler(ByVal sender As Object, ByVal e As IPODUREE_INFOPOSORowChangeEvent)
    
    Public Delegate Sub IPOJ_INFOPOSO_JOURNALIERERowChangeEventHandler(ByVal sender As Object, ByVal e As IPOJ_INFOPOSO_JOURNALIERERowChangeEvent)
    
    Public Delegate Sub CATC_CLASSEATCRowChangeEventHandler(ByVal sender As Object, ByVal e As CATC_CLASSEATCRowChangeEvent)
    
    Public Delegate Sub IPODOSE_INFOPOSORowChangeEventHandler(ByVal sender As Object, ByVal e As IPODOSE_INFOPOSORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPO_FICHEPOSODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPO_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFPO_TEXTE As Global.System.Data.DataColumn
        
        Private columnFPO_DATECR As Global.System.Data.DataColumn
        
        Private columnFPO_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPO_FICHEPOSO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPO_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPO_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPO_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPO_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPO_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPO_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPO_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPO_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPO_FICHEPOSORow
            Get
                Return CType(Me.Rows(index),FPO_FICHEPOSORow)
            End Get
        End Property
        
        Public Event FPO_FICHEPOSORowChanging As FPO_FICHEPOSORowChangeEventHandler
        
        Public Event FPO_FICHEPOSORowChanged As FPO_FICHEPOSORowChangeEventHandler
        
        Public Event FPO_FICHEPOSORowDeleting As FPO_FICHEPOSORowChangeEventHandler
        
        Public Event FPO_FICHEPOSORowDeleted As FPO_FICHEPOSORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPO_FICHEPOSORow(ByVal row As FPO_FICHEPOSORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPO_FICHEPOSORow(ByVal FPO_CODE_SQ_PK As Integer, ByVal FPO_TEXTE As String, ByVal FPO_DATECR As Date, ByVal FPO_DATEMJ As Date) As FPO_FICHEPOSORow
            Dim rowFPO_FICHEPOSORow As FPO_FICHEPOSORow = CType(Me.NewRow,FPO_FICHEPOSORow)
            Dim columnValuesArray() As Object = New Object() {FPO_CODE_SQ_PK, FPO_TEXTE, FPO_DATECR, FPO_DATEMJ}
            rowFPO_FICHEPOSORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPO_FICHEPOSORow)
            Return rowFPO_FICHEPOSORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPO_CODE_SQ_PK(ByVal FPO_CODE_SQ_PK As Integer) As FPO_FICHEPOSORow
            Return CType(Me.Rows.Find(New Object() {FPO_CODE_SQ_PK}),FPO_FICHEPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPO_FICHEPOSODataTable = CType(MyBase.Clone,FPO_FICHEPOSODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPO_FICHEPOSODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPO_CODE_SQ_PK = MyBase.Columns("FPO_CODE_SQ_PK")
            Me.columnFPO_TEXTE = MyBase.Columns("FPO_TEXTE")
            Me.columnFPO_DATECR = MyBase.Columns("FPO_DATECR")
            Me.columnFPO_DATEMJ = MyBase.Columns("FPO_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPO_CODE_SQ_PK = New Global.System.Data.DataColumn("FPO_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPO_CODE_SQ_PK)
            Me.columnFPO_TEXTE = New Global.System.Data.DataColumn("FPO_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPO_TEXTE)
            Me.columnFPO_DATECR = New Global.System.Data.DataColumn("FPO_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPO_DATECR)
            Me.columnFPO_DATEMJ = New Global.System.Data.DataColumn("FPO_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPO_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPO_CODE_SQ_PK}, true))
            Me.columnFPO_CODE_SQ_PK.AllowDBNull = false
            Me.columnFPO_CODE_SQ_PK.Unique = true
            Me.columnFPO_TEXTE.MaxLength = 2147483647
            Me.columnFPO_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPO_FICHEPOSORow() As FPO_FICHEPOSORow
            Return CType(Me.NewRow,FPO_FICHEPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPO_FICHEPOSORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPO_FICHEPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPO_FICHEPOSORowChangedEvent) Is Nothing) Then
                RaiseEvent FPO_FICHEPOSORowChanged(Me, New FPO_FICHEPOSORowChangeEvent(CType(e.Row,FPO_FICHEPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPO_FICHEPOSORowChangingEvent) Is Nothing) Then
                RaiseEvent FPO_FICHEPOSORowChanging(Me, New FPO_FICHEPOSORowChangeEvent(CType(e.Row,FPO_FICHEPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPO_FICHEPOSORowDeletedEvent) Is Nothing) Then
                RaiseEvent FPO_FICHEPOSORowDeleted(Me, New FPO_FICHEPOSORowChangeEvent(CType(e.Row,FPO_FICHEPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPO_FICHEPOSORowDeletingEvent) Is Nothing) Then
                RaiseEvent FPO_FICHEPOSORowDeleting(Me, New FPO_FICHEPOSORowChangeEvent(CType(e.Row,FPO_FICHEPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPO_FICHEPOSORow(ByVal row As FPO_FICHEPOSORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPO_FICHEPOSODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCPH_FPOSO_CLPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCPH_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCPH_FPOSO_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCPH_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCPH_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCPH_FPOSO_CLPHRow
            Get
                Return CType(Me.Rows(index),FPOCPH_FPOSO_CLPHRow)
            End Get
        End Property
        
        Public Event FPOCPH_FPOSO_CLPHRowChanging As FPOCPH_FPOSO_CLPHRowChangeEventHandler
        
        Public Event FPOCPH_FPOSO_CLPHRowChanged As FPOCPH_FPOSO_CLPHRowChangeEventHandler
        
        Public Event FPOCPH_FPOSO_CLPHRowDeleting As FPOCPH_FPOSO_CLPHRowChangeEventHandler
        
        Public Event FPOCPH_FPOSO_CLPHRowDeleted As FPOCPH_FPOSO_CLPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCPH_FPOSO_CLPHRow(ByVal row As FPOCPH_FPOSO_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCPH_FPOSO_CLPHRow(ByVal FPOCPH_FPO_CODE_FK_PK As Integer, ByVal FPOCPH_CPH_CODE_FK_PK As String) As FPOCPH_FPOSO_CLPHRow
            Dim rowFPOCPH_FPOSO_CLPHRow As FPOCPH_FPOSO_CLPHRow = CType(Me.NewRow,FPOCPH_FPOSO_CLPHRow)
            Dim columnValuesArray() As Object = New Object() {FPOCPH_FPO_CODE_FK_PK, FPOCPH_CPH_CODE_FK_PK}
            rowFPOCPH_FPOSO_CLPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCPH_FPOSO_CLPHRow)
            Return rowFPOCPH_FPOSO_CLPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCPH_FPO_CODE_FK_PKFPOCPH_CPH_CODE_FK_PK(ByVal FPOCPH_FPO_CODE_FK_PK As Integer, ByVal FPOCPH_CPH_CODE_FK_PK As String) As FPOCPH_FPOSO_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FPOCPH_FPO_CODE_FK_PK, FPOCPH_CPH_CODE_FK_PK}),FPOCPH_FPOSO_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCPH_FPOSO_CLPHDataTable = CType(MyBase.Clone,FPOCPH_FPOSO_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCPH_FPOSO_CLPHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCPH_FPO_CODE_FK_PK = MyBase.Columns("FPOCPH_FPO_CODE_FK_PK")
            Me.columnFPOCPH_CPH_CODE_FK_PK = MyBase.Columns("FPOCPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCPH_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCPH_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCPH_FPO_CODE_FK_PK)
            Me.columnFPOCPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCPH_FPO_CODE_FK_PK, Me.columnFPOCPH_CPH_CODE_FK_PK}, true))
            Me.columnFPOCPH_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCPH_FPOSO_CLPHRow() As FPOCPH_FPOSO_CLPHRow
            Return CType(Me.NewRow,FPOCPH_FPOSO_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCPH_FPOSO_CLPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCPH_FPOSO_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCPH_FPOSO_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCPH_FPOSO_CLPHRowChanged(Me, New FPOCPH_FPOSO_CLPHRowChangeEvent(CType(e.Row,FPOCPH_FPOSO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCPH_FPOSO_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCPH_FPOSO_CLPHRowChanging(Me, New FPOCPH_FPOSO_CLPHRowChangeEvent(CType(e.Row,FPOCPH_FPOSO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCPH_FPOSO_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCPH_FPOSO_CLPHRowDeleted(Me, New FPOCPH_FPOSO_CLPHRowChangeEvent(CType(e.Row,FPOCPH_FPOSO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCPH_FPOSO_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCPH_FPOSO_CLPHRowDeleting(Me, New FPOCPH_FPOSO_CLPHRowChangeEvent(CType(e.Row,FPOCPH_FPOSO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCPH_FPOSO_CLPHRow(ByVal row As FPOCPH_FPOSO_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCPH_FPOSO_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCH_POSOCHOIXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCH_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCH_CH_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCH_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCH_POSOCHOIX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCH_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCH_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCH_CH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCH_CH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCH_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCH_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCH_POSOCHOIXRow
            Get
                Return CType(Me.Rows(index),FPOCH_POSOCHOIXRow)
            End Get
        End Property
        
        Public Event FPOCH_POSOCHOIXRowChanging As FPOCH_POSOCHOIXRowChangeEventHandler
        
        Public Event FPOCH_POSOCHOIXRowChanged As FPOCH_POSOCHOIXRowChangeEventHandler
        
        Public Event FPOCH_POSOCHOIXRowDeleting As FPOCH_POSOCHOIXRowChangeEventHandler
        
        Public Event FPOCH_POSOCHOIXRowDeleted As FPOCH_POSOCHOIXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCH_POSOCHOIXRow(ByVal row As FPOCH_POSOCHOIXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCH_POSOCHOIXRow(ByVal FPOCH_FPO_CODE_FK_PK As Integer, ByVal FPOCH_CH_CODE_FK_PK As Integer, ByVal FPOCH_NUMORD As Short) As FPOCH_POSOCHOIXRow
            Dim rowFPOCH_POSOCHOIXRow As FPOCH_POSOCHOIXRow = CType(Me.NewRow,FPOCH_POSOCHOIXRow)
            Dim columnValuesArray() As Object = New Object() {FPOCH_FPO_CODE_FK_PK, FPOCH_CH_CODE_FK_PK, FPOCH_NUMORD}
            rowFPOCH_POSOCHOIXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCH_POSOCHOIXRow)
            Return rowFPOCH_POSOCHOIXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCH_FPO_CODE_FK_PKFPOCH_CH_CODE_FK_PK(ByVal FPOCH_FPO_CODE_FK_PK As Integer, ByVal FPOCH_CH_CODE_FK_PK As Integer) As FPOCH_POSOCHOIXRow
            Return CType(Me.Rows.Find(New Object() {FPOCH_FPO_CODE_FK_PK, FPOCH_CH_CODE_FK_PK}),FPOCH_POSOCHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCH_POSOCHOIXDataTable = CType(MyBase.Clone,FPOCH_POSOCHOIXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCH_POSOCHOIXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCH_FPO_CODE_FK_PK = MyBase.Columns("FPOCH_FPO_CODE_FK_PK")
            Me.columnFPOCH_CH_CODE_FK_PK = MyBase.Columns("FPOCH_CH_CODE_FK_PK")
            Me.columnFPOCH_NUMORD = MyBase.Columns("FPOCH_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCH_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCH_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCH_FPO_CODE_FK_PK)
            Me.columnFPOCH_CH_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCH_CH_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCH_CH_CODE_FK_PK)
            Me.columnFPOCH_NUMORD = New Global.System.Data.DataColumn("FPOCH_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCH_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCH_FPO_CODE_FK_PK, Me.columnFPOCH_CH_CODE_FK_PK}, true))
            Me.columnFPOCH_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCH_CH_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCH_POSOCHOIXRow() As FPOCH_POSOCHOIXRow
            Return CType(Me.NewRow,FPOCH_POSOCHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCH_POSOCHOIXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCH_POSOCHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCH_POSOCHOIXRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCH_POSOCHOIXRowChanged(Me, New FPOCH_POSOCHOIXRowChangeEvent(CType(e.Row,FPOCH_POSOCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCH_POSOCHOIXRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCH_POSOCHOIXRowChanging(Me, New FPOCH_POSOCHOIXRowChangeEvent(CType(e.Row,FPOCH_POSOCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCH_POSOCHOIXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCH_POSOCHOIXRowDeleted(Me, New FPOCH_POSOCHOIXRowChangeEvent(CType(e.Row,FPOCH_POSOCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCH_POSOCHOIXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCH_POSOCHOIXRowDeleting(Me, New FPOCH_POSOCHOIXRowChangeEvent(CType(e.Row,FPOCH_POSOCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCH_POSOCHOIXRow(ByVal row As FPOCH_POSOCHOIXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCH_POSOCHOIXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOSAC_POSO_SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOSAC_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOSAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOSAC_POSO_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOSAC_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOSAC_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOSAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOSAC_POSO_SUBACTRow
            Get
                Return CType(Me.Rows(index),FPOSAC_POSO_SUBACTRow)
            End Get
        End Property
        
        Public Event FPOSAC_POSO_SUBACTRowChanging As FPOSAC_POSO_SUBACTRowChangeEventHandler
        
        Public Event FPOSAC_POSO_SUBACTRowChanged As FPOSAC_POSO_SUBACTRowChangeEventHandler
        
        Public Event FPOSAC_POSO_SUBACTRowDeleting As FPOSAC_POSO_SUBACTRowChangeEventHandler
        
        Public Event FPOSAC_POSO_SUBACTRowDeleted As FPOSAC_POSO_SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOSAC_POSO_SUBACTRow(ByVal row As FPOSAC_POSO_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOSAC_POSO_SUBACTRow(ByVal FPOSAC_FPO_CODE_FK_PK As Integer, ByVal FPOSAC_SAC_CODE_FK_PK As Integer) As FPOSAC_POSO_SUBACTRow
            Dim rowFPOSAC_POSO_SUBACTRow As FPOSAC_POSO_SUBACTRow = CType(Me.NewRow,FPOSAC_POSO_SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {FPOSAC_FPO_CODE_FK_PK, FPOSAC_SAC_CODE_FK_PK}
            rowFPOSAC_POSO_SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOSAC_POSO_SUBACTRow)
            Return rowFPOSAC_POSO_SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOSAC_FPO_CODE_FK_PKFPOSAC_SAC_CODE_FK_PK(ByVal FPOSAC_FPO_CODE_FK_PK As Integer, ByVal FPOSAC_SAC_CODE_FK_PK As Integer) As FPOSAC_POSO_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {FPOSAC_FPO_CODE_FK_PK, FPOSAC_SAC_CODE_FK_PK}),FPOSAC_POSO_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOSAC_POSO_SUBACTDataTable = CType(MyBase.Clone,FPOSAC_POSO_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOSAC_POSO_SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOSAC_FPO_CODE_FK_PK = MyBase.Columns("FPOSAC_FPO_CODE_FK_PK")
            Me.columnFPOSAC_SAC_CODE_FK_PK = MyBase.Columns("FPOSAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOSAC_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOSAC_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOSAC_FPO_CODE_FK_PK)
            Me.columnFPOSAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("FPOSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOSAC_FPO_CODE_FK_PK, Me.columnFPOSAC_SAC_CODE_FK_PK}, true))
            Me.columnFPOSAC_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOSAC_POSO_SUBACTRow() As FPOSAC_POSO_SUBACTRow
            Return CType(Me.NewRow,FPOSAC_POSO_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOSAC_POSO_SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOSAC_POSO_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOSAC_POSO_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOSAC_POSO_SUBACTRowChanged(Me, New FPOSAC_POSO_SUBACTRowChangeEvent(CType(e.Row,FPOSAC_POSO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOSAC_POSO_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOSAC_POSO_SUBACTRowChanging(Me, New FPOSAC_POSO_SUBACTRowChangeEvent(CType(e.Row,FPOSAC_POSO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOSAC_POSO_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOSAC_POSO_SUBACTRowDeleted(Me, New FPOSAC_POSO_SUBACTRowChangeEvent(CType(e.Row,FPOSAC_POSO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOSAC_POSO_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOSAC_POSO_SUBACTRowDeleting(Me, New FPOSAC_POSO_SUBACTRowChangeEvent(CType(e.Row,FPOSAC_POSO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOSAC_POSO_SUBACTRow(ByVal row As FPOSAC_POSO_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOSAC_POSO_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOPR_FPOSO_PRODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOPR_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOPR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOPR_FPOSO_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOPR_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOPR_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOPR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOPR_FPOSO_PRODRow
            Get
                Return CType(Me.Rows(index),FPOPR_FPOSO_PRODRow)
            End Get
        End Property
        
        Public Event FPOPR_FPOSO_PRODRowChanging As FPOPR_FPOSO_PRODRowChangeEventHandler
        
        Public Event FPOPR_FPOSO_PRODRowChanged As FPOPR_FPOSO_PRODRowChangeEventHandler
        
        Public Event FPOPR_FPOSO_PRODRowDeleting As FPOPR_FPOSO_PRODRowChangeEventHandler
        
        Public Event FPOPR_FPOSO_PRODRowDeleted As FPOPR_FPOSO_PRODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOPR_FPOSO_PRODRow(ByVal row As FPOPR_FPOSO_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOPR_FPOSO_PRODRow(ByVal FPOPR_FPO_CODE_FK_PK As Integer, ByVal FPOPR_PR_CODE_FK_PK As Integer) As FPOPR_FPOSO_PRODRow
            Dim rowFPOPR_FPOSO_PRODRow As FPOPR_FPOSO_PRODRow = CType(Me.NewRow,FPOPR_FPOSO_PRODRow)
            Dim columnValuesArray() As Object = New Object() {FPOPR_FPO_CODE_FK_PK, FPOPR_PR_CODE_FK_PK}
            rowFPOPR_FPOSO_PRODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOPR_FPOSO_PRODRow)
            Return rowFPOPR_FPOSO_PRODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOPR_FPO_CODE_FK_PKFPOPR_PR_CODE_FK_PK(ByVal FPOPR_FPO_CODE_FK_PK As Integer, ByVal FPOPR_PR_CODE_FK_PK As Integer) As FPOPR_FPOSO_PRODRow
            Return CType(Me.Rows.Find(New Object() {FPOPR_FPO_CODE_FK_PK, FPOPR_PR_CODE_FK_PK}),FPOPR_FPOSO_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOPR_FPOSO_PRODDataTable = CType(MyBase.Clone,FPOPR_FPOSO_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOPR_FPOSO_PRODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOPR_FPO_CODE_FK_PK = MyBase.Columns("FPOPR_FPO_CODE_FK_PK")
            Me.columnFPOPR_PR_CODE_FK_PK = MyBase.Columns("FPOPR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOPR_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOPR_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOPR_FPO_CODE_FK_PK)
            Me.columnFPOPR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("FPOPR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOPR_FPO_CODE_FK_PK, Me.columnFPOPR_PR_CODE_FK_PK}, true))
            Me.columnFPOPR_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOPR_FPOSO_PRODRow() As FPOPR_FPOSO_PRODRow
            Return CType(Me.NewRow,FPOPR_FPOSO_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOPR_FPOSO_PRODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOPR_FPOSO_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOPR_FPOSO_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOPR_FPOSO_PRODRowChanged(Me, New FPOPR_FPOSO_PRODRowChangeEvent(CType(e.Row,FPOPR_FPOSO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOPR_FPOSO_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOPR_FPOSO_PRODRowChanging(Me, New FPOPR_FPOSO_PRODRowChangeEvent(CType(e.Row,FPOPR_FPOSO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOPR_FPOSO_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOPR_FPOSO_PRODRowDeleted(Me, New FPOPR_FPOSO_PRODRowChangeEvent(CType(e.Row,FPOPR_FPOSO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOPR_FPOSO_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOPR_FPOSO_PRODRowDeleting(Me, New FPOPR_FPOSO_PRODRowChangeEvent(CType(e.Row,FPOPR_FPOSO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOPR_FPOSO_PRODRow(ByVal row As FPOPR_FPOSO_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOPR_FPOSO_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCCH_FPOSO_CLCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCCH_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCCH_FPOSO_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCCH_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCCH_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCCH_FPOSO_CLCHRow
            Get
                Return CType(Me.Rows(index),FPOCCH_FPOSO_CLCHRow)
            End Get
        End Property
        
        Public Event FPOCCH_FPOSO_CLCHRowChanging As FPOCCH_FPOSO_CLCHRowChangeEventHandler
        
        Public Event FPOCCH_FPOSO_CLCHRowChanged As FPOCCH_FPOSO_CLCHRowChangeEventHandler
        
        Public Event FPOCCH_FPOSO_CLCHRowDeleting As FPOCCH_FPOSO_CLCHRowChangeEventHandler
        
        Public Event FPOCCH_FPOSO_CLCHRowDeleted As FPOCCH_FPOSO_CLCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCCH_FPOSO_CLCHRow(ByVal row As FPOCCH_FPOSO_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCCH_FPOSO_CLCHRow(ByVal FPOCCH_FPO_CODE_FK_PK As Integer, ByVal FPOCCH_CCH_CODE_FK_PK As String) As FPOCCH_FPOSO_CLCHRow
            Dim rowFPOCCH_FPOSO_CLCHRow As FPOCCH_FPOSO_CLCHRow = CType(Me.NewRow,FPOCCH_FPOSO_CLCHRow)
            Dim columnValuesArray() As Object = New Object() {FPOCCH_FPO_CODE_FK_PK, FPOCCH_CCH_CODE_FK_PK}
            rowFPOCCH_FPOSO_CLCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCCH_FPOSO_CLCHRow)
            Return rowFPOCCH_FPOSO_CLCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCCH_FPO_CODE_FK_PKFPOCCH_CCH_CODE_FK_PK(ByVal FPOCCH_FPO_CODE_FK_PK As Integer, ByVal FPOCCH_CCH_CODE_FK_PK As String) As FPOCCH_FPOSO_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FPOCCH_FPO_CODE_FK_PK, FPOCCH_CCH_CODE_FK_PK}),FPOCCH_FPOSO_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCCH_FPOSO_CLCHDataTable = CType(MyBase.Clone,FPOCCH_FPOSO_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCCH_FPOSO_CLCHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCCH_FPO_CODE_FK_PK = MyBase.Columns("FPOCCH_FPO_CODE_FK_PK")
            Me.columnFPOCCH_CCH_CODE_FK_PK = MyBase.Columns("FPOCCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCCH_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCCH_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCCH_FPO_CODE_FK_PK)
            Me.columnFPOCCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCCH_FPO_CODE_FK_PK, Me.columnFPOCCH_CCH_CODE_FK_PK}, true))
            Me.columnFPOCCH_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCCH_FPOSO_CLCHRow() As FPOCCH_FPOSO_CLCHRow
            Return CType(Me.NewRow,FPOCCH_FPOSO_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCCH_FPOSO_CLCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCCH_FPOSO_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCCH_FPOSO_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCCH_FPOSO_CLCHRowChanged(Me, New FPOCCH_FPOSO_CLCHRowChangeEvent(CType(e.Row,FPOCCH_FPOSO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCCH_FPOSO_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCCH_FPOSO_CLCHRowChanging(Me, New FPOCCH_FPOSO_CLCHRowChangeEvent(CType(e.Row,FPOCCH_FPOSO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCCH_FPOSO_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCCH_FPOSO_CLCHRowDeleted(Me, New FPOCCH_FPOSO_CLCHRowChangeEvent(CType(e.Row,FPOCCH_FPOSO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCCH_FPOSO_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCCH_FPOSO_CLCHRowDeleting(Me, New FPOCCH_FPOSO_CLCHRowChangeEvent(CType(e.Row,FPOCCH_FPOSO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCCH_FPOSO_CLCHRow(ByVal row As FPOCCH_FPOSO_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCCH_FPOSO_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOSP_POSO_SPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOSP_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOSP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOSP_POSO_SPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOSP_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOSP_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOSP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOSP_POSO_SPERow
            Get
                Return CType(Me.Rows(index),FPOSP_POSO_SPERow)
            End Get
        End Property
        
        Public Event FPOSP_POSO_SPERowChanging As FPOSP_POSO_SPERowChangeEventHandler
        
        Public Event FPOSP_POSO_SPERowChanged As FPOSP_POSO_SPERowChangeEventHandler
        
        Public Event FPOSP_POSO_SPERowDeleting As FPOSP_POSO_SPERowChangeEventHandler
        
        Public Event FPOSP_POSO_SPERowDeleted As FPOSP_POSO_SPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOSP_POSO_SPERow(ByVal row As FPOSP_POSO_SPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOSP_POSO_SPERow(ByVal FPOSP_FPO_CODE_FK_PK As Integer, ByVal FPOSP_SP_CODE_FK_PK As Integer) As FPOSP_POSO_SPERow
            Dim rowFPOSP_POSO_SPERow As FPOSP_POSO_SPERow = CType(Me.NewRow,FPOSP_POSO_SPERow)
            Dim columnValuesArray() As Object = New Object() {FPOSP_FPO_CODE_FK_PK, FPOSP_SP_CODE_FK_PK}
            rowFPOSP_POSO_SPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOSP_POSO_SPERow)
            Return rowFPOSP_POSO_SPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOSP_FPO_CODE_FK_PKFPOSP_SP_CODE_FK_PK(ByVal FPOSP_FPO_CODE_FK_PK As Integer, ByVal FPOSP_SP_CODE_FK_PK As Integer) As FPOSP_POSO_SPERow
            Return CType(Me.Rows.Find(New Object() {FPOSP_FPO_CODE_FK_PK, FPOSP_SP_CODE_FK_PK}),FPOSP_POSO_SPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOSP_POSO_SPEDataTable = CType(MyBase.Clone,FPOSP_POSO_SPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOSP_POSO_SPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOSP_FPO_CODE_FK_PK = MyBase.Columns("FPOSP_FPO_CODE_FK_PK")
            Me.columnFPOSP_SP_CODE_FK_PK = MyBase.Columns("FPOSP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOSP_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOSP_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOSP_FPO_CODE_FK_PK)
            Me.columnFPOSP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FPOSP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOSP_FPO_CODE_FK_PK, Me.columnFPOSP_SP_CODE_FK_PK}, true))
            Me.columnFPOSP_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOSP_POSO_SPERow() As FPOSP_POSO_SPERow
            Return CType(Me.NewRow,FPOSP_POSO_SPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOSP_POSO_SPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOSP_POSO_SPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOSP_POSO_SPERowChangedEvent) Is Nothing) Then
                RaiseEvent FPOSP_POSO_SPERowChanged(Me, New FPOSP_POSO_SPERowChangeEvent(CType(e.Row,FPOSP_POSO_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOSP_POSO_SPERowChangingEvent) Is Nothing) Then
                RaiseEvent FPOSP_POSO_SPERowChanging(Me, New FPOSP_POSO_SPERowChangeEvent(CType(e.Row,FPOSP_POSO_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOSP_POSO_SPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOSP_POSO_SPERowDeleted(Me, New FPOSP_POSO_SPERowChangeEvent(CType(e.Row,FPOSP_POSO_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOSP_POSO_SPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOSP_POSO_SPERowDeleting(Me, New FPOSP_POSO_SPERowChangeEvent(CType(e.Row,FPOSP_POSO_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOSP_POSO_SPERow(ByVal row As FPOSP_POSO_SPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOSP_POSO_SPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOVO_FPOSO_VOIEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOVO_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOVO_CDF_VO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOVO_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOVO_FPOSO_VOIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOVO_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOVO_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOVO_CDF_VO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOVO_CDF_VO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOVO_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOVO_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOVO_FPOSO_VOIERow
            Get
                Return CType(Me.Rows(index),FPOVO_FPOSO_VOIERow)
            End Get
        End Property
        
        Public Event FPOVO_FPOSO_VOIERowChanging As FPOVO_FPOSO_VOIERowChangeEventHandler
        
        Public Event FPOVO_FPOSO_VOIERowChanged As FPOVO_FPOSO_VOIERowChangeEventHandler
        
        Public Event FPOVO_FPOSO_VOIERowDeleting As FPOVO_FPOSO_VOIERowChangeEventHandler
        
        Public Event FPOVO_FPOSO_VOIERowDeleted As FPOVO_FPOSO_VOIERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOVO_FPOSO_VOIERow(ByVal row As FPOVO_FPOSO_VOIERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOVO_FPOSO_VOIERow(ByVal FPOVO_FPO_CODE_FK_PK As Integer, ByVal FPOVO_CDF_VO_CODE_FK_PK As String, ByVal FPOVO_NUMORD As Short) As FPOVO_FPOSO_VOIERow
            Dim rowFPOVO_FPOSO_VOIERow As FPOVO_FPOSO_VOIERow = CType(Me.NewRow,FPOVO_FPOSO_VOIERow)
            Dim columnValuesArray() As Object = New Object() {FPOVO_FPO_CODE_FK_PK, FPOVO_CDF_VO_CODE_FK_PK, FPOVO_NUMORD}
            rowFPOVO_FPOSO_VOIERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOVO_FPOSO_VOIERow)
            Return rowFPOVO_FPOSO_VOIERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOVO_FPO_CODE_FK_PKFPOVO_CDF_VO_CODE_FK_PK(ByVal FPOVO_FPO_CODE_FK_PK As Integer, ByVal FPOVO_CDF_VO_CODE_FK_PK As String) As FPOVO_FPOSO_VOIERow
            Return CType(Me.Rows.Find(New Object() {FPOVO_FPO_CODE_FK_PK, FPOVO_CDF_VO_CODE_FK_PK}),FPOVO_FPOSO_VOIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOVO_FPOSO_VOIEDataTable = CType(MyBase.Clone,FPOVO_FPOSO_VOIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOVO_FPOSO_VOIEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOVO_FPO_CODE_FK_PK = MyBase.Columns("FPOVO_FPO_CODE_FK_PK")
            Me.columnFPOVO_CDF_VO_CODE_FK_PK = MyBase.Columns("FPOVO_CDF_VO_CODE_FK_PK")
            Me.columnFPOVO_NUMORD = MyBase.Columns("FPOVO_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOVO_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOVO_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOVO_FPO_CODE_FK_PK)
            Me.columnFPOVO_CDF_VO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOVO_CDF_VO_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOVO_CDF_VO_CODE_FK_PK)
            Me.columnFPOVO_NUMORD = New Global.System.Data.DataColumn("FPOVO_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOVO_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOVO_FPO_CODE_FK_PK, Me.columnFPOVO_CDF_VO_CODE_FK_PK}, true))
            Me.columnFPOVO_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOVO_CDF_VO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOVO_CDF_VO_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOVO_FPOSO_VOIERow() As FPOVO_FPOSO_VOIERow
            Return CType(Me.NewRow,FPOVO_FPOSO_VOIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOVO_FPOSO_VOIERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOVO_FPOSO_VOIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOVO_FPOSO_VOIERowChangedEvent) Is Nothing) Then
                RaiseEvent FPOVO_FPOSO_VOIERowChanged(Me, New FPOVO_FPOSO_VOIERowChangeEvent(CType(e.Row,FPOVO_FPOSO_VOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOVO_FPOSO_VOIERowChangingEvent) Is Nothing) Then
                RaiseEvent FPOVO_FPOSO_VOIERowChanging(Me, New FPOVO_FPOSO_VOIERowChangeEvent(CType(e.Row,FPOVO_FPOSO_VOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOVO_FPOSO_VOIERowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOVO_FPOSO_VOIERowDeleted(Me, New FPOVO_FPOSO_VOIERowChangeEvent(CType(e.Row,FPOVO_FPOSO_VOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOVO_FPOSO_VOIERowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOVO_FPOSO_VOIERowDeleting(Me, New FPOVO_FPOSO_VOIERowChangeEvent(CType(e.Row,FPOVO_FPOSO_VOIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOVO_FPOSO_VOIERow(ByVal row As FPOVO_FPOSO_VOIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOVO_FPOSO_VOIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOTE_FPOSO_TERRAINDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOTE_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOTE_CDF_TEPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOTE_GRP_CODE_PK As Global.System.Data.DataColumn
        
        Private columnFPOTE_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOTE_FPOSO_TERRAIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOTE_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOTE_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOTE_CDF_TEPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOTE_CDF_TEPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOTE_GRP_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOTE_GRP_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOTE_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOTE_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOTE_FPOSO_TERRAINRow
            Get
                Return CType(Me.Rows(index),FPOTE_FPOSO_TERRAINRow)
            End Get
        End Property
        
        Public Event FPOTE_FPOSO_TERRAINRowChanging As FPOTE_FPOSO_TERRAINRowChangeEventHandler
        
        Public Event FPOTE_FPOSO_TERRAINRowChanged As FPOTE_FPOSO_TERRAINRowChangeEventHandler
        
        Public Event FPOTE_FPOSO_TERRAINRowDeleting As FPOTE_FPOSO_TERRAINRowChangeEventHandler
        
        Public Event FPOTE_FPOSO_TERRAINRowDeleted As FPOTE_FPOSO_TERRAINRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOTE_FPOSO_TERRAINRow(ByVal row As FPOTE_FPOSO_TERRAINRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOTE_FPOSO_TERRAINRow(ByVal FPOTE_FPO_CODE_FK_PK As Integer, ByVal FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal FPOTE_GRP_CODE_PK As Byte, ByVal FPOTE_NUMORD As Short) As FPOTE_FPOSO_TERRAINRow
            Dim rowFPOTE_FPOSO_TERRAINRow As FPOTE_FPOSO_TERRAINRow = CType(Me.NewRow,FPOTE_FPOSO_TERRAINRow)
            Dim columnValuesArray() As Object = New Object() {FPOTE_FPO_CODE_FK_PK, FPOTE_CDF_TEPO_CODE_FK_PK, FPOTE_GRP_CODE_PK, FPOTE_NUMORD}
            rowFPOTE_FPOSO_TERRAINRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOTE_FPOSO_TERRAINRow)
            Return rowFPOTE_FPOSO_TERRAINRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOTE_FPO_CODE_FK_PKFPOTE_CDF_TEPO_CODE_FK_PKFPOTE_GRP_CODE_PK(ByVal FPOTE_FPO_CODE_FK_PK As Integer, ByVal FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal FPOTE_GRP_CODE_PK As Byte) As FPOTE_FPOSO_TERRAINRow
            Return CType(Me.Rows.Find(New Object() {FPOTE_FPO_CODE_FK_PK, FPOTE_CDF_TEPO_CODE_FK_PK, FPOTE_GRP_CODE_PK}),FPOTE_FPOSO_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOTE_FPOSO_TERRAINDataTable = CType(MyBase.Clone,FPOTE_FPOSO_TERRAINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOTE_FPOSO_TERRAINDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOTE_FPO_CODE_FK_PK = MyBase.Columns("FPOTE_FPO_CODE_FK_PK")
            Me.columnFPOTE_CDF_TEPO_CODE_FK_PK = MyBase.Columns("FPOTE_CDF_TEPO_CODE_FK_PK")
            Me.columnFPOTE_GRP_CODE_PK = MyBase.Columns("FPOTE_GRP_CODE_PK")
            Me.columnFPOTE_NUMORD = MyBase.Columns("FPOTE_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOTE_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOTE_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOTE_FPO_CODE_FK_PK)
            Me.columnFPOTE_CDF_TEPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOTE_CDF_TEPO_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOTE_CDF_TEPO_CODE_FK_PK)
            Me.columnFPOTE_GRP_CODE_PK = New Global.System.Data.DataColumn("FPOTE_GRP_CODE_PK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOTE_GRP_CODE_PK)
            Me.columnFPOTE_NUMORD = New Global.System.Data.DataColumn("FPOTE_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOTE_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOTE_FPO_CODE_FK_PK, Me.columnFPOTE_CDF_TEPO_CODE_FK_PK, Me.columnFPOTE_GRP_CODE_PK}, true))
            Me.columnFPOTE_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOTE_CDF_TEPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOTE_CDF_TEPO_CODE_FK_PK.MaxLength = 10
            Me.columnFPOTE_GRP_CODE_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOTE_FPOSO_TERRAINRow() As FPOTE_FPOSO_TERRAINRow
            Return CType(Me.NewRow,FPOTE_FPOSO_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOTE_FPOSO_TERRAINRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOTE_FPOSO_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOTE_FPOSO_TERRAINRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOTE_FPOSO_TERRAINRowChanged(Me, New FPOTE_FPOSO_TERRAINRowChangeEvent(CType(e.Row,FPOTE_FPOSO_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOTE_FPOSO_TERRAINRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOTE_FPOSO_TERRAINRowChanging(Me, New FPOTE_FPOSO_TERRAINRowChangeEvent(CType(e.Row,FPOTE_FPOSO_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOTE_FPOSO_TERRAINRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOTE_FPOSO_TERRAINRowDeleted(Me, New FPOTE_FPOSO_TERRAINRowChangeEvent(CType(e.Row,FPOTE_FPOSO_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOTE_FPOSO_TERRAINRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOTE_FPOSO_TERRAINRowDeleting(Me, New FPOTE_FPOSO_TERRAINRowChangeEvent(CType(e.Row,FPOTE_FPOSO_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOTE_FPOSO_TERRAINRow(ByVal row As FPOTE_FPOSO_TERRAINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOTE_FPOSO_TERRAINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FIN_FICHEINDICDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFIN_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFIN_CDF_NAIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFIN_CDF_NVIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFIN_TEXTE As Global.System.Data.DataColumn
        
        Private columnFIN_DATECR As Global.System.Data.DataColumn
        
        Private columnFIN_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FIN_FICHEINDIC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CDF_NAIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CDF_NAIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CDF_NVIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CDF_NVIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FIN_FICHEINDICRow
            Get
                Return CType(Me.Rows(index),FIN_FICHEINDICRow)
            End Get
        End Property
        
        Public Event FIN_FICHEINDICRowChanging As FIN_FICHEINDICRowChangeEventHandler
        
        Public Event FIN_FICHEINDICRowChanged As FIN_FICHEINDICRowChangeEventHandler
        
        Public Event FIN_FICHEINDICRowDeleting As FIN_FICHEINDICRowChangeEventHandler
        
        Public Event FIN_FICHEINDICRowDeleted As FIN_FICHEINDICRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFIN_FICHEINDICRow(ByVal row As FIN_FICHEINDICRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFIN_FICHEINDICRow(ByVal FIN_CODE_SQ_PK As Integer, ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Date) As FIN_FICHEINDICRow
            Dim rowFIN_FICHEINDICRow As FIN_FICHEINDICRow = CType(Me.NewRow,FIN_FICHEINDICRow)
            Dim columnValuesArray() As Object = New Object() {FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_DATECR, FIN_DATEMJ}
            rowFIN_FICHEINDICRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFIN_FICHEINDICRow)
            Return rowFIN_FICHEINDICRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFIN_CODE_SQ_PK(ByVal FIN_CODE_SQ_PK As Integer) As FIN_FICHEINDICRow
            Return CType(Me.Rows.Find(New Object() {FIN_CODE_SQ_PK}),FIN_FICHEINDICRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FIN_FICHEINDICDataTable = CType(MyBase.Clone,FIN_FICHEINDICDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FIN_FICHEINDICDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFIN_CODE_SQ_PK = MyBase.Columns("FIN_CODE_SQ_PK")
            Me.columnFIN_CDF_NAIN_CODE_FK_PK = MyBase.Columns("FIN_CDF_NAIN_CODE_FK_PK")
            Me.columnFIN_CDF_NVIN_CODE_FK_PK = MyBase.Columns("FIN_CDF_NVIN_CODE_FK_PK")
            Me.columnFIN_TEXTE = MyBase.Columns("FIN_TEXTE")
            Me.columnFIN_DATECR = MyBase.Columns("FIN_DATECR")
            Me.columnFIN_DATEMJ = MyBase.Columns("FIN_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFIN_CODE_SQ_PK = New Global.System.Data.DataColumn("FIN_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CODE_SQ_PK)
            Me.columnFIN_CDF_NAIN_CODE_FK_PK = New Global.System.Data.DataColumn("FIN_CDF_NAIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CDF_NAIN_CODE_FK_PK)
            Me.columnFIN_CDF_NVIN_CODE_FK_PK = New Global.System.Data.DataColumn("FIN_CDF_NVIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CDF_NVIN_CODE_FK_PK)
            Me.columnFIN_TEXTE = New Global.System.Data.DataColumn("FIN_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_TEXTE)
            Me.columnFIN_DATECR = New Global.System.Data.DataColumn("FIN_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_DATECR)
            Me.columnFIN_DATEMJ = New Global.System.Data.DataColumn("FIN_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFIN_CODE_SQ_PK}, true))
            Me.columnFIN_CODE_SQ_PK.AllowDBNull = false
            Me.columnFIN_CODE_SQ_PK.Unique = true
            Me.columnFIN_CDF_NAIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFIN_CDF_NAIN_CODE_FK_PK.MaxLength = 10
            Me.columnFIN_CDF_NVIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFIN_CDF_NVIN_CODE_FK_PK.MaxLength = 10
            Me.columnFIN_TEXTE.MaxLength = 2147483647
            Me.columnFIN_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFIN_FICHEINDICRow() As FIN_FICHEINDICRow
            Return CType(Me.NewRow,FIN_FICHEINDICRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FIN_FICHEINDICRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FIN_FICHEINDICRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FIN_FICHEINDICRowChangedEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowChanged(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FIN_FICHEINDICRowChangingEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowChanging(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FIN_FICHEINDICRowDeletedEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowDeleted(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FIN_FICHEINDICRowDeletingEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowDeleting(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFIN_FICHEINDICRow(ByVal row As FIN_FICHEINDICRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FIN_FICHEINDICDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOUT_FPOSO_UTILTHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOUT_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOUT_CDF_UTPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOUT_FPOSO_UTILTH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOUT_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOUT_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOUT_CDF_UTPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOUT_CDF_UTPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOUT_FPOSO_UTILTHRow
            Get
                Return CType(Me.Rows(index),FPOUT_FPOSO_UTILTHRow)
            End Get
        End Property
        
        Public Event FPOUT_FPOSO_UTILTHRowChanging As FPOUT_FPOSO_UTILTHRowChangeEventHandler
        
        Public Event FPOUT_FPOSO_UTILTHRowChanged As FPOUT_FPOSO_UTILTHRowChangeEventHandler
        
        Public Event FPOUT_FPOSO_UTILTHRowDeleting As FPOUT_FPOSO_UTILTHRowChangeEventHandler
        
        Public Event FPOUT_FPOSO_UTILTHRowDeleted As FPOUT_FPOSO_UTILTHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOUT_FPOSO_UTILTHRow(ByVal row As FPOUT_FPOSO_UTILTHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOUT_FPOSO_UTILTHRow(ByVal FPOUT_FPO_CODE_FK_PK As Integer, ByVal FPOUT_CDF_UTPO_CODE_FK_PK As String) As FPOUT_FPOSO_UTILTHRow
            Dim rowFPOUT_FPOSO_UTILTHRow As FPOUT_FPOSO_UTILTHRow = CType(Me.NewRow,FPOUT_FPOSO_UTILTHRow)
            Dim columnValuesArray() As Object = New Object() {FPOUT_FPO_CODE_FK_PK, FPOUT_CDF_UTPO_CODE_FK_PK}
            rowFPOUT_FPOSO_UTILTHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOUT_FPOSO_UTILTHRow)
            Return rowFPOUT_FPOSO_UTILTHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOUT_FPO_CODE_FK_PKFPOUT_CDF_UTPO_CODE_FK_PK(ByVal FPOUT_FPO_CODE_FK_PK As Integer, ByVal FPOUT_CDF_UTPO_CODE_FK_PK As String) As FPOUT_FPOSO_UTILTHRow
            Return CType(Me.Rows.Find(New Object() {FPOUT_FPO_CODE_FK_PK, FPOUT_CDF_UTPO_CODE_FK_PK}),FPOUT_FPOSO_UTILTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOUT_FPOSO_UTILTHDataTable = CType(MyBase.Clone,FPOUT_FPOSO_UTILTHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOUT_FPOSO_UTILTHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOUT_FPO_CODE_FK_PK = MyBase.Columns("FPOUT_FPO_CODE_FK_PK")
            Me.columnFPOUT_CDF_UTPO_CODE_FK_PK = MyBase.Columns("FPOUT_CDF_UTPO_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOUT_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOUT_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOUT_FPO_CODE_FK_PK)
            Me.columnFPOUT_CDF_UTPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOUT_CDF_UTPO_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOUT_CDF_UTPO_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOUT_FPO_CODE_FK_PK, Me.columnFPOUT_CDF_UTPO_CODE_FK_PK}, true))
            Me.columnFPOUT_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOUT_CDF_UTPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOUT_CDF_UTPO_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOUT_FPOSO_UTILTHRow() As FPOUT_FPOSO_UTILTHRow
            Return CType(Me.NewRow,FPOUT_FPOSO_UTILTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOUT_FPOSO_UTILTHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOUT_FPOSO_UTILTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOUT_FPOSO_UTILTHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOUT_FPOSO_UTILTHRowChanged(Me, New FPOUT_FPOSO_UTILTHRowChangeEvent(CType(e.Row,FPOUT_FPOSO_UTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOUT_FPOSO_UTILTHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOUT_FPOSO_UTILTHRowChanging(Me, New FPOUT_FPOSO_UTILTHRowChangeEvent(CType(e.Row,FPOUT_FPOSO_UTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOUT_FPOSO_UTILTHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOUT_FPOSO_UTILTHRowDeleted(Me, New FPOUT_FPOSO_UTILTHRowChangeEvent(CType(e.Row,FPOUT_FPOSO_UTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOUT_FPOSO_UTILTHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOUT_FPOSO_UTILTHRowDeleting(Me, New FPOUT_FPOSO_UTILTHRowChangeEvent(CType(e.Row,FPOUT_FPOSO_UTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOUT_FPOSO_UTILTHRow(ByVal row As FPOUT_FPOSO_UTILTHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOUT_FPOSO_UTILTHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCOUT_FPOSO_COMMENTUTILTHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCOUT_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOUT_CDF_COUT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOUT_NUM_ORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCOUT_FPOSO_COMMENTUTILTH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOUT_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOUT_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOUT_CDF_COUT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOUT_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOUT_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCOUT_FPOSO_COMMENTUTILTHRow
            Get
                Return CType(Me.Rows(index),FPOCOUT_FPOSO_COMMENTUTILTHRow)
            End Get
        End Property
        
        Public Event FPOCOUT_FPOSO_COMMENTUTILTHRowChanging As FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEventHandler
        
        Public Event FPOCOUT_FPOSO_COMMENTUTILTHRowChanged As FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEventHandler
        
        Public Event FPOCOUT_FPOSO_COMMENTUTILTHRowDeleting As FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEventHandler
        
        Public Event FPOCOUT_FPOSO_COMMENTUTILTHRowDeleted As FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCOUT_FPOSO_COMMENTUTILTHRow(ByVal row As FPOCOUT_FPOSO_COMMENTUTILTHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCOUT_FPOSO_COMMENTUTILTHRow(ByVal FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal FPOCOUT_CDF_COUT_CODE_FK_PK As String, ByVal FPOCOUT_NUM_ORD As Short) As FPOCOUT_FPOSO_COMMENTUTILTHRow
            Dim rowFPOCOUT_FPOSO_COMMENTUTILTHRow As FPOCOUT_FPOSO_COMMENTUTILTHRow = CType(Me.NewRow,FPOCOUT_FPOSO_COMMENTUTILTHRow)
            Dim columnValuesArray() As Object = New Object() {FPOCOUT_FPO_CODE_FK_PK, FPOCOUT_CDF_COUT_CODE_FK_PK, FPOCOUT_NUM_ORD}
            rowFPOCOUT_FPOSO_COMMENTUTILTHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCOUT_FPOSO_COMMENTUTILTHRow)
            Return rowFPOCOUT_FPOSO_COMMENTUTILTHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCOUT_FPO_CODE_FK_PKFPOCOUT_CDF_COUT_CODE_FK_PK(ByVal FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal FPOCOUT_CDF_COUT_CODE_FK_PK As String) As FPOCOUT_FPOSO_COMMENTUTILTHRow
            Return CType(Me.Rows.Find(New Object() {FPOCOUT_FPO_CODE_FK_PK, FPOCOUT_CDF_COUT_CODE_FK_PK}),FPOCOUT_FPOSO_COMMENTUTILTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCOUT_FPOSO_COMMENTUTILTHDataTable = CType(MyBase.Clone,FPOCOUT_FPOSO_COMMENTUTILTHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCOUT_FPOSO_COMMENTUTILTHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCOUT_FPO_CODE_FK_PK = MyBase.Columns("FPOCOUT_FPO_CODE_FK_PK")
            Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK = MyBase.Columns("FPOCOUT_CDF_COUT_CODE_FK_PK")
            Me.columnFPOCOUT_NUM_ORD = MyBase.Columns("FPOCOUT_NUM_ORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCOUT_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOUT_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOUT_FPO_CODE_FK_PK)
            Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOUT_CDF_COUT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK)
            Me.columnFPOCOUT_NUM_ORD = New Global.System.Data.DataColumn("FPOCOUT_NUM_ORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOUT_NUM_ORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCOUT_FPO_CODE_FK_PK, Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK}, true))
            Me.columnFPOCOUT_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOUT_CDF_COUT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCOUT_FPOSO_COMMENTUTILTHRow() As FPOCOUT_FPOSO_COMMENTUTILTHRow
            Return CType(Me.NewRow,FPOCOUT_FPOSO_COMMENTUTILTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCOUT_FPOSO_COMMENTUTILTHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCOUT_FPOSO_COMMENTUTILTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCOUT_FPOSO_COMMENTUTILTHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCOUT_FPOSO_COMMENTUTILTHRowChanged(Me, New FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEvent(CType(e.Row,FPOCOUT_FPOSO_COMMENTUTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCOUT_FPOSO_COMMENTUTILTHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCOUT_FPOSO_COMMENTUTILTHRowChanging(Me, New FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEvent(CType(e.Row,FPOCOUT_FPOSO_COMMENTUTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCOUT_FPOSO_COMMENTUTILTHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCOUT_FPOSO_COMMENTUTILTHRowDeleted(Me, New FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEvent(CType(e.Row,FPOCOUT_FPOSO_COMMENTUTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCOUT_FPOSO_COMMENTUTILTHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCOUT_FPOSO_COMMENTUTILTHRowDeleting(Me, New FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEvent(CType(e.Row,FPOCOUT_FPOSO_COMMENTUTILTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCOUT_FPOSO_COMMENTUTILTHRow(ByVal row As FPOCOUT_FPOSO_COMMENTUTILTHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCOUT_FPOSO_COMMENTUTILTHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPO_INFOPOSODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPO_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPO_NUM_SEQ_PK As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_NAPO_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_UNPO_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_DOSEMIN As Global.System.Data.DataColumn
        
        Private columnIPO_DOSEMAX As Global.System.Data.DataColumn
        
        Private columnIPO_FREQMIN As Global.System.Data.DataColumn
        
        Private columnIPO_FREQMAX As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_FREQMIN_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_FREQMAX_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_DUREEMIN As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_UTMIN_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_DUREEMAX As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_UTMAX_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_NUM_ORD As Global.System.Data.DataColumn
        
        Private columnIPO_DATECR As Global.System.Data.DataColumn
        
        Private columnIPO_DATEMJ As Global.System.Data.DataColumn
        
        Private columnIPO_INTERVMIN As Global.System.Data.DataColumn
        
        Private columnIPO_INTERVMAX As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_UIMIN_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_CDF_UIMAX_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPO_DUREEMIN1 As Global.System.Data.DataColumn
        
        Private columnIPO_DUREEMAX1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPO_INFOPOSO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_NUM_SEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_NUM_SEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_NAPO_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_NAPO_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_UNPO_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_UNPO_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DOSEMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DOSEMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DOSEMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DOSEMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_FREQMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_FREQMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_FREQMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_FREQMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_FREQMIN_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_FREQMIN_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_FREQMAX_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_FREQMAX_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DUREEMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DUREEMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_UTMIN_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_UTMIN_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DUREEMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DUREEMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_UTMAX_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_UTMAX_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_INTERVMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_INTERVMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_INTERVMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_INTERVMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_UIMIN_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_UIMIN_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_CDF_UIMAX_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_CDF_UIMAX_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DUREEMIN1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DUREEMIN1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPO_DUREEMAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPO_DUREEMAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPO_INFOPOSORow
            Get
                Return CType(Me.Rows(index),IPO_INFOPOSORow)
            End Get
        End Property
        
        Public Event IPO_INFOPOSORowChanging As IPO_INFOPOSORowChangeEventHandler
        
        Public Event IPO_INFOPOSORowChanged As IPO_INFOPOSORowChangeEventHandler
        
        Public Event IPO_INFOPOSORowDeleting As IPO_INFOPOSORowChangeEventHandler
        
        Public Event IPO_INFOPOSORowDeleted As IPO_INFOPOSORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPO_INFOPOSORow(ByVal row As IPO_INFOPOSORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPO_INFOPOSORow( _
                    ByVal IPO_FPO_CODE_FK_PK As Integer,  _
                    ByVal IPO_NUM_SEQ_PK As Short,  _
                    ByVal IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal IPO_DOSEMIN As String,  _
                    ByVal IPO_DOSEMAX As String,  _
                    ByVal IPO_FREQMIN As String,  _
                    ByVal IPO_FREQMAX As String,  _
                    ByVal IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal IPO_DUREEMIN As Byte,  _
                    ByVal IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal IPO_DUREEMAX As Byte,  _
                    ByVal IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal IPO_NUM_ORD As Short,  _
                    ByVal IPO_DATECR As Date,  _
                    ByVal IPO_DATEMJ As Date,  _
                    ByVal IPO_INTERVMIN As Decimal,  _
                    ByVal IPO_INTERVMAX As Decimal,  _
                    ByVal IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal IPO_CDF_UIMAX_CODE_FK As String,  _
                    ByVal IPO_DUREEMIN1 As Short,  _
                    ByVal IPO_DUREEMAX1 As Short) As IPO_INFOPOSORow
            Dim rowIPO_INFOPOSORow As IPO_INFOPOSORow = CType(Me.NewRow,IPO_INFOPOSORow)
            Dim columnValuesArray() As Object = New Object() {IPO_FPO_CODE_FK_PK, IPO_NUM_SEQ_PK, IPO_CDF_NAPO_CODE_FK, IPO_CDF_UNPO_CODE_FK, IPO_DOSEMIN, IPO_DOSEMAX, IPO_FREQMIN, IPO_FREQMAX, IPO_CDF_FREQMIN_CODE_FK, IPO_CDF_FREQMAX_CODE_FK, IPO_DUREEMIN, IPO_CDF_UTMIN_CODE_FK, IPO_DUREEMAX, IPO_CDF_UTMAX_CODE_FK, IPO_NUM_ORD, IPO_DATECR, IPO_DATEMJ, IPO_INTERVMIN, IPO_INTERVMAX, IPO_CDF_UIMIN_CODE_FK, IPO_CDF_UIMAX_CODE_FK, IPO_DUREEMIN1, IPO_DUREEMAX1}
            rowIPO_INFOPOSORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPO_INFOPOSORow)
            Return rowIPO_INFOPOSORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIPO_FPO_CODE_FK_PKIPO_NUM_SEQ_PK(ByVal IPO_FPO_CODE_FK_PK As Integer, ByVal IPO_NUM_SEQ_PK As Short) As IPO_INFOPOSORow
            Return CType(Me.Rows.Find(New Object() {IPO_FPO_CODE_FK_PK, IPO_NUM_SEQ_PK}),IPO_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPO_INFOPOSODataTable = CType(MyBase.Clone,IPO_INFOPOSODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPO_INFOPOSODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPO_FPO_CODE_FK_PK = MyBase.Columns("IPO_FPO_CODE_FK_PK")
            Me.columnIPO_NUM_SEQ_PK = MyBase.Columns("IPO_NUM_SEQ_PK")
            Me.columnIPO_CDF_NAPO_CODE_FK = MyBase.Columns("IPO_CDF_NAPO_CODE_FK")
            Me.columnIPO_CDF_UNPO_CODE_FK = MyBase.Columns("IPO_CDF_UNPO_CODE_FK")
            Me.columnIPO_DOSEMIN = MyBase.Columns("IPO_DOSEMIN")
            Me.columnIPO_DOSEMAX = MyBase.Columns("IPO_DOSEMAX")
            Me.columnIPO_FREQMIN = MyBase.Columns("IPO_FREQMIN")
            Me.columnIPO_FREQMAX = MyBase.Columns("IPO_FREQMAX")
            Me.columnIPO_CDF_FREQMIN_CODE_FK = MyBase.Columns("IPO_CDF_FREQMIN_CODE_FK")
            Me.columnIPO_CDF_FREQMAX_CODE_FK = MyBase.Columns("IPO_CDF_FREQMAX_CODE_FK")
            Me.columnIPO_DUREEMIN = MyBase.Columns("IPO_DUREEMIN")
            Me.columnIPO_CDF_UTMIN_CODE_FK = MyBase.Columns("IPO_CDF_UTMIN_CODE_FK")
            Me.columnIPO_DUREEMAX = MyBase.Columns("IPO_DUREEMAX")
            Me.columnIPO_CDF_UTMAX_CODE_FK = MyBase.Columns("IPO_CDF_UTMAX_CODE_FK")
            Me.columnIPO_NUM_ORD = MyBase.Columns("IPO_NUM_ORD")
            Me.columnIPO_DATECR = MyBase.Columns("IPO_DATECR")
            Me.columnIPO_DATEMJ = MyBase.Columns("IPO_DATEMJ")
            Me.columnIPO_INTERVMIN = MyBase.Columns("IPO_INTERVMIN")
            Me.columnIPO_INTERVMAX = MyBase.Columns("IPO_INTERVMAX")
            Me.columnIPO_CDF_UIMIN_CODE_FK = MyBase.Columns("IPO_CDF_UIMIN_CODE_FK")
            Me.columnIPO_CDF_UIMAX_CODE_FK = MyBase.Columns("IPO_CDF_UIMAX_CODE_FK")
            Me.columnIPO_DUREEMIN1 = MyBase.Columns("IPO_DUREEMIN1")
            Me.columnIPO_DUREEMAX1 = MyBase.Columns("IPO_DUREEMAX1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPO_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("IPO_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_FPO_CODE_FK_PK)
            Me.columnIPO_NUM_SEQ_PK = New Global.System.Data.DataColumn("IPO_NUM_SEQ_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_NUM_SEQ_PK)
            Me.columnIPO_CDF_NAPO_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_NAPO_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_NAPO_CODE_FK)
            Me.columnIPO_CDF_UNPO_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_UNPO_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_UNPO_CODE_FK)
            Me.columnIPO_DOSEMIN = New Global.System.Data.DataColumn("IPO_DOSEMIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DOSEMIN)
            Me.columnIPO_DOSEMAX = New Global.System.Data.DataColumn("IPO_DOSEMAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DOSEMAX)
            Me.columnIPO_FREQMIN = New Global.System.Data.DataColumn("IPO_FREQMIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_FREQMIN)
            Me.columnIPO_FREQMAX = New Global.System.Data.DataColumn("IPO_FREQMAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_FREQMAX)
            Me.columnIPO_CDF_FREQMIN_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_FREQMIN_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_FREQMIN_CODE_FK)
            Me.columnIPO_CDF_FREQMAX_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_FREQMAX_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_FREQMAX_CODE_FK)
            Me.columnIPO_DUREEMIN = New Global.System.Data.DataColumn("IPO_DUREEMIN", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DUREEMIN)
            Me.columnIPO_CDF_UTMIN_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_UTMIN_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_UTMIN_CODE_FK)
            Me.columnIPO_DUREEMAX = New Global.System.Data.DataColumn("IPO_DUREEMAX", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DUREEMAX)
            Me.columnIPO_CDF_UTMAX_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_UTMAX_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_UTMAX_CODE_FK)
            Me.columnIPO_NUM_ORD = New Global.System.Data.DataColumn("IPO_NUM_ORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_NUM_ORD)
            Me.columnIPO_DATECR = New Global.System.Data.DataColumn("IPO_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DATECR)
            Me.columnIPO_DATEMJ = New Global.System.Data.DataColumn("IPO_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DATEMJ)
            Me.columnIPO_INTERVMIN = New Global.System.Data.DataColumn("IPO_INTERVMIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_INTERVMIN)
            Me.columnIPO_INTERVMAX = New Global.System.Data.DataColumn("IPO_INTERVMAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_INTERVMAX)
            Me.columnIPO_CDF_UIMIN_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_UIMIN_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_UIMIN_CODE_FK)
            Me.columnIPO_CDF_UIMAX_CODE_FK = New Global.System.Data.DataColumn("IPO_CDF_UIMAX_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_CDF_UIMAX_CODE_FK)
            Me.columnIPO_DUREEMIN1 = New Global.System.Data.DataColumn("IPO_DUREEMIN1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DUREEMIN1)
            Me.columnIPO_DUREEMAX1 = New Global.System.Data.DataColumn("IPO_DUREEMAX1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPO_DUREEMAX1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIPO_FPO_CODE_FK_PK, Me.columnIPO_NUM_SEQ_PK}, true))
            Me.columnIPO_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnIPO_NUM_SEQ_PK.AllowDBNull = false
            Me.columnIPO_CDF_NAPO_CODE_FK.AllowDBNull = false
            Me.columnIPO_CDF_NAPO_CODE_FK.MaxLength = 10
            Me.columnIPO_CDF_UNPO_CODE_FK.AllowDBNull = false
            Me.columnIPO_CDF_UNPO_CODE_FK.MaxLength = 10
            Me.columnIPO_DOSEMIN.MaxLength = 10
            Me.columnIPO_DOSEMAX.AllowDBNull = false
            Me.columnIPO_DOSEMAX.MaxLength = 10
            Me.columnIPO_FREQMIN.MaxLength = 7
            Me.columnIPO_FREQMAX.AllowDBNull = false
            Me.columnIPO_FREQMAX.MaxLength = 7
            Me.columnIPO_CDF_FREQMIN_CODE_FK.MaxLength = 10
            Me.columnIPO_CDF_FREQMAX_CODE_FK.AllowDBNull = false
            Me.columnIPO_CDF_FREQMAX_CODE_FK.MaxLength = 10
            Me.columnIPO_CDF_UTMIN_CODE_FK.MaxLength = 10
            Me.columnIPO_CDF_UTMAX_CODE_FK.MaxLength = 10
            Me.columnIPO_DATECR.AllowDBNull = false
            Me.columnIPO_DUREEMIN1.Caption = "IPO_DUREEMIN"
            Me.columnIPO_DUREEMAX1.Caption = "IPO_DUREEMAX"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPO_INFOPOSORow() As IPO_INFOPOSORow
            Return CType(Me.NewRow,IPO_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPO_INFOPOSORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPO_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPO_INFOPOSORowChangedEvent) Is Nothing) Then
                RaiseEvent IPO_INFOPOSORowChanged(Me, New IPO_INFOPOSORowChangeEvent(CType(e.Row,IPO_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPO_INFOPOSORowChangingEvent) Is Nothing) Then
                RaiseEvent IPO_INFOPOSORowChanging(Me, New IPO_INFOPOSORowChangeEvent(CType(e.Row,IPO_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPO_INFOPOSORowDeletedEvent) Is Nothing) Then
                RaiseEvent IPO_INFOPOSORowDeleted(Me, New IPO_INFOPOSORowChangeEvent(CType(e.Row,IPO_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPO_INFOPOSORowDeletingEvent) Is Nothing) Then
                RaiseEvent IPO_INFOPOSORowDeleting(Me, New IPO_INFOPOSORowChangeEvent(CType(e.Row,IPO_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPO_INFOPOSORow(ByVal row As IPO_INFOPOSORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPO_INFOPOSODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPOCOTE_INFPO_COMMENT_TERRAINDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPOCOTE_IPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOTE_IPO_NUM_SEQ_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOTE_CDF_COTE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOTE_NUM_ORD_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPOCOTE_INFPO_COMMENT_TERRAIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOTE_IPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOTE_IPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOTE_IPO_NUM_SEQ_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOTE_IPO_NUM_SEQ_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOTE_CDF_COTE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOTE_NUM_ORD_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOTE_NUM_ORD_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPOCOTE_INFPO_COMMENT_TERRAINRow
            Get
                Return CType(Me.Rows(index),IPOCOTE_INFPO_COMMENT_TERRAINRow)
            End Get
        End Property
        
        Public Event IPOCOTE_INFPO_COMMENT_TERRAINRowChanging As IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEventHandler
        
        Public Event IPOCOTE_INFPO_COMMENT_TERRAINRowChanged As IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEventHandler
        
        Public Event IPOCOTE_INFPO_COMMENT_TERRAINRowDeleting As IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEventHandler
        
        Public Event IPOCOTE_INFPO_COMMENT_TERRAINRowDeleted As IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPOCOTE_INFPO_COMMENT_TERRAINRow(ByVal row As IPOCOTE_INFPO_COMMENT_TERRAINRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPOCOTE_INFPO_COMMENT_TERRAINRow(ByVal IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal IPOCOTE_NUM_ORD_PK As Short) As IPOCOTE_INFPO_COMMENT_TERRAINRow
            Dim rowIPOCOTE_INFPO_COMMENT_TERRAINRow As IPOCOTE_INFPO_COMMENT_TERRAINRow = CType(Me.NewRow,IPOCOTE_INFPO_COMMENT_TERRAINRow)
            Dim columnValuesArray() As Object = New Object() {IPOCOTE_IPO_CODE_FK_PK, IPOCOTE_IPO_NUM_SEQ_FK_PK, IPOCOTE_CDF_COTE_CODE_FK_PK, IPOCOTE_NUM_ORD_PK}
            rowIPOCOTE_INFPO_COMMENT_TERRAINRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPOCOTE_INFPO_COMMENT_TERRAINRow)
            Return rowIPOCOTE_INFPO_COMMENT_TERRAINRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIPOCOTE_IPO_CODE_FK_PKIPOCOTE_IPO_NUM_SEQ_FK_PKIPOCOTE_CDF_COTE_CODE_FK_PKIPOCOTE_NUM_ORD_PK(ByVal IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal IPOCOTE_NUM_ORD_PK As Short) As IPOCOTE_INFPO_COMMENT_TERRAINRow
            Return CType(Me.Rows.Find(New Object() {IPOCOTE_IPO_CODE_FK_PK, IPOCOTE_IPO_NUM_SEQ_FK_PK, IPOCOTE_CDF_COTE_CODE_FK_PK, IPOCOTE_NUM_ORD_PK}),IPOCOTE_INFPO_COMMENT_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPOCOTE_INFPO_COMMENT_TERRAINDataTable = CType(MyBase.Clone,IPOCOTE_INFPO_COMMENT_TERRAINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPOCOTE_INFPO_COMMENT_TERRAINDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPOCOTE_IPO_CODE_FK_PK = MyBase.Columns("IPOCOTE_IPO_CODE_FK_PK")
            Me.columnIPOCOTE_IPO_NUM_SEQ_FK_PK = MyBase.Columns("IPOCOTE_IPO_NUM_SEQ_FK_PK")
            Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK = MyBase.Columns("IPOCOTE_CDF_COTE_CODE_FK_PK")
            Me.columnIPOCOTE_NUM_ORD_PK = MyBase.Columns("IPOCOTE_NUM_ORD_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPOCOTE_IPO_CODE_FK_PK = New Global.System.Data.DataColumn("IPOCOTE_IPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOTE_IPO_CODE_FK_PK)
            Me.columnIPOCOTE_IPO_NUM_SEQ_FK_PK = New Global.System.Data.DataColumn("IPOCOTE_IPO_NUM_SEQ_FK_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOTE_IPO_NUM_SEQ_FK_PK)
            Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK = New Global.System.Data.DataColumn("IPOCOTE_CDF_COTE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK)
            Me.columnIPOCOTE_NUM_ORD_PK = New Global.System.Data.DataColumn("IPOCOTE_NUM_ORD_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOTE_NUM_ORD_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIPOCOTE_IPO_CODE_FK_PK, Me.columnIPOCOTE_IPO_NUM_SEQ_FK_PK, Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK, Me.columnIPOCOTE_NUM_ORD_PK}, true))
            Me.columnIPOCOTE_IPO_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOCOTE_IPO_NUM_SEQ_FK_PK.AllowDBNull = false
            Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOCOTE_CDF_COTE_CODE_FK_PK.MaxLength = 10
            Me.columnIPOCOTE_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPOCOTE_INFPO_COMMENT_TERRAINRow() As IPOCOTE_INFPO_COMMENT_TERRAINRow
            Return CType(Me.NewRow,IPOCOTE_INFPO_COMMENT_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPOCOTE_INFPO_COMMENT_TERRAINRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPOCOTE_INFPO_COMMENT_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPOCOTE_INFPO_COMMENT_TERRAINRowChangedEvent) Is Nothing) Then
                RaiseEvent IPOCOTE_INFPO_COMMENT_TERRAINRowChanged(Me, New IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEvent(CType(e.Row,IPOCOTE_INFPO_COMMENT_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPOCOTE_INFPO_COMMENT_TERRAINRowChangingEvent) Is Nothing) Then
                RaiseEvent IPOCOTE_INFPO_COMMENT_TERRAINRowChanging(Me, New IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEvent(CType(e.Row,IPOCOTE_INFPO_COMMENT_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPOCOTE_INFPO_COMMENT_TERRAINRowDeletedEvent) Is Nothing) Then
                RaiseEvent IPOCOTE_INFPO_COMMENT_TERRAINRowDeleted(Me, New IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEvent(CType(e.Row,IPOCOTE_INFPO_COMMENT_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPOCOTE_INFPO_COMMENT_TERRAINRowDeletingEvent) Is Nothing) Then
                RaiseEvent IPOCOTE_INFPO_COMMENT_TERRAINRowDeleting(Me, New IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEvent(CType(e.Row,IPOCOTE_INFPO_COMMENT_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPOCOTE_INFPO_COMMENT_TERRAINRow(ByVal row As IPOCOTE_INFPO_COMMENT_TERRAINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPOCOTE_INFPO_COMMENT_TERRAINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPOCOFQ_INFPO_COMMENT_FREQDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPOCOFQ_IPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOFQ_IPO_NUM_SEQ_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOFQ_CDF_COFQ_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOFQ_NUM_ORD_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPOCOFQ_INFPO_COMMENT_FREQ"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOFQ_IPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOFQ_IPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOFQ_IPO_NUM_SEQ_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOFQ_IPO_NUM_SEQ_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOFQ_CDF_COFQ_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOFQ_NUM_ORD_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOFQ_NUM_ORD_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPOCOFQ_INFPO_COMMENT_FREQRow
            Get
                Return CType(Me.Rows(index),IPOCOFQ_INFPO_COMMENT_FREQRow)
            End Get
        End Property
        
        Public Event IPOCOFQ_INFPO_COMMENT_FREQRowChanging As IPOCOFQ_INFPO_COMMENT_FREQRowChangeEventHandler
        
        Public Event IPOCOFQ_INFPO_COMMENT_FREQRowChanged As IPOCOFQ_INFPO_COMMENT_FREQRowChangeEventHandler
        
        Public Event IPOCOFQ_INFPO_COMMENT_FREQRowDeleting As IPOCOFQ_INFPO_COMMENT_FREQRowChangeEventHandler
        
        Public Event IPOCOFQ_INFPO_COMMENT_FREQRowDeleted As IPOCOFQ_INFPO_COMMENT_FREQRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPOCOFQ_INFPO_COMMENT_FREQRow(ByVal row As IPOCOFQ_INFPO_COMMENT_FREQRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPOCOFQ_INFPO_COMMENT_FREQRow(ByVal IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal IPOCOFQ_NUM_ORD_PK As Short) As IPOCOFQ_INFPO_COMMENT_FREQRow
            Dim rowIPOCOFQ_INFPO_COMMENT_FREQRow As IPOCOFQ_INFPO_COMMENT_FREQRow = CType(Me.NewRow,IPOCOFQ_INFPO_COMMENT_FREQRow)
            Dim columnValuesArray() As Object = New Object() {IPOCOFQ_IPO_CODE_FK_PK, IPOCOFQ_IPO_NUM_SEQ_FK_PK, IPOCOFQ_CDF_COFQ_CODE_FK_PK, IPOCOFQ_NUM_ORD_PK}
            rowIPOCOFQ_INFPO_COMMENT_FREQRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPOCOFQ_INFPO_COMMENT_FREQRow)
            Return rowIPOCOFQ_INFPO_COMMENT_FREQRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIPOCOFQ_IPO_CODE_FK_PKIPOCOFQ_IPO_NUM_SEQ_FK_PKIPOCOFQ_CDF_COFQ_CODE_FK_PKIPOCOFQ_NUM_ORD_PK(ByVal IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal IPOCOFQ_NUM_ORD_PK As Short) As IPOCOFQ_INFPO_COMMENT_FREQRow
            Return CType(Me.Rows.Find(New Object() {IPOCOFQ_IPO_CODE_FK_PK, IPOCOFQ_IPO_NUM_SEQ_FK_PK, IPOCOFQ_CDF_COFQ_CODE_FK_PK, IPOCOFQ_NUM_ORD_PK}),IPOCOFQ_INFPO_COMMENT_FREQRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPOCOFQ_INFPO_COMMENT_FREQDataTable = CType(MyBase.Clone,IPOCOFQ_INFPO_COMMENT_FREQDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPOCOFQ_INFPO_COMMENT_FREQDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPOCOFQ_IPO_CODE_FK_PK = MyBase.Columns("IPOCOFQ_IPO_CODE_FK_PK")
            Me.columnIPOCOFQ_IPO_NUM_SEQ_FK_PK = MyBase.Columns("IPOCOFQ_IPO_NUM_SEQ_FK_PK")
            Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK = MyBase.Columns("IPOCOFQ_CDF_COFQ_CODE_FK_PK")
            Me.columnIPOCOFQ_NUM_ORD_PK = MyBase.Columns("IPOCOFQ_NUM_ORD_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPOCOFQ_IPO_CODE_FK_PK = New Global.System.Data.DataColumn("IPOCOFQ_IPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOFQ_IPO_CODE_FK_PK)
            Me.columnIPOCOFQ_IPO_NUM_SEQ_FK_PK = New Global.System.Data.DataColumn("IPOCOFQ_IPO_NUM_SEQ_FK_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOFQ_IPO_NUM_SEQ_FK_PK)
            Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK = New Global.System.Data.DataColumn("IPOCOFQ_CDF_COFQ_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK)
            Me.columnIPOCOFQ_NUM_ORD_PK = New Global.System.Data.DataColumn("IPOCOFQ_NUM_ORD_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOFQ_NUM_ORD_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIPOCOFQ_IPO_CODE_FK_PK, Me.columnIPOCOFQ_IPO_NUM_SEQ_FK_PK, Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK, Me.columnIPOCOFQ_NUM_ORD_PK}, true))
            Me.columnIPOCOFQ_IPO_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOCOFQ_IPO_NUM_SEQ_FK_PK.AllowDBNull = false
            Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOCOFQ_CDF_COFQ_CODE_FK_PK.MaxLength = 10
            Me.columnIPOCOFQ_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPOCOFQ_INFPO_COMMENT_FREQRow() As IPOCOFQ_INFPO_COMMENT_FREQRow
            Return CType(Me.NewRow,IPOCOFQ_INFPO_COMMENT_FREQRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPOCOFQ_INFPO_COMMENT_FREQRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPOCOFQ_INFPO_COMMENT_FREQRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPOCOFQ_INFPO_COMMENT_FREQRowChangedEvent) Is Nothing) Then
                RaiseEvent IPOCOFQ_INFPO_COMMENT_FREQRowChanged(Me, New IPOCOFQ_INFPO_COMMENT_FREQRowChangeEvent(CType(e.Row,IPOCOFQ_INFPO_COMMENT_FREQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPOCOFQ_INFPO_COMMENT_FREQRowChangingEvent) Is Nothing) Then
                RaiseEvent IPOCOFQ_INFPO_COMMENT_FREQRowChanging(Me, New IPOCOFQ_INFPO_COMMENT_FREQRowChangeEvent(CType(e.Row,IPOCOFQ_INFPO_COMMENT_FREQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPOCOFQ_INFPO_COMMENT_FREQRowDeletedEvent) Is Nothing) Then
                RaiseEvent IPOCOFQ_INFPO_COMMENT_FREQRowDeleted(Me, New IPOCOFQ_INFPO_COMMENT_FREQRowChangeEvent(CType(e.Row,IPOCOFQ_INFPO_COMMENT_FREQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPOCOFQ_INFPO_COMMENT_FREQRowDeletingEvent) Is Nothing) Then
                RaiseEvent IPOCOFQ_INFPO_COMMENT_FREQRowDeleting(Me, New IPOCOFQ_INFPO_COMMENT_FREQRowChangeEvent(CType(e.Row,IPOCOFQ_INFPO_COMMENT_FREQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPOCOFQ_INFPO_COMMENT_FREQRow(ByVal row As IPOCOFQ_INFPO_COMMENT_FREQRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPOCOFQ_INFPO_COMMENT_FREQDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPOCOD_INFPO_COMMENT_DUREEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPOCOD_IPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOD_IPO_NUM_SEQ_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOD_CDF_COD_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOCOD_NUM_ORD_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPOCOD_INFPO_COMMENT_DUREE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOD_IPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOD_IPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOD_IPO_NUM_SEQ_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOD_IPO_NUM_SEQ_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOD_CDF_COD_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOD_CDF_COD_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOCOD_NUM_ORD_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOCOD_NUM_ORD_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPOCOD_INFPO_COMMENT_DUREERow
            Get
                Return CType(Me.Rows(index),IPOCOD_INFPO_COMMENT_DUREERow)
            End Get
        End Property
        
        Public Event IPOCOD_INFPO_COMMENT_DUREERowChanging As IPOCOD_INFPO_COMMENT_DUREERowChangeEventHandler
        
        Public Event IPOCOD_INFPO_COMMENT_DUREERowChanged As IPOCOD_INFPO_COMMENT_DUREERowChangeEventHandler
        
        Public Event IPOCOD_INFPO_COMMENT_DUREERowDeleting As IPOCOD_INFPO_COMMENT_DUREERowChangeEventHandler
        
        Public Event IPOCOD_INFPO_COMMENT_DUREERowDeleted As IPOCOD_INFPO_COMMENT_DUREERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPOCOD_INFPO_COMMENT_DUREERow(ByVal row As IPOCOD_INFPO_COMMENT_DUREERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPOCOD_INFPO_COMMENT_DUREERow(ByVal IPOCOD_IPO_CODE_FK_PK As Integer, ByVal IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal IPOCOD_NUM_ORD_PK As Short) As IPOCOD_INFPO_COMMENT_DUREERow
            Dim rowIPOCOD_INFPO_COMMENT_DUREERow As IPOCOD_INFPO_COMMENT_DUREERow = CType(Me.NewRow,IPOCOD_INFPO_COMMENT_DUREERow)
            Dim columnValuesArray() As Object = New Object() {IPOCOD_IPO_CODE_FK_PK, IPOCOD_IPO_NUM_SEQ_FK_PK, IPOCOD_CDF_COD_CODE_FK_PK, IPOCOD_NUM_ORD_PK}
            rowIPOCOD_INFPO_COMMENT_DUREERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPOCOD_INFPO_COMMENT_DUREERow)
            Return rowIPOCOD_INFPO_COMMENT_DUREERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIPOCOD_IPO_CODE_FK_PKIPOCOD_IPO_NUM_SEQ_FK_PKIPOCOD_CDF_COD_CODE_FK_PKIPOCOD_NUM_ORD_PK(ByVal IPOCOD_IPO_CODE_FK_PK As Integer, ByVal IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal IPOCOD_NUM_ORD_PK As Short) As IPOCOD_INFPO_COMMENT_DUREERow
            Return CType(Me.Rows.Find(New Object() {IPOCOD_IPO_CODE_FK_PK, IPOCOD_IPO_NUM_SEQ_FK_PK, IPOCOD_CDF_COD_CODE_FK_PK, IPOCOD_NUM_ORD_PK}),IPOCOD_INFPO_COMMENT_DUREERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPOCOD_INFPO_COMMENT_DUREEDataTable = CType(MyBase.Clone,IPOCOD_INFPO_COMMENT_DUREEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPOCOD_INFPO_COMMENT_DUREEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPOCOD_IPO_CODE_FK_PK = MyBase.Columns("IPOCOD_IPO_CODE_FK_PK")
            Me.columnIPOCOD_IPO_NUM_SEQ_FK_PK = MyBase.Columns("IPOCOD_IPO_NUM_SEQ_FK_PK")
            Me.columnIPOCOD_CDF_COD_CODE_FK_PK = MyBase.Columns("IPOCOD_CDF_COD_CODE_FK_PK")
            Me.columnIPOCOD_NUM_ORD_PK = MyBase.Columns("IPOCOD_NUM_ORD_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPOCOD_IPO_CODE_FK_PK = New Global.System.Data.DataColumn("IPOCOD_IPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOD_IPO_CODE_FK_PK)
            Me.columnIPOCOD_IPO_NUM_SEQ_FK_PK = New Global.System.Data.DataColumn("IPOCOD_IPO_NUM_SEQ_FK_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOD_IPO_NUM_SEQ_FK_PK)
            Me.columnIPOCOD_CDF_COD_CODE_FK_PK = New Global.System.Data.DataColumn("IPOCOD_CDF_COD_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOD_CDF_COD_CODE_FK_PK)
            Me.columnIPOCOD_NUM_ORD_PK = New Global.System.Data.DataColumn("IPOCOD_NUM_ORD_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOCOD_NUM_ORD_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIPOCOD_IPO_CODE_FK_PK, Me.columnIPOCOD_IPO_NUM_SEQ_FK_PK, Me.columnIPOCOD_CDF_COD_CODE_FK_PK, Me.columnIPOCOD_NUM_ORD_PK}, true))
            Me.columnIPOCOD_IPO_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOCOD_IPO_NUM_SEQ_FK_PK.AllowDBNull = false
            Me.columnIPOCOD_CDF_COD_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOCOD_CDF_COD_CODE_FK_PK.MaxLength = 10
            Me.columnIPOCOD_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPOCOD_INFPO_COMMENT_DUREERow() As IPOCOD_INFPO_COMMENT_DUREERow
            Return CType(Me.NewRow,IPOCOD_INFPO_COMMENT_DUREERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPOCOD_INFPO_COMMENT_DUREERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPOCOD_INFPO_COMMENT_DUREERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPOCOD_INFPO_COMMENT_DUREERowChangedEvent) Is Nothing) Then
                RaiseEvent IPOCOD_INFPO_COMMENT_DUREERowChanged(Me, New IPOCOD_INFPO_COMMENT_DUREERowChangeEvent(CType(e.Row,IPOCOD_INFPO_COMMENT_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPOCOD_INFPO_COMMENT_DUREERowChangingEvent) Is Nothing) Then
                RaiseEvent IPOCOD_INFPO_COMMENT_DUREERowChanging(Me, New IPOCOD_INFPO_COMMENT_DUREERowChangeEvent(CType(e.Row,IPOCOD_INFPO_COMMENT_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPOCOD_INFPO_COMMENT_DUREERowDeletedEvent) Is Nothing) Then
                RaiseEvent IPOCOD_INFPO_COMMENT_DUREERowDeleted(Me, New IPOCOD_INFPO_COMMENT_DUREERowChangeEvent(CType(e.Row,IPOCOD_INFPO_COMMENT_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPOCOD_INFPO_COMMENT_DUREERowDeletingEvent) Is Nothing) Then
                RaiseEvent IPOCOD_INFPO_COMMENT_DUREERowDeleting(Me, New IPOCOD_INFPO_COMMENT_DUREERowChangeEvent(CType(e.Row,IPOCOD_INFPO_COMMENT_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPOCOD_INFPO_COMMENT_DUREERow(ByVal row As IPOCOD_INFPO_COMMENT_DUREERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPOCOD_INFPO_COMMENT_DUREEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCOAD_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOAD_CDF_COAD_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOAD_NUM_ORD_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCOAD_FPOSO_COMMENT_ADAPT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOAD_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOAD_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOAD_CDF_COAD_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOAD_NUM_ORD_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOAD_NUM_ORD_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCOAD_FPOSO_COMMENT_ADAPTRow
            Get
                Return CType(Me.Rows(index),FPOCOAD_FPOSO_COMMENT_ADAPTRow)
            End Get
        End Property
        
        Public Event FPOCOAD_FPOSO_COMMENT_ADAPTRowChanging As FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEventHandler
        
        Public Event FPOCOAD_FPOSO_COMMENT_ADAPTRowChanged As FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEventHandler
        
        Public Event FPOCOAD_FPOSO_COMMENT_ADAPTRowDeleting As FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEventHandler
        
        Public Event FPOCOAD_FPOSO_COMMENT_ADAPTRowDeleted As FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCOAD_FPOSO_COMMENT_ADAPTRow(ByVal row As FPOCOAD_FPOSO_COMMENT_ADAPTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCOAD_FPOSO_COMMENT_ADAPTRow(ByVal FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal FPOCOAD_NUM_ORD_PK As Short) As FPOCOAD_FPOSO_COMMENT_ADAPTRow
            Dim rowFPOCOAD_FPOSO_COMMENT_ADAPTRow As FPOCOAD_FPOSO_COMMENT_ADAPTRow = CType(Me.NewRow,FPOCOAD_FPOSO_COMMENT_ADAPTRow)
            Dim columnValuesArray() As Object = New Object() {FPOCOAD_FPO_CODE_FK_PK, FPOCOAD_CDF_COAD_CODE_FK_PK, FPOCOAD_NUM_ORD_PK}
            rowFPOCOAD_FPOSO_COMMENT_ADAPTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCOAD_FPOSO_COMMENT_ADAPTRow)
            Return rowFPOCOAD_FPOSO_COMMENT_ADAPTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCOAD_FPO_CODE_FK_PKFPOCOAD_CDF_COAD_CODE_FK_PKFPOCOAD_NUM_ORD_PK(ByVal FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal FPOCOAD_NUM_ORD_PK As Short) As FPOCOAD_FPOSO_COMMENT_ADAPTRow
            Return CType(Me.Rows.Find(New Object() {FPOCOAD_FPO_CODE_FK_PK, FPOCOAD_CDF_COAD_CODE_FK_PK, FPOCOAD_NUM_ORD_PK}),FPOCOAD_FPOSO_COMMENT_ADAPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCOAD_FPOSO_COMMENT_ADAPTDataTable = CType(MyBase.Clone,FPOCOAD_FPOSO_COMMENT_ADAPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCOAD_FPO_CODE_FK_PK = MyBase.Columns("FPOCOAD_FPO_CODE_FK_PK")
            Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK = MyBase.Columns("FPOCOAD_CDF_COAD_CODE_FK_PK")
            Me.columnFPOCOAD_NUM_ORD_PK = MyBase.Columns("FPOCOAD_NUM_ORD_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCOAD_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOAD_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOAD_FPO_CODE_FK_PK)
            Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOAD_CDF_COAD_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK)
            Me.columnFPOCOAD_NUM_ORD_PK = New Global.System.Data.DataColumn("FPOCOAD_NUM_ORD_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOAD_NUM_ORD_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCOAD_FPO_CODE_FK_PK, Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK, Me.columnFPOCOAD_NUM_ORD_PK}, true))
            Me.columnFPOCOAD_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOAD_CDF_COAD_CODE_FK_PK.MaxLength = 10
            Me.columnFPOCOAD_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCOAD_FPOSO_COMMENT_ADAPTRow() As FPOCOAD_FPOSO_COMMENT_ADAPTRow
            Return CType(Me.NewRow,FPOCOAD_FPOSO_COMMENT_ADAPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCOAD_FPOSO_COMMENT_ADAPTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCOAD_FPOSO_COMMENT_ADAPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCOAD_FPOSO_COMMENT_ADAPTRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCOAD_FPOSO_COMMENT_ADAPTRowChanged(Me, New FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEvent(CType(e.Row,FPOCOAD_FPOSO_COMMENT_ADAPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCOAD_FPOSO_COMMENT_ADAPTRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCOAD_FPOSO_COMMENT_ADAPTRowChanging(Me, New FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEvent(CType(e.Row,FPOCOAD_FPOSO_COMMENT_ADAPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCOAD_FPOSO_COMMENT_ADAPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCOAD_FPOSO_COMMENT_ADAPTRowDeleted(Me, New FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEvent(CType(e.Row,FPOCOAD_FPOSO_COMMENT_ADAPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCOAD_FPOSO_COMMENT_ADAPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCOAD_FPOSO_COMMENT_ADAPTRowDeleting(Me, New FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEvent(CType(e.Row,FPOCOAD_FPOSO_COMMENT_ADAPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCOAD_FPOSO_COMMENT_ADAPTRow(ByVal row As FPOCOAD_FPOSO_COMMENT_ADAPTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCOAD_FPOSO_COMMENT_ADAPTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCOSU_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOSU_CDF_COSU_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOSU_NUM_ORD_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCOSU_FPOSO_COMMENT_SURVEIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOSU_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOSU_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOSU_CDF_COSU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOSU_NUM_ORD_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOSU_NUM_ORD_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCOSU_FPOSO_COMMENT_SURVEILRow
            Get
                Return CType(Me.Rows(index),FPOCOSU_FPOSO_COMMENT_SURVEILRow)
            End Get
        End Property
        
        Public Event FPOCOSU_FPOSO_COMMENT_SURVEILRowChanging As FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEventHandler
        
        Public Event FPOCOSU_FPOSO_COMMENT_SURVEILRowChanged As FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEventHandler
        
        Public Event FPOCOSU_FPOSO_COMMENT_SURVEILRowDeleting As FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEventHandler
        
        Public Event FPOCOSU_FPOSO_COMMENT_SURVEILRowDeleted As FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCOSU_FPOSO_COMMENT_SURVEILRow(ByVal row As FPOCOSU_FPOSO_COMMENT_SURVEILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCOSU_FPOSO_COMMENT_SURVEILRow(ByVal FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal FPOCOSU_NUM_ORD_PK As Short) As FPOCOSU_FPOSO_COMMENT_SURVEILRow
            Dim rowFPOCOSU_FPOSO_COMMENT_SURVEILRow As FPOCOSU_FPOSO_COMMENT_SURVEILRow = CType(Me.NewRow,FPOCOSU_FPOSO_COMMENT_SURVEILRow)
            Dim columnValuesArray() As Object = New Object() {FPOCOSU_FPO_CODE_FK_PK, FPOCOSU_CDF_COSU_CODE_FK_PK, FPOCOSU_NUM_ORD_PK}
            rowFPOCOSU_FPOSO_COMMENT_SURVEILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCOSU_FPOSO_COMMENT_SURVEILRow)
            Return rowFPOCOSU_FPOSO_COMMENT_SURVEILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCOSU_FPO_CODE_FK_PKFPOCOSU_CDF_COSU_CODE_FK_PKFPOCOSU_NUM_ORD_PK(ByVal FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal FPOCOSU_NUM_ORD_PK As Short) As FPOCOSU_FPOSO_COMMENT_SURVEILRow
            Return CType(Me.Rows.Find(New Object() {FPOCOSU_FPO_CODE_FK_PK, FPOCOSU_CDF_COSU_CODE_FK_PK, FPOCOSU_NUM_ORD_PK}),FPOCOSU_FPOSO_COMMENT_SURVEILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCOSU_FPOSO_COMMENT_SURVEILDataTable = CType(MyBase.Clone,FPOCOSU_FPOSO_COMMENT_SURVEILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCOSU_FPO_CODE_FK_PK = MyBase.Columns("FPOCOSU_FPO_CODE_FK_PK")
            Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK = MyBase.Columns("FPOCOSU_CDF_COSU_CODE_FK_PK")
            Me.columnFPOCOSU_NUM_ORD_PK = MyBase.Columns("FPOCOSU_NUM_ORD_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCOSU_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOSU_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOSU_FPO_CODE_FK_PK)
            Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOSU_CDF_COSU_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK)
            Me.columnFPOCOSU_NUM_ORD_PK = New Global.System.Data.DataColumn("FPOCOSU_NUM_ORD_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOSU_NUM_ORD_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCOSU_FPO_CODE_FK_PK, Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK, Me.columnFPOCOSU_NUM_ORD_PK}, true))
            Me.columnFPOCOSU_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOSU_CDF_COSU_CODE_FK_PK.MaxLength = 10
            Me.columnFPOCOSU_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCOSU_FPOSO_COMMENT_SURVEILRow() As FPOCOSU_FPOSO_COMMENT_SURVEILRow
            Return CType(Me.NewRow,FPOCOSU_FPOSO_COMMENT_SURVEILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCOSU_FPOSO_COMMENT_SURVEILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCOSU_FPOSO_COMMENT_SURVEILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCOSU_FPOSO_COMMENT_SURVEILRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCOSU_FPOSO_COMMENT_SURVEILRowChanged(Me, New FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEvent(CType(e.Row,FPOCOSU_FPOSO_COMMENT_SURVEILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCOSU_FPOSO_COMMENT_SURVEILRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCOSU_FPOSO_COMMENT_SURVEILRowChanging(Me, New FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEvent(CType(e.Row,FPOCOSU_FPOSO_COMMENT_SURVEILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCOSU_FPOSO_COMMENT_SURVEILRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCOSU_FPOSO_COMMENT_SURVEILRowDeleted(Me, New FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEvent(CType(e.Row,FPOCOSU_FPOSO_COMMENT_SURVEILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCOSU_FPOSO_COMMENT_SURVEILRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCOSU_FPOSO_COMMENT_SURVEILRowDeleting(Me, New FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEvent(CType(e.Row,FPOCOSU_FPOSO_COMMENT_SURVEILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCOSU_FPOSO_COMMENT_SURVEILRow(ByVal row As FPOCOSU_FPOSO_COMMENT_SURVEILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCOSU_FPOSO_COMMENT_SURVEILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOCOAU_FPOSO_COMMENT_AUTREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOCOAU_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOAU_CDF_COAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOCOAU_NUM_ORD_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOCOAU_FPOSO_COMMENT_AUTRE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOAU_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOAU_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOAU_CDF_COAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOCOAU_NUM_ORD_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOCOAU_NUM_ORD_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOCOAU_FPOSO_COMMENT_AUTRERow
            Get
                Return CType(Me.Rows(index),FPOCOAU_FPOSO_COMMENT_AUTRERow)
            End Get
        End Property
        
        Public Event FPOCOAU_FPOSO_COMMENT_AUTRERowChanging As FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEventHandler
        
        Public Event FPOCOAU_FPOSO_COMMENT_AUTRERowChanged As FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEventHandler
        
        Public Event FPOCOAU_FPOSO_COMMENT_AUTRERowDeleting As FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEventHandler
        
        Public Event FPOCOAU_FPOSO_COMMENT_AUTRERowDeleted As FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOCOAU_FPOSO_COMMENT_AUTRERow(ByVal row As FPOCOAU_FPOSO_COMMENT_AUTRERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOCOAU_FPOSO_COMMENT_AUTRERow(ByVal FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal FPOCOAU_NUM_ORD_PK As Short) As FPOCOAU_FPOSO_COMMENT_AUTRERow
            Dim rowFPOCOAU_FPOSO_COMMENT_AUTRERow As FPOCOAU_FPOSO_COMMENT_AUTRERow = CType(Me.NewRow,FPOCOAU_FPOSO_COMMENT_AUTRERow)
            Dim columnValuesArray() As Object = New Object() {FPOCOAU_FPO_CODE_FK_PK, FPOCOAU_CDF_COAU_CODE_FK_PK, FPOCOAU_NUM_ORD_PK}
            rowFPOCOAU_FPOSO_COMMENT_AUTRERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOCOAU_FPOSO_COMMENT_AUTRERow)
            Return rowFPOCOAU_FPOSO_COMMENT_AUTRERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOCOAU_FPO_CODE_FK_PKFPOCOAU_CDF_COAU_CODE_FK_PKFPOCOAU_NUM_ORD_PK(ByVal FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal FPOCOAU_NUM_ORD_PK As Short) As FPOCOAU_FPOSO_COMMENT_AUTRERow
            Return CType(Me.Rows.Find(New Object() {FPOCOAU_FPO_CODE_FK_PK, FPOCOAU_CDF_COAU_CODE_FK_PK, FPOCOAU_NUM_ORD_PK}),FPOCOAU_FPOSO_COMMENT_AUTRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOCOAU_FPOSO_COMMENT_AUTREDataTable = CType(MyBase.Clone,FPOCOAU_FPOSO_COMMENT_AUTREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOCOAU_FPOSO_COMMENT_AUTREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOCOAU_FPO_CODE_FK_PK = MyBase.Columns("FPOCOAU_FPO_CODE_FK_PK")
            Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK = MyBase.Columns("FPOCOAU_CDF_COAU_CODE_FK_PK")
            Me.columnFPOCOAU_NUM_ORD_PK = MyBase.Columns("FPOCOAU_NUM_ORD_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOCOAU_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOAU_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOAU_FPO_CODE_FK_PK)
            Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK = New Global.System.Data.DataColumn("FPOCOAU_CDF_COAU_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK)
            Me.columnFPOCOAU_NUM_ORD_PK = New Global.System.Data.DataColumn("FPOCOAU_NUM_ORD_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOCOAU_NUM_ORD_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOCOAU_FPO_CODE_FK_PK, Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK, Me.columnFPOCOAU_NUM_ORD_PK}, true))
            Me.columnFPOCOAU_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOCOAU_CDF_COAU_CODE_FK_PK.MaxLength = 10
            Me.columnFPOCOAU_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOCOAU_FPOSO_COMMENT_AUTRERow() As FPOCOAU_FPOSO_COMMENT_AUTRERow
            Return CType(Me.NewRow,FPOCOAU_FPOSO_COMMENT_AUTRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOCOAU_FPOSO_COMMENT_AUTRERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOCOAU_FPOSO_COMMENT_AUTRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOCOAU_FPOSO_COMMENT_AUTRERowChangedEvent) Is Nothing) Then
                RaiseEvent FPOCOAU_FPOSO_COMMENT_AUTRERowChanged(Me, New FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEvent(CType(e.Row,FPOCOAU_FPOSO_COMMENT_AUTRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOCOAU_FPOSO_COMMENT_AUTRERowChangingEvent) Is Nothing) Then
                RaiseEvent FPOCOAU_FPOSO_COMMENT_AUTRERowChanging(Me, New FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEvent(CType(e.Row,FPOCOAU_FPOSO_COMMENT_AUTRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOCOAU_FPOSO_COMMENT_AUTRERowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOCOAU_FPOSO_COMMENT_AUTRERowDeleted(Me, New FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEvent(CType(e.Row,FPOCOAU_FPOSO_COMMENT_AUTRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOCOAU_FPOSO_COMMENT_AUTRERowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOCOAU_FPOSO_COMMENT_AUTRERowDeleting(Me, New FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEvent(CType(e.Row,FPOCOAU_FPOSO_COMMENT_AUTRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOCOAU_FPOSO_COMMENT_AUTRERow(ByVal row As FPOCOAU_FPOSO_COMMENT_AUTRERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOCOAU_FPOSO_COMMENT_AUTREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOBIB_REFERENCE_BIBLIODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOBIB_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOBIB_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOBIB_REFERENCE_BIBLIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOBIB_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOBIB_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOBIB_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOBIB_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOBIB_REFERENCE_BIBLIORow
            Get
                Return CType(Me.Rows(index),FPOBIB_REFERENCE_BIBLIORow)
            End Get
        End Property
        
        Public Event FPOBIB_REFERENCE_BIBLIORowChanging As FPOBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        Public Event FPOBIB_REFERENCE_BIBLIORowChanged As FPOBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        Public Event FPOBIB_REFERENCE_BIBLIORowDeleting As FPOBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        Public Event FPOBIB_REFERENCE_BIBLIORowDeleted As FPOBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOBIB_REFERENCE_BIBLIORow(ByVal row As FPOBIB_REFERENCE_BIBLIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOBIB_REFERENCE_BIBLIORow(ByVal FPOBIB_FPO_CODE_FK_PK As Integer, ByVal FPOBIB_TEXTE As String) As FPOBIB_REFERENCE_BIBLIORow
            Dim rowFPOBIB_REFERENCE_BIBLIORow As FPOBIB_REFERENCE_BIBLIORow = CType(Me.NewRow,FPOBIB_REFERENCE_BIBLIORow)
            Dim columnValuesArray() As Object = New Object() {FPOBIB_FPO_CODE_FK_PK, FPOBIB_TEXTE}
            rowFPOBIB_REFERENCE_BIBLIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOBIB_REFERENCE_BIBLIORow)
            Return rowFPOBIB_REFERENCE_BIBLIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOBIB_FPO_CODE_FK_PK(ByVal FPOBIB_FPO_CODE_FK_PK As Integer) As FPOBIB_REFERENCE_BIBLIORow
            Return CType(Me.Rows.Find(New Object() {FPOBIB_FPO_CODE_FK_PK}),FPOBIB_REFERENCE_BIBLIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOBIB_REFERENCE_BIBLIODataTable = CType(MyBase.Clone,FPOBIB_REFERENCE_BIBLIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOBIB_REFERENCE_BIBLIODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOBIB_FPO_CODE_FK_PK = MyBase.Columns("FPOBIB_FPO_CODE_FK_PK")
            Me.columnFPOBIB_TEXTE = MyBase.Columns("FPOBIB_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOBIB_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOBIB_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOBIB_FPO_CODE_FK_PK)
            Me.columnFPOBIB_TEXTE = New Global.System.Data.DataColumn("FPOBIB_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOBIB_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOBIB_FPO_CODE_FK_PK}, true))
            Me.columnFPOBIB_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOBIB_FPO_CODE_FK_PK.Unique = true
            Me.columnFPOBIB_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOBIB_REFERENCE_BIBLIORow() As FPOBIB_REFERENCE_BIBLIORow
            Return CType(Me.NewRow,FPOBIB_REFERENCE_BIBLIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOBIB_REFERENCE_BIBLIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOBIB_REFERENCE_BIBLIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOBIB_REFERENCE_BIBLIORowChangedEvent) Is Nothing) Then
                RaiseEvent FPOBIB_REFERENCE_BIBLIORowChanged(Me, New FPOBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FPOBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOBIB_REFERENCE_BIBLIORowChangingEvent) Is Nothing) Then
                RaiseEvent FPOBIB_REFERENCE_BIBLIORowChanging(Me, New FPOBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FPOBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOBIB_REFERENCE_BIBLIORowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOBIB_REFERENCE_BIBLIORowDeleted(Me, New FPOBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FPOBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOBIB_REFERENCE_BIBLIORowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOBIB_REFERENCE_BIBLIORowDeleting(Me, New FPOBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FPOBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOBIB_REFERENCE_BIBLIORow(ByVal row As FPOBIB_REFERENCE_BIBLIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOBIB_REFERENCE_BIBLIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOAFS_POSO_AFSSAPSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOAFS_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOAFS_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOAFS_DATE_PK As Global.System.Data.DataColumn
        
        Private columnFPOAFS_CDF_DOCUMENT_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOAFS_POSO_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOAFS_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOAFS_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOAFS_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOAFS_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOAFS_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOAFS_CDF_DOCUMENT_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOAFS_POSO_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FPOAFS_POSO_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FPOAFS_POSO_AFSSAPSRowChanging As FPOAFS_POSO_AFSSAPSRowChangeEventHandler
        
        Public Event FPOAFS_POSO_AFSSAPSRowChanged As FPOAFS_POSO_AFSSAPSRowChangeEventHandler
        
        Public Event FPOAFS_POSO_AFSSAPSRowDeleting As FPOAFS_POSO_AFSSAPSRowChangeEventHandler
        
        Public Event FPOAFS_POSO_AFSSAPSRowDeleted As FPOAFS_POSO_AFSSAPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOAFS_POSO_AFSSAPSRow(ByVal row As FPOAFS_POSO_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOAFS_POSO_AFSSAPSRow(ByVal FPOAFS_FPO_CODE_FK_PK As Integer, ByVal FPOAFS_SP_CODE_FK_PK As Integer, ByVal FPOAFS_DATE_PK As Date, ByVal FPOAFS_CDF_DOCUMENT_FK_PK As String) As FPOAFS_POSO_AFSSAPSRow
            Dim rowFPOAFS_POSO_AFSSAPSRow As FPOAFS_POSO_AFSSAPSRow = CType(Me.NewRow,FPOAFS_POSO_AFSSAPSRow)
            Dim columnValuesArray() As Object = New Object() {FPOAFS_FPO_CODE_FK_PK, FPOAFS_SP_CODE_FK_PK, FPOAFS_DATE_PK, FPOAFS_CDF_DOCUMENT_FK_PK}
            rowFPOAFS_POSO_AFSSAPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOAFS_POSO_AFSSAPSRow)
            Return rowFPOAFS_POSO_AFSSAPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOAFS_FPO_CODE_FK_PKFPOAFS_SP_CODE_FK_PKFPOAFS_DATE_PKFPOAFS_CDF_DOCUMENT_FK_PK(ByVal FPOAFS_FPO_CODE_FK_PK As Integer, ByVal FPOAFS_SP_CODE_FK_PK As Integer, ByVal FPOAFS_DATE_PK As Date, ByVal FPOAFS_CDF_DOCUMENT_FK_PK As String) As FPOAFS_POSO_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FPOAFS_FPO_CODE_FK_PK, FPOAFS_SP_CODE_FK_PK, FPOAFS_DATE_PK, FPOAFS_CDF_DOCUMENT_FK_PK}),FPOAFS_POSO_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOAFS_POSO_AFSSAPSDataTable = CType(MyBase.Clone,FPOAFS_POSO_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOAFS_POSO_AFSSAPSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOAFS_FPO_CODE_FK_PK = MyBase.Columns("FPOAFS_FPO_CODE_FK_PK")
            Me.columnFPOAFS_SP_CODE_FK_PK = MyBase.Columns("FPOAFS_SP_CODE_FK_PK")
            Me.columnFPOAFS_DATE_PK = MyBase.Columns("FPOAFS_DATE_PK")
            Me.columnFPOAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FPOAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOAFS_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOAFS_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOAFS_FPO_CODE_FK_PK)
            Me.columnFPOAFS_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FPOAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOAFS_SP_CODE_FK_PK)
            Me.columnFPOAFS_DATE_PK = New Global.System.Data.DataColumn("FPOAFS_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOAFS_DATE_PK)
            Me.columnFPOAFS_CDF_DOCUMENT_FK_PK = New Global.System.Data.DataColumn("FPOAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOAFS_FPO_CODE_FK_PK, Me.columnFPOAFS_SP_CODE_FK_PK, Me.columnFPOAFS_DATE_PK, Me.columnFPOAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFPOAFS_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOAFS_DATE_PK.AllowDBNull = false
            Me.columnFPOAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFPOAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOAFS_POSO_AFSSAPSRow() As FPOAFS_POSO_AFSSAPSRow
            Return CType(Me.NewRow,FPOAFS_POSO_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOAFS_POSO_AFSSAPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOAFS_POSO_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOAFS_POSO_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOAFS_POSO_AFSSAPSRowChanged(Me, New FPOAFS_POSO_AFSSAPSRowChangeEvent(CType(e.Row,FPOAFS_POSO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOAFS_POSO_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOAFS_POSO_AFSSAPSRowChanging(Me, New FPOAFS_POSO_AFSSAPSRowChangeEvent(CType(e.Row,FPOAFS_POSO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOAFS_POSO_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOAFS_POSO_AFSSAPSRowDeleted(Me, New FPOAFS_POSO_AFSSAPSRowChangeEvent(CType(e.Row,FPOAFS_POSO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOAFS_POSO_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOAFS_POSO_AFSSAPSRowDeleting(Me, New FPOAFS_POSO_AFSSAPSRowChangeEvent(CType(e.Row,FPOAFS_POSO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOAFS_POSO_AFSSAPSRow(ByVal row As FPOAFS_POSO_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOAFS_POSO_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPODUREE_INFOPOSODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPODUREE_FPO_CODE_PK_FK As Global.System.Data.DataColumn
        
        Private columnIPODUREE_SP_CODE_SQ_PK_FK As Global.System.Data.DataColumn
        
        Private columnIPODUREE_SP_CIPUCD As Global.System.Data.DataColumn
        
        Private columnIPODUREE_DUREE_MIN As Global.System.Data.DataColumn
        
        Private columnIPODUREE_DUREE_MAX As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPODUREE_INFOPOSO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODUREE_FPO_CODE_PK_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODUREE_FPO_CODE_PK_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODUREE_SP_CODE_SQ_PK_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODUREE_SP_CODE_SQ_PK_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODUREE_SP_CIPUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODUREE_SP_CIPUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODUREE_DUREE_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODUREE_DUREE_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODUREE_DUREE_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODUREE_DUREE_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPODUREE_INFOPOSORow
            Get
                Return CType(Me.Rows(index),IPODUREE_INFOPOSORow)
            End Get
        End Property
        
        Public Event IPODUREE_INFOPOSORowChanging As IPODUREE_INFOPOSORowChangeEventHandler
        
        Public Event IPODUREE_INFOPOSORowChanged As IPODUREE_INFOPOSORowChangeEventHandler
        
        Public Event IPODUREE_INFOPOSORowDeleting As IPODUREE_INFOPOSORowChangeEventHandler
        
        Public Event IPODUREE_INFOPOSORowDeleted As IPODUREE_INFOPOSORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPODUREE_INFOPOSORow(ByVal row As IPODUREE_INFOPOSORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPODUREE_INFOPOSORow(ByVal IPODUREE_FPO_CODE_PK_FK As Integer, ByVal IPODUREE_SP_CODE_SQ_PK_FK As Integer, ByVal IPODUREE_SP_CIPUCD As String, ByVal IPODUREE_DUREE_MIN As Decimal, ByVal IPODUREE_DUREE_MAX As Decimal) As IPODUREE_INFOPOSORow
            Dim rowIPODUREE_INFOPOSORow As IPODUREE_INFOPOSORow = CType(Me.NewRow,IPODUREE_INFOPOSORow)
            Dim columnValuesArray() As Object = New Object() {IPODUREE_FPO_CODE_PK_FK, IPODUREE_SP_CODE_SQ_PK_FK, IPODUREE_SP_CIPUCD, IPODUREE_DUREE_MIN, IPODUREE_DUREE_MAX, Nothing}
            rowIPODUREE_INFOPOSORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPODUREE_INFOPOSORow)
            Return rowIPODUREE_INFOPOSORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As IPODUREE_INFOPOSORow
            Return CType(Me.Rows.Find(New Object() {ID}),IPODUREE_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPODUREE_INFOPOSODataTable = CType(MyBase.Clone,IPODUREE_INFOPOSODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPODUREE_INFOPOSODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPODUREE_FPO_CODE_PK_FK = MyBase.Columns("IPODUREE_FPO_CODE_PK_FK")
            Me.columnIPODUREE_SP_CODE_SQ_PK_FK = MyBase.Columns("IPODUREE_SP_CODE_SQ_PK_FK")
            Me.columnIPODUREE_SP_CIPUCD = MyBase.Columns("IPODUREE_SP_CIPUCD")
            Me.columnIPODUREE_DUREE_MIN = MyBase.Columns("IPODUREE_DUREE_MIN")
            Me.columnIPODUREE_DUREE_MAX = MyBase.Columns("IPODUREE_DUREE_MAX")
            Me.columnID = MyBase.Columns("ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPODUREE_FPO_CODE_PK_FK = New Global.System.Data.DataColumn("IPODUREE_FPO_CODE_PK_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODUREE_FPO_CODE_PK_FK)
            Me.columnIPODUREE_SP_CODE_SQ_PK_FK = New Global.System.Data.DataColumn("IPODUREE_SP_CODE_SQ_PK_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODUREE_SP_CODE_SQ_PK_FK)
            Me.columnIPODUREE_SP_CIPUCD = New Global.System.Data.DataColumn("IPODUREE_SP_CIPUCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODUREE_SP_CIPUCD)
            Me.columnIPODUREE_DUREE_MIN = New Global.System.Data.DataColumn("IPODUREE_DUREE_MIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODUREE_DUREE_MIN)
            Me.columnIPODUREE_DUREE_MAX = New Global.System.Data.DataColumn("IPODUREE_DUREE_MAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODUREE_DUREE_MAX)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnIPODUREE_SP_CIPUCD.MaxLength = 7
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPODUREE_INFOPOSORow() As IPODUREE_INFOPOSORow
            Return CType(Me.NewRow,IPODUREE_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPODUREE_INFOPOSORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPODUREE_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPODUREE_INFOPOSORowChangedEvent) Is Nothing) Then
                RaiseEvent IPODUREE_INFOPOSORowChanged(Me, New IPODUREE_INFOPOSORowChangeEvent(CType(e.Row,IPODUREE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPODUREE_INFOPOSORowChangingEvent) Is Nothing) Then
                RaiseEvent IPODUREE_INFOPOSORowChanging(Me, New IPODUREE_INFOPOSORowChangeEvent(CType(e.Row,IPODUREE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPODUREE_INFOPOSORowDeletedEvent) Is Nothing) Then
                RaiseEvent IPODUREE_INFOPOSORowDeleted(Me, New IPODUREE_INFOPOSORowChangeEvent(CType(e.Row,IPODUREE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPODUREE_INFOPOSORowDeletingEvent) Is Nothing) Then
                RaiseEvent IPODUREE_INFOPOSORowDeleting(Me, New IPODUREE_INFOPOSORowChangeEvent(CType(e.Row,IPODUREE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPODUREE_INFOPOSORow(ByVal row As IPODUREE_INFOPOSORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPODUREE_INFOPOSODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPOJ_INFOPOSO_JOURNALIEREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPOJ_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOJ_NUM_SEQ_PK As Global.System.Data.DataColumn
        
        Private columnIPOJ_CDF_NAPO_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPOJ_NUM_ORD As Global.System.Data.DataColumn
        
        Private columnIPOJ_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPOJ_SP_CIPUCD As Global.System.Data.DataColumn
        
        Private columnIPOJ_DJMIN As Global.System.Data.DataColumn
        
        Private columnIPOJ_DJMAX As Global.System.Data.DataColumn
        
        Private columnIPOJ_DTMIN As Global.System.Data.DataColumn
        
        Private columnIPOJ_DTMAX As Global.System.Data.DataColumn
        
        Private columnIPOJ_NATUCD_CDF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPOJ_NATUCD_CDF_NUM_FK As Global.System.Data.DataColumn
        
        Private columnIPOJ_DONANTH_CDF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPOJ_CONT As Global.System.Data.DataColumn
        
        Private columnIPOJ_VOL_CONT As Global.System.Data.DataColumn
        
        Private columnIPOJ_VOL_CONT_UNIT As Global.System.Data.DataColumn
        
        Private columnIPOJ_UCD13 As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPOJ_INFOPOSO_JOURNALIERE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_NUM_SEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_NUM_SEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_CDF_NAPO_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_CDF_NAPO_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_SP_CIPUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_SP_CIPUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_DJMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_DJMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_DJMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_DJMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_DTMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_DTMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_DTMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_DTMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_NATUCD_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_NATUCD_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_NATUCD_CDF_NUM_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_NATUCD_CDF_NUM_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_DONANTH_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_DONANTH_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_VOL_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_VOL_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_VOL_CONT_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_VOL_CONT_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPOJ_UCD13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPOJ_UCD13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPOJ_INFOPOSO_JOURNALIERERow
            Get
                Return CType(Me.Rows(index),IPOJ_INFOPOSO_JOURNALIERERow)
            End Get
        End Property
        
        Public Event IPOJ_INFOPOSO_JOURNALIERERowChanging As IPOJ_INFOPOSO_JOURNALIERERowChangeEventHandler
        
        Public Event IPOJ_INFOPOSO_JOURNALIERERowChanged As IPOJ_INFOPOSO_JOURNALIERERowChangeEventHandler
        
        Public Event IPOJ_INFOPOSO_JOURNALIERERowDeleting As IPOJ_INFOPOSO_JOURNALIERERowChangeEventHandler
        
        Public Event IPOJ_INFOPOSO_JOURNALIERERowDeleted As IPOJ_INFOPOSO_JOURNALIERERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPOJ_INFOPOSO_JOURNALIERERow(ByVal row As IPOJ_INFOPOSO_JOURNALIERERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPOJ_INFOPOSO_JOURNALIERERow( _
                    ByVal IPOJ_FPO_CODE_FK_PK As Integer,  _
                    ByVal IPOJ_NUM_SEQ_PK As Integer,  _
                    ByVal IPOJ_CDF_NAPO_CODE_FK As String,  _
                    ByVal IPOJ_NUM_ORD As Integer,  _
                    ByVal IPOJ_SP_CODE_FK_PK As Integer,  _
                    ByVal IPOJ_SP_CIPUCD As String,  _
                    ByVal IPOJ_DJMIN As Decimal,  _
                    ByVal IPOJ_DJMAX As Decimal,  _
                    ByVal IPOJ_DTMIN As Decimal,  _
                    ByVal IPOJ_DTMAX As Decimal,  _
                    ByVal IPOJ_NATUCD_CDF_CODE_FK As String,  _
                    ByVal IPOJ_NATUCD_CDF_NUM_FK As String,  _
                    ByVal IPOJ_DONANTH_CDF_CODE_FK As String,  _
                    ByVal IPOJ_CONT As String,  _
                    ByVal IPOJ_VOL_CONT As Decimal,  _
                    ByVal IPOJ_VOL_CONT_UNIT As String,  _
                    ByVal IPOJ_UCD13 As String) As IPOJ_INFOPOSO_JOURNALIERERow
            Dim rowIPOJ_INFOPOSO_JOURNALIERERow As IPOJ_INFOPOSO_JOURNALIERERow = CType(Me.NewRow,IPOJ_INFOPOSO_JOURNALIERERow)
            Dim columnValuesArray() As Object = New Object() {IPOJ_FPO_CODE_FK_PK, IPOJ_NUM_SEQ_PK, IPOJ_CDF_NAPO_CODE_FK, IPOJ_NUM_ORD, IPOJ_SP_CODE_FK_PK, IPOJ_SP_CIPUCD, IPOJ_DJMIN, IPOJ_DJMAX, IPOJ_DTMIN, IPOJ_DTMAX, IPOJ_NATUCD_CDF_CODE_FK, IPOJ_NATUCD_CDF_NUM_FK, IPOJ_DONANTH_CDF_CODE_FK, IPOJ_CONT, IPOJ_VOL_CONT, IPOJ_VOL_CONT_UNIT, IPOJ_UCD13, Nothing}
            rowIPOJ_INFOPOSO_JOURNALIERERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPOJ_INFOPOSO_JOURNALIERERow)
            Return rowIPOJ_INFOPOSO_JOURNALIERERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As IPOJ_INFOPOSO_JOURNALIERERow
            Return CType(Me.Rows.Find(New Object() {ID}),IPOJ_INFOPOSO_JOURNALIERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPOJ_INFOPOSO_JOURNALIEREDataTable = CType(MyBase.Clone,IPOJ_INFOPOSO_JOURNALIEREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPOJ_INFOPOSO_JOURNALIEREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPOJ_FPO_CODE_FK_PK = MyBase.Columns("IPOJ_FPO_CODE_FK_PK")
            Me.columnIPOJ_NUM_SEQ_PK = MyBase.Columns("IPOJ_NUM_SEQ_PK")
            Me.columnIPOJ_CDF_NAPO_CODE_FK = MyBase.Columns("IPOJ_CDF_NAPO_CODE_FK")
            Me.columnIPOJ_NUM_ORD = MyBase.Columns("IPOJ_NUM_ORD")
            Me.columnIPOJ_SP_CODE_FK_PK = MyBase.Columns("IPOJ_SP_CODE_FK_PK")
            Me.columnIPOJ_SP_CIPUCD = MyBase.Columns("IPOJ_SP_CIPUCD")
            Me.columnIPOJ_DJMIN = MyBase.Columns("IPOJ_DJMIN")
            Me.columnIPOJ_DJMAX = MyBase.Columns("IPOJ_DJMAX")
            Me.columnIPOJ_DTMIN = MyBase.Columns("IPOJ_DTMIN")
            Me.columnIPOJ_DTMAX = MyBase.Columns("IPOJ_DTMAX")
            Me.columnIPOJ_NATUCD_CDF_CODE_FK = MyBase.Columns("IPOJ_NATUCD_CDF_CODE_FK")
            Me.columnIPOJ_NATUCD_CDF_NUM_FK = MyBase.Columns("IPOJ_NATUCD_CDF_NUM_FK")
            Me.columnIPOJ_DONANTH_CDF_CODE_FK = MyBase.Columns("IPOJ_DONANTH_CDF_CODE_FK")
            Me.columnIPOJ_CONT = MyBase.Columns("IPOJ_CONT")
            Me.columnIPOJ_VOL_CONT = MyBase.Columns("IPOJ_VOL_CONT")
            Me.columnIPOJ_VOL_CONT_UNIT = MyBase.Columns("IPOJ_VOL_CONT_UNIT")
            Me.columnIPOJ_UCD13 = MyBase.Columns("IPOJ_UCD13")
            Me.columnID = MyBase.Columns("ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPOJ_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("IPOJ_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_FPO_CODE_FK_PK)
            Me.columnIPOJ_NUM_SEQ_PK = New Global.System.Data.DataColumn("IPOJ_NUM_SEQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_NUM_SEQ_PK)
            Me.columnIPOJ_CDF_NAPO_CODE_FK = New Global.System.Data.DataColumn("IPOJ_CDF_NAPO_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_CDF_NAPO_CODE_FK)
            Me.columnIPOJ_NUM_ORD = New Global.System.Data.DataColumn("IPOJ_NUM_ORD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_NUM_ORD)
            Me.columnIPOJ_SP_CODE_FK_PK = New Global.System.Data.DataColumn("IPOJ_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_SP_CODE_FK_PK)
            Me.columnIPOJ_SP_CIPUCD = New Global.System.Data.DataColumn("IPOJ_SP_CIPUCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_SP_CIPUCD)
            Me.columnIPOJ_DJMIN = New Global.System.Data.DataColumn("IPOJ_DJMIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_DJMIN)
            Me.columnIPOJ_DJMAX = New Global.System.Data.DataColumn("IPOJ_DJMAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_DJMAX)
            Me.columnIPOJ_DTMIN = New Global.System.Data.DataColumn("IPOJ_DTMIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_DTMIN)
            Me.columnIPOJ_DTMAX = New Global.System.Data.DataColumn("IPOJ_DTMAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_DTMAX)
            Me.columnIPOJ_NATUCD_CDF_CODE_FK = New Global.System.Data.DataColumn("IPOJ_NATUCD_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_NATUCD_CDF_CODE_FK)
            Me.columnIPOJ_NATUCD_CDF_NUM_FK = New Global.System.Data.DataColumn("IPOJ_NATUCD_CDF_NUM_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_NATUCD_CDF_NUM_FK)
            Me.columnIPOJ_DONANTH_CDF_CODE_FK = New Global.System.Data.DataColumn("IPOJ_DONANTH_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_DONANTH_CDF_CODE_FK)
            Me.columnIPOJ_CONT = New Global.System.Data.DataColumn("IPOJ_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_CONT)
            Me.columnIPOJ_VOL_CONT = New Global.System.Data.DataColumn("IPOJ_VOL_CONT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_VOL_CONT)
            Me.columnIPOJ_VOL_CONT_UNIT = New Global.System.Data.DataColumn("IPOJ_VOL_CONT_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_VOL_CONT_UNIT)
            Me.columnIPOJ_UCD13 = New Global.System.Data.DataColumn("IPOJ_UCD13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPOJ_UCD13)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnIPOJ_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOJ_CDF_NAPO_CODE_FK.MaxLength = 10
            Me.columnIPOJ_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnIPOJ_SP_CIPUCD.AllowDBNull = false
            Me.columnIPOJ_SP_CIPUCD.MaxLength = 7
            Me.columnIPOJ_NATUCD_CDF_CODE_FK.MaxLength = 10
            Me.columnIPOJ_NATUCD_CDF_NUM_FK.MaxLength = 2
            Me.columnIPOJ_DONANTH_CDF_CODE_FK.MaxLength = 10
            Me.columnIPOJ_CONT.MaxLength = 10
            Me.columnIPOJ_VOL_CONT_UNIT.MaxLength = 10
            Me.columnIPOJ_UCD13.MaxLength = 13
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPOJ_INFOPOSO_JOURNALIERERow() As IPOJ_INFOPOSO_JOURNALIERERow
            Return CType(Me.NewRow,IPOJ_INFOPOSO_JOURNALIERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPOJ_INFOPOSO_JOURNALIERERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPOJ_INFOPOSO_JOURNALIERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPOJ_INFOPOSO_JOURNALIERERowChangedEvent) Is Nothing) Then
                RaiseEvent IPOJ_INFOPOSO_JOURNALIERERowChanged(Me, New IPOJ_INFOPOSO_JOURNALIERERowChangeEvent(CType(e.Row,IPOJ_INFOPOSO_JOURNALIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPOJ_INFOPOSO_JOURNALIERERowChangingEvent) Is Nothing) Then
                RaiseEvent IPOJ_INFOPOSO_JOURNALIERERowChanging(Me, New IPOJ_INFOPOSO_JOURNALIERERowChangeEvent(CType(e.Row,IPOJ_INFOPOSO_JOURNALIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPOJ_INFOPOSO_JOURNALIERERowDeletedEvent) Is Nothing) Then
                RaiseEvent IPOJ_INFOPOSO_JOURNALIERERowDeleted(Me, New IPOJ_INFOPOSO_JOURNALIERERowChangeEvent(CType(e.Row,IPOJ_INFOPOSO_JOURNALIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPOJ_INFOPOSO_JOURNALIERERowDeletingEvent) Is Nothing) Then
                RaiseEvent IPOJ_INFOPOSO_JOURNALIERERowDeleting(Me, New IPOJ_INFOPOSO_JOURNALIERERowChangeEvent(CType(e.Row,IPOJ_INFOPOSO_JOURNALIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPOJ_INFOPOSO_JOURNALIERERow(ByVal row As IPOJ_INFOPOSO_JOURNALIERERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPOJ_INFOPOSO_JOURNALIEREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CATC_CLASSEATCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCATC_CODE_PK As Global.System.Data.DataColumn
        
        Private columnCATC_CATC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnCATC_NOMF As Global.System.Data.DataColumn
        
        Private columnCATC_NOMA As Global.System.Data.DataColumn
        
        Private columnCATC_DATECR As Global.System.Data.DataColumn
        
        Private columnCATC_DATEMJ As Global.System.Data.DataColumn
        
        Private columnCATC_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CATC_CLASSEATC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_CATC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_CATC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_NOMFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_NOMF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_NOMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_NOMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATC_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CATC_CLASSEATCRow
            Get
                Return CType(Me.Rows(index),CATC_CLASSEATCRow)
            End Get
        End Property
        
        Public Event CATC_CLASSEATCRowChanging As CATC_CLASSEATCRowChangeEventHandler
        
        Public Event CATC_CLASSEATCRowChanged As CATC_CLASSEATCRowChangeEventHandler
        
        Public Event CATC_CLASSEATCRowDeleting As CATC_CLASSEATCRowChangeEventHandler
        
        Public Event CATC_CLASSEATCRowDeleted As CATC_CLASSEATCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCATC_CLASSEATCRow(ByVal row As CATC_CLASSEATCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCATC_CLASSEATCRow(ByVal CATC_CODE_PK As String, ByVal parentCATC_CLASSEATCRowByFK1_CATC_CLASSEATC As CATC_CLASSEATCRow, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As Date, ByVal CATC_TEXTE As String) As CATC_CLASSEATCRow
            Dim rowCATC_CLASSEATCRow As CATC_CLASSEATCRow = CType(Me.NewRow,CATC_CLASSEATCRow)
            Dim columnValuesArray() As Object = New Object() {CATC_CODE_PK, Nothing, CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_DATEMJ, CATC_TEXTE}
            If (Not (parentCATC_CLASSEATCRowByFK1_CATC_CLASSEATC) Is Nothing) Then
                columnValuesArray(1) = parentCATC_CLASSEATCRowByFK1_CATC_CLASSEATC(0)
            End If
            rowCATC_CLASSEATCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCATC_CLASSEATCRow)
            Return rowCATC_CLASSEATCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCATC_CODE_PK(ByVal CATC_CODE_PK As String) As CATC_CLASSEATCRow
            Return CType(Me.Rows.Find(New Object() {CATC_CODE_PK}),CATC_CLASSEATCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CATC_CLASSEATCDataTable = CType(MyBase.Clone,CATC_CLASSEATCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CATC_CLASSEATCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCATC_CODE_PK = MyBase.Columns("CATC_CODE_PK")
            Me.columnCATC_CATC_CODE_FK = MyBase.Columns("CATC_CATC_CODE_FK")
            Me.columnCATC_NOMF = MyBase.Columns("CATC_NOMF")
            Me.columnCATC_NOMA = MyBase.Columns("CATC_NOMA")
            Me.columnCATC_DATECR = MyBase.Columns("CATC_DATECR")
            Me.columnCATC_DATEMJ = MyBase.Columns("CATC_DATEMJ")
            Me.columnCATC_TEXTE = MyBase.Columns("CATC_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCATC_CODE_PK = New Global.System.Data.DataColumn("CATC_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_CODE_PK)
            Me.columnCATC_CATC_CODE_FK = New Global.System.Data.DataColumn("CATC_CATC_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_CATC_CODE_FK)
            Me.columnCATC_NOMF = New Global.System.Data.DataColumn("CATC_NOMF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_NOMF)
            Me.columnCATC_NOMA = New Global.System.Data.DataColumn("CATC_NOMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_NOMA)
            Me.columnCATC_DATECR = New Global.System.Data.DataColumn("CATC_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_DATECR)
            Me.columnCATC_DATEMJ = New Global.System.Data.DataColumn("CATC_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_DATEMJ)
            Me.columnCATC_TEXTE = New Global.System.Data.DataColumn("CATC_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCATC_CODE_PK}, true))
            Me.columnCATC_CODE_PK.AllowDBNull = false
            Me.columnCATC_CODE_PK.Unique = true
            Me.columnCATC_CODE_PK.MaxLength = 10
            Me.columnCATC_CATC_CODE_FK.MaxLength = 10
            Me.columnCATC_NOMF.AllowDBNull = false
            Me.columnCATC_NOMF.MaxLength = 77
            Me.columnCATC_NOMA.AllowDBNull = false
            Me.columnCATC_NOMA.MaxLength = 77
            Me.columnCATC_DATECR.AllowDBNull = false
            Me.columnCATC_TEXTE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCATC_CLASSEATCRow() As CATC_CLASSEATCRow
            Return CType(Me.NewRow,CATC_CLASSEATCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CATC_CLASSEATCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CATC_CLASSEATCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CATC_CLASSEATCRowChangedEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowChanged(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CATC_CLASSEATCRowChangingEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowChanging(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CATC_CLASSEATCRowDeletedEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowDeleted(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CATC_CLASSEATCRowDeletingEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowDeleting(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCATC_CLASSEATCRow(ByVal row As CATC_CLASSEATCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CATC_CLASSEATCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IPODOSE_INFOPOSODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIPODOSE_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPODOSE_NUM_SEQ_PK As Global.System.Data.DataColumn
        
        Private columnIPODOSE_NUM_ORD As Global.System.Data.DataColumn
        
        Private columnIPODOSE_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIPODOSE_SP_CIPUCD As Global.System.Data.DataColumn
        
        Private columnIPODOSE_DJMIN As Global.System.Data.DataColumn
        
        Private columnIPODOSE_DJMAX As Global.System.Data.DataColumn
        
        Private columnIPODOSE_DPMIN As Global.System.Data.DataColumn
        
        Private columnIPODOSE_DPMAX As Global.System.Data.DataColumn
        
        Private columnIPODOSE_NATUCD_CDF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPODOSE_NATUCD_CDF_NUM_FK As Global.System.Data.DataColumn
        
        Private columnIPODOSE_CONT As Global.System.Data.DataColumn
        
        Private columnIPODOSE_VOL_CONT As Global.System.Data.DataColumn
        
        Private columnIPODOSE_VOL_CONT_UNIT As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnIPODOSE_DONANTH_CDF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnIPODOSE_CALCUL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IPODOSE_INFOPOSO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_NUM_SEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_NUM_SEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_SP_CIPUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_SP_CIPUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_DJMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_DJMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_DJMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_DJMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_DPMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_DPMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_DPMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_DPMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_NATUCD_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_NATUCD_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_NATUCD_CDF_NUM_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_NATUCD_CDF_NUM_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_VOL_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_VOL_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_VOL_CONT_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_VOL_CONT_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_DONANTH_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_DONANTH_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPODOSE_CALCULColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPODOSE_CALCUL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IPODOSE_INFOPOSORow
            Get
                Return CType(Me.Rows(index),IPODOSE_INFOPOSORow)
            End Get
        End Property
        
        Public Event IPODOSE_INFOPOSORowChanging As IPODOSE_INFOPOSORowChangeEventHandler
        
        Public Event IPODOSE_INFOPOSORowChanged As IPODOSE_INFOPOSORowChangeEventHandler
        
        Public Event IPODOSE_INFOPOSORowDeleting As IPODOSE_INFOPOSORowChangeEventHandler
        
        Public Event IPODOSE_INFOPOSORowDeleted As IPODOSE_INFOPOSORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIPODOSE_INFOPOSORow(ByVal row As IPODOSE_INFOPOSORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIPODOSE_INFOPOSORow( _
                    ByVal IPODOSE_FPO_CODE_FK_PK As Integer,  _
                    ByVal IPODOSE_NUM_SEQ_PK As Integer,  _
                    ByVal IPODOSE_NUM_ORD As Integer,  _
                    ByVal IPODOSE_SP_CODE_FK_PK As Integer,  _
                    ByVal IPODOSE_SP_CIPUCD As String,  _
                    ByVal IPODOSE_DJMIN As Decimal,  _
                    ByVal IPODOSE_DJMAX As Decimal,  _
                    ByVal IPODOSE_DPMIN As Decimal,  _
                    ByVal IPODOSE_DPMAX As Decimal,  _
                    ByVal IPODOSE_NATUCD_CDF_CODE_FK As String,  _
                    ByVal IPODOSE_NATUCD_CDF_NUM_FK As String,  _
                    ByVal IPODOSE_CONT As String,  _
                    ByVal IPODOSE_VOL_CONT As Decimal,  _
                    ByVal IPODOSE_VOL_CONT_UNIT As String,  _
                    ByVal IPODOSE_DONANTH_CDF_CODE_FK As String,  _
                    ByVal IPODOSE_CALCUL As Boolean) As IPODOSE_INFOPOSORow
            Dim rowIPODOSE_INFOPOSORow As IPODOSE_INFOPOSORow = CType(Me.NewRow,IPODOSE_INFOPOSORow)
            Dim columnValuesArray() As Object = New Object() {IPODOSE_FPO_CODE_FK_PK, IPODOSE_NUM_SEQ_PK, IPODOSE_NUM_ORD, IPODOSE_SP_CODE_FK_PK, IPODOSE_SP_CIPUCD, IPODOSE_DJMIN, IPODOSE_DJMAX, IPODOSE_DPMIN, IPODOSE_DPMAX, IPODOSE_NATUCD_CDF_CODE_FK, IPODOSE_NATUCD_CDF_NUM_FK, IPODOSE_CONT, IPODOSE_VOL_CONT, IPODOSE_VOL_CONT_UNIT, Nothing, IPODOSE_DONANTH_CDF_CODE_FK, IPODOSE_CALCUL}
            rowIPODOSE_INFOPOSORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIPODOSE_INFOPOSORow)
            Return rowIPODOSE_INFOPOSORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As IPODOSE_INFOPOSORow
            Return CType(Me.Rows.Find(New Object() {ID}),IPODOSE_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IPODOSE_INFOPOSODataTable = CType(MyBase.Clone,IPODOSE_INFOPOSODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IPODOSE_INFOPOSODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIPODOSE_FPO_CODE_FK_PK = MyBase.Columns("IPODOSE_FPO_CODE_FK_PK")
            Me.columnIPODOSE_NUM_SEQ_PK = MyBase.Columns("IPODOSE_NUM_SEQ_PK")
            Me.columnIPODOSE_NUM_ORD = MyBase.Columns("IPODOSE_NUM_ORD")
            Me.columnIPODOSE_SP_CODE_FK_PK = MyBase.Columns("IPODOSE_SP_CODE_FK_PK")
            Me.columnIPODOSE_SP_CIPUCD = MyBase.Columns("IPODOSE_SP_CIPUCD")
            Me.columnIPODOSE_DJMIN = MyBase.Columns("IPODOSE_DJMIN")
            Me.columnIPODOSE_DJMAX = MyBase.Columns("IPODOSE_DJMAX")
            Me.columnIPODOSE_DPMIN = MyBase.Columns("IPODOSE_DPMIN")
            Me.columnIPODOSE_DPMAX = MyBase.Columns("IPODOSE_DPMAX")
            Me.columnIPODOSE_NATUCD_CDF_CODE_FK = MyBase.Columns("IPODOSE_NATUCD_CDF_CODE_FK")
            Me.columnIPODOSE_NATUCD_CDF_NUM_FK = MyBase.Columns("IPODOSE_NATUCD_CDF_NUM_FK")
            Me.columnIPODOSE_CONT = MyBase.Columns("IPODOSE_CONT")
            Me.columnIPODOSE_VOL_CONT = MyBase.Columns("IPODOSE_VOL_CONT")
            Me.columnIPODOSE_VOL_CONT_UNIT = MyBase.Columns("IPODOSE_VOL_CONT_UNIT")
            Me.columnID = MyBase.Columns("ID")
            Me.columnIPODOSE_DONANTH_CDF_CODE_FK = MyBase.Columns("IPODOSE_DONANTH_CDF_CODE_FK")
            Me.columnIPODOSE_CALCUL = MyBase.Columns("IPODOSE_CALCUL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIPODOSE_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("IPODOSE_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_FPO_CODE_FK_PK)
            Me.columnIPODOSE_NUM_SEQ_PK = New Global.System.Data.DataColumn("IPODOSE_NUM_SEQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_NUM_SEQ_PK)
            Me.columnIPODOSE_NUM_ORD = New Global.System.Data.DataColumn("IPODOSE_NUM_ORD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_NUM_ORD)
            Me.columnIPODOSE_SP_CODE_FK_PK = New Global.System.Data.DataColumn("IPODOSE_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_SP_CODE_FK_PK)
            Me.columnIPODOSE_SP_CIPUCD = New Global.System.Data.DataColumn("IPODOSE_SP_CIPUCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_SP_CIPUCD)
            Me.columnIPODOSE_DJMIN = New Global.System.Data.DataColumn("IPODOSE_DJMIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_DJMIN)
            Me.columnIPODOSE_DJMAX = New Global.System.Data.DataColumn("IPODOSE_DJMAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_DJMAX)
            Me.columnIPODOSE_DPMIN = New Global.System.Data.DataColumn("IPODOSE_DPMIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_DPMIN)
            Me.columnIPODOSE_DPMAX = New Global.System.Data.DataColumn("IPODOSE_DPMAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_DPMAX)
            Me.columnIPODOSE_NATUCD_CDF_CODE_FK = New Global.System.Data.DataColumn("IPODOSE_NATUCD_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_NATUCD_CDF_CODE_FK)
            Me.columnIPODOSE_NATUCD_CDF_NUM_FK = New Global.System.Data.DataColumn("IPODOSE_NATUCD_CDF_NUM_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_NATUCD_CDF_NUM_FK)
            Me.columnIPODOSE_CONT = New Global.System.Data.DataColumn("IPODOSE_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_CONT)
            Me.columnIPODOSE_VOL_CONT = New Global.System.Data.DataColumn("IPODOSE_VOL_CONT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_VOL_CONT)
            Me.columnIPODOSE_VOL_CONT_UNIT = New Global.System.Data.DataColumn("IPODOSE_VOL_CONT_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_VOL_CONT_UNIT)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnIPODOSE_DONANTH_CDF_CODE_FK = New Global.System.Data.DataColumn("IPODOSE_DONANTH_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_DONANTH_CDF_CODE_FK)
            Me.columnIPODOSE_CALCUL = New Global.System.Data.DataColumn("IPODOSE_CALCUL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPODOSE_CALCUL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnIPODOSE_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnIPODOSE_NUM_SEQ_PK.AllowDBNull = false
            Me.columnIPODOSE_NUM_ORD.AllowDBNull = false
            Me.columnIPODOSE_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnIPODOSE_SP_CIPUCD.AllowDBNull = false
            Me.columnIPODOSE_SP_CIPUCD.MaxLength = 7
            Me.columnIPODOSE_NATUCD_CDF_CODE_FK.MaxLength = 10
            Me.columnIPODOSE_NATUCD_CDF_NUM_FK.MaxLength = 2
            Me.columnIPODOSE_CONT.MaxLength = 10
            Me.columnIPODOSE_VOL_CONT_UNIT.MaxLength = 10
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnIPODOSE_DONANTH_CDF_CODE_FK.MaxLength = 10
            Me.columnIPODOSE_CALCUL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIPODOSE_INFOPOSORow() As IPODOSE_INFOPOSORow
            Return CType(Me.NewRow,IPODOSE_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IPODOSE_INFOPOSORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IPODOSE_INFOPOSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IPODOSE_INFOPOSORowChangedEvent) Is Nothing) Then
                RaiseEvent IPODOSE_INFOPOSORowChanged(Me, New IPODOSE_INFOPOSORowChangeEvent(CType(e.Row,IPODOSE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IPODOSE_INFOPOSORowChangingEvent) Is Nothing) Then
                RaiseEvent IPODOSE_INFOPOSORowChanging(Me, New IPODOSE_INFOPOSORowChangeEvent(CType(e.Row,IPODOSE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IPODOSE_INFOPOSORowDeletedEvent) Is Nothing) Then
                RaiseEvent IPODOSE_INFOPOSORowDeleted(Me, New IPODOSE_INFOPOSORowChangeEvent(CType(e.Row,IPODOSE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IPODOSE_INFOPOSORowDeletingEvent) Is Nothing) Then
                RaiseEvent IPODOSE_INFOPOSORowDeleting(Me, New IPODOSE_INFOPOSORowChangeEvent(CType(e.Row,IPODOSE_INFOPOSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIPODOSE_INFOPOSORow(ByVal row As IPODOSE_INFOPOSORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Posologie = New dsTheriaque_Posologie
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IPODOSE_INFOPOSODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPO_FICHEPOSORow
        Inherits Global.System.Data.DataRow
        
        Private tableFPO_FICHEPOSO As FPO_FICHEPOSODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPO_FICHEPOSO = CType(Me.Table,FPO_FICHEPOSODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPO_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFPO_FICHEPOSO.FPO_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPO_FICHEPOSO.FPO_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPO_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPO_FICHEPOSO.FPO_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPO_TEXTE' dans la table 'FPO_FICHEPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPO_FICHEPOSO.FPO_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPO_DATECR() As Date
            Get
                Return CType(Me(Me.tableFPO_FICHEPOSO.FPO_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFPO_FICHEPOSO.FPO_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPO_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPO_FICHEPOSO.FPO_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPO_DATEMJ' dans la table 'FPO_FICHEPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPO_FICHEPOSO.FPO_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPO_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFPO_FICHEPOSO.FPO_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPO_TEXTENull()
            Me(Me.tableFPO_FICHEPOSO.FPO_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPO_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFPO_FICHEPOSO.FPO_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPO_DATEMJNull()
            Me(Me.tableFPO_FICHEPOSO.FPO_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCPH_FPOSO_CLPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCPH_FPOSO_CLPH As FPOCPH_FPOSO_CLPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCPH_FPOSO_CLPH = CType(Me.Table,FPOCPH_FPOSO_CLPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCPH_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCPH_FPOSO_CLPH.FPOCPH_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCPH_FPOSO_CLPH.FPOCPH_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOCPH_FPOSO_CLPH.FPOCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOCPH_FPOSO_CLPH.FPOCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCH_POSOCHOIXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCH_POSOCHOIX As FPOCH_POSOCHOIXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCH_POSOCHOIX = CType(Me.Table,FPOCH_POSOCHOIXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCH_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCH_POSOCHOIX.FPOCH_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCH_POSOCHOIX.FPOCH_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCH_CH_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCH_POSOCHOIX.FPOCH_CH_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCH_POSOCHOIX.FPOCH_CH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFPOCH_POSOCHOIX.FPOCH_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOCH_NUMORD' dans la table 'FPOCH_POSOCHOIX' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOCH_POSOCHOIX.FPOCH_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOCH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFPOCH_POSOCHOIX.FPOCH_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOCH_NUMORDNull()
            Me(Me.tableFPOCH_POSOCHOIX.FPOCH_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOSAC_POSO_SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOSAC_POSO_SUBACT As FPOSAC_POSO_SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOSAC_POSO_SUBACT = CType(Me.Table,FPOSAC_POSO_SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOSAC_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOSAC_POSO_SUBACT.FPOSAC_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOSAC_POSO_SUBACT.FPOSAC_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOSAC_POSO_SUBACT.FPOSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOSAC_POSO_SUBACT.FPOSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOPR_FPOSO_PRODRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOPR_FPOSO_PROD As FPOPR_FPOSO_PRODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOPR_FPOSO_PROD = CType(Me.Table,FPOPR_FPOSO_PRODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOPR_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOPR_FPOSO_PROD.FPOPR_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOPR_FPOSO_PROD.FPOPR_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOPR_FPOSO_PROD.FPOPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOPR_FPOSO_PROD.FPOPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCCH_FPOSO_CLCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCCH_FPOSO_CLCH As FPOCCH_FPOSO_CLCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCCH_FPOSO_CLCH = CType(Me.Table,FPOCCH_FPOSO_CLCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCCH_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCCH_FPOSO_CLCH.FPOCCH_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCCH_FPOSO_CLCH.FPOCCH_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOCCH_FPOSO_CLCH.FPOCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOCCH_FPOSO_CLCH.FPOCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOSP_POSO_SPERow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOSP_POSO_SPE As FPOSP_POSO_SPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOSP_POSO_SPE = CType(Me.Table,FPOSP_POSO_SPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOSP_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOSP_POSO_SPE.FPOSP_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOSP_POSO_SPE.FPOSP_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOSP_POSO_SPE.FPOSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOSP_POSO_SPE.FPOSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOVO_FPOSO_VOIERow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOVO_FPOSO_VOIE As FPOVO_FPOSO_VOIEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOVO_FPOSO_VOIE = CType(Me.Table,FPOVO_FPOSO_VOIEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOVO_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOVO_CDF_VO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_CDF_VO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_CDF_VO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOVO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOVO_NUMORD' dans la table 'FPOVO_FPOSO_VOIE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOVO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFPOVO_FPOSO_VOIE.FPOVO_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOVO_NUMORDNull()
            Me(Me.tableFPOVO_FPOSO_VOIE.FPOVO_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOTE_FPOSO_TERRAINRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOTE_FPOSO_TERRAIN As FPOTE_FPOSO_TERRAINDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOTE_FPOSO_TERRAIN = CType(Me.Table,FPOTE_FPOSO_TERRAINDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOTE_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOTE_CDF_TEPO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_CDF_TEPO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_CDF_TEPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOTE_GRP_CODE_PK() As Byte
            Get
                Return CType(Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_GRP_CODE_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_GRP_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOTE_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOTE_NUMORD' dans la table 'FPOTE_FPOSO_TERRAIN' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOTE_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOTE_NUMORDNull()
            Me(Me.tableFPOTE_FPOSO_TERRAIN.FPOTE_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FIN_FICHEINDICRow
        Inherits Global.System.Data.DataRow
        
        Private tableFIN_FICHEINDIC As FIN_FICHEINDICDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFIN_FICHEINDIC = CType(Me.Table,FIN_FICHEINDICDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CDF_NAIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NAIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NAIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CDF_NVIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NVIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NVIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIN_TEXTE' dans la table 'FIN_FICHEINDIC' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_DATECR() As Date
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIN_DATEMJ' dans la table 'FIN_FICHEINDIC' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_TEXTENull()
            Me(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_DATEMJNull()
            Me(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOUT_FPOSO_UTILTHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOUT_FPOSO_UTILTH As FPOUT_FPOSO_UTILTHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOUT_FPOSO_UTILTH = CType(Me.Table,FPOUT_FPOSO_UTILTHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOUT_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOUT_FPOSO_UTILTH.FPOUT_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOUT_FPOSO_UTILTH.FPOUT_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOUT_CDF_UTPO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOUT_FPOSO_UTILTH.FPOUT_CDF_UTPO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOUT_FPOSO_UTILTH.FPOUT_CDF_UTPO_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCOUT_FPOSO_COMMENTUTILTHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCOUT_FPOSO_COMMENTUTILTH As FPOCOUT_FPOSO_COMMENTUTILTHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCOUT_FPOSO_COMMENTUTILTH = CType(Me.Table,FPOCOUT_FPOSO_COMMENTUTILTHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOUT_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOUT_CDF_COUT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_CDF_COUT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_CDF_COUT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOUT_NUM_ORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_NUM_ORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOCOUT_NUM_ORD' dans la table 'FPOCOUT_FPOSO_COMMENTU"& _ 
                            "TILTH' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOCOUT_NUM_ORDNull() As Boolean
            Return Me.IsNull(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_NUM_ORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOCOUT_NUM_ORDNull()
            Me(Me.tableFPOCOUT_FPOSO_COMMENTUTILTH.FPOCOUT_NUM_ORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPO_INFOPOSORow
        Inherits Global.System.Data.DataRow
        
        Private tableIPO_INFOPOSO As IPO_INFOPOSODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPO_INFOPOSO = CType(Me.Table,IPO_INFOPOSODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_NUM_SEQ_PK() As Short
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_NUM_SEQ_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_NUM_SEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_NAPO_CODE_FK() As String
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_NAPO_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_NAPO_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_UNPO_CODE_FK() As String
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_UNPO_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_UNPO_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DOSEMIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DOSEMINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_DOSEMIN' dans la table 'IPO_INFOPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DOSEMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DOSEMAX() As String
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DOSEMAXColumn),String)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DOSEMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_FREQMIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_FREQMINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_FREQMIN' dans la table 'IPO_INFOPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_FREQMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_FREQMAX() As String
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_FREQMAXColumn),String)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_FREQMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_FREQMIN_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_FREQMIN_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_CDF_FREQMIN_CODE_FK' dans la table 'IPO_INFOPOSO' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_FREQMIN_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_FREQMAX_CODE_FK() As String
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_FREQMAX_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_FREQMAX_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DUREEMIN() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DUREEMINColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_DUREEMIN' dans la table 'IPO_INFOPOSO' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DUREEMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_UTMIN_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_UTMIN_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_CDF_UTMIN_CODE_FK' dans la table 'IPO_INFOPOSO' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_UTMIN_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DUREEMAX() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DUREEMAXColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_DUREEMAX' dans la table 'IPO_INFOPOSO' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DUREEMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_UTMAX_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_UTMAX_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_CDF_UTMAX_CODE_FK' dans la table 'IPO_INFOPOSO' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_UTMAX_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_NUM_ORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_NUM_ORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_NUM_ORD' dans la table 'IPO_INFOPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DATECR() As Date
            Get
                Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_DATEMJ' dans la table 'IPO_INFOPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_INTERVMIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_INTERVMINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_INTERVMIN' dans la table 'IPO_INFOPOSO' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_INTERVMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_INTERVMAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_INTERVMAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_INTERVMAX' dans la table 'IPO_INFOPOSO' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_INTERVMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_UIMIN_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_UIMIN_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_CDF_UIMIN_CODE_FK' dans la table 'IPO_INFOPOSO' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_UIMIN_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_CDF_UIMAX_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_CDF_UIMAX_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_CDF_UIMAX_CODE_FK' dans la table 'IPO_INFOPOSO' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_CDF_UIMAX_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DUREEMIN1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DUREEMIN1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_DUREEMIN1' dans la table 'IPO_INFOPOSO' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DUREEMIN1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_DUREEMAX1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIPO_INFOPOSO.IPO_DUREEMAX1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPO_DUREEMAX1' dans la table 'IPO_INFOPOSO' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableIPO_INFOPOSO.IPO_DUREEMAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_DOSEMINNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_DOSEMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_DOSEMINNull()
            Me(Me.tableIPO_INFOPOSO.IPO_DOSEMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_FREQMINNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_FREQMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_FREQMINNull()
            Me(Me.tableIPO_INFOPOSO.IPO_FREQMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_CDF_FREQMIN_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_CDF_FREQMIN_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_CDF_FREQMIN_CODE_FKNull()
            Me(Me.tableIPO_INFOPOSO.IPO_CDF_FREQMIN_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_DUREEMINNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_DUREEMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_DUREEMINNull()
            Me(Me.tableIPO_INFOPOSO.IPO_DUREEMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_CDF_UTMIN_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_CDF_UTMIN_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_CDF_UTMIN_CODE_FKNull()
            Me(Me.tableIPO_INFOPOSO.IPO_CDF_UTMIN_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_DUREEMAXNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_DUREEMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_DUREEMAXNull()
            Me(Me.tableIPO_INFOPOSO.IPO_DUREEMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_CDF_UTMAX_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_CDF_UTMAX_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_CDF_UTMAX_CODE_FKNull()
            Me(Me.tableIPO_INFOPOSO.IPO_CDF_UTMAX_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_NUM_ORDNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_NUM_ORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_NUM_ORDNull()
            Me(Me.tableIPO_INFOPOSO.IPO_NUM_ORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_DATEMJNull()
            Me(Me.tableIPO_INFOPOSO.IPO_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_INTERVMINNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_INTERVMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_INTERVMINNull()
            Me(Me.tableIPO_INFOPOSO.IPO_INTERVMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_INTERVMAXNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_INTERVMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_INTERVMAXNull()
            Me(Me.tableIPO_INFOPOSO.IPO_INTERVMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_CDF_UIMIN_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_CDF_UIMIN_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_CDF_UIMIN_CODE_FKNull()
            Me(Me.tableIPO_INFOPOSO.IPO_CDF_UIMIN_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_CDF_UIMAX_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_CDF_UIMAX_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_CDF_UIMAX_CODE_FKNull()
            Me(Me.tableIPO_INFOPOSO.IPO_CDF_UIMAX_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_DUREEMIN1Null() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_DUREEMIN1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_DUREEMIN1Null()
            Me(Me.tableIPO_INFOPOSO.IPO_DUREEMIN1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPO_DUREEMAX1Null() As Boolean
            Return Me.IsNull(Me.tableIPO_INFOPOSO.IPO_DUREEMAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPO_DUREEMAX1Null()
            Me(Me.tableIPO_INFOPOSO.IPO_DUREEMAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIPOCOD_INFPO_COMMENT_DUREERows() As IPOCOD_INFPO_COMMENT_DUREERow()
            If (Me.Table.ChildRelations("FK1_IPOCOD") Is Nothing) Then
                Return New IPOCOD_INFPO_COMMENT_DUREERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_IPOCOD")),IPOCOD_INFPO_COMMENT_DUREERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIPOCOFQ_INFPO_COMMENT_FREQRows() As IPOCOFQ_INFPO_COMMENT_FREQRow()
            If (Me.Table.ChildRelations("FK1_IPOCOFQ") Is Nothing) Then
                Return New IPOCOFQ_INFPO_COMMENT_FREQRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_IPOCOFQ")),IPOCOFQ_INFPO_COMMENT_FREQRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIPOCOTE_INFPO_COMMENT_TERRAINRows() As IPOCOTE_INFPO_COMMENT_TERRAINRow()
            If (Me.Table.ChildRelations("FK1_IPOCOTE") Is Nothing) Then
                Return New IPOCOTE_INFPO_COMMENT_TERRAINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_IPOCOTE")),IPOCOTE_INFPO_COMMENT_TERRAINRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPOCOTE_INFPO_COMMENT_TERRAINRow
        Inherits Global.System.Data.DataRow
        
        Private tableIPOCOTE_INFPO_COMMENT_TERRAIN As IPOCOTE_INFPO_COMMENT_TERRAINDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN = CType(Me.Table,IPOCOTE_INFPO_COMMENT_TERRAINDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOTE_IPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_IPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_IPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOTE_IPO_NUM_SEQ_FK_PK() As Short
            Get
                Return CType(Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_IPO_NUM_SEQ_FK_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_IPO_NUM_SEQ_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOTE_CDF_COTE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_CDF_COTE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_CDF_COTE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOTE_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPOCOTE_INFPO_COMMENT_TERRAIN.IPOCOTE_NUM_ORD_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_INFOPOSORowParent() As IPO_INFOPOSORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_IPOCOTE")),IPO_INFOPOSORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_IPOCOTE"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPOCOFQ_INFPO_COMMENT_FREQRow
        Inherits Global.System.Data.DataRow
        
        Private tableIPOCOFQ_INFPO_COMMENT_FREQ As IPOCOFQ_INFPO_COMMENT_FREQDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPOCOFQ_INFPO_COMMENT_FREQ = CType(Me.Table,IPOCOFQ_INFPO_COMMENT_FREQDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOFQ_IPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_IPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_IPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOFQ_IPO_NUM_SEQ_FK_PK() As Short
            Get
                Return CType(Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_IPO_NUM_SEQ_FK_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_IPO_NUM_SEQ_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOFQ_CDF_COFQ_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_CDF_COFQ_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_CDF_COFQ_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOFQ_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPOCOFQ_INFPO_COMMENT_FREQ.IPOCOFQ_NUM_ORD_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_INFOPOSORowParent() As IPO_INFOPOSORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_IPOCOFQ")),IPO_INFOPOSORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_IPOCOFQ"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPOCOD_INFPO_COMMENT_DUREERow
        Inherits Global.System.Data.DataRow
        
        Private tableIPOCOD_INFPO_COMMENT_DUREE As IPOCOD_INFPO_COMMENT_DUREEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPOCOD_INFPO_COMMENT_DUREE = CType(Me.Table,IPOCOD_INFPO_COMMENT_DUREEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOD_IPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_IPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_IPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOD_IPO_NUM_SEQ_FK_PK() As Short
            Get
                Return CType(Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_IPO_NUM_SEQ_FK_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_IPO_NUM_SEQ_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOD_CDF_COD_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_CDF_COD_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_CDF_COD_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOCOD_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableIPOCOD_INFPO_COMMENT_DUREE.IPOCOD_NUM_ORD_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPO_INFOPOSORowParent() As IPO_INFOPOSORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_IPOCOD")),IPO_INFOPOSORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_IPOCOD"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCOAD_FPOSO_COMMENT_ADAPTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCOAD_FPOSO_COMMENT_ADAPT As FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT = CType(Me.Table,FPOCOAD_FPOSO_COMMENT_ADAPTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOAD_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.FPOCOAD_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.FPOCOAD_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOAD_CDF_COAD_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.FPOCOAD_CDF_COAD_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.FPOCOAD_CDF_COAD_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOAD_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.FPOCOAD_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFPOCOAD_FPOSO_COMMENT_ADAPT.FPOCOAD_NUM_ORD_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCOSU_FPOSO_COMMENT_SURVEILRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCOSU_FPOSO_COMMENT_SURVEIL As FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL = CType(Me.Table,FPOCOSU_FPOSO_COMMENT_SURVEILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOSU_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.FPOCOSU_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.FPOCOSU_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOSU_CDF_COSU_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.FPOCOSU_CDF_COSU_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.FPOCOSU_CDF_COSU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOSU_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.FPOCOSU_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFPOCOSU_FPOSO_COMMENT_SURVEIL.FPOCOSU_NUM_ORD_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOCOAU_FPOSO_COMMENT_AUTRERow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOCOAU_FPOSO_COMMENT_AUTRE As FPOCOAU_FPOSO_COMMENT_AUTREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE = CType(Me.Table,FPOCOAU_FPOSO_COMMENT_AUTREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOAU_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.FPOCOAU_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.FPOCOAU_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOAU_CDF_COAU_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.FPOCOAU_CDF_COAU_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.FPOCOAU_CDF_COAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOCOAU_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.FPOCOAU_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFPOCOAU_FPOSO_COMMENT_AUTRE.FPOCOAU_NUM_ORD_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOBIB_REFERENCE_BIBLIORow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOBIB_REFERENCE_BIBLIO As FPOBIB_REFERENCE_BIBLIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOBIB_REFERENCE_BIBLIO = CType(Me.Table,FPOBIB_REFERENCE_BIBLIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOBIB_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOBIB_REFERENCE_BIBLIO.FPOBIB_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOBIB_REFERENCE_BIBLIO.FPOBIB_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOBIB_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPOBIB_REFERENCE_BIBLIO.FPOBIB_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOBIB_TEXTE' dans la table 'FPOBIB_REFERENCE_BIBLIO' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOBIB_REFERENCE_BIBLIO.FPOBIB_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOBIB_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFPOBIB_REFERENCE_BIBLIO.FPOBIB_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOBIB_TEXTENull()
            Me(Me.tableFPOBIB_REFERENCE_BIBLIO.FPOBIB_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOAFS_POSO_AFSSAPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOAFS_POSO_AFSSAPS As FPOAFS_POSO_AFSSAPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOAFS_POSO_AFSSAPS = CType(Me.Table,FPOAFS_POSO_AFSSAPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOAFS_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOAFS_POSO_AFSSAPS.FPOAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPODUREE_INFOPOSORow
        Inherits Global.System.Data.DataRow
        
        Private tableIPODUREE_INFOPOSO As IPODUREE_INFOPOSODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPODUREE_INFOPOSO = CType(Me.Table,IPODUREE_INFOPOSODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODUREE_FPO_CODE_PK_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_FPO_CODE_PK_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODUREE_FPO_CODE_PK_FK' dans la table 'IPODUREE_INFOP"& _ 
                            "OSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_FPO_CODE_PK_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODUREE_SP_CODE_SQ_PK_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CODE_SQ_PK_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODUREE_SP_CODE_SQ_PK_FK' dans la table 'IPODUREE_INF"& _ 
                            "OPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CODE_SQ_PK_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODUREE_SP_CIPUCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CIPUCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODUREE_SP_CIPUCD' dans la table 'IPODUREE_INFOPOSO' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODUREE_DUREE_MIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODUREE_DUREE_MIN' dans la table 'IPODUREE_INFOPOSO' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODUREE_DUREE_MAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODUREE_DUREE_MAX' dans la table 'IPODUREE_INFOPOSO' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableIPODUREE_INFOPOSO.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableIPODUREE_INFOPOSO.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODUREE_FPO_CODE_PK_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPODUREE_INFOPOSO.IPODUREE_FPO_CODE_PK_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODUREE_FPO_CODE_PK_FKNull()
            Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_FPO_CODE_PK_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODUREE_SP_CODE_SQ_PK_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CODE_SQ_PK_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODUREE_SP_CODE_SQ_PK_FKNull()
            Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CODE_SQ_PK_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODUREE_SP_CIPUCDNull() As Boolean
            Return Me.IsNull(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CIPUCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODUREE_SP_CIPUCDNull()
            Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_SP_CIPUCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODUREE_DUREE_MINNull() As Boolean
            Return Me.IsNull(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODUREE_DUREE_MINNull()
            Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODUREE_DUREE_MAXNull() As Boolean
            Return Me.IsNull(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODUREE_DUREE_MAXNull()
            Me(Me.tableIPODUREE_INFOPOSO.IPODUREE_DUREE_MAXColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPOJ_INFOPOSO_JOURNALIERERow
        Inherits Global.System.Data.DataRow
        
        Private tableIPOJ_INFOPOSO_JOURNALIERE As IPOJ_INFOPOSO_JOURNALIEREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPOJ_INFOPOSO_JOURNALIERE = CType(Me.Table,IPOJ_INFOPOSO_JOURNALIEREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_NUM_SEQ_PK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_SEQ_PKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_NUM_SEQ_PK' dans la table 'IPOJ_INFOPOSO_JOURNALI"& _ 
                            "ERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_SEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_CDF_NAPO_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CDF_NAPO_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_CDF_NAPO_CODE_FK' dans la table 'IPOJ_INFOPOSO_JO"& _ 
                            "URNALIERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CDF_NAPO_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_NUM_ORD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_ORDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_NUM_ORD' dans la table 'IPOJ_INFOPOSO_JOURNALIERE"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_SP_CIPUCD() As String
            Get
                Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_SP_CIPUCDColumn),String)
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_DJMIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_DJMIN' dans la table 'IPOJ_INFOPOSO_JOURNALIERE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_DJMAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_DJMAX' dans la table 'IPOJ_INFOPOSO_JOURNALIERE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_DTMIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_DTMIN' dans la table 'IPOJ_INFOPOSO_JOURNALIERE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_DTMAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_DTMAX' dans la table 'IPOJ_INFOPOSO_JOURNALIERE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_NATUCD_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_NATUCD_CDF_CODE_FK' dans la table 'IPOJ_INFOPOSO_"& _ 
                            "JOURNALIERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_NATUCD_CDF_NUM_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_NUM_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_NATUCD_CDF_NUM_FK' dans la table 'IPOJ_INFOPOSO_J"& _ 
                            "OURNALIERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_NUM_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_DONANTH_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DONANTH_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_DONANTH_CDF_CODE_FK' dans la table 'IPOJ_INFOPOSO"& _ 
                            "_JOURNALIERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DONANTH_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_CONT' dans la table 'IPOJ_INFOPOSO_JOURNALIERE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_VOL_CONT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_VOL_CONT' dans la table 'IPOJ_INFOPOSO_JOURNALIER"& _ 
                            "E' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_VOL_CONT_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONT_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_VOL_CONT_UNIT' dans la table 'IPOJ_INFOPOSO_JOURN"& _ 
                            "ALIERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONT_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPOJ_UCD13() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_UCD13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPOJ_UCD13' dans la table 'IPOJ_INFOPOSO_JOURNALIERE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_UCD13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_NUM_SEQ_PKNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_SEQ_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_NUM_SEQ_PKNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_SEQ_PKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_CDF_NAPO_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CDF_NAPO_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_CDF_NAPO_CODE_FKNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CDF_NAPO_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_NUM_ORDNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_ORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_NUM_ORDNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NUM_ORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_DJMINNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_DJMINNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_DJMAXNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_DJMAXNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DJMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_DTMINNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_DTMINNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_DTMAXNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_DTMAXNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DTMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_NATUCD_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_NATUCD_CDF_CODE_FKNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_NATUCD_CDF_NUM_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_NUM_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_NATUCD_CDF_NUM_FKNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_NATUCD_CDF_NUM_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_DONANTH_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DONANTH_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_DONANTH_CDF_CODE_FKNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_DONANTH_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_CONTNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_CONTNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_VOL_CONTNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_VOL_CONTNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_VOL_CONT_UNITNull() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONT_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_VOL_CONT_UNITNull()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_VOL_CONT_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPOJ_UCD13Null() As Boolean
            Return Me.IsNull(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_UCD13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPOJ_UCD13Null()
            Me(Me.tableIPOJ_INFOPOSO_JOURNALIERE.IPOJ_UCD13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CATC_CLASSEATCRow
        Inherits Global.System.Data.DataRow
        
        Private tableCATC_CLASSEATC As CATC_CLASSEATCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCATC_CLASSEATC = CType(Me.Table,CATC_CLASSEATCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CATC_CATC_CODE_FK' dans la table 'CATC_CLASSEATC' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_NOMF() As String
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_NOMFColumn),String)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_NOMFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_NOMA() As String
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_NOMAColumn),String)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_NOMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_DATECR() As Date
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CATC_DATEMJ' dans la table 'CATC_CLASSEATC' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CATC_TEXTE' dans la table 'CATC_CLASSEATC' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CLASSEATCRowParent() As CATC_CLASSEATCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CATC_CLASSEATC")),CATC_CLASSEATCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CATC_CLASSEATC"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATC_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATC_CATC_CODE_FKNull()
            Me(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATC_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATC_DATEMJNull()
            Me(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATC_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATC_TEXTENull()
            Me(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCATC_CLASSEATCRows() As CATC_CLASSEATCRow()
            If (Me.Table.ChildRelations("FK1_CATC_CLASSEATC") Is Nothing) Then
                Return New CATC_CLASSEATCRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CATC_CLASSEATC")),CATC_CLASSEATCRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IPODOSE_INFOPOSORow
        Inherits Global.System.Data.DataRow
        
        Private tableIPODOSE_INFOPOSO As IPODOSE_INFOPOSODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIPODOSE_INFOPOSO = CType(Me.Table,IPODOSE_INFOPOSODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_NUM_SEQ_PK() As Integer
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NUM_SEQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NUM_SEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_NUM_ORD() As Integer
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NUM_ORDColumn),Integer)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_SP_CIPUCD() As String
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_SP_CIPUCDColumn),String)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_DJMIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_DJMIN' dans la table 'IPODOSE_INFOPOSO' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_DJMAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_DJMAX' dans la table 'IPODOSE_INFOPOSO' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_DPMIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_DPMIN' dans la table 'IPODOSE_INFOPOSO' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_DPMAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_DPMAX' dans la table 'IPODOSE_INFOPOSO' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_NATUCD_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_NATUCD_CDF_CODE_FK' dans la table 'IPODOSE_INF"& _ 
                            "OPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_NATUCD_CDF_NUM_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_NUM_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_NATUCD_CDF_NUM_FK' dans la table 'IPODOSE_INFO"& _ 
                            "POSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_NUM_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_CONT' dans la table 'IPODOSE_INFOPOSO' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_VOL_CONT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_VOL_CONT' dans la table 'IPODOSE_INFOPOSO' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_VOL_CONT_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONT_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_VOL_CONT_UNIT' dans la table 'IPODOSE_INFOPOSO"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONT_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_DONANTH_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DONANTH_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IPODOSE_DONANTH_CDF_CODE_FK' dans la table 'IPODOSE_IN"& _ 
                            "FOPOSO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DONANTH_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPODOSE_CALCUL() As Boolean
            Get
                Return CType(Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_CALCULColumn),Boolean)
            End Get
            Set
                Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_CALCULColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_DJMINNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_DJMINNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_DJMAXNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_DJMAXNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DJMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_DPMINNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_DPMINNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_DPMAXNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_DPMAXNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DPMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_NATUCD_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_NATUCD_CDF_CODE_FKNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_NATUCD_CDF_NUM_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_NUM_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_NATUCD_CDF_NUM_FKNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_NATUCD_CDF_NUM_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_CONTNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_CONTNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_VOL_CONTNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_VOL_CONTNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_VOL_CONT_UNITNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONT_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_VOL_CONT_UNITNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_VOL_CONT_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPODOSE_DONANTH_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableIPODOSE_INFOPOSO.IPODOSE_DONANTH_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPODOSE_DONANTH_CDF_CODE_FKNull()
            Me(Me.tableIPODOSE_INFOPOSO.IPODOSE_DONANTH_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPO_FICHEPOSORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPO_FICHEPOSORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPO_FICHEPOSORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPO_FICHEPOSORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCPH_FPOSO_CLPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCPH_FPOSO_CLPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCPH_FPOSO_CLPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCPH_FPOSO_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCH_POSOCHOIXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCH_POSOCHOIXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCH_POSOCHOIXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCH_POSOCHOIXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOSAC_POSO_SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOSAC_POSO_SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOSAC_POSO_SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOSAC_POSO_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOPR_FPOSO_PRODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOPR_FPOSO_PRODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOPR_FPOSO_PRODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOPR_FPOSO_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCCH_FPOSO_CLCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCCH_FPOSO_CLCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCCH_FPOSO_CLCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCCH_FPOSO_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOSP_POSO_SPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOSP_POSO_SPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOSP_POSO_SPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOSP_POSO_SPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOVO_FPOSO_VOIERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOVO_FPOSO_VOIERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOVO_FPOSO_VOIERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOVO_FPOSO_VOIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOTE_FPOSO_TERRAINRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOTE_FPOSO_TERRAINRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOTE_FPOSO_TERRAINRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOTE_FPOSO_TERRAINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FIN_FICHEINDICRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FIN_FICHEINDICRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FIN_FICHEINDICRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FIN_FICHEINDICRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOUT_FPOSO_UTILTHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOUT_FPOSO_UTILTHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOUT_FPOSO_UTILTHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOUT_FPOSO_UTILTHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCOUT_FPOSO_COMMENTUTILTHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCOUT_FPOSO_COMMENTUTILTHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCOUT_FPOSO_COMMENTUTILTHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCOUT_FPOSO_COMMENTUTILTHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPO_INFOPOSORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPO_INFOPOSORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPO_INFOPOSORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPO_INFOPOSORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPOCOTE_INFPO_COMMENT_TERRAINRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPOCOTE_INFPO_COMMENT_TERRAINRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPOCOTE_INFPO_COMMENT_TERRAINRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPOCOTE_INFPO_COMMENT_TERRAINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPOCOFQ_INFPO_COMMENT_FREQRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPOCOFQ_INFPO_COMMENT_FREQRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPOCOFQ_INFPO_COMMENT_FREQRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPOCOFQ_INFPO_COMMENT_FREQRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPOCOD_INFPO_COMMENT_DUREERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPOCOD_INFPO_COMMENT_DUREERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPOCOD_INFPO_COMMENT_DUREERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPOCOD_INFPO_COMMENT_DUREERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCOAD_FPOSO_COMMENT_ADAPTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCOAD_FPOSO_COMMENT_ADAPTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCOAD_FPOSO_COMMENT_ADAPTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCOAD_FPOSO_COMMENT_ADAPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCOSU_FPOSO_COMMENT_SURVEILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCOSU_FPOSO_COMMENT_SURVEILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCOSU_FPOSO_COMMENT_SURVEILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCOSU_FPOSO_COMMENT_SURVEILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOCOAU_FPOSO_COMMENT_AUTRERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOCOAU_FPOSO_COMMENT_AUTRERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOCOAU_FPOSO_COMMENT_AUTRERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOCOAU_FPOSO_COMMENT_AUTRERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOBIB_REFERENCE_BIBLIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOBIB_REFERENCE_BIBLIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOBIB_REFERENCE_BIBLIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOBIB_REFERENCE_BIBLIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOAFS_POSO_AFSSAPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOAFS_POSO_AFSSAPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOAFS_POSO_AFSSAPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOAFS_POSO_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPODUREE_INFOPOSORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPODUREE_INFOPOSORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPODUREE_INFOPOSORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPODUREE_INFOPOSORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPOJ_INFOPOSO_JOURNALIERERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPOJ_INFOPOSO_JOURNALIERERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPOJ_INFOPOSO_JOURNALIERERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPOJ_INFOPOSO_JOURNALIERERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CATC_CLASSEATCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CATC_CLASSEATCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CATC_CLASSEATCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CATC_CLASSEATCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IPODOSE_INFOPOSORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IPODOSE_INFOPOSORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IPODOSE_INFOPOSORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IPODOSE_INFOPOSORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_PosologieTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPO_FICHEPOSOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPO_FICHEPOSO"
            tableMapping.ColumnMappings.Add("FPO_CODE_SQ_PK", "FPO_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FPO_TEXTE", "FPO_TEXTE")
            tableMapping.ColumnMappings.Add("FPO_DATECR", "FPO_DATECR")
            tableMapping.ColumnMappings.Add("FPO_DATEMJ", "FPO_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPO_FICHEPOSO] WHERE (([FPO_CODE_SQ_PK] = @Original_FPO_"& _ 
                "CODE_SQ_PK) AND ([FPO_DATECR] = @Original_FPO_DATECR) AND ((@IsNull_FPO_DATEMJ ="& _ 
                " 1 AND [FPO_DATEMJ] IS NULL) OR ([FPO_DATEMJ] = @Original_FPO_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPO_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPO_FICHEPOSO] ([FPO_CODE_SQ_PK], [FPO_TEXTE], [FPO_DATE"& _ 
                "CR], [FPO_DATEMJ]) VALUES (@FPO_CODE_SQ_PK, @FPO_TEXTE, @FPO_DATECR, @FPO_DATEMJ"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPO_CODE_SQ_PK, FPO_TEXTE, FPO_DATECR, FPO_DATEMJ FROM THERIAQUE.FPO_"& _ 
                "FICHEPOSO WHERE (FPO_CODE_SQ_PK = @FPO_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPO_FICHEPOSO] SET [FPO_CODE_SQ_PK] = @FPO_CODE_SQ_PK, [FPO_T"& _ 
                "EXTE] = @FPO_TEXTE, [FPO_DATECR] = @FPO_DATECR, [FPO_DATEMJ] = @FPO_DATEMJ WHERE"& _ 
                " (([FPO_CODE_SQ_PK] = @Original_FPO_CODE_SQ_PK) AND ([FPO_DATECR] = @Original_FP"& _ 
                "O_DATECR) AND ((@IsNull_FPO_DATEMJ = 1 AND [FPO_DATEMJ] IS NULL) OR ([FPO_DATEMJ"& _ 
                "] = @Original_FPO_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPO_CODE_SQ_PK, FPO_TEXTE, FPO_DATECR, FPO_"& _ 
                "DATEMJ FROM THERIAQUE.FPO_FICHEPOSO WHERE (FPO_CODE_SQ_PK = @FPO_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPO_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPO_CODE_SQ_PK, FPO_TEXTE, FPO_DATECR, FPO_DATEMJ FROM THERIAQUE.FPO_FICHE" & _
                "POSO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPO_CODE_SQ_PK, FPO_TEXTE, FPO_DATECR, FPO_DATEMJ FROM THERIAQUE.FPO_FICHE" & _
                "POSO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPO_CODE_SQ_PK = @FPO_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPO_FICHEPOSODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPO_FICHEPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPO_FICHEPOSODataTable = New dsTheriaque_Posologie.FPO_FICHEPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPO_FICHEPOSODataTable, ByVal FPO_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPO_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPO_CODE_SQ_PK As Integer) As dsTheriaque_Posologie.FPO_FICHEPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPO_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPO_FICHEPOSODataTable = New dsTheriaque_Posologie.FPO_FICHEPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPO_FICHEPOSODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPO_FICHEPOSO")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPO_CODE_SQ_PK As Integer, ByVal Original_FPO_DATECR As Date, ByVal Original_FPO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPO_CODE_SQ_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPO_DATECR, Date)
            If (Original_FPO_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPO_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPO_CODE_SQ_PK As Integer, ByVal FPO_TEXTE As String, ByVal FPO_DATECR As Date, ByVal FPO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPO_CODE_SQ_PK, Integer)
            If (FPO_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPO_TEXTE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPO_DATECR, Date)
            If (FPO_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPO_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPO_CODE_SQ_PK As Integer, ByVal FPO_TEXTE As String, ByVal FPO_DATECR As Date, ByVal FPO_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FPO_CODE_SQ_PK As Integer, ByVal Original_FPO_DATECR As Date, ByVal Original_FPO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPO_CODE_SQ_PK, Integer)
            If (FPO_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPO_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPO_DATECR, Date)
            If (FPO_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPO_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPO_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPO_DATECR, Date)
            If (Original_FPO_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FPO_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPO_TEXTE As String, ByVal FPO_DATECR As Date, ByVal FPO_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FPO_CODE_SQ_PK As Integer, ByVal Original_FPO_DATECR As Date, ByVal Original_FPO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FPO_CODE_SQ_PK, FPO_TEXTE, FPO_DATECR, FPO_DATEMJ, Original_FPO_CODE_SQ_PK, Original_FPO_DATECR, Original_FPO_DATEMJ)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOCPH_FPOSO_CLPHTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCPH_FPOSO_CLPH"
            tableMapping.ColumnMappings.Add("FPOCPH_FPO_CODE_FK_PK", "FPOCPH_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCPH_CPH_CODE_FK_PK", "FPOCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCPH_FPOSO_CLPH] WHERE (([FPOCPH_FPO_CODE_FK_PK] = @Or" & _
                "iginal_FPOCPH_FPO_CODE_FK_PK) AND ([FPOCPH_CPH_CODE_FK_PK] = @Original_FPOCPH_CP" & _
                "H_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCPH_FPOSO_CLPH] ([FPOCPH_FPO_CODE_FK_PK], [FPOCPH_CPH" & _
                "_CODE_FK_PK]) VALUES (@FPOCPH_FPO_CODE_FK_PK, @FPOCPH_CPH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT F" & _
                "POCPH_FPO_CODE_FK_PK, FPOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPOCPH_FPOSO_CLPH WHE" & _
                "RE (FPOCPH_CPH_CODE_FK_PK = @FPOCPH_CPH_CODE_FK_PK) AND (FPOCPH_FPO_CODE_FK_PK =" & _
                " @FPOCPH_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCPH_FPOSO_CLPH] SET [FPOCPH_FPO_CODE_FK_PK] = @FPOCPH_FPO_" & _
                "CODE_FK_PK, [FPOCPH_CPH_CODE_FK_PK] = @FPOCPH_CPH_CODE_FK_PK WHERE (([FPOCPH_FPO" & _
                "_CODE_FK_PK] = @Original_FPOCPH_FPO_CODE_FK_PK) AND ([FPOCPH_CPH_CODE_FK_PK] = @" & _
                "Original_FPOCPH_CPH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCPH_FPO_CODE_FK_PK, FPOCPH_CPH_CODE" & _
                "_FK_PK FROM THERIAQUE.FPOCPH_FPOSO_CLPH WHERE (FPOCPH_CPH_CODE_FK_PK = @FPOCPH_C" & _
                "PH_CODE_FK_PK) AND (FPOCPH_FPO_CODE_FK_PK = @FPOCPH_FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCPH_FPO_CODE_FK_PK, FPOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPOCPH_FPOSO_C" & _
                "LPH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCPH_FPO_CODE_FK_PK, FPOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPOCPH_FPOSO_C" & _
                "LPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCPH_FPO_CODE_FK_PK = @FPOCPH_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable = New dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable, ByVal FPOCPH_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCPH_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOCPH_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCPH_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable = New dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCPH_FPOSO_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCPH_FPOSO_CLPH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCPH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCPH_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCPH_FPO_CODE_FK_PK As Integer, ByVal FPOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCPH_FPO_CODE_FK_PK, Integer)
            If (FPOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCPH_FPO_CODE_FK_PK As Integer, ByVal FPOCPH_CPH_CODE_FK_PK As String, ByVal Original_FPOCPH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCPH_FPO_CODE_FK_PK, Integer)
            If (FPOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOCPH_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOCPH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPOCPH_FPO_CODE_FK_PK, Original_FPOCPH_CPH_CODE_FK_PK, Original_FPOCPH_FPO_CODE_FK_PK, Original_FPOCPH_CPH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOCH_POSOCHOIXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCH_POSOCHOIX"
            tableMapping.ColumnMappings.Add("FPOCH_FPO_CODE_FK_PK", "FPOCH_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCH_CH_CODE_FK_PK", "FPOCH_CH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCH_NUMORD", "FPOCH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCH_POSOCHOIX] WHERE (([FPOCH_FPO_CODE_FK_PK] = @Origi"& _ 
                "nal_FPOCH_FPO_CODE_FK_PK) AND ([FPOCH_CH_CODE_FK_PK] = @Original_FPOCH_CH_CODE_F"& _ 
                "K_PK) AND ((@IsNull_FPOCH_NUMORD = 1 AND [FPOCH_NUMORD] IS NULL) OR ([FPOCH_NUMO"& _ 
                "RD] = @Original_FPOCH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOCH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCH_POSOCHOIX] ([FPOCH_FPO_CODE_FK_PK], [FPOCH_CH_CODE"& _ 
                "_FK_PK], [FPOCH_NUMORD]) VALUES (@FPOCH_FPO_CODE_FK_PK, @FPOCH_CH_CODE_FK_PK, @F"& _ 
                "POCH_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOCH_FPO_CODE_FK_PK, FPOCH_CH_CODE_FK_PK, FPOCH_NUMORD FR"& _ 
                "OM THERIAQUE.FPOCH_POSOCHOIX WHERE (FPOCH_CH_CODE_FK_PK = @FPOCH_CH_CODE_FK_PK) "& _ 
                "AND (FPOCH_FPO_CODE_FK_PK = @FPOCH_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCH_POSOCHOIX] SET [FPOCH_FPO_CODE_FK_PK] = @FPOCH_FPO_CODE"& _ 
                "_FK_PK, [FPOCH_CH_CODE_FK_PK] = @FPOCH_CH_CODE_FK_PK, [FPOCH_NUMORD] = @FPOCH_NU"& _ 
                "MORD WHERE (([FPOCH_FPO_CODE_FK_PK] = @Original_FPOCH_FPO_CODE_FK_PK) AND ([FPOC"& _ 
                "H_CH_CODE_FK_PK] = @Original_FPOCH_CH_CODE_FK_PK) AND ((@IsNull_FPOCH_NUMORD = 1"& _ 
                " AND [FPOCH_NUMORD] IS NULL) OR ([FPOCH_NUMORD] = @Original_FPOCH_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT FPOCH_FPO_CODE_FK_PK, FPOCH_CH_CODE_FK_PK, FPOCH_NUMORD FROM THERIAQUE.FPOC"& _ 
                "H_POSOCHOIX WHERE (FPOCH_CH_CODE_FK_PK = @FPOCH_CH_CODE_FK_PK) AND (FPOCH_FPO_CO"& _ 
                "DE_FK_PK = @FPOCH_FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOCH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCH_FPO_CODE_FK_PK, FPOCH_CH_CODE_FK_PK, FPOCH_NUMORD FROM THERIAQUE.FPO" & _
                "CH_POSOCHOIX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCH_FPO_CODE_FK_PK, FPOCH_CH_CODE_FK_PK, FPOCH_NUMORD FROM THERIAQUE.FPO" & _
                "CH_POSOCHOIX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCH_FPO_CODE_FK_PK = @FPOCH_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable = New dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable, ByVal FPOCH_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCH_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOCH_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCH_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable = New dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCH_POSOCHOIXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCH_POSOCHOIX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCH_CH_CODE_FK_PK As Integer, ByVal Original_FPOCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCH_FPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCH_CH_CODE_FK_PK, Integer)
            If (Original_FPOCH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPOCH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCH_FPO_CODE_FK_PK As Integer, ByVal FPOCH_CH_CODE_FK_PK As Integer, ByVal FPOCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCH_FPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCH_CH_CODE_FK_PK, Integer)
            If (FPOCH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOCH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCH_FPO_CODE_FK_PK As Integer, ByVal FPOCH_CH_CODE_FK_PK As Integer, ByVal FPOCH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPOCH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCH_CH_CODE_FK_PK As Integer, ByVal Original_FPOCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCH_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCH_CH_CODE_FK_PK, Integer)
            If (FPOCH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOCH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCH_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOCH_CH_CODE_FK_PK, Integer)
            If (Original_FPOCH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPOCH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPOCH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCH_CH_CODE_FK_PK As Integer, ByVal Original_FPOCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FPOCH_FPO_CODE_FK_PK, Original_FPOCH_CH_CODE_FK_PK, FPOCH_NUMORD, Original_FPOCH_FPO_CODE_FK_PK, Original_FPOCH_CH_CODE_FK_PK, Original_FPOCH_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOSAC_POSO_SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOSAC_POSO_SUBACT"
            tableMapping.ColumnMappings.Add("FPOSAC_FPO_CODE_FK_PK", "FPOSAC_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOSAC_SAC_CODE_FK_PK", "FPOSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOSAC_POSO_SUBACT] WHERE (([FPOSAC_FPO_CODE_FK_PK] = @O" & _
                "riginal_FPOSAC_FPO_CODE_FK_PK) AND ([FPOSAC_SAC_CODE_FK_PK] = @Original_FPOSAC_S" & _
                "AC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSAC_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOSAC_POSO_SUBACT] ([FPOSAC_FPO_CODE_FK_PK], [FPOSAC_SA" & _
                "C_CODE_FK_PK]) VALUES (@FPOSAC_FPO_CODE_FK_PK, @FPOSAC_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT " & _
                "FPOSAC_FPO_CODE_FK_PK, FPOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPOSAC_POSO_SUBACT W" & _
                "HERE (FPOSAC_FPO_CODE_FK_PK = @FPOSAC_FPO_CODE_FK_PK) AND (FPOSAC_SAC_CODE_FK_PK" & _
                " = @FPOSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSAC_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOSAC_POSO_SUBACT] SET [FPOSAC_FPO_CODE_FK_PK] = @FPOSAC_FPO" & _
                "_CODE_FK_PK, [FPOSAC_SAC_CODE_FK_PK] = @FPOSAC_SAC_CODE_FK_PK WHERE (([FPOSAC_FP" & _
                "O_CODE_FK_PK] = @Original_FPOSAC_FPO_CODE_FK_PK) AND ([FPOSAC_SAC_CODE_FK_PK] = " & _
                "@Original_FPOSAC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOSAC_FPO_CODE_FK_PK, FPOSAC_SAC_COD" & _
                "E_FK_PK FROM THERIAQUE.FPOSAC_POSO_SUBACT WHERE (FPOSAC_FPO_CODE_FK_PK = @FPOSAC" & _
                "_FPO_CODE_FK_PK) AND (FPOSAC_SAC_CODE_FK_PK = @FPOSAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSAC_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSAC_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOSAC_FPO_CODE_FK_PK, FPOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPOSAC_POSO_SU" & _
                "BACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOSAC_FPO_CODE_FK_PK, FPOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPOSAC_POSO_SU" & _
                "BACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOSAC_FPO_CODE_FK_PK = @FPOSAC_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSAC_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSAC_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable = New dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable, ByVal FPOSAC_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOSAC_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOSAC_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOSAC_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable = New dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOSAC_POSO_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOSAC_POSO_SUBACT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOSAC_FPO_CODE_FK_PK As Integer, ByVal Original_FPOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOSAC_FPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOSAC_FPO_CODE_FK_PK As Integer, ByVal FPOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOSAC_FPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOSAC_FPO_CODE_FK_PK As Integer, ByVal FPOSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FPOSAC_FPO_CODE_FK_PK As Integer, ByVal Original_FPOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOSAC_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOSAC_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOSAC_FPO_CODE_FK_PK As Integer, ByVal Original_FPOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPOSAC_FPO_CODE_FK_PK, Original_FPOSAC_SAC_CODE_FK_PK, Original_FPOSAC_FPO_CODE_FK_PK, Original_FPOSAC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOPR_FPOSO_PRODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOPR_FPOSO_PROD"
            tableMapping.ColumnMappings.Add("FPOPR_FPO_CODE_FK_PK", "FPOPR_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOPR_PR_CODE_FK_PK", "FPOPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOPR_FPOSO_PROD] WHERE (([FPOPR_FPO_CODE_FK_PK] = @Orig"& _ 
                "inal_FPOPR_FPO_CODE_FK_PK) AND ([FPOPR_PR_CODE_FK_PK] = @Original_FPOPR_PR_CODE_"& _ 
                "FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOPR_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOPR_FPOSO_PROD] ([FPOPR_FPO_CODE_FK_PK], [FPOPR_PR_COD"& _ 
                "E_FK_PK]) VALUES (@FPOPR_FPO_CODE_FK_PK, @FPOPR_PR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOPR_FP"& _ 
                "O_CODE_FK_PK, FPOPR_PR_CODE_FK_PK FROM THERIAQUE.FPOPR_FPOSO_PROD WHERE (FPOPR_F"& _ 
                "PO_CODE_FK_PK = @FPOPR_FPO_CODE_FK_PK) AND (FPOPR_PR_CODE_FK_PK = @FPOPR_PR_CODE"& _ 
                "_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOPR_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOPR_FPOSO_PROD] SET [FPOPR_FPO_CODE_FK_PK] = @FPOPR_FPO_COD"& _ 
                "E_FK_PK, [FPOPR_PR_CODE_FK_PK] = @FPOPR_PR_CODE_FK_PK WHERE (([FPOPR_FPO_CODE_FK"& _ 
                "_PK] = @Original_FPOPR_FPO_CODE_FK_PK) AND ([FPOPR_PR_CODE_FK_PK] = @Original_FP"& _ 
                "OPR_PR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOPR_FPO_CODE_FK_PK, FPOPR_PR_CODE_FK_PK FROM THER"& _ 
                "IAQUE.FPOPR_FPOSO_PROD WHERE (FPOPR_FPO_CODE_FK_PK = @FPOPR_FPO_CODE_FK_PK) AND "& _ 
                "(FPOPR_PR_CODE_FK_PK = @FPOPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOPR_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOPR_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOPR_FPO_CODE_FK_PK, FPOPR_PR_CODE_FK_PK FROM THERIAQUE.FPOPR_FPOSO_PROD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOPR_FPO_CODE_FK_PK, FPOPR_PR_CODE_FK_PK FROM THERIAQUE.FPOPR_FPOSO_PROD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOPR_FPO_CODE_FK_PK = @FPOPR_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOPR_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOPR_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable = New dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable, ByVal FPOPR_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOPR_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOPR_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOPR_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable = New dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOPR_FPOSO_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOPR_FPOSO_PROD")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOPR_FPO_CODE_FK_PK As Integer, ByVal Original_FPOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOPR_FPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOPR_FPO_CODE_FK_PK As Integer, ByVal FPOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOPR_FPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOPR_FPO_CODE_FK_PK As Integer, ByVal FPOPR_PR_CODE_FK_PK As Integer, ByVal Original_FPOPR_FPO_CODE_FK_PK As Integer, ByVal Original_FPOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOPR_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOPR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOPR_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOPR_FPO_CODE_FK_PK As Integer, ByVal Original_FPOPR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPOPR_FPO_CODE_FK_PK, Original_FPOPR_PR_CODE_FK_PK, Original_FPOPR_FPO_CODE_FK_PK, Original_FPOPR_PR_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOCCH_FPOSO_CLCHTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCCH_FPOSO_CLCH"
            tableMapping.ColumnMappings.Add("FPOCCH_FPO_CODE_FK_PK", "FPOCCH_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCCH_CCH_CODE_FK_PK", "FPOCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCCH_FPOSO_CLCH] WHERE (([FPOCCH_FPO_CODE_FK_PK] = @Or" & _
                "iginal_FPOCCH_FPO_CODE_FK_PK) AND ([FPOCCH_CCH_CODE_FK_PK] = @Original_FPOCCH_CC" & _
                "H_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCCH_FPOSO_CLCH] ([FPOCCH_FPO_CODE_FK_PK], [FPOCCH_CCH" & _
                "_CODE_FK_PK]) VALUES (@FPOCCH_FPO_CODE_FK_PK, @FPOCCH_CCH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT F" & _
                "POCCH_FPO_CODE_FK_PK, FPOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPOCCH_FPOSO_CLCH WHE" & _
                "RE (FPOCCH_CCH_CODE_FK_PK = @FPOCCH_CCH_CODE_FK_PK) AND (FPOCCH_FPO_CODE_FK_PK =" & _
                " @FPOCCH_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCCH_FPOSO_CLCH] SET [FPOCCH_FPO_CODE_FK_PK] = @FPOCCH_FPO_" & _
                "CODE_FK_PK, [FPOCCH_CCH_CODE_FK_PK] = @FPOCCH_CCH_CODE_FK_PK WHERE (([FPOCCH_FPO" & _
                "_CODE_FK_PK] = @Original_FPOCCH_FPO_CODE_FK_PK) AND ([FPOCCH_CCH_CODE_FK_PK] = @" & _
                "Original_FPOCCH_CCH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCCH_FPO_CODE_FK_PK, FPOCCH_CCH_CODE" & _
                "_FK_PK FROM THERIAQUE.FPOCCH_FPOSO_CLCH WHERE (FPOCCH_CCH_CODE_FK_PK = @FPOCCH_C" & _
                "CH_CODE_FK_PK) AND (FPOCCH_FPO_CODE_FK_PK = @FPOCCH_FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCCH_FPO_CODE_FK_PK, FPOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPOCCH_FPOSO_C" & _
                "LCH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCCH_FPO_CODE_FK_PK, FPOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPOCCH_FPOSO_C" & _
                "LCH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCCH_FPO_CODE_FK_PK = @FPOCCH_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCCH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCCH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable = New dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable, ByVal FPOCCH_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCCH_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBycode(ByVal FPOCCH_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCCH_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable = New dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCCH_FPOSO_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCCH_FPOSO_CLCH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCCH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCCH_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCCH_FPO_CODE_FK_PK As Integer, ByVal FPOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCCH_FPO_CODE_FK_PK, Integer)
            If (FPOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCCH_FPO_CODE_FK_PK As Integer, ByVal FPOCCH_CCH_CODE_FK_PK As String, ByVal Original_FPOCCH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCCH_FPO_CODE_FK_PK, Integer)
            If (FPOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOCCH_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOCCH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPOCCH_FPO_CODE_FK_PK, Original_FPOCCH_CCH_CODE_FK_PK, Original_FPOCCH_FPO_CODE_FK_PK, Original_FPOCCH_CCH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOSP_POSO_SPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOSP_POSO_SPE"
            tableMapping.ColumnMappings.Add("FPOSP_FPO_CODE_FK_PK", "FPOSP_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOSP_SP_CODE_FK_PK", "FPOSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOSP_POSO_SPE] WHERE (([FPOSP_FPO_CODE_FK_PK] = @Origin"& _ 
                "al_FPOSP_FPO_CODE_FK_PK) AND ([FPOSP_SP_CODE_FK_PK] = @Original_FPOSP_SP_CODE_FK"& _ 
                "_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSP_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOSP_POSO_SPE] ([FPOSP_FPO_CODE_FK_PK], [FPOSP_SP_CODE_"& _ 
                "FK_PK]) VALUES (@FPOSP_FPO_CODE_FK_PK, @FPOSP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOSP_FPO_"& _ 
                "CODE_FK_PK, FPOSP_SP_CODE_FK_PK FROM THERIAQUE.FPOSP_POSO_SPE WHERE (FPOSP_FPO_C"& _ 
                "ODE_FK_PK = @FPOSP_FPO_CODE_FK_PK) AND (FPOSP_SP_CODE_FK_PK = @FPOSP_SP_CODE_FK_"& _ 
                "PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSP_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOSP_POSO_SPE] SET [FPOSP_FPO_CODE_FK_PK] = @FPOSP_FPO_CODE_"& _ 
                "FK_PK, [FPOSP_SP_CODE_FK_PK] = @FPOSP_SP_CODE_FK_PK WHERE (([FPOSP_FPO_CODE_FK_P"& _ 
                "K] = @Original_FPOSP_FPO_CODE_FK_PK) AND ([FPOSP_SP_CODE_FK_PK] = @Original_FPOS"& _ 
                "P_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOSP_FPO_CODE_FK_PK, FPOSP_SP_CODE_FK_PK FROM THERIA"& _ 
                "QUE.FPOSP_POSO_SPE WHERE (FPOSP_FPO_CODE_FK_PK = @FPOSP_FPO_CODE_FK_PK) AND (FPO"& _ 
                "SP_SP_CODE_FK_PK = @FPOSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSP_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSP_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOSP_FPO_CODE_FK_PK, FPOSP_SP_CODE_FK_PK FROM THERIAQUE.FPOSP_POSO_SPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOSP_FPO_CODE_FK_PK, FPOSP_SP_CODE_FK_PK FROM THERIAQUE.FPOSP_POSO_SPE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "w" & _
                "here FPOSP_FPO_CODE_FK_PK = @FPOSP_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOSP_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOSP_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable = New dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable, ByVal FPOSP_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOSP_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOSP_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOSP_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable = New dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOSP_POSO_SPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOSP_POSO_SPE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOSP_FPO_CODE_FK_PK As Integer, ByVal Original_FPOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOSP_FPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOSP_FPO_CODE_FK_PK As Integer, ByVal FPOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOSP_FPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOSP_FPO_CODE_FK_PK As Integer, ByVal FPOSP_SP_CODE_FK_PK As Integer, ByVal Original_FPOSP_FPO_CODE_FK_PK As Integer, ByVal Original_FPOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOSP_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOSP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOSP_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOSP_FPO_CODE_FK_PK As Integer, ByVal Original_FPOSP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPOSP_FPO_CODE_FK_PK, Original_FPOSP_SP_CODE_FK_PK, Original_FPOSP_FPO_CODE_FK_PK, Original_FPOSP_SP_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOVO_FPOSO_VOIETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOVO_FPOSO_VOIE"
            tableMapping.ColumnMappings.Add("FPOVO_FPO_CODE_FK_PK", "FPOVO_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOVO_CDF_VO_CODE_FK_PK", "FPOVO_CDF_VO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOVO_NUMORD", "FPOVO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOVO_FPOSO_VOIE] WHERE (([FPOVO_FPO_CODE_FK_PK] = @Orig" & _
                "inal_FPOVO_FPO_CODE_FK_PK) AND ([FPOVO_CDF_VO_CODE_FK_PK] = @Original_FPOVO_CDF_" & _
                "VO_CODE_FK_PK) AND ((@IsNull_FPOVO_NUMORD = 1 AND [FPOVO_NUMORD] IS NULL) OR ([F" & _
                "POVO_NUMORD] = @Original_FPOVO_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOVO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOVO_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOVO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOVO_FPOSO_VOIE] ([FPOVO_FPO_CODE_FK_PK], [FPOVO_CDF_VO" & _
                "_CODE_FK_PK], [FPOVO_NUMORD]) VALUES (@FPOVO_FPO_CODE_FK_PK, @FPOVO_CDF_VO_CODE_" & _
                "FK_PK, @FPOVO_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOVO_FPO_CODE_FK_PK, FPOVO_CDF_VO_CODE_FK_PK, FP" & _
                "OVO_NUMORD FROM THERIAQUE.FPOVO_FPOSO_VOIE WHERE (FPOVO_CDF_VO_CODE_FK_PK = @FPO" & _
                "VO_CDF_VO_CODE_FK_PK) AND (FPOVO_FPO_CODE_FK_PK = @FPOVO_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOVO_FPOSO_VOIE] SET [FPOVO_FPO_CODE_FK_PK] = @FPOVO_FPO_COD" & _
                "E_FK_PK, [FPOVO_CDF_VO_CODE_FK_PK] = @FPOVO_CDF_VO_CODE_FK_PK, [FPOVO_NUMORD] = " & _
                "@FPOVO_NUMORD WHERE (([FPOVO_FPO_CODE_FK_PK] = @Original_FPOVO_FPO_CODE_FK_PK) A" & _
                "ND ([FPOVO_CDF_VO_CODE_FK_PK] = @Original_FPOVO_CDF_VO_CODE_FK_PK) AND ((@IsNull" & _
                "_FPOVO_NUMORD = 1 AND [FPOVO_NUMORD] IS NULL) OR ([FPOVO_NUMORD] = @Original_FPO" & _
                "VO_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOVO_FPO_CODE_FK_PK, FPOVO_CDF_VO_CODE_FK_PK, FPOVO_NUMOR" & _
                "D FROM THERIAQUE.FPOVO_FPOSO_VOIE WHERE (FPOVO_CDF_VO_CODE_FK_PK = @FPOVO_CDF_VO" & _
                "_CODE_FK_PK) AND (FPOVO_FPO_CODE_FK_PK = @FPOVO_FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOVO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_CDF_VO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOVO_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOVO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOVO_FPO_CODE_FK_PK, FPOVO_CDF_VO_CODE_FK_PK, FPOVO_NUMORD FROM THERIAQUE" & _
                ".FPOVO_FPOSO_VOIE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOVO_FPO_CODE_FK_PK, FPOVO_CDF_VO_CODE_FK_PK, FPOVO_NUMORD FROM THERIAQUE" & _
                ".FPOVO_FPOSO_VOIE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOVO_FPO_CODE_FK_PK = @FPOVO_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOVO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOVO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable = New dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable, ByVal FPOVO_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOVO_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOVO_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOVO_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable = New dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOVO_FPOSO_VOIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOVO_FPOSO_VOIE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOVO_FPO_CODE_FK_PK As Integer, ByVal Original_FPOVO_CDF_VO_CODE_FK_PK As String, ByVal Original_FPOVO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOVO_FPO_CODE_FK_PK, Integer)
            If (Original_FPOVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_FPOVO_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPOVO_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOVO_FPO_CODE_FK_PK As Integer, ByVal FPOVO_CDF_VO_CODE_FK_PK As String, ByVal FPOVO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOVO_FPO_CODE_FK_PK, Integer)
            If (FPOVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (FPOVO_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOVO_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOVO_FPO_CODE_FK_PK As Integer, ByVal FPOVO_CDF_VO_CODE_FK_PK As String, ByVal FPOVO_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPOVO_FPO_CODE_FK_PK As Integer, ByVal Original_FPOVO_CDF_VO_CODE_FK_PK As String, ByVal Original_FPOVO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOVO_FPO_CODE_FK_PK, Integer)
            If (FPOVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (FPOVO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOVO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOVO_FPO_CODE_FK_PK, Integer)
            If (Original_FPOVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_FPOVO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPOVO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOVO_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPOVO_FPO_CODE_FK_PK As Integer, ByVal Original_FPOVO_CDF_VO_CODE_FK_PK As String, ByVal Original_FPOVO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FPOVO_FPO_CODE_FK_PK, Original_FPOVO_CDF_VO_CODE_FK_PK, FPOVO_NUMORD, Original_FPOVO_FPO_CODE_FK_PK, Original_FPOVO_CDF_VO_CODE_FK_PK, Original_FPOVO_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOTE_FPOSO_TERRAINTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOTE_FPOSO_TERRAIN"
            tableMapping.ColumnMappings.Add("FPOTE_FPO_CODE_FK_PK", "FPOTE_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOTE_CDF_TEPO_CODE_FK_PK", "FPOTE_CDF_TEPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOTE_GRP_CODE_PK", "FPOTE_GRP_CODE_PK")
            tableMapping.ColumnMappings.Add("FPOTE_NUMORD", "FPOTE_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOTE_FPOSO_TERRAIN] WHERE (([FPOTE_FPO_CODE_FK_PK] = @O"& _ 
                "riginal_FPOTE_FPO_CODE_FK_PK) AND ([FPOTE_CDF_TEPO_CODE_FK_PK] = @Original_FPOTE"& _ 
                "_CDF_TEPO_CODE_FK_PK) AND ([FPOTE_GRP_CODE_PK] = @Original_FPOTE_GRP_CODE_PK) AN"& _ 
                "D ((@IsNull_FPOTE_NUMORD = 1 AND [FPOTE_NUMORD] IS NULL) OR ([FPOTE_NUMORD] = @O"& _ 
                "riginal_FPOTE_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_GRP_CODE_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_GRP_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOTE_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOTE_FPOSO_TERRAIN] ([FPOTE_FPO_CODE_FK_PK], [FPOTE_CDF"& _ 
                "_TEPO_CODE_FK_PK], [FPOTE_GRP_CODE_PK], [FPOTE_NUMORD]) VALUES (@FPOTE_FPO_CODE_"& _ 
                "FK_PK, @FPOTE_CDF_TEPO_CODE_FK_PK, @FPOTE_GRP_CODE_PK, @FPOTE_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT F"& _ 
                "POTE_FPO_CODE_FK_PK, FPOTE_CDF_TEPO_CODE_FK_PK, FPOTE_GRP_CODE_PK, FPOTE_NUMORD "& _ 
                "FROM THERIAQUE.FPOTE_FPOSO_TERRAIN WHERE (FPOTE_CDF_TEPO_CODE_FK_PK = @FPOTE_CDF"& _ 
                "_TEPO_CODE_FK_PK) AND (FPOTE_FPO_CODE_FK_PK = @FPOTE_FPO_CODE_FK_PK) AND (FPOTE_"& _ 
                "GRP_CODE_PK = @FPOTE_GRP_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_GRP_CODE_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_GRP_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOTE_FPOSO_TERRAIN] SET [FPOTE_FPO_CODE_FK_PK] = @FPOTE_FPO_"& _ 
                "CODE_FK_PK, [FPOTE_CDF_TEPO_CODE_FK_PK] = @FPOTE_CDF_TEPO_CODE_FK_PK, [FPOTE_GRP"& _ 
                "_CODE_PK] = @FPOTE_GRP_CODE_PK, [FPOTE_NUMORD] = @FPOTE_NUMORD WHERE (([FPOTE_FP"& _ 
                "O_CODE_FK_PK] = @Original_FPOTE_FPO_CODE_FK_PK) AND ([FPOTE_CDF_TEPO_CODE_FK_PK]"& _ 
                " = @Original_FPOTE_CDF_TEPO_CODE_FK_PK) AND ([FPOTE_GRP_CODE_PK] = @Original_FPO"& _ 
                "TE_GRP_CODE_PK) AND ((@IsNull_FPOTE_NUMORD = 1 AND [FPOTE_NUMORD] IS NULL) OR (["& _ 
                "FPOTE_NUMORD] = @Original_FPOTE_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOTE_FPO_CODE_FK_PK, FPOTE_C"& _ 
                "DF_TEPO_CODE_FK_PK, FPOTE_GRP_CODE_PK, FPOTE_NUMORD FROM THERIAQUE.FPOTE_FPOSO_T"& _ 
                "ERRAIN WHERE (FPOTE_CDF_TEPO_CODE_FK_PK = @FPOTE_CDF_TEPO_CODE_FK_PK) AND (FPOTE"& _ 
                "_FPO_CODE_FK_PK = @FPOTE_FPO_CODE_FK_PK) AND (FPOTE_GRP_CODE_PK = @FPOTE_GRP_COD"& _ 
                "E_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_GRP_CODE_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_GRP_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_CDF_TEPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_GRP_CODE_PK", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_GRP_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOTE_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOTE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOTE_FPO_CODE_FK_PK, FPOTE_CDF_TEPO_CODE_FK_PK, FPOTE_GRP_CODE_PK, FPOTE_" & _
                "NUMORD FROM THERIAQUE.FPOTE_FPOSO_TERRAIN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOTE_FPO_CODE_FK_PK, FPOTE_CDF_TEPO_CODE_FK_PK, FPOTE_GRP_CODE_PK, FPOTE_" & _
                "NUMORD FROM THERIAQUE.FPOTE_FPOSO_TERRAIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOTE_FPO_CODE_FK_PK = @FPOTE_F" & _
                "PO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOTE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOTE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable = New dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable, ByVal FPOTE_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOTE_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOTE_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOTE_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable = New dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOTE_FPOSO_TERRAINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOTE_FPOSO_TERRAIN")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOTE_FPO_CODE_FK_PK As Integer, ByVal Original_FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal Original_FPOTE_GRP_CODE_PK As Byte, ByVal Original_FPOTE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOTE_FPO_CODE_FK_PK, Integer)
            If (Original_FPOTE_CDF_TEPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOTE_CDF_TEPO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOTE_CDF_TEPO_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOTE_GRP_CODE_PK, Byte)
            If (Original_FPOTE_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FPOTE_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOTE_FPO_CODE_FK_PK As Integer, ByVal FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal FPOTE_GRP_CODE_PK As Byte, ByVal FPOTE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOTE_FPO_CODE_FK_PK, Integer)
            If (FPOTE_CDF_TEPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOTE_CDF_TEPO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOTE_CDF_TEPO_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOTE_GRP_CODE_PK, Byte)
            If (FPOTE_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPOTE_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOTE_FPO_CODE_FK_PK As Integer, ByVal FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal FPOTE_GRP_CODE_PK As Byte, ByVal FPOTE_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPOTE_FPO_CODE_FK_PK As Integer, ByVal Original_FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal Original_FPOTE_GRP_CODE_PK As Byte, ByVal Original_FPOTE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOTE_FPO_CODE_FK_PK, Integer)
            If (FPOTE_CDF_TEPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOTE_CDF_TEPO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOTE_CDF_TEPO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOTE_GRP_CODE_PK, Byte)
            If (FPOTE_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPOTE_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOTE_FPO_CODE_FK_PK, Integer)
            If (Original_FPOTE_CDF_TEPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOTE_CDF_TEPO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOTE_CDF_TEPO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPOTE_GRP_CODE_PK, Byte)
            If (Original_FPOTE_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FPOTE_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOTE_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPOTE_FPO_CODE_FK_PK As Integer, ByVal Original_FPOTE_CDF_TEPO_CODE_FK_PK As String, ByVal Original_FPOTE_GRP_CODE_PK As Byte, ByVal Original_FPOTE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FPOTE_FPO_CODE_FK_PK, Original_FPOTE_CDF_TEPO_CODE_FK_PK, Original_FPOTE_GRP_CODE_PK, FPOTE_NUMORD, Original_FPOTE_FPO_CODE_FK_PK, Original_FPOTE_CDF_TEPO_CODE_FK_PK, Original_FPOTE_GRP_CODE_PK, Original_FPOTE_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FIN_FICHEINDICTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FIN_FICHEINDIC"
            tableMapping.ColumnMappings.Add("FIN_CODE_SQ_PK", "FIN_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FIN_CDF_NAIN_CODE_FK_PK", "FIN_CDF_NAIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FIN_CDF_NVIN_CODE_FK_PK", "FIN_CDF_NVIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FIN_TEXTE", "FIN_TEXTE")
            tableMapping.ColumnMappings.Add("FIN_DATECR", "FIN_DATECR")
            tableMapping.ColumnMappings.Add("FIN_DATEMJ", "FIN_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FIN_FICHEINDIC] WHERE (([FIN_CODE_SQ_PK] = @Original_FIN" & _
                "_CODE_SQ_PK) AND ([FIN_CDF_NAIN_CODE_FK_PK] = @Original_FIN_CDF_NAIN_CODE_FK_PK)" & _
                " AND ([FIN_CDF_NVIN_CODE_FK_PK] = @Original_FIN_CDF_NVIN_CODE_FK_PK) AND ([FIN_D" & _
                "ATECR] = @Original_FIN_DATECR) AND ((@IsNull_FIN_DATEMJ = 1 AND [FIN_DATEMJ] IS " & _
                "NULL) OR ([FIN_DATEMJ] = @Original_FIN_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIN_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FIN_FICHEINDIC] ([FIN_CODE_SQ_PK], [FIN_CDF_NAIN_CODE_FK" & _
                "_PK], [FIN_CDF_NVIN_CODE_FK_PK], [FIN_TEXTE], [FIN_DATECR], [FIN_DATEMJ]) VALUES" & _
                " (@FIN_CODE_SQ_PK, @FIN_CDF_NAIN_CODE_FK_PK, @FIN_CDF_NVIN_CODE_FK_PK, @FIN_TEXT" & _
                "E, @FIN_DATECR, @FIN_DATEMJ);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, F" & _
                "IN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_DATECR, FIN_DATEMJ FROM THERIAQUE.FIN_FIC" & _
                "HEINDIC WHERE (FIN_CODE_SQ_PK = @FIN_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FIN_FICHEINDIC] SET [FIN_CODE_SQ_PK] = @FIN_CODE_SQ_PK, [FIN_" & _
                "CDF_NAIN_CODE_FK_PK] = @FIN_CDF_NAIN_CODE_FK_PK, [FIN_CDF_NVIN_CODE_FK_PK] = @FI" & _
                "N_CDF_NVIN_CODE_FK_PK, [FIN_TEXTE] = @FIN_TEXTE, [FIN_DATECR] = @FIN_DATECR, [FI" & _
                "N_DATEMJ] = @FIN_DATEMJ WHERE (([FIN_CODE_SQ_PK] = @Original_FIN_CODE_SQ_PK) AND" & _
                " ([FIN_CDF_NAIN_CODE_FK_PK] = @Original_FIN_CDF_NAIN_CODE_FK_PK) AND ([FIN_CDF_N" & _
                "VIN_CODE_FK_PK] = @Original_FIN_CDF_NVIN_CODE_FK_PK) AND ([FIN_DATECR] = @Origin" & _
                "al_FIN_DATECR) AND ((@IsNull_FIN_DATEMJ = 1 AND [FIN_DATEMJ] IS NULL) OR ([FIN_D" & _
                "ATEMJ] = @Original_FIN_DATEMJ)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_P" & _
                "K, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_DATECR, FIN_DATEMJ FROM THERIAQUE.FIN" & _
                "_FICHEINDIC WHERE (FIN_CODE_SQ_PK = @FIN_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIN_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXT" & _
                "E, FIN_DATECR, FIN_DATEMJ FROM THERIAQUE.FIN_FICHEINDIC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXT" & _
                "E, FIN_DATECR, FIN_DATEMJ FROM THERIAQUE.FIN_FICHEINDIC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FIN_CODE_SQ_PK = " & _
                "@FIN_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FIN_FICHEINDICDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FIN_FICHEINDICDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FIN_FICHEINDICDataTable = New dsTheriaque_Posologie.FIN_FICHEINDICDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FIN_FICHEINDICDataTable, ByVal FIN_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FIN_CODE_SQ_PK As Integer) As dsTheriaque_Posologie.FIN_FICHEINDICDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FIN_FICHEINDICDataTable = New dsTheriaque_Posologie.FIN_FICHEINDICDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FIN_FICHEINDICDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FIN_FICHEINDIC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FIN_CODE_SQ_PK As Integer, ByVal Original_FIN_CDF_NAIN_CODE_FK_PK As String, ByVal Original_FIN_CDF_NVIN_CODE_FK_PK As String, ByVal Original_FIN_DATECR As Date, ByVal Original_FIN_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FIN_CODE_SQ_PK, Integer)
            If (Original_FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FIN_CDF_NAIN_CODE_FK_PK, String)
            End If
            If (Original_FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FIN_CDF_NVIN_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FIN_DATECR, Date)
            If (Original_FIN_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FIN_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FIN_CODE_SQ_PK As Integer, ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK, Integer)
            If (FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FIN_CDF_NAIN_CODE_FK_PK, String)
            End If
            If (FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FIN_CDF_NVIN_CODE_FK_PK, String)
            End If
            If (FIN_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FIN_TEXTE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FIN_DATECR, Date)
            If (FIN_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FIN_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FIN_CODE_SQ_PK As Integer, ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIN_CODE_SQ_PK As Integer, ByVal Original_FIN_CDF_NAIN_CODE_FK_PK As String, ByVal Original_FIN_CDF_NVIN_CODE_FK_PK As String, ByVal Original_FIN_DATECR As Date, ByVal Original_FIN_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK, Integer)
            If (FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FIN_CDF_NAIN_CODE_FK_PK, String)
            End If
            If (FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FIN_CDF_NVIN_CODE_FK_PK, String)
            End If
            If (FIN_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FIN_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FIN_DATECR, Date)
            If (FIN_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FIN_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FIN_CODE_SQ_PK, Integer)
            If (Original_FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FIN_CDF_NAIN_CODE_FK_PK, String)
            End If
            If (Original_FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FIN_CDF_NVIN_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FIN_DATECR, Date)
            If (Original_FIN_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FIN_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIN_CODE_SQ_PK As Integer, ByVal Original_FIN_CDF_NAIN_CODE_FK_PK As String, ByVal Original_FIN_CDF_NVIN_CODE_FK_PK As String, ByVal Original_FIN_DATECR As Date, ByVal Original_FIN_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_DATECR, FIN_DATEMJ, Original_FIN_CODE_SQ_PK, Original_FIN_CDF_NAIN_CODE_FK_PK, Original_FIN_CDF_NVIN_CODE_FK_PK, Original_FIN_DATECR, Original_FIN_DATEMJ)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOUT_FPOSO_UTILTHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOUT_FPOSO_UTILTH"
            tableMapping.ColumnMappings.Add("FPOUT_FPO_CODE_FK_PK", "FPOUT_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOUT_CDF_UTPO_CODE_FK_PK", "FPOUT_CDF_UTPO_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOUT_FPOSO_UTILTH] WHERE (([FPOUT_FPO_CODE_FK_PK] = @Or"& _ 
                "iginal_FPOUT_FPO_CODE_FK_PK) AND ([FPOUT_CDF_UTPO_CODE_FK_PK] = @Original_FPOUT_"& _ 
                "CDF_UTPO_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOUT_FPOSO_UTILTH] ([FPOUT_FPO_CODE_FK_PK], [FPOUT_CDF_"& _ 
                "UTPO_CODE_FK_PK]) VALUES (@FPOUT_FPO_CODE_FK_PK, @FPOUT_CDF_UTPO_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT FPOUT_FPO_CODE_FK_PK, FPOUT_CDF_UTPO_CODE_FK_PK FROM THERIAQUE.FPOUT_FPOSO"& _ 
                "_UTILTH WHERE (FPOUT_CDF_UTPO_CODE_FK_PK = @FPOUT_CDF_UTPO_CODE_FK_PK) AND (FPOU"& _ 
                "T_FPO_CODE_FK_PK = @FPOUT_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOUT_FPOSO_UTILTH] SET [FPOUT_FPO_CODE_FK_PK] = @FPOUT_FPO_C"& _ 
                "ODE_FK_PK, [FPOUT_CDF_UTPO_CODE_FK_PK] = @FPOUT_CDF_UTPO_CODE_FK_PK WHERE (([FPO"& _ 
                "UT_FPO_CODE_FK_PK] = @Original_FPOUT_FPO_CODE_FK_PK) AND ([FPOUT_CDF_UTPO_CODE_F"& _ 
                "K_PK] = @Original_FPOUT_CDF_UTPO_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOUT_FPO_CODE_FK_PK, FPO"& _ 
                "UT_CDF_UTPO_CODE_FK_PK FROM THERIAQUE.FPOUT_FPOSO_UTILTH WHERE (FPOUT_CDF_UTPO_C"& _ 
                "ODE_FK_PK = @FPOUT_CDF_UTPO_CODE_FK_PK) AND (FPOUT_FPO_CODE_FK_PK = @FPOUT_FPO_C"& _ 
                "ODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_CDF_UTPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOUT_FPO_CODE_FK_PK, FPOUT_CDF_UTPO_CODE_FK_PK FROM THERIAQUE.FPOUT_FPOSO" & _
                "_UTILTH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOUT_FPO_CODE_FK_PK, FPOUT_CDF_UTPO_CODE_FK_PK FROM THERIAQUE.FPOUT_FPOSO" & _
                "_UTILTH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOUT_FPO_CODE_FK_PK = @FPOUT_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable = New dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable, ByVal FPOUT_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOUT_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOUT_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOUT_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable = New dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOUT_FPOSO_UTILTHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOUT_FPOSO_UTILTH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOUT_FPO_CODE_FK_PK As Integer, ByVal Original_FPOUT_CDF_UTPO_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOUT_FPO_CODE_FK_PK, Integer)
            If (Original_FPOUT_CDF_UTPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOUT_CDF_UTPO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOUT_CDF_UTPO_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOUT_FPO_CODE_FK_PK As Integer, ByVal FPOUT_CDF_UTPO_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOUT_FPO_CODE_FK_PK, Integer)
            If (FPOUT_CDF_UTPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOUT_CDF_UTPO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOUT_CDF_UTPO_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOUT_FPO_CODE_FK_PK As Integer, ByVal FPOUT_CDF_UTPO_CODE_FK_PK As String, ByVal Original_FPOUT_FPO_CODE_FK_PK As Integer, ByVal Original_FPOUT_CDF_UTPO_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOUT_FPO_CODE_FK_PK, Integer)
            If (FPOUT_CDF_UTPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOUT_CDF_UTPO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOUT_CDF_UTPO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOUT_FPO_CODE_FK_PK, Integer)
            If (Original_FPOUT_CDF_UTPO_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOUT_CDF_UTPO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOUT_CDF_UTPO_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOUT_FPO_CODE_FK_PK As Integer, ByVal Original_FPOUT_CDF_UTPO_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPOUT_FPO_CODE_FK_PK, Original_FPOUT_CDF_UTPO_CODE_FK_PK, Original_FPOUT_FPO_CODE_FK_PK, Original_FPOUT_CDF_UTPO_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOCOUT_FPOSO_COMMENTUTILTHTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCOUT_FPOSO_COMMENTUTILTH"
            tableMapping.ColumnMappings.Add("FPOCOUT_FPO_CODE_FK_PK", "FPOCOUT_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOUT_CDF_COUT_CODE_FK_PK", "FPOCOUT_CDF_COUT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOUT_NUM_ORD", "FPOCOUT_NUM_ORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCOUT_FPOSO_COMMENTUTILTH] WHERE (([FPOCOUT_FPO_CODE_F" & _
                "K_PK] = @Original_FPOCOUT_FPO_CODE_FK_PK) AND ([FPOCOUT_CDF_COUT_CODE_FK_PK] = @" & _
                "Original_FPOCOUT_CDF_COUT_CODE_FK_PK) AND ((@IsNull_FPOCOUT_NUM_ORD = 1 AND [FPO" & _
                "COUT_NUM_ORD] IS NULL) OR ([FPOCOUT_NUM_ORD] = @Original_FPOCOUT_NUM_ORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOCOUT_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_NUM_ORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOUT_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCOUT_FPOSO_COMMENTUTILTH] ([FPOCOUT_FPO_CODE_FK_PK], " & _
                "[FPOCOUT_CDF_COUT_CODE_FK_PK], [FPOCOUT_NUM_ORD]) VALUES (@FPOCOUT_FPO_CODE_FK_P" & _
                "K, @FPOCOUT_CDF_COUT_CODE_FK_PK, @FPOCOUT_NUM_ORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCOUT_FPO_CODE_FK_" & _
                "PK, FPOCOUT_CDF_COUT_CODE_FK_PK, FPOCOUT_NUM_ORD FROM THERIAQUE.FPOCOUT_FPOSO_CO" & _
                "MMENTUTILTH WHERE (FPOCOUT_CDF_COUT_CODE_FK_PK = @FPOCOUT_CDF_COUT_CODE_FK_PK) A" & _
                "ND (FPOCOUT_FPO_CODE_FK_PK = @FPOCOUT_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCOUT_FPOSO_COMMENTUTILTH] SET [FPOCOUT_FPO_CODE_FK_PK] = @" & _
                "FPOCOUT_FPO_CODE_FK_PK, [FPOCOUT_CDF_COUT_CODE_FK_PK] = @FPOCOUT_CDF_COUT_CODE_F" & _
                "K_PK, [FPOCOUT_NUM_ORD] = @FPOCOUT_NUM_ORD WHERE (([FPOCOUT_FPO_CODE_FK_PK] = @O" & _
                "riginal_FPOCOUT_FPO_CODE_FK_PK) AND ([FPOCOUT_CDF_COUT_CODE_FK_PK] = @Original_F" & _
                "POCOUT_CDF_COUT_CODE_FK_PK) AND ((@IsNull_FPOCOUT_NUM_ORD = 1 AND [FPOCOUT_NUM_O" & _
                "RD] IS NULL) OR ([FPOCOUT_NUM_ORD] = @Original_FPOCOUT_NUM_ORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCO" & _
                "UT_FPO_CODE_FK_PK, FPOCOUT_CDF_COUT_CODE_FK_PK, FPOCOUT_NUM_ORD FROM THERIAQUE.F" & _
                "POCOUT_FPOSO_COMMENTUTILTH WHERE (FPOCOUT_CDF_COUT_CODE_FK_PK = @FPOCOUT_CDF_COU" & _
                "T_CODE_FK_PK) AND (FPOCOUT_FPO_CODE_FK_PK = @FPOCOUT_FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_CDF_COUT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOCOUT_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_NUM_ORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOUT_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCOUT_FPO_CODE_FK_PK, FPOCOUT_CDF_COUT_CODE_FK_PK, FPOCOUT_NUM_ORD FROM " & _
                "THERIAQUE.FPOCOUT_FPOSO_COMMENTUTILTH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCOUT_FPO_CODE_FK_PK, FPOCOUT_CDF_COUT_CODE_FK_PK, FPOCOUT_NUM_ORD FROM " & _
                "THERIAQUE.FPOCOUT_FPOSO_COMMENTUTILTH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCOUT_FPO_CODE_FK_PK = @FPOCOUT_F" & _
                "PO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOUT_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable = New dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable, ByVal FPOCOUT_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOUT_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOCOUT_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOUT_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable = New dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCOUT_FPOSO_COMMENTUTILTHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCOUT_FPOSO_COMMENTUTILTH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOUT_CDF_COUT_CODE_FK_PK As String, ByVal Original_FPOCOUT_NUM_ORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCOUT_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOUT_CDF_COUT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOUT_CDF_COUT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCOUT_CDF_COUT_CODE_FK_PK, String)
            End If
            If (Original_FPOCOUT_NUM_ORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPOCOUT_NUM_ORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal FPOCOUT_CDF_COUT_CODE_FK_PK As String, ByVal FPOCOUT_NUM_ORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCOUT_FPO_CODE_FK_PK, Integer)
            If (FPOCOUT_CDF_COUT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOUT_CDF_COUT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCOUT_CDF_COUT_CODE_FK_PK, String)
            End If
            If (FPOCOUT_NUM_ORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOCOUT_NUM_ORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal FPOCOUT_CDF_COUT_CODE_FK_PK As String, ByVal FPOCOUT_NUM_ORD As Global.System.Nullable(Of Short), ByVal Original_FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOUT_CDF_COUT_CODE_FK_PK As String, ByVal Original_FPOCOUT_NUM_ORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCOUT_FPO_CODE_FK_PK, Integer)
            If (FPOCOUT_CDF_COUT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOUT_CDF_COUT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCOUT_CDF_COUT_CODE_FK_PK, String)
            End If
            If (FPOCOUT_NUM_ORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOCOUT_NUM_ORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCOUT_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOUT_CDF_COUT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOUT_CDF_COUT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOCOUT_CDF_COUT_CODE_FK_PK, String)
            End If
            If (Original_FPOCOUT_NUM_ORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPOCOUT_NUM_ORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCOUT_NUM_ORD As Global.System.Nullable(Of Short), ByVal Original_FPOCOUT_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOUT_CDF_COUT_CODE_FK_PK As String, ByVal Original_FPOCOUT_NUM_ORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FPOCOUT_FPO_CODE_FK_PK, Original_FPOCOUT_CDF_COUT_CODE_FK_PK, FPOCOUT_NUM_ORD, Original_FPOCOUT_FPO_CODE_FK_PK, Original_FPOCOUT_CDF_COUT_CODE_FK_PK, Original_FPOCOUT_NUM_ORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IPO_INFOPOSOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPO_INFOPOSO"
            tableMapping.ColumnMappings.Add("IPO_FPO_CODE_FK_PK", "IPO_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPO_NUM_SEQ_PK", "IPO_NUM_SEQ_PK")
            tableMapping.ColumnMappings.Add("IPO_CDF_NAPO_CODE_FK", "IPO_CDF_NAPO_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_CDF_UNPO_CODE_FK", "IPO_CDF_UNPO_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_DOSEMIN", "IPO_DOSEMIN")
            tableMapping.ColumnMappings.Add("IPO_DOSEMAX", "IPO_DOSEMAX")
            tableMapping.ColumnMappings.Add("IPO_FREQMIN", "IPO_FREQMIN")
            tableMapping.ColumnMappings.Add("IPO_FREQMAX", "IPO_FREQMAX")
            tableMapping.ColumnMappings.Add("IPO_CDF_FREQMIN_CODE_FK", "IPO_CDF_FREQMIN_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_CDF_FREQMAX_CODE_FK", "IPO_CDF_FREQMAX_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_CDF_UTMIN_CODE_FK", "IPO_CDF_UTMIN_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_CDF_UTMAX_CODE_FK", "IPO_CDF_UTMAX_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_NUM_ORD", "IPO_NUM_ORD")
            tableMapping.ColumnMappings.Add("IPO_DATECR", "IPO_DATECR")
            tableMapping.ColumnMappings.Add("IPO_DATEMJ", "IPO_DATEMJ")
            tableMapping.ColumnMappings.Add("IPO_DUREEMIN", "IPO_DUREEMIN1")
            tableMapping.ColumnMappings.Add("IPO_DUREEMAX", "IPO_DUREEMAX1")
            tableMapping.ColumnMappings.Add("IPO_INTERVMIN", "IPO_INTERVMIN")
            tableMapping.ColumnMappings.Add("IPO_CDF_UIMIN_CODE_FK", "IPO_CDF_UIMIN_CODE_FK")
            tableMapping.ColumnMappings.Add("IPO_INTERVMAX", "IPO_INTERVMAX")
            tableMapping.ColumnMappings.Add("IPO_CDF_UIMAX_CODE_FK", "IPO_CDF_UIMAX_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IPO_INFOPOSO] WHERE (([IPO_FPO_CODE_FK_PK] = @Original_I"& _ 
                "PO_FPO_CODE_FK_PK) AND ([IPO_NUM_SEQ_PK] = @Original_IPO_NUM_SEQ_PK) AND ([IPO_C"& _ 
                "DF_NAPO_CODE_FK] = @Original_IPO_CDF_NAPO_CODE_FK) AND ([IPO_CDF_UNPO_CODE_FK] ="& _ 
                " @Original_IPO_CDF_UNPO_CODE_FK) AND ((@IsNull_IPO_DOSEMIN = 1 AND [IPO_DOSEMIN]"& _ 
                " IS NULL) OR ([IPO_DOSEMIN] = @Original_IPO_DOSEMIN)) AND ([IPO_DOSEMAX] = @Orig"& _ 
                "inal_IPO_DOSEMAX) AND ((@IsNull_IPO_FREQMIN = 1 AND [IPO_FREQMIN] IS NULL) OR (["& _ 
                "IPO_FREQMIN] = @Original_IPO_FREQMIN)) AND ([IPO_FREQMAX] = @Original_IPO_FREQMA"& _ 
                "X) AND ((@IsNull_IPO_CDF_FREQMIN_CODE_FK = 1 AND [IPO_CDF_FREQMIN_CODE_FK] IS NU"& _ 
                "LL) OR ([IPO_CDF_FREQMIN_CODE_FK] = @Original_IPO_CDF_FREQMIN_CODE_FK)) AND ([IP"& _ 
                "O_CDF_FREQMAX_CODE_FK] = @Original_IPO_CDF_FREQMAX_CODE_FK) AND ((@IsNull_IPO_DU"& _ 
                "REEMIN = 1 AND [IPO_DUREEMIN] IS NULL) OR ([IPO_DUREEMIN] = @Original_IPO_DUREEM"& _ 
                "IN)) AND ((@IsNull_IPO_CDF_UTMIN_CODE_FK = 1 AND [IPO_CDF_UTMIN_CODE_FK] IS NULL"& _ 
                ") OR ([IPO_CDF_UTMIN_CODE_FK] = @Original_IPO_CDF_UTMIN_CODE_FK)) AND ((@IsNull_"& _ 
                "IPO_DUREEMAX = 1 AND [IPO_DUREEMAX] IS NULL) OR ([IPO_DUREEMAX] = @Original_IPO_"& _ 
                "DUREEMAX)) AND ((@IsNull_IPO_CDF_UTMAX_CODE_FK = 1 AND [IPO_CDF_UTMAX_CODE_FK] I"& _ 
                "S NULL) OR ([IPO_CDF_UTMAX_CODE_FK] = @Original_IPO_CDF_UTMAX_CODE_FK)) AND ((@I"& _ 
                "sNull_IPO_NUM_ORD = 1 AND [IPO_NUM_ORD] IS NULL) OR ([IPO_NUM_ORD] = @Original_I"& _ 
                "PO_NUM_ORD)) AND ([IPO_DATECR] = @Original_IPO_DATECR) AND ((@IsNull_IPO_DATEMJ "& _ 
                "= 1 AND [IPO_DATEMJ] IS NULL) OR ([IPO_DATEMJ] = @Original_IPO_DATEMJ)) AND ((@I"& _ 
                "sNull_IPO_INTERVMIN = 1 AND [IPO_INTERVMIN] IS NULL) OR ([IPO_INTERVMIN] = @Orig"& _ 
                "inal_IPO_INTERVMIN)) AND ((@IsNull_IPO_CDF_UIMIN_CODE_FK = 1 AND [IPO_CDF_UIMIN_"& _ 
                "CODE_FK] IS NULL) OR ([IPO_CDF_UIMIN_CODE_FK] = @Original_IPO_CDF_UIMIN_CODE_FK)"& _ 
                ") AND ((@IsNull_IPO_INTERVMAX = 1 AND [IPO_INTERVMAX] IS NULL) OR ([IPO_INTERVMA"& _ 
                "X] = @Original_IPO_INTERVMAX)) AND ((@IsNull_IPO_CDF_UIMAX_CODE_FK = 1 AND [IPO_"& _ 
                "CDF_UIMAX_CODE_FK] IS NULL) OR ([IPO_CDF_UIMAX_CODE_FK] = @Original_IPO_CDF_UIMA"& _ 
                "X_CODE_FK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_NUM_SEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UNPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UNPO_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DOSEMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DOSEMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DOSEMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_FREQMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_FREQMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_FREQMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DUREEMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DUREEMIN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UTMIN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UTMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DUREEMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DUREEMAX", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UTMAX_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UTMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_ORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_ORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_INTERVMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_INTERVMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_INTERVMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UIMIN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UIMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_INTERVMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_INTERVMAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_INTERVMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UIMAX_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UIMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IPO_INFOPOSO] ([IPO_FPO_CODE_FK_PK], [IPO_NUM_SEQ_PK], ["& _ 
                "IPO_CDF_NAPO_CODE_FK], [IPO_CDF_UNPO_CODE_FK], [IPO_DOSEMIN], [IPO_DOSEMAX], [IP"& _ 
                "O_FREQMIN], [IPO_FREQMAX], [IPO_CDF_FREQMIN_CODE_FK], [IPO_CDF_FREQMAX_CODE_FK],"& _ 
                " [IPO_DUREEMIN], [IPO_CDF_UTMIN_CODE_FK], [IPO_DUREEMAX], [IPO_CDF_UTMAX_CODE_FK"& _ 
                "], [IPO_NUM_ORD], [IPO_DATECR], [IPO_DATEMJ], [IPO_INTERVMIN], [IPO_CDF_UIMIN_CO"& _ 
                "DE_FK], [IPO_INTERVMAX], [IPO_CDF_UIMAX_CODE_FK]) VALUES (@IPO_FPO_CODE_FK_PK, @"& _ 
                "IPO_NUM_SEQ_PK, @IPO_CDF_NAPO_CODE_FK, @IPO_CDF_UNPO_CODE_FK, @IPO_DOSEMIN, @IPO"& _ 
                "_DOSEMAX, @IPO_FREQMIN, @IPO_FREQMAX, @IPO_CDF_FREQMIN_CODE_FK, @IPO_CDF_FREQMAX"& _ 
                "_CODE_FK, @IPO_DUREEMIN, @IPO_CDF_UTMIN_CODE_FK, @IPO_DUREEMAX, @IPO_CDF_UTMAX_C"& _ 
                "ODE_FK, @IPO_NUM_ORD, @IPO_DATECR, @IPO_DATEMJ, @IPO_INTERVMIN, @IPO_CDF_UIMIN_C"& _ 
                "ODE_FK, @IPO_INTERVMAX, @IPO_CDF_UIMAX_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPO_FPO_CODE_FK_PK, IPO"& _ 
                "_NUM_SEQ_PK, IPO_CDF_NAPO_CODE_FK, IPO_CDF_UNPO_CODE_FK, IPO_DOSEMIN, IPO_DOSEMA"& _ 
                "X, IPO_FREQMIN, IPO_FREQMAX, IPO_CDF_FREQMIN_CODE_FK, IPO_CDF_FREQMAX_CODE_FK, I"& _ 
                "PO_DUREEMIN, IPO_CDF_UTMIN_CODE_FK, IPO_DUREEMAX, IPO_CDF_UTMAX_CODE_FK, IPO_NUM"& _ 
                "_ORD, IPO_DATECR, IPO_DATEMJ, IPO_INTERVMIN, IPO_CDF_UIMIN_CODE_FK, IPO_INTERVMA"& _ 
                "X, IPO_CDF_UIMAX_CODE_FK FROM theriaque.IPO_INFOPOSO WHERE (IPO_FPO_CODE_FK_PK ="& _ 
                " @IPO_FPO_CODE_FK_PK) AND (IPO_NUM_SEQ_PK = @IPO_NUM_SEQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_NUM_SEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UNPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UNPO_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DOSEMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DOSEMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FREQMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FREQMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DUREEMIN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UTMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMIN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DUREEMAX", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UTMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMAX_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_ORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_INTERVMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UIMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMIN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_INTERVMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UIMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMAX_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IPO_INFOPOSO] SET [IPO_FPO_CODE_FK_PK] = @IPO_FPO_CODE_FK_PK,"& _ 
                " [IPO_NUM_SEQ_PK] = @IPO_NUM_SEQ_PK, [IPO_CDF_NAPO_CODE_FK] = @IPO_CDF_NAPO_CODE"& _ 
                "_FK, [IPO_CDF_UNPO_CODE_FK] = @IPO_CDF_UNPO_CODE_FK, [IPO_DOSEMIN] = @IPO_DOSEMI"& _ 
                "N, [IPO_DOSEMAX] = @IPO_DOSEMAX, [IPO_FREQMIN] = @IPO_FREQMIN, [IPO_FREQMAX] = @"& _ 
                "IPO_FREQMAX, [IPO_CDF_FREQMIN_CODE_FK] = @IPO_CDF_FREQMIN_CODE_FK, [IPO_CDF_FREQ"& _ 
                "MAX_CODE_FK] = @IPO_CDF_FREQMAX_CODE_FK, [IPO_DUREEMIN] = @IPO_DUREEMIN, [IPO_CD"& _ 
                "F_UTMIN_CODE_FK] = @IPO_CDF_UTMIN_CODE_FK, [IPO_DUREEMAX] = @IPO_DUREEMAX, [IPO_"& _ 
                "CDF_UTMAX_CODE_FK] = @IPO_CDF_UTMAX_CODE_FK, [IPO_NUM_ORD] = @IPO_NUM_ORD, [IPO_"& _ 
                "DATECR] = @IPO_DATECR, [IPO_DATEMJ] = @IPO_DATEMJ, [IPO_INTERVMIN] = @IPO_INTERV"& _ 
                "MIN, [IPO_CDF_UIMIN_CODE_FK] = @IPO_CDF_UIMIN_CODE_FK, [IPO_INTERVMAX] = @IPO_IN"& _ 
                "TERVMAX, [IPO_CDF_UIMAX_CODE_FK] = @IPO_CDF_UIMAX_CODE_FK WHERE (([IPO_FPO_CODE_"& _ 
                "FK_PK] = @Original_IPO_FPO_CODE_FK_PK) AND ([IPO_NUM_SEQ_PK] = @Original_IPO_NUM"& _ 
                "_SEQ_PK) AND ([IPO_CDF_NAPO_CODE_FK] = @Original_IPO_CDF_NAPO_CODE_FK) AND ([IPO"& _ 
                "_CDF_UNPO_CODE_FK] = @Original_IPO_CDF_UNPO_CODE_FK) AND ((@IsNull_IPO_DOSEMIN ="& _ 
                " 1 AND [IPO_DOSEMIN] IS NULL) OR ([IPO_DOSEMIN] = @Original_IPO_DOSEMIN)) AND (["& _ 
                "IPO_DOSEMAX] = @Original_IPO_DOSEMAX) AND ((@IsNull_IPO_FREQMIN = 1 AND [IPO_FRE"& _ 
                "QMIN] IS NULL) OR ([IPO_FREQMIN] = @Original_IPO_FREQMIN)) AND ([IPO_FREQMAX] = "& _ 
                "@Original_IPO_FREQMAX) AND ((@IsNull_IPO_CDF_FREQMIN_CODE_FK = 1 AND [IPO_CDF_FR"& _ 
                "EQMIN_CODE_FK] IS NULL) OR ([IPO_CDF_FREQMIN_CODE_FK] = @Original_IPO_CDF_FREQMI"& _ 
                "N_CODE_FK)) AND ([IPO_CDF_FREQMAX_CODE_FK] = @Original_IPO_CDF_FREQMAX_CODE_FK) "& _ 
                "AND ((@IsNull_IPO_DUREEMIN = 1 AND [IPO_DUREEMIN] IS NULL) OR ([IPO_DUREEMIN] = "& _ 
                "@Original_IPO_DUREEMIN)) AND ((@IsNull_IPO_CDF_UTMIN_CODE_FK = 1 AND [IPO_CDF_UT"& _ 
                "MIN_CODE_FK] IS NULL) OR ([IPO_CDF_UTMIN_CODE_FK] = @Original_IPO_CDF_UTMIN_CODE"& _ 
                "_FK)) AND ((@IsNull_IPO_DUREEMAX = 1 AND [IPO_DUREEMAX] IS NULL) OR ([IPO_DUREEM"& _ 
                "AX] = @Original_IPO_DUREEMAX)) AND ((@IsNull_IPO_CDF_UTMAX_CODE_FK = 1 AND [IPO_"& _ 
                "CDF_UTMAX_CODE_FK] IS NULL) OR ([IPO_CDF_UTMAX_CODE_FK] = @Original_IPO_CDF_UTMA"& _ 
                "X_CODE_FK)) AND ((@IsNull_IPO_NUM_ORD = 1 AND [IPO_NUM_ORD] IS NULL) OR ([IPO_NU"& _ 
                "M_ORD] = @Original_IPO_NUM_ORD)) AND ([IPO_DATECR] = @Original_IPO_DATECR) AND ("& _ 
                "(@IsNull_IPO_DATEMJ = 1 AND [IPO_DATEMJ] IS NULL) OR ([IPO_DATEMJ] = @Original_I"& _ 
                "PO_DATEMJ)) AND ((@IsNull_IPO_INTERVMIN = 1 AND [IPO_INTERVMIN] IS NULL) OR ([IP"& _ 
                "O_INTERVMIN] = @Original_IPO_INTERVMIN)) AND ((@IsNull_IPO_CDF_UIMIN_CODE_FK = 1"& _ 
                " AND [IPO_CDF_UIMIN_CODE_FK] IS NULL) OR ([IPO_CDF_UIMIN_CODE_FK] = @Original_IP"& _ 
                "O_CDF_UIMIN_CODE_FK)) AND ((@IsNull_IPO_INTERVMAX = 1 AND [IPO_INTERVMAX] IS NUL"& _ 
                "L) OR ([IPO_INTERVMAX] = @Original_IPO_INTERVMAX)) AND ((@IsNull_IPO_CDF_UIMAX_C"& _ 
                "ODE_FK = 1 AND [IPO_CDF_UIMAX_CODE_FK] IS NULL) OR ([IPO_CDF_UIMAX_CODE_FK] = @O"& _ 
                "riginal_IPO_CDF_UIMAX_CODE_FK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPO_FPO_CODE_FK_PK, IPO_NUM_SEQ_PK, IP"& _ 
                "O_CDF_NAPO_CODE_FK, IPO_CDF_UNPO_CODE_FK, IPO_DOSEMIN, IPO_DOSEMAX, IPO_FREQMIN,"& _ 
                " IPO_FREQMAX, IPO_CDF_FREQMIN_CODE_FK, IPO_CDF_FREQMAX_CODE_FK, IPO_DUREEMIN, IP"& _ 
                "O_CDF_UTMIN_CODE_FK, IPO_DUREEMAX, IPO_CDF_UTMAX_CODE_FK, IPO_NUM_ORD, IPO_DATEC"& _ 
                "R, IPO_DATEMJ, IPO_INTERVMIN, IPO_CDF_UIMIN_CODE_FK, IPO_INTERVMAX, IPO_CDF_UIMA"& _ 
                "X_CODE_FK FROM theriaque.IPO_INFOPOSO WHERE (IPO_FPO_CODE_FK_PK = @IPO_FPO_CODE_"& _ 
                "FK_PK) AND (IPO_NUM_SEQ_PK = @IPO_NUM_SEQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_NUM_SEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UNPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UNPO_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DOSEMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DOSEMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FREQMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FREQMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DUREEMIN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UTMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMIN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DUREEMAX", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UTMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMAX_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_ORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_INTERVMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UIMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMIN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_INTERVMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_CDF_UIMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMAX_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_NUM_SEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UNPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UNPO_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DOSEMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DOSEMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DOSEMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DOSEMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_FREQMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_FREQMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_FREQMAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FREQMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_FREQMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DUREEMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DUREEMIN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UTMIN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UTMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DUREEMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DUREEMAX", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DUREEMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UTMAX_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UTMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UTMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_ORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_NUM_ORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_NUM_ORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_INTERVMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_INTERVMIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_INTERVMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UIMIN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UIMIN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMIN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_INTERVMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_INTERVMAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_INTERVMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 22, 0, "IPO_INTERVMAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPO_CDF_UIMAX_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPO_CDF_UIMAX_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_CDF_UIMAX_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPO_FPO_CODE_FK_PK, IPO_NUM_SEQ_PK, IPO_CDF_NAPO_CODE_FK, IPO_CDF_UNPO_COD"& _ 
                "E_FK, IPO_DOSEMIN, IPO_DOSEMAX, IPO_FREQMIN, IPO_FREQMAX, IPO_CDF_FREQMIN_CODE_F"& _ 
                "K, IPO_CDF_FREQMAX_CODE_FK, IPO_DUREEMIN, IPO_CDF_UTMIN_CODE_FK, IPO_DUREEMAX, I"& _ 
                "PO_CDF_UTMAX_CODE_FK, IPO_NUM_ORD, IPO_DATECR, IPO_DATEMJ, IPO_INTERVMIN, IPO_CD"& _ 
                "F_UIMIN_CODE_FK, IPO_INTERVMAX, IPO_CDF_UIMAX_CODE_FK FROM THERIAQUE.IPO_INFOPOS"& _ 
                "O"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPO_CDF_FREQMAX_CODE_FK, IPO_CDF_FREQMIN_CODE_FK, IPO_CDF_NAPO_CODE_FK, IP"& _ 
                "O_CDF_UIMAX_CODE_FK, IPO_CDF_UIMIN_CODE_FK, IPO_CDF_UNPO_CODE_FK, IPO_CDF_UTMAX_"& _ 
                "CODE_FK, IPO_CDF_UTMIN_CODE_FK, IPO_DATECR, IPO_DATEMJ, IPO_DOSEMAX, IPO_DOSEMIN"& _ 
                ", IPO_DUREEMAX, IPO_DUREEMIN, IPO_FPO_CODE_FK_PK, IPO_FREQMAX, IPO_FREQMIN, IPO_"& _ 
                "INTERVMAX, IPO_INTERVMIN, IPO_NUM_ORD, IPO_NUM_SEQ_PK FROM theriaque.IPO_INFOPOS"& _ 
                "O WHERE (IPO_FPO_CODE_FK_PK = @IPO_FPO_CODE_FK_PK)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPO_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IPO_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPO_INFOPOSODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Posologie.IPO_INFOPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPO_INFOPOSODataTable = New dsTheriaque_Posologie.IPO_INFOPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPO_INFOPOSODataTable, ByVal IPO_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPO_FPO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal IPO_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.IPO_INFOPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPO_FPO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Posologie.IPO_INFOPOSODataTable = New dsTheriaque_Posologie.IPO_INFOPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Posologie.IPO_INFOPOSODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPO_INFOPOSO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_IPO_FPO_CODE_FK_PK As Integer,  _
                    ByVal Original_IPO_NUM_SEQ_PK As Short,  _
                    ByVal Original_IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal Original_IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal Original_IPO_DOSEMIN As String,  _
                    ByVal Original_IPO_DOSEMAX As String,  _
                    ByVal Original_IPO_FREQMIN As String,  _
                    ByVal Original_IPO_FREQMAX As String,  _
                    ByVal Original_IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal Original_IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal Original_IPO_DUREEMIN As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal Original_IPO_DUREEMAX As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal Original_IPO_NUM_ORD As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_DATECR As Date,  _
                    ByVal Original_IPO_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_IPO_INTERVMIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal Original_IPO_INTERVMAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPO_CDF_UIMAX_CODE_FK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IPO_FPO_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IPO_NUM_SEQ_PK,Short)
            If (Original_IPO_CDF_NAPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_CDF_NAPO_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IPO_CDF_NAPO_CODE_FK,String)
            End If
            If (Original_IPO_CDF_UNPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_CDF_UNPO_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IPO_CDF_UNPO_CODE_FK,String)
            End If
            If (Original_IPO_DOSEMIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_IPO_DOSEMIN,String)
            End If
            If (Original_IPO_DOSEMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_DOSEMAX")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IPO_DOSEMAX,String)
            End If
            If (Original_IPO_FREQMIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IPO_FREQMIN,String)
            End If
            If (Original_IPO_FREQMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_FREQMAX")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_IPO_FREQMAX,String)
            End If
            If (Original_IPO_CDF_FREQMIN_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_IPO_CDF_FREQMIN_CODE_FK,String)
            End If
            If (Original_IPO_CDF_FREQMAX_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_CDF_FREQMAX_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_IPO_CDF_FREQMAX_CODE_FK,String)
            End If
            If (Original_IPO_DUREEMIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IPO_DUREEMIN.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UTMIN_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_IPO_CDF_UTMIN_CODE_FK,String)
            End If
            If (Original_IPO_DUREEMAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_IPO_DUREEMAX.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UTMAX_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_IPO_CDF_UTMAX_CODE_FK,String)
            End If
            If (Original_IPO_NUM_ORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_IPO_NUM_ORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_IPO_DATECR,Date)
            If (Original_IPO_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_IPO_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_INTERVMIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_IPO_INTERVMIN.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UIMIN_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_IPO_CDF_UIMIN_CODE_FK,String)
            End If
            If (Original_IPO_INTERVMAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_IPO_INTERVMAX.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UIMAX_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_IPO_CDF_UIMAX_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal IPO_FPO_CODE_FK_PK As Integer,  _
                    ByVal IPO_NUM_SEQ_PK As Short,  _
                    ByVal IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal IPO_DOSEMIN As String,  _
                    ByVal IPO_DOSEMAX As String,  _
                    ByVal IPO_FREQMIN As String,  _
                    ByVal IPO_FREQMAX As String,  _
                    ByVal IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal IPO_DUREEMIN As Global.System.Nullable(Of Short),  _
                    ByVal IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal IPO_DUREEMAX As Global.System.Nullable(Of Short),  _
                    ByVal IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal IPO_NUM_ORD As Global.System.Nullable(Of Short),  _
                    ByVal IPO_DATECR As Date,  _
                    ByVal IPO_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal IPO_INTERVMIN As Global.System.Nullable(Of Decimal),  _
                    ByVal IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal IPO_INTERVMAX As Global.System.Nullable(Of Decimal),  _
                    ByVal IPO_CDF_UIMAX_CODE_FK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPO_FPO_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPO_NUM_SEQ_PK,Short)
            If (IPO_CDF_NAPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_CDF_NAPO_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPO_CDF_NAPO_CODE_FK,String)
            End If
            If (IPO_CDF_UNPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_CDF_UNPO_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPO_CDF_UNPO_CODE_FK,String)
            End If
            If (IPO_DOSEMIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IPO_DOSEMIN,String)
            End If
            If (IPO_DOSEMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_DOSEMAX")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IPO_DOSEMAX,String)
            End If
            If (IPO_FREQMIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IPO_FREQMIN,String)
            End If
            If (IPO_FREQMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_FREQMAX")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IPO_FREQMAX,String)
            End If
            If (IPO_CDF_FREQMIN_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IPO_CDF_FREQMIN_CODE_FK,String)
            End If
            If (IPO_CDF_FREQMAX_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_CDF_FREQMAX_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IPO_CDF_FREQMAX_CODE_FK,String)
            End If
            If (IPO_DUREEMIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IPO_DUREEMIN.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UTMIN_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IPO_CDF_UTMIN_CODE_FK,String)
            End If
            If (IPO_DUREEMAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IPO_DUREEMAX.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UTMAX_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IPO_CDF_UTMAX_CODE_FK,String)
            End If
            If (IPO_NUM_ORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IPO_NUM_ORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(IPO_DATECR,Date)
            If (IPO_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(IPO_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (IPO_INTERVMIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(IPO_INTERVMIN.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UIMIN_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(IPO_CDF_UIMIN_CODE_FK,String)
            End If
            If (IPO_INTERVMAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(IPO_INTERVMAX.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UIMAX_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(IPO_CDF_UIMAX_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IPO_FPO_CODE_FK_PK As Integer,  _
                    ByVal IPO_NUM_SEQ_PK As Short,  _
                    ByVal IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal IPO_DOSEMIN As String,  _
                    ByVal IPO_DOSEMAX As String,  _
                    ByVal IPO_FREQMIN As String,  _
                    ByVal IPO_FREQMAX As String,  _
                    ByVal IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal IPO_DUREEMIN As Global.System.Nullable(Of Short),  _
                    ByVal IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal IPO_DUREEMAX As Global.System.Nullable(Of Short),  _
                    ByVal IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal IPO_NUM_ORD As Global.System.Nullable(Of Short),  _
                    ByVal IPO_DATECR As Date,  _
                    ByVal IPO_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal IPO_INTERVMIN As Global.System.Nullable(Of Decimal),  _
                    ByVal IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal IPO_INTERVMAX As Global.System.Nullable(Of Decimal),  _
                    ByVal IPO_CDF_UIMAX_CODE_FK As String,  _
                    ByVal Original_IPO_FPO_CODE_FK_PK As Integer,  _
                    ByVal Original_IPO_NUM_SEQ_PK As Short,  _
                    ByVal Original_IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal Original_IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal Original_IPO_DOSEMIN As String,  _
                    ByVal Original_IPO_DOSEMAX As String,  _
                    ByVal Original_IPO_FREQMIN As String,  _
                    ByVal Original_IPO_FREQMAX As String,  _
                    ByVal Original_IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal Original_IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal Original_IPO_DUREEMIN As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal Original_IPO_DUREEMAX As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal Original_IPO_NUM_ORD As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_DATECR As Date,  _
                    ByVal Original_IPO_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_IPO_INTERVMIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal Original_IPO_INTERVMAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPO_CDF_UIMAX_CODE_FK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPO_FPO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPO_NUM_SEQ_PK,Short)
            If (IPO_CDF_NAPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_CDF_NAPO_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPO_CDF_NAPO_CODE_FK,String)
            End If
            If (IPO_CDF_UNPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_CDF_UNPO_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPO_CDF_UNPO_CODE_FK,String)
            End If
            If (IPO_DOSEMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IPO_DOSEMIN,String)
            End If
            If (IPO_DOSEMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_DOSEMAX")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IPO_DOSEMAX,String)
            End If
            If (IPO_FREQMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IPO_FREQMIN,String)
            End If
            If (IPO_FREQMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_FREQMAX")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IPO_FREQMAX,String)
            End If
            If (IPO_CDF_FREQMIN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IPO_CDF_FREQMIN_CODE_FK,String)
            End If
            If (IPO_CDF_FREQMAX_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPO_CDF_FREQMAX_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IPO_CDF_FREQMAX_CODE_FK,String)
            End If
            If (IPO_DUREEMIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IPO_DUREEMIN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UTMIN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IPO_CDF_UTMIN_CODE_FK,String)
            End If
            If (IPO_DUREEMAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IPO_DUREEMAX.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UTMAX_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IPO_CDF_UTMAX_CODE_FK,String)
            End If
            If (IPO_NUM_ORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IPO_NUM_ORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(IPO_DATECR,Date)
            If (IPO_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(IPO_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (IPO_INTERVMIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(IPO_INTERVMIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UIMIN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(IPO_CDF_UIMIN_CODE_FK,String)
            End If
            If (IPO_INTERVMAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(IPO_INTERVMAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (IPO_CDF_UIMAX_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(IPO_CDF_UIMAX_CODE_FK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_IPO_FPO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_IPO_NUM_SEQ_PK,Short)
            If (Original_IPO_CDF_NAPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_CDF_NAPO_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_IPO_CDF_NAPO_CODE_FK,String)
            End If
            If (Original_IPO_CDF_UNPO_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_CDF_UNPO_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_IPO_CDF_UNPO_CODE_FK,String)
            End If
            If (Original_IPO_DOSEMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_IPO_DOSEMIN,String)
            End If
            If (Original_IPO_DOSEMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_DOSEMAX")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_IPO_DOSEMAX,String)
            End If
            If (Original_IPO_FREQMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_IPO_FREQMIN,String)
            End If
            If (Original_IPO_FREQMAX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_FREQMAX")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_IPO_FREQMAX,String)
            End If
            If (Original_IPO_CDF_FREQMIN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_IPO_CDF_FREQMIN_CODE_FK,String)
            End If
            If (Original_IPO_CDF_FREQMAX_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPO_CDF_FREQMAX_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_IPO_CDF_FREQMAX_CODE_FK,String)
            End If
            If (Original_IPO_DUREEMIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_IPO_DUREEMIN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UTMIN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_IPO_CDF_UTMIN_CODE_FK,String)
            End If
            If (Original_IPO_DUREEMAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_IPO_DUREEMAX.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UTMAX_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_IPO_CDF_UTMAX_CODE_FK,String)
            End If
            If (Original_IPO_NUM_ORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_IPO_NUM_ORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_IPO_DATECR,Date)
            If (Original_IPO_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_IPO_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_INTERVMIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_IPO_INTERVMIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UIMIN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_IPO_CDF_UIMIN_CODE_FK,String)
            End If
            If (Original_IPO_INTERVMAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_IPO_INTERVMAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_IPO_CDF_UIMAX_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_IPO_CDF_UIMAX_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal IPO_DOSEMIN As String,  _
                    ByVal IPO_DOSEMAX As String,  _
                    ByVal IPO_FREQMIN As String,  _
                    ByVal IPO_FREQMAX As String,  _
                    ByVal IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal IPO_DUREEMIN As Global.System.Nullable(Of Short),  _
                    ByVal IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal IPO_DUREEMAX As Global.System.Nullable(Of Short),  _
                    ByVal IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal IPO_NUM_ORD As Global.System.Nullable(Of Short),  _
                    ByVal IPO_DATECR As Date,  _
                    ByVal IPO_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal IPO_INTERVMIN As Global.System.Nullable(Of Decimal),  _
                    ByVal IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal IPO_INTERVMAX As Global.System.Nullable(Of Decimal),  _
                    ByVal IPO_CDF_UIMAX_CODE_FK As String,  _
                    ByVal Original_IPO_FPO_CODE_FK_PK As Integer,  _
                    ByVal Original_IPO_NUM_SEQ_PK As Short,  _
                    ByVal Original_IPO_CDF_NAPO_CODE_FK As String,  _
                    ByVal Original_IPO_CDF_UNPO_CODE_FK As String,  _
                    ByVal Original_IPO_DOSEMIN As String,  _
                    ByVal Original_IPO_DOSEMAX As String,  _
                    ByVal Original_IPO_FREQMIN As String,  _
                    ByVal Original_IPO_FREQMAX As String,  _
                    ByVal Original_IPO_CDF_FREQMIN_CODE_FK As String,  _
                    ByVal Original_IPO_CDF_FREQMAX_CODE_FK As String,  _
                    ByVal Original_IPO_DUREEMIN As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_CDF_UTMIN_CODE_FK As String,  _
                    ByVal Original_IPO_DUREEMAX As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_CDF_UTMAX_CODE_FK As String,  _
                    ByVal Original_IPO_NUM_ORD As Global.System.Nullable(Of Short),  _
                    ByVal Original_IPO_DATECR As Date,  _
                    ByVal Original_IPO_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_IPO_INTERVMIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPO_CDF_UIMIN_CODE_FK As String,  _
                    ByVal Original_IPO_INTERVMAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IPO_CDF_UIMAX_CODE_FK As String) As Integer
            Return Me.Update(Original_IPO_FPO_CODE_FK_PK, Original_IPO_NUM_SEQ_PK, IPO_CDF_NAPO_CODE_FK, IPO_CDF_UNPO_CODE_FK, IPO_DOSEMIN, IPO_DOSEMAX, IPO_FREQMIN, IPO_FREQMAX, IPO_CDF_FREQMIN_CODE_FK, IPO_CDF_FREQMAX_CODE_FK, IPO_DUREEMIN, IPO_CDF_UTMIN_CODE_FK, IPO_DUREEMAX, IPO_CDF_UTMAX_CODE_FK, IPO_NUM_ORD, IPO_DATECR, IPO_DATEMJ, IPO_INTERVMIN, IPO_CDF_UIMIN_CODE_FK, IPO_INTERVMAX, IPO_CDF_UIMAX_CODE_FK, Original_IPO_FPO_CODE_FK_PK, Original_IPO_NUM_SEQ_PK, Original_IPO_CDF_NAPO_CODE_FK, Original_IPO_CDF_UNPO_CODE_FK, Original_IPO_DOSEMIN, Original_IPO_DOSEMAX, Original_IPO_FREQMIN, Original_IPO_FREQMAX, Original_IPO_CDF_FREQMIN_CODE_FK, Original_IPO_CDF_FREQMAX_CODE_FK, Original_IPO_DUREEMIN, Original_IPO_CDF_UTMIN_CODE_FK, Original_IPO_DUREEMAX, Original_IPO_CDF_UTMAX_CODE_FK, Original_IPO_NUM_ORD, Original_IPO_DATECR, Original_IPO_DATEMJ, Original_IPO_INTERVMIN, Original_IPO_CDF_UIMIN_CODE_FK, Original_IPO_INTERVMAX, Original_IPO_CDF_UIMAX_CODE_FK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IPOCOTE_INFPO_COMMENT_TERRAINTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPOCOTE_INFPO_COMMENT_TERRAIN"
            tableMapping.ColumnMappings.Add("IPOCOTE_IPO_CODE_FK_PK", "IPOCOTE_IPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOTE_IPO_NUM_SEQ_FK_PK", "IPOCOTE_IPO_NUM_SEQ_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOTE_CDF_COTE_CODE_FK_PK", "IPOCOTE_CDF_COTE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOTE_NUM_ORD_PK", "IPOCOTE_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IPOCOTE_INFPO_COMMENT_TERRAIN] WHERE (([IPOCOTE_IPO_CODE"& _ 
                "_FK_PK] = @Original_IPOCOTE_IPO_CODE_FK_PK) AND ([IPOCOTE_IPO_NUM_SEQ_FK_PK] = @"& _ 
                "Original_IPOCOTE_IPO_NUM_SEQ_FK_PK) AND ([IPOCOTE_CDF_COTE_CODE_FK_PK] = @Origin"& _ 
                "al_IPOCOTE_CDF_COTE_CODE_FK_PK) AND ([IPOCOTE_NUM_ORD_PK] = @Original_IPOCOTE_NU"& _ 
                "M_ORD_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IPOCOTE_INFPO_COMMENT_TERRAIN] ([IPOCOTE_IPO_CODE_FK_PK]"& _ 
                ", [IPOCOTE_IPO_NUM_SEQ_FK_PK], [IPOCOTE_CDF_COTE_CODE_FK_PK], [IPOCOTE_NUM_ORD_P"& _ 
                "K]) VALUES (@IPOCOTE_IPO_CODE_FK_PK, @IPOCOTE_IPO_NUM_SEQ_FK_PK, @IPOCOTE_CDF_CO"& _ 
                "TE_CODE_FK_PK, @IPOCOTE_NUM_ORD_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPOCOTE_IPO_CODE_FK_PK, IPOCOTE_IPO"& _ 
                "_NUM_SEQ_FK_PK, IPOCOTE_CDF_COTE_CODE_FK_PK, IPOCOTE_NUM_ORD_PK FROM THERIAQUE.I"& _ 
                "POCOTE_INFPO_COMMENT_TERRAIN WHERE (IPOCOTE_CDF_COTE_CODE_FK_PK = @IPOCOTE_CDF_C"& _ 
                "OTE_CODE_FK_PK) AND (IPOCOTE_IPO_CODE_FK_PK = @IPOCOTE_IPO_CODE_FK_PK) AND (IPOC"& _ 
                "OTE_IPO_NUM_SEQ_FK_PK = @IPOCOTE_IPO_NUM_SEQ_FK_PK) AND (IPOCOTE_NUM_ORD_PK = @I"& _ 
                "POCOTE_NUM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IPOCOTE_INFPO_COMMENT_TERRAIN] SET [IPOCOTE_IPO_CODE_FK_PK] ="& _ 
                " @IPOCOTE_IPO_CODE_FK_PK, [IPOCOTE_IPO_NUM_SEQ_FK_PK] = @IPOCOTE_IPO_NUM_SEQ_FK_"& _ 
                "PK, [IPOCOTE_CDF_COTE_CODE_FK_PK] = @IPOCOTE_CDF_COTE_CODE_FK_PK, [IPOCOTE_NUM_O"& _ 
                "RD_PK] = @IPOCOTE_NUM_ORD_PK WHERE (([IPOCOTE_IPO_CODE_FK_PK] = @Original_IPOCOT"& _ 
                "E_IPO_CODE_FK_PK) AND ([IPOCOTE_IPO_NUM_SEQ_FK_PK] = @Original_IPOCOTE_IPO_NUM_S"& _ 
                "EQ_FK_PK) AND ([IPOCOTE_CDF_COTE_CODE_FK_PK] = @Original_IPOCOTE_CDF_COTE_CODE_F"& _ 
                "K_PK) AND ([IPOCOTE_NUM_ORD_PK] = @Original_IPOCOTE_NUM_ORD_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPOCOT"& _ 
                "E_IPO_CODE_FK_PK, IPOCOTE_IPO_NUM_SEQ_FK_PK, IPOCOTE_CDF_COTE_CODE_FK_PK, IPOCOT"& _ 
                "E_NUM_ORD_PK FROM THERIAQUE.IPOCOTE_INFPO_COMMENT_TERRAIN WHERE (IPOCOTE_CDF_COT"& _ 
                "E_CODE_FK_PK = @IPOCOTE_CDF_COTE_CODE_FK_PK) AND (IPOCOTE_IPO_CODE_FK_PK = @IPOC"& _ 
                "OTE_IPO_CODE_FK_PK) AND (IPOCOTE_IPO_NUM_SEQ_FK_PK = @IPOCOTE_IPO_NUM_SEQ_FK_PK)"& _ 
                " AND (IPOCOTE_NUM_ORD_PK = @IPOCOTE_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_CDF_COTE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOTE_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPOCOTE_IPO_CODE_FK_PK, IPOCOTE_IPO_NUM_SEQ_FK_PK, IPOCOTE_CDF_COTE_CODE_F" & _
                "K_PK, IPOCOTE_NUM_ORD_PK FROM THERIAQUE.IPOCOTE_INFPO_COMMENT_TERRAIN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPOCOTE_IPO_CODE_FK_PK, IPOCOTE_IPO_NUM_SEQ_FK_PK, IPOCOTE_CDF_COTE_CODE_F" & _
                "K_PK, IPOCOTE_NUM_ORD_PK FROM THERIAQUE.IPOCOTE_INFPO_COMMENT_TERRAIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where IPO" & _
                "COTE_IPO_CODE_FK_PK = @IPOCOTE_IPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOTE_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable = New dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable, ByVal IPOCOTE_IPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOCOTE_IPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IPOCOTE_IPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOCOTE_IPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable = New dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.IPOCOTE_INFPO_COMMENT_TERRAINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPOCOTE_INFPO_COMMENT_TERRAIN")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal Original_IPOCOTE_NUM_ORD_PK As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IPOCOTE_IPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IPOCOTE_IPO_NUM_SEQ_FK_PK, Short)
            If (Original_IPOCOTE_CDF_COTE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOCOTE_CDF_COTE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IPOCOTE_CDF_COTE_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IPOCOTE_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal IPOCOTE_NUM_ORD_PK As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPOCOTE_IPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPOCOTE_IPO_NUM_SEQ_FK_PK, Short)
            If (IPOCOTE_CDF_COTE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOCOTE_CDF_COTE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPOCOTE_CDF_COTE_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPOCOTE_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal IPOCOTE_NUM_ORD_PK As Short, ByVal Original_IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal Original_IPOCOTE_NUM_ORD_PK As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPOCOTE_IPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPOCOTE_IPO_NUM_SEQ_FK_PK, Short)
            If (IPOCOTE_CDF_COTE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOCOTE_CDF_COTE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPOCOTE_CDF_COTE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPOCOTE_NUM_ORD_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IPOCOTE_IPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IPOCOTE_IPO_NUM_SEQ_FK_PK, Short)
            If (Original_IPOCOTE_CDF_COTE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOCOTE_CDF_COTE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IPOCOTE_CDF_COTE_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IPOCOTE_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IPOCOTE_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOTE_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOTE_CDF_COTE_CODE_FK_PK As String, ByVal Original_IPOCOTE_NUM_ORD_PK As Short) As Integer
            Return Me.Update(Original_IPOCOTE_IPO_CODE_FK_PK, Original_IPOCOTE_IPO_NUM_SEQ_FK_PK, Original_IPOCOTE_CDF_COTE_CODE_FK_PK, Original_IPOCOTE_NUM_ORD_PK, Original_IPOCOTE_IPO_CODE_FK_PK, Original_IPOCOTE_IPO_NUM_SEQ_FK_PK, Original_IPOCOTE_CDF_COTE_CODE_FK_PK, Original_IPOCOTE_NUM_ORD_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IPOCOFQ_INFPO_COMMENT_FREQTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPOCOFQ_INFPO_COMMENT_FREQ"
            tableMapping.ColumnMappings.Add("IPOCOFQ_IPO_CODE_FK_PK", "IPOCOFQ_IPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOFQ_IPO_NUM_SEQ_FK_PK", "IPOCOFQ_IPO_NUM_SEQ_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOFQ_CDF_COFQ_CODE_FK_PK", "IPOCOFQ_CDF_COFQ_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOFQ_NUM_ORD_PK", "IPOCOFQ_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IPOCOFQ_INFPO_COMMENT_FREQ] WHERE (([IPOCOFQ_IPO_CODE_FK" & _
                "_PK] = @Original_IPOCOFQ_IPO_CODE_FK_PK) AND ([IPOCOFQ_IPO_NUM_SEQ_FK_PK] = @Ori" & _
                "ginal_IPOCOFQ_IPO_NUM_SEQ_FK_PK) AND ([IPOCOFQ_CDF_COFQ_CODE_FK_PK] = @Original_" & _
                "IPOCOFQ_CDF_COFQ_CODE_FK_PK) AND ([IPOCOFQ_NUM_ORD_PK] = @Original_IPOCOFQ_NUM_O" & _
                "RD_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IPOCOFQ_INFPO_COMMENT_FREQ] ([IPOCOFQ_IPO_CODE_FK_PK], [" & _
                "IPOCOFQ_IPO_NUM_SEQ_FK_PK], [IPOCOFQ_CDF_COFQ_CODE_FK_PK], [IPOCOFQ_NUM_ORD_PK])" & _
                " VALUES (@IPOCOFQ_IPO_CODE_FK_PK, @IPOCOFQ_IPO_NUM_SEQ_FK_PK, @IPOCOFQ_CDF_COFQ_" & _
                "CODE_FK_PK, @IPOCOFQ_NUM_ORD_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IPOCOFQ_IPO_CODE_FK_PK, IPOCOFQ_IPO_NU" & _
                "M_SEQ_FK_PK, IPOCOFQ_CDF_COFQ_CODE_FK_PK, IPOCOFQ_NUM_ORD_PK FROM THERIAQUE.IPOC" & _
                "OFQ_INFPO_COMMENT_FREQ WHERE (IPOCOFQ_CDF_COFQ_CODE_FK_PK = @IPOCOFQ_CDF_COFQ_CO" & _
                "DE_FK_PK) AND (IPOCOFQ_IPO_CODE_FK_PK = @IPOCOFQ_IPO_CODE_FK_PK) AND (IPOCOFQ_IP" & _
                "O_NUM_SEQ_FK_PK = @IPOCOFQ_IPO_NUM_SEQ_FK_PK) AND (IPOCOFQ_NUM_ORD_PK = @IPOCOFQ" & _
                "_NUM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IPOCOFQ_INFPO_COMMENT_FREQ] SET [IPOCOFQ_IPO_CODE_FK_PK] = @I" & _
                "POCOFQ_IPO_CODE_FK_PK, [IPOCOFQ_IPO_NUM_SEQ_FK_PK] = @IPOCOFQ_IPO_NUM_SEQ_FK_PK," & _
                " [IPOCOFQ_CDF_COFQ_CODE_FK_PK] = @IPOCOFQ_CDF_COFQ_CODE_FK_PK, [IPOCOFQ_NUM_ORD_" & _
                "PK] = @IPOCOFQ_NUM_ORD_PK WHERE (([IPOCOFQ_IPO_CODE_FK_PK] = @Original_IPOCOFQ_I" & _
                "PO_CODE_FK_PK) AND ([IPOCOFQ_IPO_NUM_SEQ_FK_PK] = @Original_IPOCOFQ_IPO_NUM_SEQ_" & _
                "FK_PK) AND ([IPOCOFQ_CDF_COFQ_CODE_FK_PK] = @Original_IPOCOFQ_CDF_COFQ_CODE_FK_P" & _
                "K) AND ([IPOCOFQ_NUM_ORD_PK] = @Original_IPOCOFQ_NUM_ORD_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IPOCOFQ_I" & _
                "PO_CODE_FK_PK, IPOCOFQ_IPO_NUM_SEQ_FK_PK, IPOCOFQ_CDF_COFQ_CODE_FK_PK, IPOCOFQ_N" & _
                "UM_ORD_PK FROM THERIAQUE.IPOCOFQ_INFPO_COMMENT_FREQ WHERE (IPOCOFQ_CDF_COFQ_CODE" & _
                "_FK_PK = @IPOCOFQ_CDF_COFQ_CODE_FK_PK) AND (IPOCOFQ_IPO_CODE_FK_PK = @IPOCOFQ_IP" & _
                "O_CODE_FK_PK) AND (IPOCOFQ_IPO_NUM_SEQ_FK_PK = @IPOCOFQ_IPO_NUM_SEQ_FK_PK) AND (" & _
                "IPOCOFQ_NUM_ORD_PK = @IPOCOFQ_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_CDF_COFQ_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOFQ_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPOCOFQ_IPO_CODE_FK_PK, IPOCOFQ_IPO_NUM_SEQ_FK_PK, IPOCOFQ_CDF_COFQ_CODE_F" & _
                "K_PK, IPOCOFQ_NUM_ORD_PK FROM THERIAQUE.IPOCOFQ_INFPO_COMMENT_FREQ"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPOCOFQ_IPO_CODE_FK_PK, IPOCOFQ_IPO_NUM_SEQ_FK_PK, IPOCOFQ_CDF_COFQ_CODE_F" & _
                "K_PK, IPOCOFQ_NUM_ORD_PK FROM THERIAQUE.IPOCOFQ_INFPO_COMMENT_FREQ" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where IPOCOF" & _
                "Q_IPO_CODE_FK_PK = @IPOCOFQ_IPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOFQ_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable = New dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable, ByVal IPOCOFQ_IPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOCOFQ_IPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IPOCOFQ_IPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOCOFQ_IPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable = New dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.IPOCOFQ_INFPO_COMMENT_FREQDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPOCOFQ_INFPO_COMMENT_FREQ")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal Original_IPOCOFQ_NUM_ORD_PK As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IPOCOFQ_IPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK, Short)
            If (Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IPOCOFQ_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal IPOCOFQ_NUM_ORD_PK As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPOCOFQ_IPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPOCOFQ_IPO_NUM_SEQ_FK_PK, Short)
            If (IPOCOFQ_CDF_COFQ_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOCOFQ_CDF_COFQ_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPOCOFQ_CDF_COFQ_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPOCOFQ_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal IPOCOFQ_NUM_ORD_PK As Short, ByVal Original_IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal Original_IPOCOFQ_NUM_ORD_PK As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPOCOFQ_IPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPOCOFQ_IPO_NUM_SEQ_FK_PK, Short)
            If (IPOCOFQ_CDF_COFQ_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOCOFQ_CDF_COFQ_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPOCOFQ_CDF_COFQ_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPOCOFQ_NUM_ORD_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IPOCOFQ_IPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK, Short)
            If (Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IPOCOFQ_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IPOCOFQ_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK As String, ByVal Original_IPOCOFQ_NUM_ORD_PK As Short) As Integer
            Return Me.Update(Original_IPOCOFQ_IPO_CODE_FK_PK, Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK, Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK, Original_IPOCOFQ_NUM_ORD_PK, Original_IPOCOFQ_IPO_CODE_FK_PK, Original_IPOCOFQ_IPO_NUM_SEQ_FK_PK, Original_IPOCOFQ_CDF_COFQ_CODE_FK_PK, Original_IPOCOFQ_NUM_ORD_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IPOCOD_INFPO_COMMENT_DUREETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPOCOD_INFPO_COMMENT_DUREE"
            tableMapping.ColumnMappings.Add("IPOCOD_IPO_CODE_FK_PK", "IPOCOD_IPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOD_IPO_NUM_SEQ_FK_PK", "IPOCOD_IPO_NUM_SEQ_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOD_CDF_COD_CODE_FK_PK", "IPOCOD_CDF_COD_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOCOD_NUM_ORD_PK", "IPOCOD_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IPOCOD_INFPO_COMMENT_DUREE] WHERE (([IPOCOD_IPO_CODE_FK_"& _ 
                "PK] = @Original_IPOCOD_IPO_CODE_FK_PK) AND ([IPOCOD_IPO_NUM_SEQ_FK_PK] = @Origin"& _ 
                "al_IPOCOD_IPO_NUM_SEQ_FK_PK) AND ([IPOCOD_CDF_COD_CODE_FK_PK] = @Original_IPOCOD"& _ 
                "_CDF_COD_CODE_FK_PK) AND ([IPOCOD_NUM_ORD_PK] = @Original_IPOCOD_NUM_ORD_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IPOCOD_INFPO_COMMENT_DUREE] ([IPOCOD_IPO_CODE_FK_PK], [I"& _ 
                "POCOD_IPO_NUM_SEQ_FK_PK], [IPOCOD_CDF_COD_CODE_FK_PK], [IPOCOD_NUM_ORD_PK]) VALU"& _ 
                "ES (@IPOCOD_IPO_CODE_FK_PK, @IPOCOD_IPO_NUM_SEQ_FK_PK, @IPOCOD_CDF_COD_CODE_FK_P"& _ 
                "K, @IPOCOD_NUM_ORD_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPOCOD_IPO_CODE_FK_PK, IPOCOD_IPO_NUM_SEQ_FK_PK,"& _ 
                " IPOCOD_CDF_COD_CODE_FK_PK, IPOCOD_NUM_ORD_PK FROM THERIAQUE.IPOCOD_INFPO_COMMEN"& _ 
                "T_DUREE WHERE (IPOCOD_CDF_COD_CODE_FK_PK = @IPOCOD_CDF_COD_CODE_FK_PK) AND (IPOC"& _ 
                "OD_IPO_CODE_FK_PK = @IPOCOD_IPO_CODE_FK_PK) AND (IPOCOD_IPO_NUM_SEQ_FK_PK = @IPO"& _ 
                "COD_IPO_NUM_SEQ_FK_PK) AND (IPOCOD_NUM_ORD_PK = @IPOCOD_NUM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IPOCOD_INFPO_COMMENT_DUREE] SET [IPOCOD_IPO_CODE_FK_PK] = @IP"& _ 
                "OCOD_IPO_CODE_FK_PK, [IPOCOD_IPO_NUM_SEQ_FK_PK] = @IPOCOD_IPO_NUM_SEQ_FK_PK, [IP"& _ 
                "OCOD_CDF_COD_CODE_FK_PK] = @IPOCOD_CDF_COD_CODE_FK_PK, [IPOCOD_NUM_ORD_PK] = @IP"& _ 
                "OCOD_NUM_ORD_PK WHERE (([IPOCOD_IPO_CODE_FK_PK] = @Original_IPOCOD_IPO_CODE_FK_P"& _ 
                "K) AND ([IPOCOD_IPO_NUM_SEQ_FK_PK] = @Original_IPOCOD_IPO_NUM_SEQ_FK_PK) AND ([I"& _ 
                "POCOD_CDF_COD_CODE_FK_PK] = @Original_IPOCOD_CDF_COD_CODE_FK_PK) AND ([IPOCOD_NU"& _ 
                "M_ORD_PK] = @Original_IPOCOD_NUM_ORD_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPOCOD_IPO_CODE_FK_PK, IPOCOD"& _ 
                "_IPO_NUM_SEQ_FK_PK, IPOCOD_CDF_COD_CODE_FK_PK, IPOCOD_NUM_ORD_PK FROM THERIAQUE."& _ 
                "IPOCOD_INFPO_COMMENT_DUREE WHERE (IPOCOD_CDF_COD_CODE_FK_PK = @IPOCOD_CDF_COD_CO"& _ 
                "DE_FK_PK) AND (IPOCOD_IPO_CODE_FK_PK = @IPOCOD_IPO_CODE_FK_PK) AND (IPOCOD_IPO_N"& _ 
                "UM_SEQ_FK_PK = @IPOCOD_IPO_NUM_SEQ_FK_PK) AND (IPOCOD_NUM_ORD_PK = @IPOCOD_NUM_O"& _ 
                "RD_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_NUM_SEQ_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_CDF_COD_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOCOD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPOCOD_IPO_CODE_FK_PK, IPOCOD_IPO_NUM_SEQ_FK_PK, IPOCOD_CDF_COD_CODE_FK_PK" & _
                ", IPOCOD_NUM_ORD_PK FROM THERIAQUE.IPOCOD_INFPO_COMMENT_DUREE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPOCOD_IPO_CODE_FK_PK, IPOCOD_IPO_NUM_SEQ_FK_PK, IPOCOD_CDF_COD_CODE_FK_PK" & _
                ", IPOCOD_NUM_ORD_PK FROM THERIAQUE.IPOCOD_INFPO_COMMENT_DUREE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where IPOCOD_IPO_" & _
                "CODE_FK_PK = @IPOCOD_IPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOCOD_IPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOCOD_IPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable = New dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable, ByVal IPOCOD_IPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOCOD_IPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IPOCOD_IPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOCOD_IPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable = New dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.IPOCOD_INFPO_COMMENT_DUREEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPOCOD_INFPO_COMMENT_DUREE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IPOCOD_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal Original_IPOCOD_NUM_ORD_PK As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IPOCOD_IPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IPOCOD_IPO_NUM_SEQ_FK_PK, Short)
            If (Original_IPOCOD_CDF_COD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOCOD_CDF_COD_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IPOCOD_CDF_COD_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IPOCOD_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IPOCOD_IPO_CODE_FK_PK As Integer, ByVal IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal IPOCOD_NUM_ORD_PK As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPOCOD_IPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPOCOD_IPO_NUM_SEQ_FK_PK, Short)
            If (IPOCOD_CDF_COD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOCOD_CDF_COD_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPOCOD_CDF_COD_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPOCOD_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IPOCOD_IPO_CODE_FK_PK As Integer, ByVal IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal IPOCOD_NUM_ORD_PK As Short, ByVal Original_IPOCOD_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal Original_IPOCOD_NUM_ORD_PK As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPOCOD_IPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPOCOD_IPO_NUM_SEQ_FK_PK, Short)
            If (IPOCOD_CDF_COD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOCOD_CDF_COD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPOCOD_CDF_COD_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPOCOD_NUM_ORD_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IPOCOD_IPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IPOCOD_IPO_NUM_SEQ_FK_PK, Short)
            If (Original_IPOCOD_CDF_COD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOCOD_CDF_COD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IPOCOD_CDF_COD_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IPOCOD_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IPOCOD_IPO_CODE_FK_PK As Integer, ByVal Original_IPOCOD_IPO_NUM_SEQ_FK_PK As Short, ByVal Original_IPOCOD_CDF_COD_CODE_FK_PK As String, ByVal Original_IPOCOD_NUM_ORD_PK As Short) As Integer
            Return Me.Update(Original_IPOCOD_IPO_CODE_FK_PK, Original_IPOCOD_IPO_NUM_SEQ_FK_PK, Original_IPOCOD_CDF_COD_CODE_FK_PK, Original_IPOCOD_NUM_ORD_PK, Original_IPOCOD_IPO_CODE_FK_PK, Original_IPOCOD_IPO_NUM_SEQ_FK_PK, Original_IPOCOD_CDF_COD_CODE_FK_PK, Original_IPOCOD_NUM_ORD_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOCOAD_FPOSO_COMMENT_ADAPTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCOAD_FPOSO_COMMENT_ADAPT"
            tableMapping.ColumnMappings.Add("FPOCOAD_FPO_CODE_FK_PK", "FPOCOAD_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOAD_CDF_COAD_CODE_FK_PK", "FPOCOAD_CDF_COAD_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOAD_NUM_ORD_PK", "FPOCOAD_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCOAD_FPOSO_COMMENT_ADAPT] WHERE (([FPOCOAD_FPO_CODE_F" & _
                "K_PK] = @Original_FPOCOAD_FPO_CODE_FK_PK) AND ([FPOCOAD_CDF_COAD_CODE_FK_PK] = @" & _
                "Original_FPOCOAD_CDF_COAD_CODE_FK_PK) AND ([FPOCOAD_NUM_ORD_PK] = @Original_FPOC" & _
                "OAD_NUM_ORD_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCOAD_FPOSO_COMMENT_ADAPT] ([FPOCOAD_FPO_CODE_FK_PK], " & _
                "[FPOCOAD_CDF_COAD_CODE_FK_PK], [FPOCOAD_NUM_ORD_PK]) VALUES (@FPOCOAD_FPO_CODE_F" & _
                "K_PK, @FPOCOAD_CDF_COAD_CODE_FK_PK, @FPOCOAD_NUM_ORD_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCOAD_FPO_CO" & _
                "DE_FK_PK, FPOCOAD_CDF_COAD_CODE_FK_PK, FPOCOAD_NUM_ORD_PK FROM THERIAQUE.FPOCOAD" & _
                "_FPOSO_COMMENT_ADAPT WHERE (FPOCOAD_CDF_COAD_CODE_FK_PK = @FPOCOAD_CDF_COAD_CODE" & _
                "_FK_PK) AND (FPOCOAD_FPO_CODE_FK_PK = @FPOCOAD_FPO_CODE_FK_PK) AND (FPOCOAD_NUM_" & _
                "ORD_PK = @FPOCOAD_NUM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCOAD_FPOSO_COMMENT_ADAPT] SET [FPOCOAD_FPO_CODE_FK_PK] = @" & _
                "FPOCOAD_FPO_CODE_FK_PK, [FPOCOAD_CDF_COAD_CODE_FK_PK] = @FPOCOAD_CDF_COAD_CODE_F" & _
                "K_PK, [FPOCOAD_NUM_ORD_PK] = @FPOCOAD_NUM_ORD_PK WHERE (([FPOCOAD_FPO_CODE_FK_PK" & _
                "] = @Original_FPOCOAD_FPO_CODE_FK_PK) AND ([FPOCOAD_CDF_COAD_CODE_FK_PK] = @Orig" & _
                "inal_FPOCOAD_CDF_COAD_CODE_FK_PK) AND ([FPOCOAD_NUM_ORD_PK] = @Original_FPOCOAD_" & _
                "NUM_ORD_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCOAD_FPO_CODE_FK_PK, FPOCOAD_CDF_COAD_CODE_FK_PK, FPOCO" & _
                "AD_NUM_ORD_PK FROM THERIAQUE.FPOCOAD_FPOSO_COMMENT_ADAPT WHERE (FPOCOAD_CDF_COAD" & _
                "_CODE_FK_PK = @FPOCOAD_CDF_COAD_CODE_FK_PK) AND (FPOCOAD_FPO_CODE_FK_PK = @FPOCO" & _
                "AD_FPO_CODE_FK_PK) AND (FPOCOAD_NUM_ORD_PK = @FPOCOAD_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_CDF_COAD_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAD_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCOAD_FPO_CODE_FK_PK, FPOCOAD_CDF_COAD_CODE_FK_PK, FPOCOAD_NUM_ORD_PK FR" & _
                "OM THERIAQUE.FPOCOAD_FPOSO_COMMENT_ADAPT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCOAD_FPO_CODE_FK_PK, FPOCOAD_CDF_COAD_CODE_FK_PK, FPOCOAD_NUM_ORD_PK FR" & _
                "OM THERIAQUE.FPOCOAD_FPOSO_COMMENT_ADAPT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCOAD_FPO_CODE_FK_PK = @FPOCOA" & _
                "D_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAD_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable = New dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable, ByVal FPOCOAD_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOAD_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOCOAD_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOAD_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable = New dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCOAD_FPOSO_COMMENT_ADAPTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCOAD_FPOSO_COMMENT_ADAPT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal Original_FPOCOAD_NUM_ORD_PK As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCOAD_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOAD_CDF_COAD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOAD_CDF_COAD_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCOAD_CDF_COAD_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOCOAD_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal FPOCOAD_NUM_ORD_PK As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCOAD_FPO_CODE_FK_PK, Integer)
            If (FPOCOAD_CDF_COAD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOAD_CDF_COAD_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCOAD_CDF_COAD_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOCOAD_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal FPOCOAD_NUM_ORD_PK As Short, ByVal Original_FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal Original_FPOCOAD_NUM_ORD_PK As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCOAD_FPO_CODE_FK_PK, Integer)
            If (FPOCOAD_CDF_COAD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOAD_CDF_COAD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCOAD_CDF_COAD_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOCOAD_NUM_ORD_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCOAD_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOAD_CDF_COAD_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOAD_CDF_COAD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOCOAD_CDF_COAD_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOCOAD_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOCOAD_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOAD_CDF_COAD_CODE_FK_PK As String, ByVal Original_FPOCOAD_NUM_ORD_PK As Short) As Integer
            Return Me.Update(Original_FPOCOAD_FPO_CODE_FK_PK, Original_FPOCOAD_CDF_COAD_CODE_FK_PK, Original_FPOCOAD_NUM_ORD_PK, Original_FPOCOAD_FPO_CODE_FK_PK, Original_FPOCOAD_CDF_COAD_CODE_FK_PK, Original_FPOCOAD_NUM_ORD_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOCOSU_FPOSO_COMMENT_SURVEILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCOSU_FPOSO_COMMENT_SURVEIL"
            tableMapping.ColumnMappings.Add("FPOCOSU_FPO_CODE_FK_PK", "FPOCOSU_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOSU_CDF_COSU_CODE_FK_PK", "FPOCOSU_CDF_COSU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOSU_NUM_ORD_PK", "FPOCOSU_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCOSU_FPOSO_COMMENT_SURVEIL] WHERE (([FPOCOSU_FPO_CODE"& _ 
                "_FK_PK] = @Original_FPOCOSU_FPO_CODE_FK_PK) AND ([FPOCOSU_CDF_COSU_CODE_FK_PK] ="& _ 
                " @Original_FPOCOSU_CDF_COSU_CODE_FK_PK) AND ([FPOCOSU_NUM_ORD_PK] = @Original_FP"& _ 
                "OCOSU_NUM_ORD_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOSU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCOSU_FPOSO_COMMENT_SURVEIL] ([FPOCOSU_FPO_CODE_FK_PK]"& _ 
                ", [FPOCOSU_CDF_COSU_CODE_FK_PK], [FPOCOSU_NUM_ORD_PK]) VALUES (@FPOCOSU_FPO_CODE"& _ 
                "_FK_PK, @FPOCOSU_CDF_COSU_CODE_FK_PK, @FPOCOSU_NUM_ORD_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOCOSU_FPO_"& _ 
                "CODE_FK_PK, FPOCOSU_CDF_COSU_CODE_FK_PK, FPOCOSU_NUM_ORD_PK FROM THERIAQUE.FPOCO"& _ 
                "SU_FPOSO_COMMENT_SURVEIL WHERE (FPOCOSU_CDF_COSU_CODE_FK_PK = @FPOCOSU_CDF_COSU_"& _ 
                "CODE_FK_PK) AND (FPOCOSU_FPO_CODE_FK_PK = @FPOCOSU_FPO_CODE_FK_PK) AND (FPOCOSU_"& _ 
                "NUM_ORD_PK = @FPOCOSU_NUM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCOSU_FPOSO_COMMENT_SURVEIL] SET [FPOCOSU_FPO_CODE_FK_PK] ="& _ 
                " @FPOCOSU_FPO_CODE_FK_PK, [FPOCOSU_CDF_COSU_CODE_FK_PK] = @FPOCOSU_CDF_COSU_CODE"& _ 
                "_FK_PK, [FPOCOSU_NUM_ORD_PK] = @FPOCOSU_NUM_ORD_PK WHERE (([FPOCOSU_FPO_CODE_FK_"& _ 
                "PK] = @Original_FPOCOSU_FPO_CODE_FK_PK) AND ([FPOCOSU_CDF_COSU_CODE_FK_PK] = @Or"& _ 
                "iginal_FPOCOSU_CDF_COSU_CODE_FK_PK) AND ([FPOCOSU_NUM_ORD_PK] = @Original_FPOCOS"& _ 
                "U_NUM_ORD_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOCOSU_FPO_CODE_FK_PK, FPOCOSU_CDF_COSU_CODE_FK_PK, FPO"& _ 
                "COSU_NUM_ORD_PK FROM THERIAQUE.FPOCOSU_FPOSO_COMMENT_SURVEIL WHERE (FPOCOSU_CDF_"& _ 
                "COSU_CODE_FK_PK = @FPOCOSU_CDF_COSU_CODE_FK_PK) AND (FPOCOSU_FPO_CODE_FK_PK = @F"& _ 
                "POCOSU_FPO_CODE_FK_PK) AND (FPOCOSU_NUM_ORD_PK = @FPOCOSU_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_CDF_COSU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOSU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCOSU_FPO_CODE_FK_PK, FPOCOSU_CDF_COSU_CODE_FK_PK, FPOCOSU_NUM_ORD_PK FR" & _
                "OM THERIAQUE.FPOCOSU_FPOSO_COMMENT_SURVEIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCOSU_FPO_CODE_FK_PK, FPOCOSU_CDF_COSU_CODE_FK_PK, FPOCOSU_NUM_ORD_PK FR" & _
                "OM THERIAQUE.FPOCOSU_FPOSO_COMMENT_SURVEIL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCOSU_FPO_CODE_FK_PK = @FPOC" & _
                "OSU_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOSU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable = New dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable, ByVal FPOCOSU_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOSU_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOCOSU_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOSU_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable = New dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCOSU_FPOSO_COMMENT_SURVEILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCOSU_FPOSO_COMMENT_SURVEIL")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal Original_FPOCOSU_NUM_ORD_PK As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCOSU_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOSU_CDF_COSU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOSU_CDF_COSU_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCOSU_CDF_COSU_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOCOSU_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal FPOCOSU_NUM_ORD_PK As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCOSU_FPO_CODE_FK_PK, Integer)
            If (FPOCOSU_CDF_COSU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOSU_CDF_COSU_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCOSU_CDF_COSU_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOCOSU_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal FPOCOSU_NUM_ORD_PK As Short, ByVal Original_FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal Original_FPOCOSU_NUM_ORD_PK As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCOSU_FPO_CODE_FK_PK, Integer)
            If (FPOCOSU_CDF_COSU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOSU_CDF_COSU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCOSU_CDF_COSU_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOCOSU_NUM_ORD_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCOSU_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOSU_CDF_COSU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOSU_CDF_COSU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOCOSU_CDF_COSU_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOCOSU_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOCOSU_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOSU_CDF_COSU_CODE_FK_PK As String, ByVal Original_FPOCOSU_NUM_ORD_PK As Short) As Integer
            Return Me.Update(Original_FPOCOSU_FPO_CODE_FK_PK, Original_FPOCOSU_CDF_COSU_CODE_FK_PK, Original_FPOCOSU_NUM_ORD_PK, Original_FPOCOSU_FPO_CODE_FK_PK, Original_FPOCOSU_CDF_COSU_CODE_FK_PK, Original_FPOCOSU_NUM_ORD_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOCOAU_FPOSO_COMMENT_AUTRETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOCOAU_FPOSO_COMMENT_AUTRE"
            tableMapping.ColumnMappings.Add("FPOCOAU_FPO_CODE_FK_PK", "FPOCOAU_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOAU_CDF_COAU_CODE_FK_PK", "FPOCOAU_CDF_COAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOCOAU_NUM_ORD_PK", "FPOCOAU_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOCOAU_FPOSO_COMMENT_AUTRE] WHERE (([FPOCOAU_FPO_CODE_F" & _
                "K_PK] = @Original_FPOCOAU_FPO_CODE_FK_PK) AND ([FPOCOAU_CDF_COAU_CODE_FK_PK] = @" & _
                "Original_FPOCOAU_CDF_COAU_CODE_FK_PK) AND ([FPOCOAU_NUM_ORD_PK] = @Original_FPOC" & _
                "OAU_NUM_ORD_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOCOAU_FPOSO_COMMENT_AUTRE] ([FPOCOAU_FPO_CODE_FK_PK], " & _
                "[FPOCOAU_CDF_COAU_CODE_FK_PK], [FPOCOAU_NUM_ORD_PK]) VALUES (@FPOCOAU_FPO_CODE_F" & _
                "K_PK, @FPOCOAU_CDF_COAU_CODE_FK_PK, @FPOCOAU_NUM_ORD_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCOAU_FPO_CO" & _
                "DE_FK_PK, FPOCOAU_CDF_COAU_CODE_FK_PK, FPOCOAU_NUM_ORD_PK FROM THERIAQUE.FPOCOAU" & _
                "_FPOSO_COMMENT_AUTRE WHERE (FPOCOAU_CDF_COAU_CODE_FK_PK = @FPOCOAU_CDF_COAU_CODE" & _
                "_FK_PK) AND (FPOCOAU_FPO_CODE_FK_PK = @FPOCOAU_FPO_CODE_FK_PK) AND (FPOCOAU_NUM_" & _
                "ORD_PK = @FPOCOAU_NUM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOCOAU_FPOSO_COMMENT_AUTRE] SET [FPOCOAU_FPO_CODE_FK_PK] = @" & _
                "FPOCOAU_FPO_CODE_FK_PK, [FPOCOAU_CDF_COAU_CODE_FK_PK] = @FPOCOAU_CDF_COAU_CODE_F" & _
                "K_PK, [FPOCOAU_NUM_ORD_PK] = @FPOCOAU_NUM_ORD_PK WHERE (([FPOCOAU_FPO_CODE_FK_PK" & _
                "] = @Original_FPOCOAU_FPO_CODE_FK_PK) AND ([FPOCOAU_CDF_COAU_CODE_FK_PK] = @Orig" & _
                "inal_FPOCOAU_CDF_COAU_CODE_FK_PK) AND ([FPOCOAU_NUM_ORD_PK] = @Original_FPOCOAU_" & _
                "NUM_ORD_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOCOAU_FPO_CODE_FK_PK, FPOCOAU_CDF_COAU_CODE_FK_PK, FPOCO" & _
                "AU_NUM_ORD_PK FROM THERIAQUE.FPOCOAU_FPOSO_COMMENT_AUTRE WHERE (FPOCOAU_CDF_COAU" & _
                "_CODE_FK_PK = @FPOCOAU_CDF_COAU_CODE_FK_PK) AND (FPOCOAU_FPO_CODE_FK_PK = @FPOCO" & _
                "AU_FPO_CODE_FK_PK) AND (FPOCOAU_NUM_ORD_PK = @FPOCOAU_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_CDF_COAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOCOAU_NUM_ORD_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_NUM_ORD_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOCOAU_FPO_CODE_FK_PK, FPOCOAU_CDF_COAU_CODE_FK_PK, FPOCOAU_NUM_ORD_PK FR" & _
                "OM THERIAQUE.FPOCOAU_FPOSO_COMMENT_AUTRE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOCOAU_FPO_CODE_FK_PK, FPOCOAU_CDF_COAU_CODE_FK_PK, FPOCOAU_NUM_ORD_PK FR" & _
                "OM THERIAQUE.FPOCOAU_FPOSO_COMMENT_AUTRE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOCOAU_FPO_CODE_FK_PK = @FPOCOA" & _
                "U_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOCOAU_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable = New dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable, ByVal FPOCOAU_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOAU_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOCOAU_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOCOAU_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable = New dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOCOAU_FPOSO_COMMENT_AUTREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOCOAU_FPOSO_COMMENT_AUTRE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal Original_FPOCOAU_NUM_ORD_PK As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOCOAU_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOAU_CDF_COAU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOAU_CDF_COAU_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOCOAU_CDF_COAU_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOCOAU_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal FPOCOAU_NUM_ORD_PK As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOCOAU_FPO_CODE_FK_PK, Integer)
            If (FPOCOAU_CDF_COAU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOAU_CDF_COAU_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOCOAU_CDF_COAU_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOCOAU_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal FPOCOAU_NUM_ORD_PK As Short, ByVal Original_FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal Original_FPOCOAU_NUM_ORD_PK As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOCOAU_FPO_CODE_FK_PK, Integer)
            If (FPOCOAU_CDF_COAU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOCOAU_CDF_COAU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOCOAU_CDF_COAU_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOCOAU_NUM_ORD_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOCOAU_FPO_CODE_FK_PK, Integer)
            If (Original_FPOCOAU_CDF_COAU_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOCOAU_CDF_COAU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOCOAU_CDF_COAU_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOCOAU_NUM_ORD_PK, Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOCOAU_FPO_CODE_FK_PK As Integer, ByVal Original_FPOCOAU_CDF_COAU_CODE_FK_PK As String, ByVal Original_FPOCOAU_NUM_ORD_PK As Short) As Integer
            Return Me.Update(Original_FPOCOAU_FPO_CODE_FK_PK, Original_FPOCOAU_CDF_COAU_CODE_FK_PK, Original_FPOCOAU_NUM_ORD_PK, Original_FPOCOAU_FPO_CODE_FK_PK, Original_FPOCOAU_CDF_COAU_CODE_FK_PK, Original_FPOCOAU_NUM_ORD_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOBIB_REFERENCE_BIBLIOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOBIB_REFERENCE_BIBLIO"
            tableMapping.ColumnMappings.Add("FPOBIB_FPO_CODE_FK_PK", "FPOBIB_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOBIB_TEXTE", "FPOBIB_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOBIB_REFERENCE_BIBLIO] WHERE (([FPOBIB_FPO_CODE_FK_PK]"& _ 
                " = @Original_FPOBIB_FPO_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOBIB_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOBIB_REFERENCE_BIBLIO] ([FPOBIB_FPO_CODE_FK_PK], [FPOB"& _ 
                "IB_TEXTE]) VALUES (@FPOBIB_FPO_CODE_FK_PK, @FPOBIB_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOBIB_FPO_CO"& _ 
                "DE_FK_PK, FPOBIB_TEXTE FROM THERIAQUE.FPOBIB_REFERENCE_BIBLIO WHERE (FPOBIB_FPO_"& _ 
                "CODE_FK_PK = @FPOBIB_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOBIB_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOBIB_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOBIB_REFERENCE_BIBLIO] SET [FPOBIB_FPO_CODE_FK_PK] = @FPOBI"& _ 
                "B_FPO_CODE_FK_PK, [FPOBIB_TEXTE] = @FPOBIB_TEXTE WHERE (([FPOBIB_FPO_CODE_FK_PK]"& _ 
                " = @Original_FPOBIB_FPO_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOBIB_FPO_CODE_FK_PK, FPOBIB_TEXT"& _ 
                "E FROM THERIAQUE.FPOBIB_REFERENCE_BIBLIO WHERE (FPOBIB_FPO_CODE_FK_PK = @FPOBIB_"& _ 
                "FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOBIB_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOBIB_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOBIB_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOBIB_FPO_CODE_FK_PK, FPOBIB_TEXTE FROM THERIAQUE.FPOBIB_REFERENCE_BIBLIO" & _
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOBIB_FPO_CODE_FK_PK, FPOBIB_TEXTE FROM THERIAQUE.FPOBIB_REFERENCE_BIBLIO" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOBIB_FPO_CODE_FK_PK = @FPOBIB_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOBIB_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOBIB_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable = New dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable, ByVal FPOBIB_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOBIB_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOBIB_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOBIB_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable = New dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOBIB_REFERENCE_BIBLIODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOBIB_REFERENCE_BIBLIO")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOBIB_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOBIB_FPO_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOBIB_FPO_CODE_FK_PK As Integer, ByVal FPOBIB_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOBIB_FPO_CODE_FK_PK, Integer)
            If (FPOBIB_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOBIB_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOBIB_FPO_CODE_FK_PK As Integer, ByVal FPOBIB_TEXTE As String, ByVal Original_FPOBIB_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOBIB_FPO_CODE_FK_PK, Integer)
            If (FPOBIB_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOBIB_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOBIB_FPO_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOBIB_TEXTE As String, ByVal Original_FPOBIB_FPO_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPOBIB_FPO_CODE_FK_PK, FPOBIB_TEXTE, Original_FPOBIB_FPO_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPOAFS_POSO_AFSSAPSTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOAFS_POSO_AFSSAPS"
            tableMapping.ColumnMappings.Add("FPOAFS_FPO_CODE_FK_PK", "FPOAFS_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOAFS_SP_CODE_FK_PK", "FPOAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOAFS_DATE_PK", "FPOAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FPOAFS_CDF_DOCUMENT_FK_PK", "FPOAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPOAFS_POSO_AFSSAPS] WHERE (([FPOAFS_FPO_CODE_FK_PK] = @" & _
                "Original_FPOAFS_FPO_CODE_FK_PK) AND ([FPOAFS_SP_CODE_FK_PK] = @Original_FPOAFS_S" & _
                "P_CODE_FK_PK) AND ([FPOAFS_DATE_PK] = @Original_FPOAFS_DATE_PK) AND ([FPOAFS_CDF" & _
                "_DOCUMENT_FK_PK] = @Original_FPOAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPOAFS_POSO_AFSSAPS] ([FPOAFS_FPO_CODE_FK_PK], [FPOAFS_S" & _
                "P_CODE_FK_PK], [FPOAFS_DATE_PK], [FPOAFS_CDF_DOCUMENT_FK_PK]) VALUES (@FPOAFS_FP" & _
                "O_CODE_FK_PK, @FPOAFS_SP_CODE_FK_PK, @FPOAFS_DATE_PK, @FPOAFS_CDF_DOCUMENT_FK_PK" & _
                ");" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOAFS_FPO_CODE_FK_PK, FPOAFS_SP_CODE_FK_PK, FPOAFS_DATE_PK, FPOAFS_C" & _
                "DF_DOCUMENT_FK_PK FROM THERIAQUE.FPOAFS_POSO_AFSSAPS WHERE (FPOAFS_CDF_DOCUMENT_" & _
                "FK_PK = @FPOAFS_CDF_DOCUMENT_FK_PK) AND (FPOAFS_DATE_PK = @FPOAFS_DATE_PK) AND (" & _
                "FPOAFS_FPO_CODE_FK_PK = @FPOAFS_FPO_CODE_FK_PK) AND (FPOAFS_SP_CODE_FK_PK = @FPO" & _
                "AFS_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPOAFS_POSO_AFSSAPS] SET [FPOAFS_FPO_CODE_FK_PK] = @FPOAFS_FP" & _
                "O_CODE_FK_PK, [FPOAFS_SP_CODE_FK_PK] = @FPOAFS_SP_CODE_FK_PK, [FPOAFS_DATE_PK] =" & _
                " @FPOAFS_DATE_PK, [FPOAFS_CDF_DOCUMENT_FK_PK] = @FPOAFS_CDF_DOCUMENT_FK_PK WHERE" & _
                " (([FPOAFS_FPO_CODE_FK_PK] = @Original_FPOAFS_FPO_CODE_FK_PK) AND ([FPOAFS_SP_CO" & _
                "DE_FK_PK] = @Original_FPOAFS_SP_CODE_FK_PK) AND ([FPOAFS_DATE_PK] = @Original_FP" & _
                "OAFS_DATE_PK) AND ([FPOAFS_CDF_DOCUMENT_FK_PK] = @Original_FPOAFS_CDF_DOCUMENT_F" & _
                "K_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPOAFS_FPO_CODE_FK_PK, FPOAFS_SP_CODE_FK_PK, FPOAFS_DATE_PK, FPO" & _
                "AFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPOAFS_POSO_AFSSAPS WHERE (FPOAFS_CDF_DOCU" & _
                "MENT_FK_PK = @FPOAFS_CDF_DOCUMENT_FK_PK) AND (FPOAFS_DATE_PK = @FPOAFS_DATE_PK) " & _
                "AND (FPOAFS_FPO_CODE_FK_PK = @FPOAFS_FPO_CODE_FK_PK) AND (FPOAFS_SP_CODE_FK_PK =" & _
                " @FPOAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOAFS_FPO_CODE_FK_PK, FPOAFS_SP_CODE_FK_PK, FPOAFS_DATE_PK, FPOAFS_CDF_DO" & _
                "CUMENT_FK_PK FROM THERIAQUE.FPOAFS_POSO_AFSSAPS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOAFS_FPO_CODE_FK_PK, FPOAFS_SP_CODE_FK_PK, FPOAFS_DATE_PK, FPOAFS_CDF_DO" & _
                "CUMENT_FK_PK FROM THERIAQUE.FPOAFS_POSO_AFSSAPS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FPOAFS_FPO_CODE_FK_PK = @" & _
                "FPOAFS_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOAFS_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOAFS_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable = New dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable, ByVal FPOAFS_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOAFS_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPOAFS_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOAFS_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable = New dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.FPOAFS_POSO_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "FPOAFS_POSO_AFSSAPS")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPOAFS_FPO_CODE_FK_PK As Integer, ByVal Original_FPOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPOAFS_DATE_PK As Date, ByVal Original_FPOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOAFS_FPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOAFS_DATE_PK, Date)
            If (Original_FPOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPOAFS_FPO_CODE_FK_PK As Integer, ByVal FPOAFS_SP_CODE_FK_PK As Integer, ByVal FPOAFS_DATE_PK As Date, ByVal FPOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOAFS_FPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOAFS_DATE_PK, Date)
            If (FPOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPOAFS_FPO_CODE_FK_PK As Integer, ByVal FPOAFS_SP_CODE_FK_PK As Integer, ByVal FPOAFS_DATE_PK As Date, ByVal FPOAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FPOAFS_FPO_CODE_FK_PK As Integer, ByVal Original_FPOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPOAFS_DATE_PK As Date, ByVal Original_FPOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOAFS_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOAFS_DATE_PK, Date)
            If (FPOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOAFS_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPOAFS_DATE_PK, Date)
            If (Original_FPOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FPOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FPOAFS_FPO_CODE_FK_PK As Integer, ByVal Original_FPOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPOAFS_DATE_PK As Date, ByVal Original_FPOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Return Me.Update(Original_FPOAFS_FPO_CODE_FK_PK, Original_FPOAFS_SP_CODE_FK_PK, Original_FPOAFS_DATE_PK, Original_FPOAFS_CDF_DOCUMENT_FK_PK, Original_FPOAFS_FPO_CODE_FK_PK, Original_FPOAFS_SP_CODE_FK_PK, Original_FPOAFS_DATE_PK, Original_FPOAFS_CDF_DOCUMENT_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IPODUREE_INFOPOSOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPODUREE_INFOPOSO"
            tableMapping.ColumnMappings.Add("IPODUREE_FPO_CODE_PK_FK", "IPODUREE_FPO_CODE_PK_FK")
            tableMapping.ColumnMappings.Add("IPODUREE_SP_CODE_SQ_PK_FK", "IPODUREE_SP_CODE_SQ_PK_FK")
            tableMapping.ColumnMappings.Add("IPODUREE_SP_CIPUCD", "IPODUREE_SP_CIPUCD")
            tableMapping.ColumnMappings.Add("IPODUREE_DUREE_MIN", "IPODUREE_DUREE_MIN")
            tableMapping.ColumnMappings.Add("IPODUREE_DUREE_MAX", "IPODUREE_DUREE_MAX")
            tableMapping.ColumnMappings.Add("ID", "ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[IPODUREE_INFOPOSO] WHERE (((@IsNull_IPODUREE_FPO_CODE_PK"& _ 
                "_FK = 1 AND [IPODUREE_FPO_CODE_PK_FK] IS NULL) OR ([IPODUREE_FPO_CODE_PK_FK] = @"& _ 
                "Original_IPODUREE_FPO_CODE_PK_FK)) AND ((@IsNull_IPODUREE_SP_CODE_SQ_PK_FK = 1 A"& _ 
                "ND [IPODUREE_SP_CODE_SQ_PK_FK] IS NULL) OR ([IPODUREE_SP_CODE_SQ_PK_FK] = @Origi"& _ 
                "nal_IPODUREE_SP_CODE_SQ_PK_FK)) AND ((@IsNull_IPODUREE_SP_CIPUCD = 1 AND [IPODUR"& _ 
                "EE_SP_CIPUCD] IS NULL) OR ([IPODUREE_SP_CIPUCD] = @Original_IPODUREE_SP_CIPUCD))"& _ 
                " AND ((@IsNull_IPODUREE_DUREE_MIN = 1 AND [IPODUREE_DUREE_MIN] IS NULL) OR ([IPO"& _ 
                "DUREE_DUREE_MIN] = @Original_IPODUREE_DUREE_MIN)) AND ((@IsNull_IPODUREE_DUREE_M"& _ 
                "AX = 1 AND [IPODUREE_DUREE_MAX] IS NULL) OR ([IPODUREE_DUREE_MAX] = @Original_IP"& _ 
                "ODUREE_DUREE_MAX)) AND ([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_FPO_CODE_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_FPO_CODE_PK_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_FPO_CODE_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_FPO_CODE_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_SP_CIPUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_DUREE_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_DUREE_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_DUREE_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_DUREE_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_DUREE_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_DUREE_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[IPODUREE_INFOPOSO] ([IPODUREE_FPO_CODE_PK_FK], [IPODUREE"& _ 
                "_SP_CODE_SQ_PK_FK], [IPODUREE_SP_CIPUCD], [IPODUREE_DUREE_MIN], [IPODUREE_DUREE_"& _ 
                "MAX]) VALUES (@IPODUREE_FPO_CODE_PK_FK, @IPODUREE_SP_CODE_SQ_PK_FK, @IPODUREE_SP"& _ 
                "_CIPUCD, @IPODUREE_DUREE_MIN, @IPODUREE_DUREE_MAX);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPODUREE_FPO_CODE_PK"& _ 
                "_FK, IPODUREE_SP_CODE_SQ_PK_FK, IPODUREE_SP_CIPUCD, IPODUREE_DUREE_MIN, IPODUREE"& _ 
                "_DUREE_MAX, ID FROM theriaque.IPODUREE_INFOPOSO WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_FPO_CODE_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_FPO_CODE_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_DUREE_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_DUREE_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[IPODUREE_INFOPOSO] SET [IPODUREE_FPO_CODE_PK_FK] = @IPODUREE_"& _ 
                "FPO_CODE_PK_FK, [IPODUREE_SP_CODE_SQ_PK_FK] = @IPODUREE_SP_CODE_SQ_PK_FK, [IPODU"& _ 
                "REE_SP_CIPUCD] = @IPODUREE_SP_CIPUCD, [IPODUREE_DUREE_MIN] = @IPODUREE_DUREE_MIN"& _ 
                ", [IPODUREE_DUREE_MAX] = @IPODUREE_DUREE_MAX WHERE (((@IsNull_IPODUREE_FPO_CODE_"& _ 
                "PK_FK = 1 AND [IPODUREE_FPO_CODE_PK_FK] IS NULL) OR ([IPODUREE_FPO_CODE_PK_FK] ="& _ 
                " @Original_IPODUREE_FPO_CODE_PK_FK)) AND ((@IsNull_IPODUREE_SP_CODE_SQ_PK_FK = 1"& _ 
                " AND [IPODUREE_SP_CODE_SQ_PK_FK] IS NULL) OR ([IPODUREE_SP_CODE_SQ_PK_FK] = @Ori"& _ 
                "ginal_IPODUREE_SP_CODE_SQ_PK_FK)) AND ((@IsNull_IPODUREE_SP_CIPUCD = 1 AND [IPOD"& _ 
                "UREE_SP_CIPUCD] IS NULL) OR ([IPODUREE_SP_CIPUCD] = @Original_IPODUREE_SP_CIPUCD"& _ 
                ")) AND ((@IsNull_IPODUREE_DUREE_MIN = 1 AND [IPODUREE_DUREE_MIN] IS NULL) OR ([I"& _ 
                "PODUREE_DUREE_MIN] = @Original_IPODUREE_DUREE_MIN)) AND ((@IsNull_IPODUREE_DUREE"& _ 
                "_MAX = 1 AND [IPODUREE_DUREE_MAX] IS NULL) OR ([IPODUREE_DUREE_MAX] = @Original_"& _ 
                "IPODUREE_DUREE_MAX)) AND ([ID] = @Original_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IPODUREE_FPO_CODE_PK_FK"& _ 
                ", IPODUREE_SP_CODE_SQ_PK_FK, IPODUREE_SP_CIPUCD, IPODUREE_DUREE_MIN, IPODUREE_DU"& _ 
                "REE_MAX, ID FROM theriaque.IPODUREE_INFOPOSO WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_FPO_CODE_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_FPO_CODE_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_DUREE_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODUREE_DUREE_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_FPO_CODE_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_FPO_CODE_PK_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_FPO_CODE_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_FPO_CODE_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CODE_SQ_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_SP_CIPUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_DUREE_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_DUREE_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_DUREE_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODUREE_DUREE_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODUREE_DUREE_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODUREE_DUREE_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "IPODUREE_DUREE_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPODUREE_FPO_CODE_PK_FK, IPODUREE_SP_CODE_SQ_PK_FK, IPODUREE_SP_CIPUCD, IP" & _
                "ODUREE_DUREE_MIN, IPODUREE_DUREE_MAX, ID FROM theriaque.IPODUREE_INFOPOSO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPODUREE_FPO_CODE_PK_FK, IPODUREE_SP_CODE_SQ_PK_FK, IPODUREE_SP_CIPUCD, IP" & _
                "ODUREE_DUREE_MIN, IPODUREE_DUREE_MAX, ID FROM theriaque.IPODUREE_INFOPOSO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where" & _
                " @condition like '%$' + cast( IPODUREE_SP_CODE_SQ_PK_FK as varchar) + '$%'"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@condition", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable = New dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable, ByVal condition As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (condition Is Nothing) Then
                Throw New Global.System.ArgumentNullException("condition")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(condition, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal condition As String) As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (condition Is Nothing) Then
                Throw New Global.System.ArgumentNullException("condition")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(condition, String)
            End If
            Dim dataTable As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable = New dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.IPODUREE_INFOPOSODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPODUREE_INFOPOSO")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IPODUREE_FPO_CODE_PK_FK As Global.System.Nullable(Of Integer), ByVal Original_IPODUREE_SP_CODE_SQ_PK_FK As Global.System.Nullable(Of Integer), ByVal Original_IPODUREE_SP_CIPUCD As String, ByVal Original_IPODUREE_DUREE_MIN As Global.System.Nullable(Of Decimal), ByVal Original_IPODUREE_DUREE_MAX As Global.System.Nullable(Of Decimal), ByVal Original_ID As Integer) As Integer
            If (Original_IPODUREE_FPO_CODE_PK_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IPODUREE_FPO_CODE_PK_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_SP_CODE_SQ_PK_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IPODUREE_SP_CODE_SQ_PK_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_SP_CIPUCD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_IPODUREE_SP_CIPUCD, String)
            End If
            If (Original_IPODUREE_DUREE_MIN.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IPODUREE_DUREE_MIN.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_DUREE_MAX.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_IPODUREE_DUREE_MAX.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IPODUREE_FPO_CODE_PK_FK As Global.System.Nullable(Of Integer), ByVal IPODUREE_SP_CODE_SQ_PK_FK As Global.System.Nullable(Of Integer), ByVal IPODUREE_SP_CIPUCD As String, ByVal IPODUREE_DUREE_MIN As Global.System.Nullable(Of Decimal), ByVal IPODUREE_DUREE_MAX As Global.System.Nullable(Of Decimal)) As Integer
            If (IPODUREE_FPO_CODE_PK_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPODUREE_FPO_CODE_PK_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (IPODUREE_SP_CODE_SQ_PK_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPODUREE_SP_CODE_SQ_PK_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IPODUREE_SP_CIPUCD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPODUREE_SP_CIPUCD, String)
            End If
            If (IPODUREE_DUREE_MIN.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPODUREE_DUREE_MIN.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IPODUREE_DUREE_MAX.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IPODUREE_DUREE_MAX.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IPODUREE_FPO_CODE_PK_FK As Global.System.Nullable(Of Integer), ByVal IPODUREE_SP_CODE_SQ_PK_FK As Global.System.Nullable(Of Integer), ByVal IPODUREE_SP_CIPUCD As String, ByVal IPODUREE_DUREE_MIN As Global.System.Nullable(Of Decimal), ByVal IPODUREE_DUREE_MAX As Global.System.Nullable(Of Decimal), ByVal Original_IPODUREE_FPO_CODE_PK_FK As Global.System.Nullable(Of Integer), ByVal Original_IPODUREE_SP_CODE_SQ_PK_FK As Global.System.Nullable(Of Integer), ByVal Original_IPODUREE_SP_CIPUCD As String, ByVal Original_IPODUREE_DUREE_MIN As Global.System.Nullable(Of Decimal), ByVal Original_IPODUREE_DUREE_MAX As Global.System.Nullable(Of Decimal), ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (IPODUREE_FPO_CODE_PK_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPODUREE_FPO_CODE_PK_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (IPODUREE_SP_CODE_SQ_PK_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPODUREE_SP_CODE_SQ_PK_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IPODUREE_SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPODUREE_SP_CIPUCD, String)
            End If
            If (IPODUREE_DUREE_MIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPODUREE_DUREE_MIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IPODUREE_DUREE_MAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IPODUREE_DUREE_MAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_FPO_CODE_PK_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IPODUREE_FPO_CODE_PK_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_SP_CODE_SQ_PK_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IPODUREE_SP_CODE_SQ_PK_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_IPODUREE_SP_CIPUCD, String)
            End If
            If (Original_IPODUREE_DUREE_MIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_IPODUREE_DUREE_MIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODUREE_DUREE_MAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_IPODUREE_DUREE_MAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID, Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IPODUREE_FPO_CODE_PK_FK As Global.System.Nullable(Of Integer), ByVal IPODUREE_SP_CODE_SQ_PK_FK As Global.System.Nullable(Of Integer), ByVal IPODUREE_SP_CIPUCD As String, ByVal IPODUREE_DUREE_MIN As Global.System.Nullable(Of Decimal), ByVal IPODUREE_DUREE_MAX As Global.System.Nullable(Of Decimal), ByVal Original_IPODUREE_FPO_CODE_PK_FK As Global.System.Nullable(Of Integer), ByVal Original_IPODUREE_SP_CODE_SQ_PK_FK As Global.System.Nullable(Of Integer), ByVal Original_IPODUREE_SP_CIPUCD As String, ByVal Original_IPODUREE_DUREE_MIN As Global.System.Nullable(Of Decimal), ByVal Original_IPODUREE_DUREE_MAX As Global.System.Nullable(Of Decimal), ByVal Original_ID As Integer) As Integer
            Return Me.Update(IPODUREE_FPO_CODE_PK_FK, IPODUREE_SP_CODE_SQ_PK_FK, IPODUREE_SP_CIPUCD, IPODUREE_DUREE_MIN, IPODUREE_DUREE_MAX, Original_IPODUREE_FPO_CODE_PK_FK, Original_IPODUREE_SP_CODE_SQ_PK_FK, Original_IPODUREE_SP_CIPUCD, Original_IPODUREE_DUREE_MIN, Original_IPODUREE_DUREE_MAX, Original_ID, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IPOJ_INFOPOSO_JOURNALIERETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPOJ_INFOPOSO_JOURNALIERE"
            tableMapping.ColumnMappings.Add("IPOJ_FPO_CODE_FK_PK", "IPOJ_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOJ_NUM_SEQ_PK", "IPOJ_NUM_SEQ_PK")
            tableMapping.ColumnMappings.Add("IPOJ_CDF_NAPO_CODE_FK", "IPOJ_CDF_NAPO_CODE_FK")
            tableMapping.ColumnMappings.Add("IPOJ_NUM_ORD", "IPOJ_NUM_ORD")
            tableMapping.ColumnMappings.Add("IPOJ_SP_CODE_FK_PK", "IPOJ_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPOJ_SP_CIPUCD", "IPOJ_SP_CIPUCD")
            tableMapping.ColumnMappings.Add("IPOJ_DJMIN", "IPOJ_DJMIN")
            tableMapping.ColumnMappings.Add("IPOJ_DJMAX", "IPOJ_DJMAX")
            tableMapping.ColumnMappings.Add("IPOJ_DTMIN", "IPOJ_DTMIN")
            tableMapping.ColumnMappings.Add("IPOJ_DTMAX", "IPOJ_DTMAX")
            tableMapping.ColumnMappings.Add("IPOJ_NATUCD_CDF_CODE_FK", "IPOJ_NATUCD_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("IPOJ_NATUCD_CDF_NUM_FK", "IPOJ_NATUCD_CDF_NUM_FK")
            tableMapping.ColumnMappings.Add("IPOJ_DONANTH_CDF_CODE_FK", "IPOJ_DONANTH_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("IPOJ_CONT", "IPOJ_CONT")
            tableMapping.ColumnMappings.Add("IPOJ_VOL_CONT", "IPOJ_VOL_CONT")
            tableMapping.ColumnMappings.Add("IPOJ_VOL_CONT_UNIT", "IPOJ_VOL_CONT_UNIT")
            tableMapping.ColumnMappings.Add("IPOJ_UCD13", "IPOJ_UCD13")
            tableMapping.ColumnMappings.Add("ID", "ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[IPOJ_INFOPOSO_JOURNALIERE] WHERE (([IPOJ_FPO_CODE_FK_PK]" & _
                " = @Original_IPOJ_FPO_CODE_FK_PK) AND ((@IsNull_IPOJ_NUM_SEQ_PK = 1 AND [IPOJ_NU" & _
                "M_SEQ_PK] IS NULL) OR ([IPOJ_NUM_SEQ_PK] = @Original_IPOJ_NUM_SEQ_PK)) AND ((@Is" & _
                "Null_IPOJ_CDF_NAPO_CODE_FK = 1 AND [IPOJ_CDF_NAPO_CODE_FK] IS NULL) OR ([IPOJ_CD" & _
                "F_NAPO_CODE_FK] = @Original_IPOJ_CDF_NAPO_CODE_FK)) AND ((@IsNull_IPOJ_NUM_ORD =" & _
                " 1 AND [IPOJ_NUM_ORD] IS NULL) OR ([IPOJ_NUM_ORD] = @Original_IPOJ_NUM_ORD)) AND" & _
                " ([IPOJ_SP_CODE_FK_PK] = @Original_IPOJ_SP_CODE_FK_PK) AND ([IPOJ_SP_CIPUCD] = @" & _
                "Original_IPOJ_SP_CIPUCD) AND ((@IsNull_IPOJ_DJMIN = 1 AND [IPOJ_DJMIN] IS NULL) " & _
                "OR ([IPOJ_DJMIN] = @Original_IPOJ_DJMIN)) AND ((@IsNull_IPOJ_DJMAX = 1 AND [IPOJ" & _
                "_DJMAX] IS NULL) OR ([IPOJ_DJMAX] = @Original_IPOJ_DJMAX)) AND ((@IsNull_IPOJ_DT" & _
                "MIN = 1 AND [IPOJ_DTMIN] IS NULL) OR ([IPOJ_DTMIN] = @Original_IPOJ_DTMIN)) AND " & _
                "((@IsNull_IPOJ_DTMAX = 1 AND [IPOJ_DTMAX] IS NULL) OR ([IPOJ_DTMAX] = @Original_" & _
                "IPOJ_DTMAX)) AND ((@IsNull_IPOJ_NATUCD_CDF_CODE_FK = 1 AND [IPOJ_NATUCD_CDF_CODE" & _
                "_FK] IS NULL) OR ([IPOJ_NATUCD_CDF_CODE_FK] = @Original_IPOJ_NATUCD_CDF_CODE_FK)" & _
                ") AND ((@IsNull_IPOJ_NATUCD_CDF_NUM_FK = 1 AND [IPOJ_NATUCD_CDF_NUM_FK] IS NULL)" & _
                " OR ([IPOJ_NATUCD_CDF_NUM_FK] = @Original_IPOJ_NATUCD_CDF_NUM_FK)) AND ((@IsNull" & _
                "_IPOJ_DONANTH_CDF_CODE_FK = 1 AND [IPOJ_DONANTH_CDF_CODE_FK] IS NULL) OR ([IPOJ_" & _
                "DONANTH_CDF_CODE_FK] = @Original_IPOJ_DONANTH_CDF_CODE_FK)) AND ((@IsNull_IPOJ_C" & _
                "ONT = 1 AND [IPOJ_CONT] IS NULL) OR ([IPOJ_CONT] = @Original_IPOJ_CONT)) AND ((@" & _
                "IsNull_IPOJ_VOL_CONT = 1 AND [IPOJ_VOL_CONT] IS NULL) OR ([IPOJ_VOL_CONT] = @Ori" & _
                "ginal_IPOJ_VOL_CONT)) AND ((@IsNull_IPOJ_VOL_CONT_UNIT = 1 AND [IPOJ_VOL_CONT_UN" & _
                "IT] IS NULL) OR ([IPOJ_VOL_CONT_UNIT] = @Original_IPOJ_VOL_CONT_UNIT)) AND ((@Is" & _
                "Null_IPOJ_UCD13 = 1 AND [IPOJ_UCD13] IS NULL) OR ([IPOJ_UCD13] = @Original_IPOJ_" & _
                "UCD13)) AND ([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_ORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DJMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DJMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DJMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DJMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DTMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DTMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DTMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DTMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DTMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DTMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_VOL_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPOJ_VOL_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_VOL_CONT_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_UCD13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_UCD13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_UCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_UCD13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[IPOJ_INFOPOSO_JOURNALIERE] ([IPOJ_FPO_CODE_FK_PK], [IPOJ" & _
                "_NUM_SEQ_PK], [IPOJ_CDF_NAPO_CODE_FK], [IPOJ_NUM_ORD], [IPOJ_SP_CODE_FK_PK], [IP" & _
                "OJ_SP_CIPUCD], [IPOJ_DJMIN], [IPOJ_DJMAX], [IPOJ_DTMIN], [IPOJ_DTMAX], [IPOJ_NAT" & _
                "UCD_CDF_CODE_FK], [IPOJ_NATUCD_CDF_NUM_FK], [IPOJ_DONANTH_CDF_CODE_FK], [IPOJ_CO" & _
                "NT], [IPOJ_VOL_CONT], [IPOJ_VOL_CONT_UNIT], [IPOJ_UCD13]) VALUES (@IPOJ_FPO_CODE" & _
                "_FK_PK, @IPOJ_NUM_SEQ_PK, @IPOJ_CDF_NAPO_CODE_FK, @IPOJ_NUM_ORD, @IPOJ_SP_CODE_F" & _
                "K_PK, @IPOJ_SP_CIPUCD, @IPOJ_DJMIN, @IPOJ_DJMAX, @IPOJ_DTMIN, @IPOJ_DTMAX, @IPOJ" & _
                "_NATUCD_CDF_CODE_FK, @IPOJ_NATUCD_CDF_NUM_FK, @IPOJ_DONANTH_CDF_CODE_FK, @IPOJ_C" & _
                "ONT, @IPOJ_VOL_CONT, @IPOJ_VOL_CONT_UNIT, @IPOJ_UCD13);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IPOJ_FPO_CODE_FK" & _
                "_PK, IPOJ_NUM_SEQ_PK, IPOJ_CDF_NAPO_CODE_FK, IPOJ_NUM_ORD, IPOJ_SP_CODE_FK_PK, I" & _
                "POJ_SP_CIPUCD, IPOJ_DJMIN, IPOJ_DJMAX, IPOJ_DTMIN, IPOJ_DTMAX, IPOJ_NATUCD_CDF_C" & _
                "ODE_FK, IPOJ_NATUCD_CDF_NUM_FK, IPOJ_DONANTH_CDF_CODE_FK, IPOJ_CONT, IPOJ_VOL_CO" & _
                "NT, IPOJ_VOL_CONT_UNIT, IPOJ_UCD13, ID FROM theriaque.IPOJ_INFOPOSO_JOURNALIERE " & _
                "WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DTMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DTMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPOJ_VOL_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_UCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_UCD13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[IPOJ_INFOPOSO_JOURNALIERE] SET [IPOJ_FPO_CODE_FK_PK] = @IPOJ_" & _
                "FPO_CODE_FK_PK, [IPOJ_NUM_SEQ_PK] = @IPOJ_NUM_SEQ_PK, [IPOJ_CDF_NAPO_CODE_FK] = " & _
                "@IPOJ_CDF_NAPO_CODE_FK, [IPOJ_NUM_ORD] = @IPOJ_NUM_ORD, [IPOJ_SP_CODE_FK_PK] = @" & _
                "IPOJ_SP_CODE_FK_PK, [IPOJ_SP_CIPUCD] = @IPOJ_SP_CIPUCD, [IPOJ_DJMIN] = @IPOJ_DJM" & _
                "IN, [IPOJ_DJMAX] = @IPOJ_DJMAX, [IPOJ_DTMIN] = @IPOJ_DTMIN, [IPOJ_DTMAX] = @IPOJ" & _
                "_DTMAX, [IPOJ_NATUCD_CDF_CODE_FK] = @IPOJ_NATUCD_CDF_CODE_FK, [IPOJ_NATUCD_CDF_N" & _
                "UM_FK] = @IPOJ_NATUCD_CDF_NUM_FK, [IPOJ_DONANTH_CDF_CODE_FK] = @IPOJ_DONANTH_CDF" & _
                "_CODE_FK, [IPOJ_CONT] = @IPOJ_CONT, [IPOJ_VOL_CONT] = @IPOJ_VOL_CONT, [IPOJ_VOL_" & _
                "CONT_UNIT] = @IPOJ_VOL_CONT_UNIT, [IPOJ_UCD13] = @IPOJ_UCD13 WHERE (([IPOJ_FPO_C" & _
                "ODE_FK_PK] = @Original_IPOJ_FPO_CODE_FK_PK) AND ((@IsNull_IPOJ_NUM_SEQ_PK = 1 AN" & _
                "D [IPOJ_NUM_SEQ_PK] IS NULL) OR ([IPOJ_NUM_SEQ_PK] = @Original_IPOJ_NUM_SEQ_PK))" & _
                " AND ((@IsNull_IPOJ_CDF_NAPO_CODE_FK = 1 AND [IPOJ_CDF_NAPO_CODE_FK] IS NULL) OR" & _
                " ([IPOJ_CDF_NAPO_CODE_FK] = @Original_IPOJ_CDF_NAPO_CODE_FK)) AND ((@IsNull_IPOJ" & _
                "_NUM_ORD = 1 AND [IPOJ_NUM_ORD] IS NULL) OR ([IPOJ_NUM_ORD] = @Original_IPOJ_NUM" & _
                "_ORD)) AND ([IPOJ_SP_CODE_FK_PK] = @Original_IPOJ_SP_CODE_FK_PK) AND ([IPOJ_SP_C" & _
                "IPUCD] = @Original_IPOJ_SP_CIPUCD) AND ((@IsNull_IPOJ_DJMIN = 1 AND [IPOJ_DJMIN]" & _
                " IS NULL) OR ([IPOJ_DJMIN] = @Original_IPOJ_DJMIN)) AND ((@IsNull_IPOJ_DJMAX = 1" & _
                " AND [IPOJ_DJMAX] IS NULL) OR ([IPOJ_DJMAX] = @Original_IPOJ_DJMAX)) AND ((@IsNu" & _
                "ll_IPOJ_DTMIN = 1 AND [IPOJ_DTMIN] IS NULL) OR ([IPOJ_DTMIN] = @Original_IPOJ_DT" & _
                "MIN)) AND ((@IsNull_IPOJ_DTMAX = 1 AND [IPOJ_DTMAX] IS NULL) OR ([IPOJ_DTMAX] = " & _
                "@Original_IPOJ_DTMAX)) AND ((@IsNull_IPOJ_NATUCD_CDF_CODE_FK = 1 AND [IPOJ_NATUC" & _
                "D_CDF_CODE_FK] IS NULL) OR ([IPOJ_NATUCD_CDF_CODE_FK] = @Original_IPOJ_NATUCD_CD" & _
                "F_CODE_FK)) AND ((@IsNull_IPOJ_NATUCD_CDF_NUM_FK = 1 AND [IPOJ_NATUCD_CDF_NUM_FK" & _
                "] IS NULL) OR ([IPOJ_NATUCD_CDF_NUM_FK] = @Original_IPOJ_NATUCD_CDF_NUM_FK)) AND" & _
                " ((@IsNull_IPOJ_DONANTH_CDF_CODE_FK = 1 AND [IPOJ_DONANTH_CDF_CODE_FK] IS NULL) " & _
                "OR ([IPOJ_DONANTH_CDF_CODE_FK] = @Original_IPOJ_DONANTH_CDF_CODE_FK)) AND ((@IsN" & _
                "ull_IPOJ_CONT = 1 AND [IPOJ_CONT] IS NULL) OR ([IPOJ_CONT] = @Original_IPOJ_CONT" & _
                ")) AND ((@IsNull_IPOJ_VOL_CONT = 1 AND [IPOJ_VOL_CONT] IS NULL) OR ([IPOJ_VOL_CO" & _
                "NT] = @Original_IPOJ_VOL_CONT)) AND ((@IsNull_IPOJ_VOL_CONT_UNIT = 1 AND [IPOJ_V" & _
                "OL_CONT_UNIT] IS NULL) OR ([IPOJ_VOL_CONT_UNIT] = @Original_IPOJ_VOL_CONT_UNIT))" & _
                " AND ((@IsNull_IPOJ_UCD13 = 1 AND [IPOJ_UCD13] IS NULL) OR ([IPOJ_UCD13] = @Orig" & _
                "inal_IPOJ_UCD13)) AND ([ID] = @Original_ID));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IPOJ_FPO_CODE_FK_PK, IPOJ_" & _
                "NUM_SEQ_PK, IPOJ_CDF_NAPO_CODE_FK, IPOJ_NUM_ORD, IPOJ_SP_CODE_FK_PK, IPOJ_SP_CIP" & _
                "UCD, IPOJ_DJMIN, IPOJ_DJMAX, IPOJ_DTMIN, IPOJ_DTMAX, IPOJ_NATUCD_CDF_CODE_FK, IP" & _
                "OJ_NATUCD_CDF_NUM_FK, IPOJ_DONANTH_CDF_CODE_FK, IPOJ_CONT, IPOJ_VOL_CONT, IPOJ_V" & _
                "OL_CONT_UNIT, IPOJ_UCD13, ID FROM theriaque.IPOJ_INFOPOSO_JOURNALIERE WHERE (ID " & _
                "= @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DTMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DTMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPOJ_VOL_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_UCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_UCD13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CDF_NAPO_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_ORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DJMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DJMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DJMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DJMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DJMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DTMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DTMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DTMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DTMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DTMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DTMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPOJ_DTMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_VOL_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPOJ_VOL_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_VOL_CONT_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPOJ_UCD13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_UCD13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPOJ_UCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_UCD13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPOJ_FPO_CODE_FK_PK, IPOJ_NUM_SEQ_PK, IPOJ_CDF_NAPO_CODE_FK, IPOJ_NUM_ORD," & _
                " IPOJ_SP_CODE_FK_PK, IPOJ_SP_CIPUCD, IPOJ_DJMIN, IPOJ_DJMAX, IPOJ_DTMIN, IPOJ_DT" & _
                "MAX, IPOJ_NATUCD_CDF_CODE_FK, IPOJ_NATUCD_CDF_NUM_FK, IPOJ_DONANTH_CDF_CODE_FK, " & _
                "IPOJ_CONT, IPOJ_VOL_CONT, IPOJ_VOL_CONT_UNIT, IPOJ_UCD13, ID FROM theriaque.IPOJ" & _
                "_INFOPOSO_JOURNALIERE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPOJ_FPO_CODE_FK_PK, IPOJ_NUM_SEQ_PK, IPOJ_CDF_NAPO_CODE_FK, IPOJ_NUM_ORD," & _
                " IPOJ_SP_CODE_FK_PK, IPOJ_SP_CIPUCD, IPOJ_DJMIN, IPOJ_DJMAX, IPOJ_DTMIN, IPOJ_DT" & _
                "MAX, IPOJ_NATUCD_CDF_CODE_FK, IPOJ_NATUCD_CDF_NUM_FK, IPOJ_DONANTH_CDF_CODE_FK, " & _
                "IPOJ_CONT, IPOJ_VOL_CONT, IPOJ_VOL_CONT_UNIT, IPOJ_UCD13, ID FROM theriaque.IPOJ" & _
                "_INFOPOSO_JOURNALIERE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where IPOJ_FPO_CODE_FK_PK=@IPOJ_FPO_CODE_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPOJ_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IPOJ_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable = New dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable, ByVal IPOJ_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOJ_FPO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IPOJ_FPO_CODE_FK_PK As Integer) As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPOJ_FPO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable = New dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.IPOJ_INFOPOSO_JOURNALIEREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPOJ_INFOPOSO_JOURNALIERE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_IPOJ_FPO_CODE_FK_PK As Integer, _
                    ByVal Original_IPOJ_NUM_SEQ_PK As Global.System.Nullable(Of Integer), _
                    ByVal Original_IPOJ_CDF_NAPO_CODE_FK As String, _
                    ByVal Original_IPOJ_NUM_ORD As Global.System.Nullable(Of Integer), _
                    ByVal Original_IPOJ_SP_CODE_FK_PK As Integer, _
                    ByVal Original_IPOJ_SP_CIPUCD As String, _
                    ByVal Original_IPOJ_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DTMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DTMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_IPOJ_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_IPOJ_DONANTH_CDF_CODE_FK As String, _
                    ByVal Original_IPOJ_CONT As String, _
                    ByVal Original_IPOJ_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_VOL_CONT_UNIT As String, _
                    ByVal Original_IPOJ_UCD13 As String, _
                    ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IPOJ_FPO_CODE_FK_PK, Integer)
            If (Original_IPOJ_NUM_SEQ_PK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IPOJ_NUM_SEQ_PK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_CDF_NAPO_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IPOJ_CDF_NAPO_CODE_FK, String)
            End If
            If (Original_IPOJ_NUM_ORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IPOJ_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IPOJ_SP_CODE_FK_PK, Integer)
            If (Original_IPOJ_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOJ_SP_CIPUCD")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IPOJ_SP_CIPUCD, String)
            End If
            If (Original_IPOJ_DJMIN.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_IPOJ_DJMIN.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_DJMAX.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_IPOJ_DJMAX.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_DTMIN.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IPOJ_DTMIN.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_DTMAX.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_IPOJ_DTMAX.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_IPOJ_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_IPOJ_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_IPOJ_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_IPOJ_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_IPOJ_DONANTH_CDF_CODE_FK, String)
            End If
            If (Original_IPOJ_CONT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_IPOJ_CONT, String)
            End If
            If (Original_IPOJ_VOL_CONT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IPOJ_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_IPOJ_VOL_CONT_UNIT, String)
            End If
            If (Original_IPOJ_UCD13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_IPOJ_UCD13, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal IPOJ_FPO_CODE_FK_PK As Integer, _
                    ByVal IPOJ_NUM_SEQ_PK As Global.System.Nullable(Of Integer), _
                    ByVal IPOJ_CDF_NAPO_CODE_FK As String, _
                    ByVal IPOJ_NUM_ORD As Global.System.Nullable(Of Integer), _
                    ByVal IPOJ_SP_CODE_FK_PK As Integer, _
                    ByVal IPOJ_SP_CIPUCD As String, _
                    ByVal IPOJ_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DTMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DTMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_NATUCD_CDF_CODE_FK As String, _
                    ByVal IPOJ_NATUCD_CDF_NUM_FK As String, _
                    ByVal IPOJ_DONANTH_CDF_CODE_FK As String, _
                    ByVal IPOJ_CONT As String, _
                    ByVal IPOJ_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_VOL_CONT_UNIT As String, _
                    ByVal IPOJ_UCD13 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPOJ_FPO_CODE_FK_PK, Integer)
            If (IPOJ_NUM_SEQ_PK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPOJ_NUM_SEQ_PK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_CDF_NAPO_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPOJ_CDF_NAPO_CODE_FK, String)
            End If
            If (IPOJ_NUM_ORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPOJ_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(IPOJ_SP_CODE_FK_PK, Integer)
            If (IPOJ_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOJ_SP_CIPUCD")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IPOJ_SP_CIPUCD, String)
            End If
            If (IPOJ_DJMIN.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IPOJ_DJMIN.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_DJMAX.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IPOJ_DJMAX.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_DTMIN.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IPOJ_DTMIN.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_DTMAX.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IPOJ_DTMAX.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IPOJ_NATUCD_CDF_CODE_FK, String)
            End If
            If (IPOJ_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IPOJ_NATUCD_CDF_NUM_FK, String)
            End If
            If (IPOJ_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IPOJ_DONANTH_CDF_CODE_FK, String)
            End If
            If (IPOJ_CONT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IPOJ_CONT, String)
            End If
            If (IPOJ_VOL_CONT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IPOJ_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(IPOJ_VOL_CONT_UNIT, String)
            End If
            If (IPOJ_UCD13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(IPOJ_UCD13, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal IPOJ_FPO_CODE_FK_PK As Integer, _
                    ByVal IPOJ_NUM_SEQ_PK As Global.System.Nullable(Of Integer), _
                    ByVal IPOJ_CDF_NAPO_CODE_FK As String, _
                    ByVal IPOJ_NUM_ORD As Global.System.Nullable(Of Integer), _
                    ByVal IPOJ_SP_CODE_FK_PK As Integer, _
                    ByVal IPOJ_SP_CIPUCD As String, _
                    ByVal IPOJ_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DTMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DTMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_NATUCD_CDF_CODE_FK As String, _
                    ByVal IPOJ_NATUCD_CDF_NUM_FK As String, _
                    ByVal IPOJ_DONANTH_CDF_CODE_FK As String, _
                    ByVal IPOJ_CONT As String, _
                    ByVal IPOJ_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_VOL_CONT_UNIT As String, _
                    ByVal IPOJ_UCD13 As String, _
                    ByVal Original_IPOJ_FPO_CODE_FK_PK As Integer, _
                    ByVal Original_IPOJ_NUM_SEQ_PK As Global.System.Nullable(Of Integer), _
                    ByVal Original_IPOJ_CDF_NAPO_CODE_FK As String, _
                    ByVal Original_IPOJ_NUM_ORD As Global.System.Nullable(Of Integer), _
                    ByVal Original_IPOJ_SP_CODE_FK_PK As Integer, _
                    ByVal Original_IPOJ_SP_CIPUCD As String, _
                    ByVal Original_IPOJ_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DTMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DTMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_IPOJ_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_IPOJ_DONANTH_CDF_CODE_FK As String, _
                    ByVal Original_IPOJ_CONT As String, _
                    ByVal Original_IPOJ_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_VOL_CONT_UNIT As String, _
                    ByVal Original_IPOJ_UCD13 As String, _
                    ByVal Original_ID As Integer, _
                    ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPOJ_FPO_CODE_FK_PK, Integer)
            If (IPOJ_NUM_SEQ_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPOJ_NUM_SEQ_PK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_CDF_NAPO_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPOJ_CDF_NAPO_CODE_FK, String)
            End If
            If (IPOJ_NUM_ORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPOJ_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IPOJ_SP_CODE_FK_PK, Integer)
            If (IPOJ_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPOJ_SP_CIPUCD")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IPOJ_SP_CIPUCD, String)
            End If
            If (IPOJ_DJMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IPOJ_DJMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_DJMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IPOJ_DJMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_DTMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IPOJ_DTMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_DTMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IPOJ_DTMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IPOJ_NATUCD_CDF_CODE_FK, String)
            End If
            If (IPOJ_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IPOJ_NATUCD_CDF_NUM_FK, String)
            End If
            If (IPOJ_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IPOJ_DONANTH_CDF_CODE_FK, String)
            End If
            If (IPOJ_CONT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IPOJ_CONT, String)
            End If
            If (IPOJ_VOL_CONT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IPOJ_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (IPOJ_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(IPOJ_VOL_CONT_UNIT, String)
            End If
            If (IPOJ_UCD13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(IPOJ_UCD13, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_IPOJ_FPO_CODE_FK_PK, Integer)
            If (Original_IPOJ_NUM_SEQ_PK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_IPOJ_NUM_SEQ_PK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_CDF_NAPO_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_IPOJ_CDF_NAPO_CODE_FK, String)
            End If
            If (Original_IPOJ_NUM_ORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_IPOJ_NUM_ORD.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_IPOJ_SP_CODE_FK_PK, Integer)
            If (Original_IPOJ_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPOJ_SP_CIPUCD")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_IPOJ_SP_CIPUCD, String)
            End If
            If (Original_IPOJ_DJMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_IPOJ_DJMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_DJMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_IPOJ_DJMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_DTMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_IPOJ_DTMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_DTMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_IPOJ_DTMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_IPOJ_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_IPOJ_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_IPOJ_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_IPOJ_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_IPOJ_DONANTH_CDF_CODE_FK, String)
            End If
            If (Original_IPOJ_CONT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_IPOJ_CONT, String)
            End If
            If (Original_IPOJ_VOL_CONT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_IPOJ_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_IPOJ_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_IPOJ_VOL_CONT_UNIT, String)
            End If
            If (Original_IPOJ_UCD13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_IPOJ_UCD13, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_ID, Integer)
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal IPOJ_FPO_CODE_FK_PK As Integer, _
                    ByVal IPOJ_NUM_SEQ_PK As Global.System.Nullable(Of Integer), _
                    ByVal IPOJ_CDF_NAPO_CODE_FK As String, _
                    ByVal IPOJ_NUM_ORD As Global.System.Nullable(Of Integer), _
                    ByVal IPOJ_SP_CODE_FK_PK As Integer, _
                    ByVal IPOJ_SP_CIPUCD As String, _
                    ByVal IPOJ_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DTMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_DTMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_NATUCD_CDF_CODE_FK As String, _
                    ByVal IPOJ_NATUCD_CDF_NUM_FK As String, _
                    ByVal IPOJ_DONANTH_CDF_CODE_FK As String, _
                    ByVal IPOJ_CONT As String, _
                    ByVal IPOJ_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal IPOJ_VOL_CONT_UNIT As String, _
                    ByVal IPOJ_UCD13 As String, _
                    ByVal Original_IPOJ_FPO_CODE_FK_PK As Integer, _
                    ByVal Original_IPOJ_NUM_SEQ_PK As Global.System.Nullable(Of Integer), _
                    ByVal Original_IPOJ_CDF_NAPO_CODE_FK As String, _
                    ByVal Original_IPOJ_NUM_ORD As Global.System.Nullable(Of Integer), _
                    ByVal Original_IPOJ_SP_CODE_FK_PK As Integer, _
                    ByVal Original_IPOJ_SP_CIPUCD As String, _
                    ByVal Original_IPOJ_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DTMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_DTMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_IPOJ_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_IPOJ_DONANTH_CDF_CODE_FK As String, _
                    ByVal Original_IPOJ_CONT As String, _
                    ByVal Original_IPOJ_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPOJ_VOL_CONT_UNIT As String, _
                    ByVal Original_IPOJ_UCD13 As String, _
                    ByVal Original_ID As Integer) As Integer
            Return Me.Update(IPOJ_FPO_CODE_FK_PK, IPOJ_NUM_SEQ_PK, IPOJ_CDF_NAPO_CODE_FK, IPOJ_NUM_ORD, IPOJ_SP_CODE_FK_PK, IPOJ_SP_CIPUCD, IPOJ_DJMIN, IPOJ_DJMAX, IPOJ_DTMIN, IPOJ_DTMAX, IPOJ_NATUCD_CDF_CODE_FK, IPOJ_NATUCD_CDF_NUM_FK, IPOJ_DONANTH_CDF_CODE_FK, IPOJ_CONT, IPOJ_VOL_CONT, IPOJ_VOL_CONT_UNIT, IPOJ_UCD13, Original_IPOJ_FPO_CODE_FK_PK, Original_IPOJ_NUM_SEQ_PK, Original_IPOJ_CDF_NAPO_CODE_FK, Original_IPOJ_NUM_ORD, Original_IPOJ_SP_CODE_FK_PK, Original_IPOJ_SP_CIPUCD, Original_IPOJ_DJMIN, Original_IPOJ_DJMAX, Original_IPOJ_DTMIN, Original_IPOJ_DTMAX, Original_IPOJ_NATUCD_CDF_CODE_FK, Original_IPOJ_NATUCD_CDF_NUM_FK, Original_IPOJ_DONANTH_CDF_CODE_FK, Original_IPOJ_CONT, Original_IPOJ_VOL_CONT, Original_IPOJ_VOL_CONT_UNIT, Original_IPOJ_UCD13, Original_ID, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CATC_CLASSEATCTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CATC_CLASSEATC"
            tableMapping.ColumnMappings.Add("CATC_CODE_PK", "CATC_CODE_PK")
            tableMapping.ColumnMappings.Add("CATC_CATC_CODE_FK", "CATC_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("CATC_NOMF", "CATC_NOMF")
            tableMapping.ColumnMappings.Add("CATC_NOMA", "CATC_NOMA")
            tableMapping.ColumnMappings.Add("CATC_DATECR", "CATC_DATECR")
            tableMapping.ColumnMappings.Add("CATC_DATEMJ", "CATC_DATEMJ")
            tableMapping.ColumnMappings.Add("CATC_TEXTE", "CATC_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[CATC_CLASSEATC] WHERE (([CATC_CODE_PK] = @Original_CATC_"& _ 
                "CODE_PK) AND ((@IsNull_CATC_CATC_CODE_FK = 1 AND [CATC_CATC_CODE_FK] IS NULL) OR"& _ 
                " ([CATC_CATC_CODE_FK] = @Original_CATC_CATC_CODE_FK)) AND ([CATC_NOMF] = @Origin"& _ 
                "al_CATC_NOMF) AND ([CATC_NOMA] = @Original_CATC_NOMA) AND ([CATC_DATECR] = @Orig"& _ 
                "inal_CATC_DATECR) AND ((@IsNull_CATC_DATEMJ = 1 AND [CATC_DATEMJ] IS NULL) OR (["& _ 
                "CATC_DATEMJ] = @Original_CATC_DATEMJ)) AND ((@IsNull_CATC_TEXTE = 1 AND [CATC_TE"& _ 
                "XTE] IS NULL) OR ([CATC_TEXTE] = @Original_CATC_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CATC_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_NOMF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CATC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CATC_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CATC_CLASSEATC] ([CATC_CODE_PK], [CATC_CATC_CODE_FK], [C"& _ 
                "ATC_NOMF], [CATC_NOMA], [CATC_DATECR], [CATC_DATEMJ], [CATC_TEXTE]) VALUES (@CAT"& _ 
                "C_CODE_PK, @CATC_CATC_CODE_FK, @CATC_NOMF, @CATC_NOMA, @CATC_DATECR, @CATC_DATEM"& _ 
                "J, @CATC_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, "& _ 
                "CATC_DATECR, CATC_DATEMJ, CATC_TEXTE FROM theriaque.CATC_CLASSEATC WHERE (CATC_C"& _ 
                "ODE_PK = @CATC_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_NOMF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[CATC_CLASSEATC] SET [CATC_CODE_PK] = @CATC_CODE_PK, [CATC_CAT"& _ 
                "C_CODE_FK] = @CATC_CATC_CODE_FK, [CATC_NOMF] = @CATC_NOMF, [CATC_NOMA] = @CATC_N"& _ 
                "OMA, [CATC_DATECR] = @CATC_DATECR, [CATC_DATEMJ] = @CATC_DATEMJ, [CATC_TEXTE] = "& _ 
                "@CATC_TEXTE WHERE (([CATC_CODE_PK] = @Original_CATC_CODE_PK) AND ((@IsNull_CATC_"& _ 
                "CATC_CODE_FK = 1 AND [CATC_CATC_CODE_FK] IS NULL) OR ([CATC_CATC_CODE_FK] = @Ori"& _ 
                "ginal_CATC_CATC_CODE_FK)) AND ([CATC_NOMF] = @Original_CATC_NOMF) AND ([CATC_NOM"& _ 
                "A] = @Original_CATC_NOMA) AND ([CATC_DATECR] = @Original_CATC_DATECR) AND ((@IsN"& _ 
                "ull_CATC_DATEMJ = 1 AND [CATC_DATEMJ] IS NULL) OR ([CATC_DATEMJ] = @Original_CAT"& _ 
                "C_DATEMJ)) AND ((@IsNull_CATC_TEXTE = 1 AND [CATC_TEXTE] IS NULL) OR ([CATC_TEXT"& _ 
                "E] = @Original_CATC_TEXTE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF"& _ 
                ", CATC_NOMA, CATC_DATECR, CATC_DATEMJ, CATC_TEXTE FROM theriaque.CATC_CLASSEATC "& _ 
                "WHERE (CATC_CODE_PK = @CATC_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_NOMF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CATC_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_NOMF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CATC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CATC_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CATC_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_D" & _
                "ATEMJ, CATC_TEXTE FROM theriaque.CATC_CLASSEATC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CATC_CODE_PK=@CATC_CODE_P" & _
                "K"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CATC_CODE_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.CATC_CLASSEATCDataTable, ByVal CATC_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CATC_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CATC_CODE_PK As String) As dsTheriaque_Posologie.CATC_CLASSEATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CATC_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque_Posologie.CATC_CLASSEATCDataTable = New dsTheriaque_Posologie.CATC_CLASSEATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.CATC_CLASSEATCDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "CATC_CLASSEATC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CATC_CODE_PK As String, ByVal Original_CATC_CATC_CODE_FK As String, ByVal Original_CATC_NOMF As String, ByVal Original_CATC_NOMA As String, ByVal Original_CATC_DATECR As Date, ByVal Original_CATC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CATC_TEXTE As String) As Integer
            If (Original_CATC_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATC_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CATC_CODE_PK, String)
            End If
            If (Original_CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CATC_CATC_CODE_FK, String)
            End If
            If (Original_CATC_NOMF Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATC_NOMF")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CATC_NOMF, String)
            End If
            If (Original_CATC_NOMA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATC_NOMA")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CATC_NOMA, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CATC_DATECR, Date)
            If (Original_CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_CATC_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CATC_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CATC_CODE_PK As String, ByVal CATC_CATC_CODE_FK As String, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As Global.System.Nullable(Of Date), ByVal CATC_TEXTE As String) As Integer
            If (CATC_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            If (CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CATC_CATC_CODE_FK, String)
            End If
            If (CATC_NOMF Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_NOMF")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CATC_NOMF, String)
            End If
            If (CATC_NOMA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_NOMA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CATC_NOMA, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CATC_DATECR, Date)
            If (CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CATC_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CATC_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CATC_CODE_PK As String, ByVal CATC_CATC_CODE_FK As String, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As Global.System.Nullable(Of Date), ByVal CATC_TEXTE As String, ByVal Original_CATC_CODE_PK As String, ByVal Original_CATC_CATC_CODE_FK As String, ByVal Original_CATC_NOMF As String, ByVal Original_CATC_NOMA As String, ByVal Original_CATC_DATECR As Date, ByVal Original_CATC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CATC_TEXTE As String) As Integer
            If (CATC_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            If (CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CATC_CATC_CODE_FK, String)
            End If
            If (CATC_NOMF Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CATC_NOMF, String)
            End If
            If (CATC_NOMA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CATC_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CATC_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CATC_DATECR, Date)
            If (CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CATC_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CATC_TEXTE, String)
            End If
            If (Original_CATC_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATC_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CATC_CODE_PK, String)
            End If
            If (Original_CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CATC_CATC_CODE_FK, String)
            End If
            If (Original_CATC_NOMF Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATC_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CATC_NOMF, String)
            End If
            If (Original_CATC_NOMA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CATC_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CATC_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CATC_DATECR, Date)
            If (Original_CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CATC_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CATC_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CATC_CATC_CODE_FK As String, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As Global.System.Nullable(Of Date), ByVal CATC_TEXTE As String, ByVal Original_CATC_CODE_PK As String, ByVal Original_CATC_CATC_CODE_FK As String, ByVal Original_CATC_NOMF As String, ByVal Original_CATC_NOMA As String, ByVal Original_CATC_DATECR As Date, ByVal Original_CATC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CATC_TEXTE As String) As Integer
            Return Me.Update(Original_CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_DATEMJ, CATC_TEXTE, Original_CATC_CODE_PK, Original_CATC_CATC_CODE_FK, Original_CATC_NOMF, Original_CATC_NOMA, Original_CATC_DATECR, Original_CATC_DATEMJ, Original_CATC_TEXTE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IPODOSE_INFOPOSOTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IPODOSE_INFOPOSO"
            tableMapping.ColumnMappings.Add("IPODOSE_FPO_CODE_FK_PK", "IPODOSE_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPODOSE_NUM_SEQ_PK", "IPODOSE_NUM_SEQ_PK")
            tableMapping.ColumnMappings.Add("IPODOSE_NUM_ORD", "IPODOSE_NUM_ORD")
            tableMapping.ColumnMappings.Add("IPODOSE_SP_CODE_FK_PK", "IPODOSE_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IPODOSE_SP_CIPUCD", "IPODOSE_SP_CIPUCD")
            tableMapping.ColumnMappings.Add("IPODOSE_DJMIN", "IPODOSE_DJMIN")
            tableMapping.ColumnMappings.Add("IPODOSE_DJMAX", "IPODOSE_DJMAX")
            tableMapping.ColumnMappings.Add("IPODOSE_DPMIN", "IPODOSE_DPMIN")
            tableMapping.ColumnMappings.Add("IPODOSE_DPMAX", "IPODOSE_DPMAX")
            tableMapping.ColumnMappings.Add("IPODOSE_NATUCD_CDF_CODE_FK", "IPODOSE_NATUCD_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("IPODOSE_NATUCD_CDF_NUM_FK", "IPODOSE_NATUCD_CDF_NUM_FK")
            tableMapping.ColumnMappings.Add("IPODOSE_CONT", "IPODOSE_CONT")
            tableMapping.ColumnMappings.Add("IPODOSE_VOL_CONT", "IPODOSE_VOL_CONT")
            tableMapping.ColumnMappings.Add("IPODOSE_VOL_CONT_UNIT", "IPODOSE_VOL_CONT_UNIT")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("IPODOSE_DONANTH_CDF_CODE_FK", "IPODOSE_DONANTH_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("IPODOSE_CALCUL", "IPODOSE_CALCUL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[IPODOSE_INFOPOSO] WHERE (([IPODOSE_FPO_CODE_FK_PK] = @Or" & _
                "iginal_IPODOSE_FPO_CODE_FK_PK) AND ([IPODOSE_NUM_SEQ_PK] = @Original_IPODOSE_NUM" & _
                "_SEQ_PK) AND ([IPODOSE_NUM_ORD] = @Original_IPODOSE_NUM_ORD) AND ([IPODOSE_SP_CO" & _
                "DE_FK_PK] = @Original_IPODOSE_SP_CODE_FK_PK) AND ([IPODOSE_SP_CIPUCD] = @Origina" & _
                "l_IPODOSE_SP_CIPUCD) AND ((@IsNull_IPODOSE_DJMIN = 1 AND [IPODOSE_DJMIN] IS NULL" & _
                ") OR ([IPODOSE_DJMIN] = @Original_IPODOSE_DJMIN)) AND ((@IsNull_IPODOSE_DJMAX = " & _
                "1 AND [IPODOSE_DJMAX] IS NULL) OR ([IPODOSE_DJMAX] = @Original_IPODOSE_DJMAX)) A" & _
                "ND ((@IsNull_IPODOSE_DPMIN = 1 AND [IPODOSE_DPMIN] IS NULL) OR ([IPODOSE_DPMIN] " & _
                "= @Original_IPODOSE_DPMIN)) AND ((@IsNull_IPODOSE_DPMAX = 1 AND [IPODOSE_DPMAX] " & _
                "IS NULL) OR ([IPODOSE_DPMAX] = @Original_IPODOSE_DPMAX)) AND ((@IsNull_IPODOSE_N" & _
                "ATUCD_CDF_CODE_FK = 1 AND [IPODOSE_NATUCD_CDF_CODE_FK] IS NULL) OR ([IPODOSE_NAT" & _
                "UCD_CDF_CODE_FK] = @Original_IPODOSE_NATUCD_CDF_CODE_FK)) AND ((@IsNull_IPODOSE_" & _
                "NATUCD_CDF_NUM_FK = 1 AND [IPODOSE_NATUCD_CDF_NUM_FK] IS NULL) OR ([IPODOSE_NATU" & _
                "CD_CDF_NUM_FK] = @Original_IPODOSE_NATUCD_CDF_NUM_FK)) AND ((@IsNull_IPODOSE_CON" & _
                "T = 1 AND [IPODOSE_CONT] IS NULL) OR ([IPODOSE_CONT] = @Original_IPODOSE_CONT)) " & _
                "AND ((@IsNull_IPODOSE_VOL_CONT = 1 AND [IPODOSE_VOL_CONT] IS NULL) OR ([IPODOSE_" & _
                "VOL_CONT] = @Original_IPODOSE_VOL_CONT)) AND ((@IsNull_IPODOSE_VOL_CONT_UNIT = 1" & _
                " AND [IPODOSE_VOL_CONT_UNIT] IS NULL) OR ([IPODOSE_VOL_CONT_UNIT] = @Original_IP" & _
                "ODOSE_VOL_CONT_UNIT)) AND ([ID] = @Original_ID) AND ((@IsNull_IPODOSE_DONANTH_CD" & _
                "F_CODE_FK = 1 AND [IPODOSE_DONANTH_CDF_CODE_FK] IS NULL) OR ([IPODOSE_DONANTH_CD" & _
                "F_CODE_FK] = @Original_IPODOSE_DONANTH_CDF_CODE_FK)) AND ([IPODOSE_CALCUL] = @Or" & _
                "iginal_IPODOSE_CALCUL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DJMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DJMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DJMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DJMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DPMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DPMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DPMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DPMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DPMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DPMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_VOL_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPODOSE_VOL_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_VOL_CONT_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_CALCUL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CALCUL", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[IPODOSE_INFOPOSO] ([IPODOSE_FPO_CODE_FK_PK], [IPODOSE_NU" & _
                "M_SEQ_PK], [IPODOSE_NUM_ORD], [IPODOSE_SP_CODE_FK_PK], [IPODOSE_SP_CIPUCD], [IPO" & _
                "DOSE_DJMIN], [IPODOSE_DJMAX], [IPODOSE_DPMIN], [IPODOSE_DPMAX], [IPODOSE_NATUCD_" & _
                "CDF_CODE_FK], [IPODOSE_NATUCD_CDF_NUM_FK], [IPODOSE_CONT], [IPODOSE_VOL_CONT], [" & _
                "IPODOSE_VOL_CONT_UNIT], [IPODOSE_DONANTH_CDF_CODE_FK], [IPODOSE_CALCUL]) VALUES " & _
                "(@IPODOSE_FPO_CODE_FK_PK, @IPODOSE_NUM_SEQ_PK, @IPODOSE_NUM_ORD, @IPODOSE_SP_COD" & _
                "E_FK_PK, @IPODOSE_SP_CIPUCD, @IPODOSE_DJMIN, @IPODOSE_DJMAX, @IPODOSE_DPMIN, @IP" & _
                "ODOSE_DPMAX, @IPODOSE_NATUCD_CDF_CODE_FK, @IPODOSE_NATUCD_CDF_NUM_FK, @IPODOSE_C" & _
                "ONT, @IPODOSE_VOL_CONT, @IPODOSE_VOL_CONT_UNIT, @IPODOSE_DONANTH_CDF_CODE_FK, @I" & _
                "PODOSE_CALCUL);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IPODOSE_FPO_CODE_FK_PK, IPODOSE_NUM_SEQ_PK, IPODOSE_NUM_" & _
                "ORD, IPODOSE_SP_CODE_FK_PK, IPODOSE_SP_CIPUCD, IPODOSE_DJMIN, IPODOSE_DJMAX, IPO" & _
                "DOSE_DPMIN, IPODOSE_DPMAX, IPODOSE_NATUCD_CDF_CODE_FK, IPODOSE_NATUCD_CDF_NUM_FK" & _
                ", IPODOSE_CONT, IPODOSE_VOL_CONT, IPODOSE_VOL_CONT_UNIT, ID, IPODOSE_DONANTH_CDF" & _
                "_CODE_FK, IPODOSE_CALCUL FROM theriaque.IPODOSE_INFOPOSO WHERE (ID = SCOPE_IDENT" & _
                "ITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DPMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DPMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPODOSE_VOL_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_CALCUL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CALCUL", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[IPODOSE_INFOPOSO] SET [IPODOSE_FPO_CODE_FK_PK] = @IPODOSE_FPO" & _
                "_CODE_FK_PK, [IPODOSE_NUM_SEQ_PK] = @IPODOSE_NUM_SEQ_PK, [IPODOSE_NUM_ORD] = @IP" & _
                "ODOSE_NUM_ORD, [IPODOSE_SP_CODE_FK_PK] = @IPODOSE_SP_CODE_FK_PK, [IPODOSE_SP_CIP" & _
                "UCD] = @IPODOSE_SP_CIPUCD, [IPODOSE_DJMIN] = @IPODOSE_DJMIN, [IPODOSE_DJMAX] = @" & _
                "IPODOSE_DJMAX, [IPODOSE_DPMIN] = @IPODOSE_DPMIN, [IPODOSE_DPMAX] = @IPODOSE_DPMA" & _
                "X, [IPODOSE_NATUCD_CDF_CODE_FK] = @IPODOSE_NATUCD_CDF_CODE_FK, [IPODOSE_NATUCD_C" & _
                "DF_NUM_FK] = @IPODOSE_NATUCD_CDF_NUM_FK, [IPODOSE_CONT] = @IPODOSE_CONT, [IPODOS" & _
                "E_VOL_CONT] = @IPODOSE_VOL_CONT, [IPODOSE_VOL_CONT_UNIT] = @IPODOSE_VOL_CONT_UNI" & _
                "T, [IPODOSE_DONANTH_CDF_CODE_FK] = @IPODOSE_DONANTH_CDF_CODE_FK, [IPODOSE_CALCUL" & _
                "] = @IPODOSE_CALCUL WHERE (([IPODOSE_FPO_CODE_FK_PK] = @Original_IPODOSE_FPO_COD" & _
                "E_FK_PK) AND ([IPODOSE_NUM_SEQ_PK] = @Original_IPODOSE_NUM_SEQ_PK) AND ([IPODOSE" & _
                "_NUM_ORD] = @Original_IPODOSE_NUM_ORD) AND ([IPODOSE_SP_CODE_FK_PK] = @Original_" & _
                "IPODOSE_SP_CODE_FK_PK) AND ([IPODOSE_SP_CIPUCD] = @Original_IPODOSE_SP_CIPUCD) A" & _
                "ND ((@IsNull_IPODOSE_DJMIN = 1 AND [IPODOSE_DJMIN] IS NULL) OR ([IPODOSE_DJMIN] " & _
                "= @Original_IPODOSE_DJMIN)) AND ((@IsNull_IPODOSE_DJMAX = 1 AND [IPODOSE_DJMAX] " & _
                "IS NULL) OR ([IPODOSE_DJMAX] = @Original_IPODOSE_DJMAX)) AND ((@IsNull_IPODOSE_D" & _
                "PMIN = 1 AND [IPODOSE_DPMIN] IS NULL) OR ([IPODOSE_DPMIN] = @Original_IPODOSE_DP" & _
                "MIN)) AND ((@IsNull_IPODOSE_DPMAX = 1 AND [IPODOSE_DPMAX] IS NULL) OR ([IPODOSE_" & _
                "DPMAX] = @Original_IPODOSE_DPMAX)) AND ((@IsNull_IPODOSE_NATUCD_CDF_CODE_FK = 1 " & _
                "AND [IPODOSE_NATUCD_CDF_CODE_FK] IS NULL) OR ([IPODOSE_NATUCD_CDF_CODE_FK] = @Or" & _
                "iginal_IPODOSE_NATUCD_CDF_CODE_FK)) AND ((@IsNull_IPODOSE_NATUCD_CDF_NUM_FK = 1 " & _
                "AND [IPODOSE_NATUCD_CDF_NUM_FK] IS NULL) OR ([IPODOSE_NATUCD_CDF_NUM_FK] = @Orig" & _
                "inal_IPODOSE_NATUCD_CDF_NUM_FK)) AND ((@IsNull_IPODOSE_CONT = 1 AND [IPODOSE_CON" & _
                "T] IS NULL) OR ([IPODOSE_CONT] = @Original_IPODOSE_CONT)) AND ((@IsNull_IPODOSE_" & _
                "VOL_CONT = 1 AND [IPODOSE_VOL_CONT] IS NULL) OR ([IPODOSE_VOL_CONT] = @Original_" & _
                "IPODOSE_VOL_CONT)) AND ((@IsNull_IPODOSE_VOL_CONT_UNIT = 1 AND [IPODOSE_VOL_CONT" & _
                "_UNIT] IS NULL) OR ([IPODOSE_VOL_CONT_UNIT] = @Original_IPODOSE_VOL_CONT_UNIT)) " & _
                "AND ([ID] = @Original_ID) AND ((@IsNull_IPODOSE_DONANTH_CDF_CODE_FK = 1 AND [IPO" & _
                "DOSE_DONANTH_CDF_CODE_FK] IS NULL) OR ([IPODOSE_DONANTH_CDF_CODE_FK] = @Original" & _
                "_IPODOSE_DONANTH_CDF_CODE_FK)) AND ([IPODOSE_CALCUL] = @Original_IPODOSE_CALCUL)" & _
                ");" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IPODOSE_FPO_CODE_FK_PK, IPODOSE_NUM_SEQ_PK, IPODOSE_NUM_ORD, IPODOSE_" & _
                "SP_CODE_FK_PK, IPODOSE_SP_CIPUCD, IPODOSE_DJMIN, IPODOSE_DJMAX, IPODOSE_DPMIN, I" & _
                "PODOSE_DPMAX, IPODOSE_NATUCD_CDF_CODE_FK, IPODOSE_NATUCD_CDF_NUM_FK, IPODOSE_CON" & _
                "T, IPODOSE_VOL_CONT, IPODOSE_VOL_CONT_UNIT, ID, IPODOSE_DONANTH_CDF_CODE_FK, IPO" & _
                "DOSE_CALCUL FROM theriaque.IPODOSE_INFOPOSO WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_ORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DPMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMIN", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DPMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMAX", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPODOSE_VOL_CONT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_CALCUL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CALCUL", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NUM_SEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_SEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_SP_CIPUCD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DJMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DJMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DJMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DJMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DJMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DJMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DJMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DPMIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DPMIN", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DPMIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMIN", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DPMAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DPMAX", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DPMAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "IPODOSE_DPMAX", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_NATUCD_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_CONT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_VOL_CONT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_VOL_CONT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 6, "IPODOSE_VOL_CONT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_VOL_CONT_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_VOL_CONT_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_VOL_CONT_UNIT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IPODOSE_CALCUL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IPODOSE_CALCUL", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IPODOSE_FPO_CODE_FK_PK, IPODOSE_NUM_SEQ_PK, IPODOSE_NUM_ORD, IPODOSE_SP_CO" & _
                "DE_FK_PK, IPODOSE_SP_CIPUCD, IPODOSE_DJMIN, IPODOSE_DJMAX, IPODOSE_DPMIN, IPODOS" & _
                "E_DPMAX, IPODOSE_NATUCD_CDF_CODE_FK, IPODOSE_NATUCD_CDF_NUM_FK, IPODOSE_CONT, IP" & _
                "ODOSE_VOL_CONT, IPODOSE_VOL_CONT_UNIT, ID, IPODOSE_DONANTH_CDF_CODE_FK, IPODOSE_" & _
                "CALCUL FROM theriaque.IPODOSE_INFOPOSO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IPODOSE_FPO_CODE_FK_PK, IPODOSE_NUM_SEQ_PK, IPODOSE_NUM_ORD, IPODOSE_SP_CO" & _
                "DE_FK_PK, IPODOSE_SP_CIPUCD, IPODOSE_DJMIN, IPODOSE_DJMAX, IPODOSE_DPMIN, IPODOS" & _
                "E_DPMAX, IPODOSE_NATUCD_CDF_CODE_FK, IPODOSE_NATUCD_CDF_NUM_FK, IPODOSE_CONT, IP" & _
                "ODOSE_VOL_CONT, IPODOSE_VOL_CONT_UNIT, ID, IPODOSE_DONANTH_CDF_CODE_FK, IPODOSE_" & _
                "CALCUL FROM theriaque.IPODOSE_INFOPOSO " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " WHERE        (@IPODOSE_CONT LIKE '%$' " & _
                "+ CAST(IPODOSE_SP_CODE_FK_PK AS varchar) + '$%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IPODOSE_CONT", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable = New dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable, ByVal IPODOSE_CONT As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IPODOSE_CONT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPODOSE_CONT")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPODOSE_CONT, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IPODOSE_CONT As String) As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IPODOSE_CONT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPODOSE_CONT")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IPODOSE_CONT, String)
            End If
            Dim dataTable As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable = New dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Posologie.IPODOSE_INFOPOSODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Posologie) As Integer
            Return Me.Adapter.Update(dataSet, "IPODOSE_INFOPOSO")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_IPODOSE_FPO_CODE_FK_PK As Integer, _
                    ByVal Original_IPODOSE_NUM_SEQ_PK As Integer, _
                    ByVal Original_IPODOSE_NUM_ORD As Integer, _
                    ByVal Original_IPODOSE_SP_CODE_FK_PK As Integer, _
                    ByVal Original_IPODOSE_SP_CIPUCD As String, _
                    ByVal Original_IPODOSE_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DPMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DPMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_IPODOSE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_IPODOSE_CONT As String, _
                    ByVal Original_IPODOSE_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_VOL_CONT_UNIT As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_IPODOSE_DONANTH_CDF_CODE_FK As String, _
                    ByVal Original_IPODOSE_CALCUL As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IPODOSE_FPO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IPODOSE_NUM_SEQ_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IPODOSE_NUM_ORD, Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IPODOSE_SP_CODE_FK_PK, Integer)
            If (Original_IPODOSE_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPODOSE_SP_CIPUCD")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IPODOSE_SP_CIPUCD, String)
            End If
            If (Original_IPODOSE_DJMIN.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IPODOSE_DJMIN.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_DJMAX.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IPODOSE_DJMAX.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_DPMIN.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_IPODOSE_DPMIN.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_DPMAX.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_IPODOSE_DPMAX.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IPODOSE_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_IPODOSE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_IPODOSE_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_IPODOSE_CONT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_IPODOSE_CONT, String)
            End If
            If (Original_IPODOSE_VOL_CONT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_IPODOSE_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_IPODOSE_VOL_CONT_UNIT, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_ID, Integer)
            If (Original_IPODOSE_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_IPODOSE_DONANTH_CDF_CODE_FK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IPODOSE_CALCUL, Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal IPODOSE_FPO_CODE_FK_PK As Integer, _
                    ByVal IPODOSE_NUM_SEQ_PK As Integer, _
                    ByVal IPODOSE_NUM_ORD As Integer, _
                    ByVal IPODOSE_SP_CODE_FK_PK As Integer, _
                    ByVal IPODOSE_SP_CIPUCD As String, _
                    ByVal IPODOSE_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DPMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DPMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_NATUCD_CDF_CODE_FK As String, _
                    ByVal IPODOSE_NATUCD_CDF_NUM_FK As String, _
                    ByVal IPODOSE_CONT As String, _
                    ByVal IPODOSE_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_VOL_CONT_UNIT As String, _
                    ByVal IPODOSE_DONANTH_CDF_CODE_FK As String, _
                    ByVal IPODOSE_CALCUL As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IPODOSE_FPO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IPODOSE_NUM_SEQ_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IPODOSE_NUM_ORD, Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IPODOSE_SP_CODE_FK_PK, Integer)
            If (IPODOSE_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPODOSE_SP_CIPUCD")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IPODOSE_SP_CIPUCD, String)
            End If
            If (IPODOSE_DJMIN.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IPODOSE_DJMIN.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_DJMAX.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IPODOSE_DJMAX.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_DPMIN.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IPODOSE_DPMIN.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_DPMAX.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IPODOSE_DPMAX.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IPODOSE_NATUCD_CDF_CODE_FK, String)
            End If
            If (IPODOSE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IPODOSE_NATUCD_CDF_NUM_FK, String)
            End If
            If (IPODOSE_CONT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IPODOSE_CONT, String)
            End If
            If (IPODOSE_VOL_CONT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IPODOSE_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IPODOSE_VOL_CONT_UNIT, String)
            End If
            If (IPODOSE_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IPODOSE_DONANTH_CDF_CODE_FK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(IPODOSE_CALCUL, Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal IPODOSE_FPO_CODE_FK_PK As Integer, _
                    ByVal IPODOSE_NUM_SEQ_PK As Integer, _
                    ByVal IPODOSE_NUM_ORD As Integer, _
                    ByVal IPODOSE_SP_CODE_FK_PK As Integer, _
                    ByVal IPODOSE_SP_CIPUCD As String, _
                    ByVal IPODOSE_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DPMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DPMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_NATUCD_CDF_CODE_FK As String, _
                    ByVal IPODOSE_NATUCD_CDF_NUM_FK As String, _
                    ByVal IPODOSE_CONT As String, _
                    ByVal IPODOSE_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_VOL_CONT_UNIT As String, _
                    ByVal IPODOSE_DONANTH_CDF_CODE_FK As String, _
                    ByVal IPODOSE_CALCUL As Boolean, _
                    ByVal Original_IPODOSE_FPO_CODE_FK_PK As Integer, _
                    ByVal Original_IPODOSE_NUM_SEQ_PK As Integer, _
                    ByVal Original_IPODOSE_NUM_ORD As Integer, _
                    ByVal Original_IPODOSE_SP_CODE_FK_PK As Integer, _
                    ByVal Original_IPODOSE_SP_CIPUCD As String, _
                    ByVal Original_IPODOSE_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DPMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DPMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_IPODOSE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_IPODOSE_CONT As String, _
                    ByVal Original_IPODOSE_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_VOL_CONT_UNIT As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_IPODOSE_DONANTH_CDF_CODE_FK As String, _
                    ByVal Original_IPODOSE_CALCUL As Boolean, _
                    ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IPODOSE_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IPODOSE_NUM_SEQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IPODOSE_NUM_ORD, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IPODOSE_SP_CODE_FK_PK, Integer)
            If (IPODOSE_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IPODOSE_SP_CIPUCD")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IPODOSE_SP_CIPUCD, String)
            End If
            If (IPODOSE_DJMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IPODOSE_DJMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_DJMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IPODOSE_DJMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_DPMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IPODOSE_DPMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_DPMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IPODOSE_DPMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IPODOSE_NATUCD_CDF_CODE_FK, String)
            End If
            If (IPODOSE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IPODOSE_NATUCD_CDF_NUM_FK, String)
            End If
            If (IPODOSE_CONT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IPODOSE_CONT, String)
            End If
            If (IPODOSE_VOL_CONT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IPODOSE_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IPODOSE_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IPODOSE_VOL_CONT_UNIT, String)
            End If
            If (IPODOSE_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IPODOSE_DONANTH_CDF_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(IPODOSE_CALCUL, Boolean)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_IPODOSE_FPO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_IPODOSE_NUM_SEQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_IPODOSE_NUM_ORD, Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_IPODOSE_SP_CODE_FK_PK, Integer)
            If (Original_IPODOSE_SP_CIPUCD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IPODOSE_SP_CIPUCD")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_IPODOSE_SP_CIPUCD, String)
            End If
            If (Original_IPODOSE_DJMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_IPODOSE_DJMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_DJMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_IPODOSE_DJMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_DPMIN.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_IPODOSE_DPMIN.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_DPMAX.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_IPODOSE_DPMAX.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_IPODOSE_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_IPODOSE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_IPODOSE_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_IPODOSE_CONT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_IPODOSE_CONT, String)
            End If
            If (Original_IPODOSE_VOL_CONT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_IPODOSE_VOL_CONT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_IPODOSE_VOL_CONT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_IPODOSE_VOL_CONT_UNIT, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ID, Integer)
            If (Original_IPODOSE_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_IPODOSE_DONANTH_CDF_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_IPODOSE_CALCUL, Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal IPODOSE_FPO_CODE_FK_PK As Integer, _
                    ByVal IPODOSE_NUM_SEQ_PK As Integer, _
                    ByVal IPODOSE_NUM_ORD As Integer, _
                    ByVal IPODOSE_SP_CODE_FK_PK As Integer, _
                    ByVal IPODOSE_SP_CIPUCD As String, _
                    ByVal IPODOSE_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DPMIN As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_DPMAX As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_NATUCD_CDF_CODE_FK As String, _
                    ByVal IPODOSE_NATUCD_CDF_NUM_FK As String, _
                    ByVal IPODOSE_CONT As String, _
                    ByVal IPODOSE_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal IPODOSE_VOL_CONT_UNIT As String, _
                    ByVal IPODOSE_DONANTH_CDF_CODE_FK As String, _
                    ByVal IPODOSE_CALCUL As Boolean, _
                    ByVal Original_IPODOSE_FPO_CODE_FK_PK As Integer, _
                    ByVal Original_IPODOSE_NUM_SEQ_PK As Integer, _
                    ByVal Original_IPODOSE_NUM_ORD As Integer, _
                    ByVal Original_IPODOSE_SP_CODE_FK_PK As Integer, _
                    ByVal Original_IPODOSE_SP_CIPUCD As String, _
                    ByVal Original_IPODOSE_DJMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DJMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DPMIN As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_DPMAX As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_IPODOSE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_IPODOSE_CONT As String, _
                    ByVal Original_IPODOSE_VOL_CONT As Global.System.Nullable(Of Decimal), _
                    ByVal Original_IPODOSE_VOL_CONT_UNIT As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_IPODOSE_DONANTH_CDF_CODE_FK As String, _
                    ByVal Original_IPODOSE_CALCUL As Boolean) As Integer
            Return Me.Update(IPODOSE_FPO_CODE_FK_PK, IPODOSE_NUM_SEQ_PK, IPODOSE_NUM_ORD, IPODOSE_SP_CODE_FK_PK, IPODOSE_SP_CIPUCD, IPODOSE_DJMIN, IPODOSE_DJMAX, IPODOSE_DPMIN, IPODOSE_DPMAX, IPODOSE_NATUCD_CDF_CODE_FK, IPODOSE_NATUCD_CDF_NUM_FK, IPODOSE_CONT, IPODOSE_VOL_CONT, IPODOSE_VOL_CONT_UNIT, IPODOSE_DONANTH_CDF_CODE_FK, IPODOSE_CALCUL, Original_IPODOSE_FPO_CODE_FK_PK, Original_IPODOSE_NUM_SEQ_PK, Original_IPODOSE_NUM_ORD, Original_IPODOSE_SP_CODE_FK_PK, Original_IPODOSE_SP_CIPUCD, Original_IPODOSE_DJMIN, Original_IPODOSE_DJMAX, Original_IPODOSE_DPMIN, Original_IPODOSE_DPMAX, Original_IPODOSE_NATUCD_CDF_CODE_FK, Original_IPODOSE_NATUCD_CDF_NUM_FK, Original_IPODOSE_CONT, Original_IPODOSE_VOL_CONT, Original_IPODOSE_VOL_CONT_UNIT, Original_ID, Original_IPODOSE_DONANTH_CDF_CODE_FK, Original_IPODOSE_CALCUL, Original_ID)
        End Function
    End Class
End Namespace
