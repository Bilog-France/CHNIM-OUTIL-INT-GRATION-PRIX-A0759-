'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.42
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque
    Inherits System.Data.DataSet
    
    Private tableCPH_CLASSEPHARMTHER As CPH_CLASSEPHARMTHERDataTable
    
    Private tableSYCPH_SYNONYME_CLASSEPHARMTHER As SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
    
    Private tableCCH_CLASSECHIMIQUE As CCH_CLASSECHIMIQUEDataTable
    
    Private tableSYCCH_SYNONYME_CLASSECHIMIQUE As SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
    
    Private tableCGE_CLASSEGESTION As CGE_CLASSEGESTIONDataTable
    
    Private tableSYCGE_SYNONYME_CLASSEGESTION As SYCGE_SYNONYME_CLASSEGESTIONDataTable
    
    Private tableCIM10 As CIM10DataTable
    
    Private tableCIM10_2 As CIM10_2DataTable
    
    Private tableCEPH_CLASSEEPHMRA As CEPH_CLASSEEPHMRADataTable
    
    Private tableCATC_CLASSEATC As CATC_CLASSEATCDataTable
    
    Private tableSYFATC_SYNONYMEFR_ATC As SYFATC_SYNONYMEFR_ATCDataTable
    
    Private tableSYAATC_SYNONYMEANGLAIS_ATC As SYAATC_SYNONYMEANGLAIS_ATCDataTable
    
    Private tableATCDDD_DOSE_USUELLE_JOUR As ATCDDD_DOSE_USUELLE_JOURDataTable
    
    Private tableCDF_CODIF As CDF_CODIFDataTable
    
    Private tableCISP_CLASSIF_INTER_SOINS As CISP_CLASSIF_INTER_SOINSDataTable
    
    Private tableCISP_CLASSIF_INTER_SOINS_2 As CISP_CLASSIF_INTER_SOINS_2DataTable
    
    Private tableSYCDF_SYNCODIF As SYCDF_SYNCODIFDataTable
    
    Private tableIDVO_IDENT_VOIE As IDVO_IDENT_VOIEDataTable
    
    Private tableCDFNP_CODIF As CDFNP_CODIFDataTable
    
    Private tableCDFTE_TABLE_EQUIVALENCE As CDFTE_TABLE_EQUIVALENCEDataTable
    
    Private tableCIMCDF_CIM10_CODIF As CIMCDF_CIM10_CODIFDataTable
    
    Private tableNAIN_NATURE_INDICATION As NAIN_NATURE_INDICATIONDataTable
    
    Private tableCDFIUP_INFO_UNITE_PRISE As CDFIUP_INFO_UNITE_PRISEDataTable
    
    Private tableCISPCDF_CISP_CODIF As CISPCDF_CISP_CODIFDataTable
    
    Private tableMEDCDF_MEDRA_CODIF As MEDCDF_MEDRA_CODIFDataTable
    
    Private tableCDFPF_LIEN_CDF_PERE_FILS As CDFPF_LIEN_CDF_PERE_FILSDataTable
    
    Private tableCDFPF_LIEN_CDF_PERE_FILS_2 As CDFPF_LIEN_CDF_PERE_FILS_2DataTable
    
    Private tableRUBCDF_RUBRIQUE_CODIFICATION As RUBCDF_RUBRIQUE_CODIFICATIONDataTable
    
    Private relationFK1_CPH_CLASSEPHARMTHER As System.Data.DataRelation
    
    Private relationFK1_SYCPH_SYNONYME_CLASSEPHARM As System.Data.DataRelation
    
    Private relationFK1_CCH_CLASSECHIMIQUE As System.Data.DataRelation
    
    Private relationFK1_SYCCH_SYNONYME_CLASSECHIMI As System.Data.DataRelation
    
    Private relationFK1_SYCGE_SYNONYME_CLASSEGESTI As System.Data.DataRelation
    
    Private relationFK1_CEPH_CLASSEEPHMRA As System.Data.DataRelation
    
    Private relationFK1_CATC_CLASSEATC As System.Data.DataRelation
    
    Private relationFK1_SYFATC_SYNONYMEFR_ATC As System.Data.DataRelation
    
    Private relationFK1_SYAATC_SYNONYMEANGLAIS_ATC As System.Data.DataRelation
    
    Private relationFK1_IDVO As System.Data.DataRelation
    
    Private relationFK1_CIMCDF_CIM10_CODIF As System.Data.DataRelation
    
    Private relationFK1_CIMCDF_CIM10_CODIF1 As System.Data.DataRelation
    
    Private relationFK2_CIMCDF_CIM10_CODIF As System.Data.DataRelation
    
    Private relationFK1_CISPCDF_CISP_CODIF As System.Data.DataRelation
    
    Private relationFK1_CISPCDF_CISP_CODIF1 As System.Data.DataRelation
    
    Private relationFK2_CISPCDF_CISP_CODIF As System.Data.DataRelation
    
    Private relationFK_CDFPF_LIEN_CDF_PERE_FILS As System.Data.DataRelation
    
    Private relationFK_CDFPF_LIEN_CDF_PERE_FILS1 As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CPH_CLASSEPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New CPH_CLASSEPHARMTHERDataTable(ds.Tables("CPH_CLASSEPHARMTHER")))
            End If
            If (Not (ds.Tables("SYCPH_SYNONYME_CLASSEPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New SYCPH_SYNONYME_CLASSEPHARMTHERDataTable(ds.Tables("SYCPH_SYNONYME_CLASSEPHARMTHER")))
            End If
            If (Not (ds.Tables("CCH_CLASSECHIMIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New CCH_CLASSECHIMIQUEDataTable(ds.Tables("CCH_CLASSECHIMIQUE")))
            End If
            If (Not (ds.Tables("SYCCH_SYNONYME_CLASSECHIMIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New SYCCH_SYNONYME_CLASSECHIMIQUEDataTable(ds.Tables("SYCCH_SYNONYME_CLASSECHIMIQUE")))
            End If
            If (Not (ds.Tables("CGE_CLASSEGESTION")) Is Nothing) Then
                MyBase.Tables.Add(New CGE_CLASSEGESTIONDataTable(ds.Tables("CGE_CLASSEGESTION")))
            End If
            If (Not (ds.Tables("SYCGE_SYNONYME_CLASSEGESTION")) Is Nothing) Then
                MyBase.Tables.Add(New SYCGE_SYNONYME_CLASSEGESTIONDataTable(ds.Tables("SYCGE_SYNONYME_CLASSEGESTION")))
            End If
            If (Not (ds.Tables("CIM10")) Is Nothing) Then
                MyBase.Tables.Add(New CIM10DataTable(ds.Tables("CIM10")))
            End If
            If (Not (ds.Tables("CIM10_2")) Is Nothing) Then
                MyBase.Tables.Add(New CIM10_2DataTable(ds.Tables("CIM10_2")))
            End If
            If (Not (ds.Tables("CEPH_CLASSEEPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New CEPH_CLASSEEPHMRADataTable(ds.Tables("CEPH_CLASSEEPHMRA")))
            End If
            If (Not (ds.Tables("CATC_CLASSEATC")) Is Nothing) Then
                MyBase.Tables.Add(New CATC_CLASSEATCDataTable(ds.Tables("CATC_CLASSEATC")))
            End If
            If (Not (ds.Tables("SYFATC_SYNONYMEFR_ATC")) Is Nothing) Then
                MyBase.Tables.Add(New SYFATC_SYNONYMEFR_ATCDataTable(ds.Tables("SYFATC_SYNONYMEFR_ATC")))
            End If
            If (Not (ds.Tables("SYAATC_SYNONYMEANGLAIS_ATC")) Is Nothing) Then
                MyBase.Tables.Add(New SYAATC_SYNONYMEANGLAIS_ATCDataTable(ds.Tables("SYAATC_SYNONYMEANGLAIS_ATC")))
            End If
            If (Not (ds.Tables("ATCDDD_DOSE_USUELLE_JOUR")) Is Nothing) Then
                MyBase.Tables.Add(New ATCDDD_DOSE_USUELLE_JOURDataTable(ds.Tables("ATCDDD_DOSE_USUELLE_JOUR")))
            End If
            If (Not (ds.Tables("CDF_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDF_CODIFDataTable(ds.Tables("CDF_CODIF")))
            End If
            If (Not (ds.Tables("CISP_CLASSIF_INTER_SOINS")) Is Nothing) Then
                MyBase.Tables.Add(New CISP_CLASSIF_INTER_SOINSDataTable(ds.Tables("CISP_CLASSIF_INTER_SOINS")))
            End If
            If (Not (ds.Tables("CISP_CLASSIF_INTER_SOINS_2")) Is Nothing) Then
                MyBase.Tables.Add(New CISP_CLASSIF_INTER_SOINS_2DataTable(ds.Tables("CISP_CLASSIF_INTER_SOINS_2")))
            End If
            If (Not (ds.Tables("SYCDF_SYNCODIF")) Is Nothing) Then
                MyBase.Tables.Add(New SYCDF_SYNCODIFDataTable(ds.Tables("SYCDF_SYNCODIF")))
            End If
            If (Not (ds.Tables("IDVO_IDENT_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New IDVO_IDENT_VOIEDataTable(ds.Tables("IDVO_IDENT_VOIE")))
            End If
            If (Not (ds.Tables("CDFNP_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDFNP_CODIFDataTable(ds.Tables("CDFNP_CODIF")))
            End If
            If (Not (ds.Tables("CDFTE_TABLE_EQUIVALENCE")) Is Nothing) Then
                MyBase.Tables.Add(New CDFTE_TABLE_EQUIVALENCEDataTable(ds.Tables("CDFTE_TABLE_EQUIVALENCE")))
            End If
            If (Not (ds.Tables("CIMCDF_CIM10_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CIMCDF_CIM10_CODIFDataTable(ds.Tables("CIMCDF_CIM10_CODIF")))
            End If
            If (Not (ds.Tables("NAIN_NATURE_INDICATION")) Is Nothing) Then
                MyBase.Tables.Add(New NAIN_NATURE_INDICATIONDataTable(ds.Tables("NAIN_NATURE_INDICATION")))
            End If
            If (Not (ds.Tables("CDFIUP_INFO_UNITE_PRISE")) Is Nothing) Then
                MyBase.Tables.Add(New CDFIUP_INFO_UNITE_PRISEDataTable(ds.Tables("CDFIUP_INFO_UNITE_PRISE")))
            End If
            If (Not (ds.Tables("CISPCDF_CISP_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CISPCDF_CISP_CODIFDataTable(ds.Tables("CISPCDF_CISP_CODIF")))
            End If
            If (Not (ds.Tables("MEDCDF_MEDRA_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New MEDCDF_MEDRA_CODIFDataTable(ds.Tables("MEDCDF_MEDRA_CODIF")))
            End If
            If (Not (ds.Tables("CDFPF_LIEN_CDF_PERE_FILS")) Is Nothing) Then
                MyBase.Tables.Add(New CDFPF_LIEN_CDF_PERE_FILSDataTable(ds.Tables("CDFPF_LIEN_CDF_PERE_FILS")))
            End If
            If (Not (ds.Tables("CDFPF_LIEN_CDF_PERE_FILS_2")) Is Nothing) Then
                MyBase.Tables.Add(New CDFPF_LIEN_CDF_PERE_FILS_2DataTable(ds.Tables("CDFPF_LIEN_CDF_PERE_FILS_2")))
            End If
            If (Not (ds.Tables("RUBCDF_RUBRIQUE_CODIFICATION")) Is Nothing) Then
                MyBase.Tables.Add(New RUBCDF_RUBRIQUE_CODIFICATIONDataTable(ds.Tables("RUBCDF_RUBRIQUE_CODIFICATION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CPH_CLASSEPHARMTHER() As CPH_CLASSEPHARMTHERDataTable
        Get
            Return Me.tableCPH_CLASSEPHARMTHER
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYCPH_SYNONYME_CLASSEPHARMTHER() As SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
        Get
            Return Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CCH_CLASSECHIMIQUE() As CCH_CLASSECHIMIQUEDataTable
        Get
            Return Me.tableCCH_CLASSECHIMIQUE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYCCH_SYNONYME_CLASSECHIMIQUE() As SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
        Get
            Return Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CGE_CLASSEGESTION() As CGE_CLASSEGESTIONDataTable
        Get
            Return Me.tableCGE_CLASSEGESTION
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYCGE_SYNONYME_CLASSEGESTION() As SYCGE_SYNONYME_CLASSEGESTIONDataTable
        Get
            Return Me.tableSYCGE_SYNONYME_CLASSEGESTION
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CIM10() As CIM10DataTable
        Get
            Return Me.tableCIM10
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CIM10_2() As CIM10_2DataTable
        Get
            Return Me.tableCIM10_2
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEPH_CLASSEEPHMRA() As CEPH_CLASSEEPHMRADataTable
        Get
            Return Me.tableCEPH_CLASSEEPHMRA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CATC_CLASSEATC() As CATC_CLASSEATCDataTable
        Get
            Return Me.tableCATC_CLASSEATC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYFATC_SYNONYMEFR_ATC() As SYFATC_SYNONYMEFR_ATCDataTable
        Get
            Return Me.tableSYFATC_SYNONYMEFR_ATC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYAATC_SYNONYMEANGLAIS_ATC() As SYAATC_SYNONYMEANGLAIS_ATCDataTable
        Get
            Return Me.tableSYAATC_SYNONYMEANGLAIS_ATC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ATCDDD_DOSE_USUELLE_JOUR() As ATCDDD_DOSE_USUELLE_JOURDataTable
        Get
            Return Me.tableATCDDD_DOSE_USUELLE_JOUR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDF_CODIF() As CDF_CODIFDataTable
        Get
            Return Me.tableCDF_CODIF
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CISP_CLASSIF_INTER_SOINS() As CISP_CLASSIF_INTER_SOINSDataTable
        Get
            Return Me.tableCISP_CLASSIF_INTER_SOINS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CISP_CLASSIF_INTER_SOINS_2() As CISP_CLASSIF_INTER_SOINS_2DataTable
        Get
            Return Me.tableCISP_CLASSIF_INTER_SOINS_2
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYCDF_SYNCODIF() As SYCDF_SYNCODIFDataTable
        Get
            Return Me.tableSYCDF_SYNCODIF
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IDVO_IDENT_VOIE() As IDVO_IDENT_VOIEDataTable
        Get
            Return Me.tableIDVO_IDENT_VOIE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFNP_CODIF() As CDFNP_CODIFDataTable
        Get
            Return Me.tableCDFNP_CODIF
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFTE_TABLE_EQUIVALENCE() As CDFTE_TABLE_EQUIVALENCEDataTable
        Get
            Return Me.tableCDFTE_TABLE_EQUIVALENCE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CIMCDF_CIM10_CODIF() As CIMCDF_CIM10_CODIFDataTable
        Get
            Return Me.tableCIMCDF_CIM10_CODIF
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NAIN_NATURE_INDICATION() As NAIN_NATURE_INDICATIONDataTable
        Get
            Return Me.tableNAIN_NATURE_INDICATION
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFIUP_INFO_UNITE_PRISE() As CDFIUP_INFO_UNITE_PRISEDataTable
        Get
            Return Me.tableCDFIUP_INFO_UNITE_PRISE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CISPCDF_CISP_CODIF() As CISPCDF_CISP_CODIFDataTable
        Get
            Return Me.tableCISPCDF_CISP_CODIF
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MEDCDF_MEDRA_CODIF() As MEDCDF_MEDRA_CODIFDataTable
        Get
            Return Me.tableMEDCDF_MEDRA_CODIF
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFPF_LIEN_CDF_PERE_FILS() As CDFPF_LIEN_CDF_PERE_FILSDataTable
        Get
            Return Me.tableCDFPF_LIEN_CDF_PERE_FILS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDFPF_LIEN_CDF_PERE_FILS_2() As CDFPF_LIEN_CDF_PERE_FILS_2DataTable
        Get
            Return Me.tableCDFPF_LIEN_CDF_PERE_FILS_2
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RUBCDF_RUBRIQUE_CODIFICATION() As RUBCDF_RUBRIQUE_CODIFICATIONDataTable
        Get
            Return Me.tableRUBCDF_RUBRIQUE_CODIFICATION
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque = CType(MyBase.Clone,dsTheriaque)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CPH_CLASSEPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New CPH_CLASSEPHARMTHERDataTable(ds.Tables("CPH_CLASSEPHARMTHER")))
            End If
            If (Not (ds.Tables("SYCPH_SYNONYME_CLASSEPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New SYCPH_SYNONYME_CLASSEPHARMTHERDataTable(ds.Tables("SYCPH_SYNONYME_CLASSEPHARMTHER")))
            End If
            If (Not (ds.Tables("CCH_CLASSECHIMIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New CCH_CLASSECHIMIQUEDataTable(ds.Tables("CCH_CLASSECHIMIQUE")))
            End If
            If (Not (ds.Tables("SYCCH_SYNONYME_CLASSECHIMIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New SYCCH_SYNONYME_CLASSECHIMIQUEDataTable(ds.Tables("SYCCH_SYNONYME_CLASSECHIMIQUE")))
            End If
            If (Not (ds.Tables("CGE_CLASSEGESTION")) Is Nothing) Then
                MyBase.Tables.Add(New CGE_CLASSEGESTIONDataTable(ds.Tables("CGE_CLASSEGESTION")))
            End If
            If (Not (ds.Tables("SYCGE_SYNONYME_CLASSEGESTION")) Is Nothing) Then
                MyBase.Tables.Add(New SYCGE_SYNONYME_CLASSEGESTIONDataTable(ds.Tables("SYCGE_SYNONYME_CLASSEGESTION")))
            End If
            If (Not (ds.Tables("CIM10")) Is Nothing) Then
                MyBase.Tables.Add(New CIM10DataTable(ds.Tables("CIM10")))
            End If
            If (Not (ds.Tables("CIM10_2")) Is Nothing) Then
                MyBase.Tables.Add(New CIM10_2DataTable(ds.Tables("CIM10_2")))
            End If
            If (Not (ds.Tables("CEPH_CLASSEEPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New CEPH_CLASSEEPHMRADataTable(ds.Tables("CEPH_CLASSEEPHMRA")))
            End If
            If (Not (ds.Tables("CATC_CLASSEATC")) Is Nothing) Then
                MyBase.Tables.Add(New CATC_CLASSEATCDataTable(ds.Tables("CATC_CLASSEATC")))
            End If
            If (Not (ds.Tables("SYFATC_SYNONYMEFR_ATC")) Is Nothing) Then
                MyBase.Tables.Add(New SYFATC_SYNONYMEFR_ATCDataTable(ds.Tables("SYFATC_SYNONYMEFR_ATC")))
            End If
            If (Not (ds.Tables("SYAATC_SYNONYMEANGLAIS_ATC")) Is Nothing) Then
                MyBase.Tables.Add(New SYAATC_SYNONYMEANGLAIS_ATCDataTable(ds.Tables("SYAATC_SYNONYMEANGLAIS_ATC")))
            End If
            If (Not (ds.Tables("ATCDDD_DOSE_USUELLE_JOUR")) Is Nothing) Then
                MyBase.Tables.Add(New ATCDDD_DOSE_USUELLE_JOURDataTable(ds.Tables("ATCDDD_DOSE_USUELLE_JOUR")))
            End If
            If (Not (ds.Tables("CDF_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDF_CODIFDataTable(ds.Tables("CDF_CODIF")))
            End If
            If (Not (ds.Tables("CISP_CLASSIF_INTER_SOINS")) Is Nothing) Then
                MyBase.Tables.Add(New CISP_CLASSIF_INTER_SOINSDataTable(ds.Tables("CISP_CLASSIF_INTER_SOINS")))
            End If
            If (Not (ds.Tables("CISP_CLASSIF_INTER_SOINS_2")) Is Nothing) Then
                MyBase.Tables.Add(New CISP_CLASSIF_INTER_SOINS_2DataTable(ds.Tables("CISP_CLASSIF_INTER_SOINS_2")))
            End If
            If (Not (ds.Tables("SYCDF_SYNCODIF")) Is Nothing) Then
                MyBase.Tables.Add(New SYCDF_SYNCODIFDataTable(ds.Tables("SYCDF_SYNCODIF")))
            End If
            If (Not (ds.Tables("IDVO_IDENT_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New IDVO_IDENT_VOIEDataTable(ds.Tables("IDVO_IDENT_VOIE")))
            End If
            If (Not (ds.Tables("CDFNP_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDFNP_CODIFDataTable(ds.Tables("CDFNP_CODIF")))
            End If
            If (Not (ds.Tables("CDFTE_TABLE_EQUIVALENCE")) Is Nothing) Then
                MyBase.Tables.Add(New CDFTE_TABLE_EQUIVALENCEDataTable(ds.Tables("CDFTE_TABLE_EQUIVALENCE")))
            End If
            If (Not (ds.Tables("CIMCDF_CIM10_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CIMCDF_CIM10_CODIFDataTable(ds.Tables("CIMCDF_CIM10_CODIF")))
            End If
            If (Not (ds.Tables("NAIN_NATURE_INDICATION")) Is Nothing) Then
                MyBase.Tables.Add(New NAIN_NATURE_INDICATIONDataTable(ds.Tables("NAIN_NATURE_INDICATION")))
            End If
            If (Not (ds.Tables("CDFIUP_INFO_UNITE_PRISE")) Is Nothing) Then
                MyBase.Tables.Add(New CDFIUP_INFO_UNITE_PRISEDataTable(ds.Tables("CDFIUP_INFO_UNITE_PRISE")))
            End If
            If (Not (ds.Tables("CISPCDF_CISP_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CISPCDF_CISP_CODIFDataTable(ds.Tables("CISPCDF_CISP_CODIF")))
            End If
            If (Not (ds.Tables("MEDCDF_MEDRA_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New MEDCDF_MEDRA_CODIFDataTable(ds.Tables("MEDCDF_MEDRA_CODIF")))
            End If
            If (Not (ds.Tables("CDFPF_LIEN_CDF_PERE_FILS")) Is Nothing) Then
                MyBase.Tables.Add(New CDFPF_LIEN_CDF_PERE_FILSDataTable(ds.Tables("CDFPF_LIEN_CDF_PERE_FILS")))
            End If
            If (Not (ds.Tables("CDFPF_LIEN_CDF_PERE_FILS_2")) Is Nothing) Then
                MyBase.Tables.Add(New CDFPF_LIEN_CDF_PERE_FILS_2DataTable(ds.Tables("CDFPF_LIEN_CDF_PERE_FILS_2")))
            End If
            If (Not (ds.Tables("RUBCDF_RUBRIQUE_CODIFICATION")) Is Nothing) Then
                MyBase.Tables.Add(New RUBCDF_RUBRIQUE_CODIFICATIONDataTable(ds.Tables("RUBCDF_RUBRIQUE_CODIFICATION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCPH_CLASSEPHARMTHER = CType(MyBase.Tables("CPH_CLASSEPHARMTHER"),CPH_CLASSEPHARMTHERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCPH_CLASSEPHARMTHER) Is Nothing) Then
                Me.tableCPH_CLASSEPHARMTHER.InitVars
            End If
        End If
        Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER = CType(MyBase.Tables("SYCPH_SYNONYME_CLASSEPHARMTHER"),SYCPH_SYNONYME_CLASSEPHARMTHERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER) Is Nothing) Then
                Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER.InitVars
            End If
        End If
        Me.tableCCH_CLASSECHIMIQUE = CType(MyBase.Tables("CCH_CLASSECHIMIQUE"),CCH_CLASSECHIMIQUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCCH_CLASSECHIMIQUE) Is Nothing) Then
                Me.tableCCH_CLASSECHIMIQUE.InitVars
            End If
        End If
        Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE = CType(MyBase.Tables("SYCCH_SYNONYME_CLASSECHIMIQUE"),SYCCH_SYNONYME_CLASSECHIMIQUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE) Is Nothing) Then
                Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE.InitVars
            End If
        End If
        Me.tableCGE_CLASSEGESTION = CType(MyBase.Tables("CGE_CLASSEGESTION"),CGE_CLASSEGESTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCGE_CLASSEGESTION) Is Nothing) Then
                Me.tableCGE_CLASSEGESTION.InitVars
            End If
        End If
        Me.tableSYCGE_SYNONYME_CLASSEGESTION = CType(MyBase.Tables("SYCGE_SYNONYME_CLASSEGESTION"),SYCGE_SYNONYME_CLASSEGESTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYCGE_SYNONYME_CLASSEGESTION) Is Nothing) Then
                Me.tableSYCGE_SYNONYME_CLASSEGESTION.InitVars
            End If
        End If
        Me.tableCIM10 = CType(MyBase.Tables("CIM10"),CIM10DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCIM10) Is Nothing) Then
                Me.tableCIM10.InitVars
            End If
        End If
        Me.tableCIM10_2 = CType(MyBase.Tables("CIM10_2"),CIM10_2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCIM10_2) Is Nothing) Then
                Me.tableCIM10_2.InitVars
            End If
        End If
        Me.tableCEPH_CLASSEEPHMRA = CType(MyBase.Tables("CEPH_CLASSEEPHMRA"),CEPH_CLASSEEPHMRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCEPH_CLASSEEPHMRA) Is Nothing) Then
                Me.tableCEPH_CLASSEEPHMRA.InitVars
            End If
        End If
        Me.tableCATC_CLASSEATC = CType(MyBase.Tables("CATC_CLASSEATC"),CATC_CLASSEATCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCATC_CLASSEATC) Is Nothing) Then
                Me.tableCATC_CLASSEATC.InitVars
            End If
        End If
        Me.tableSYFATC_SYNONYMEFR_ATC = CType(MyBase.Tables("SYFATC_SYNONYMEFR_ATC"),SYFATC_SYNONYMEFR_ATCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYFATC_SYNONYMEFR_ATC) Is Nothing) Then
                Me.tableSYFATC_SYNONYMEFR_ATC.InitVars
            End If
        End If
        Me.tableSYAATC_SYNONYMEANGLAIS_ATC = CType(MyBase.Tables("SYAATC_SYNONYMEANGLAIS_ATC"),SYAATC_SYNONYMEANGLAIS_ATCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYAATC_SYNONYMEANGLAIS_ATC) Is Nothing) Then
                Me.tableSYAATC_SYNONYMEANGLAIS_ATC.InitVars
            End If
        End If
        Me.tableATCDDD_DOSE_USUELLE_JOUR = CType(MyBase.Tables("ATCDDD_DOSE_USUELLE_JOUR"),ATCDDD_DOSE_USUELLE_JOURDataTable)
        If (initTable = true) Then
            If (Not (Me.tableATCDDD_DOSE_USUELLE_JOUR) Is Nothing) Then
                Me.tableATCDDD_DOSE_USUELLE_JOUR.InitVars
            End If
        End If
        Me.tableCDF_CODIF = CType(MyBase.Tables("CDF_CODIF"),CDF_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDF_CODIF) Is Nothing) Then
                Me.tableCDF_CODIF.InitVars
            End If
        End If
        Me.tableCISP_CLASSIF_INTER_SOINS = CType(MyBase.Tables("CISP_CLASSIF_INTER_SOINS"),CISP_CLASSIF_INTER_SOINSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCISP_CLASSIF_INTER_SOINS) Is Nothing) Then
                Me.tableCISP_CLASSIF_INTER_SOINS.InitVars
            End If
        End If
        Me.tableCISP_CLASSIF_INTER_SOINS_2 = CType(MyBase.Tables("CISP_CLASSIF_INTER_SOINS_2"),CISP_CLASSIF_INTER_SOINS_2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCISP_CLASSIF_INTER_SOINS_2) Is Nothing) Then
                Me.tableCISP_CLASSIF_INTER_SOINS_2.InitVars
            End If
        End If
        Me.tableSYCDF_SYNCODIF = CType(MyBase.Tables("SYCDF_SYNCODIF"),SYCDF_SYNCODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYCDF_SYNCODIF) Is Nothing) Then
                Me.tableSYCDF_SYNCODIF.InitVars
            End If
        End If
        Me.tableIDVO_IDENT_VOIE = CType(MyBase.Tables("IDVO_IDENT_VOIE"),IDVO_IDENT_VOIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIDVO_IDENT_VOIE) Is Nothing) Then
                Me.tableIDVO_IDENT_VOIE.InitVars
            End If
        End If
        Me.tableCDFNP_CODIF = CType(MyBase.Tables("CDFNP_CODIF"),CDFNP_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFNP_CODIF) Is Nothing) Then
                Me.tableCDFNP_CODIF.InitVars
            End If
        End If
        Me.tableCDFTE_TABLE_EQUIVALENCE = CType(MyBase.Tables("CDFTE_TABLE_EQUIVALENCE"),CDFTE_TABLE_EQUIVALENCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFTE_TABLE_EQUIVALENCE) Is Nothing) Then
                Me.tableCDFTE_TABLE_EQUIVALENCE.InitVars
            End If
        End If
        Me.tableCIMCDF_CIM10_CODIF = CType(MyBase.Tables("CIMCDF_CIM10_CODIF"),CIMCDF_CIM10_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCIMCDF_CIM10_CODIF) Is Nothing) Then
                Me.tableCIMCDF_CIM10_CODIF.InitVars
            End If
        End If
        Me.tableNAIN_NATURE_INDICATION = CType(MyBase.Tables("NAIN_NATURE_INDICATION"),NAIN_NATURE_INDICATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNAIN_NATURE_INDICATION) Is Nothing) Then
                Me.tableNAIN_NATURE_INDICATION.InitVars
            End If
        End If
        Me.tableCDFIUP_INFO_UNITE_PRISE = CType(MyBase.Tables("CDFIUP_INFO_UNITE_PRISE"),CDFIUP_INFO_UNITE_PRISEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFIUP_INFO_UNITE_PRISE) Is Nothing) Then
                Me.tableCDFIUP_INFO_UNITE_PRISE.InitVars
            End If
        End If
        Me.tableCISPCDF_CISP_CODIF = CType(MyBase.Tables("CISPCDF_CISP_CODIF"),CISPCDF_CISP_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCISPCDF_CISP_CODIF) Is Nothing) Then
                Me.tableCISPCDF_CISP_CODIF.InitVars
            End If
        End If
        Me.tableMEDCDF_MEDRA_CODIF = CType(MyBase.Tables("MEDCDF_MEDRA_CODIF"),MEDCDF_MEDRA_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMEDCDF_MEDRA_CODIF) Is Nothing) Then
                Me.tableMEDCDF_MEDRA_CODIF.InitVars
            End If
        End If
        Me.tableCDFPF_LIEN_CDF_PERE_FILS = CType(MyBase.Tables("CDFPF_LIEN_CDF_PERE_FILS"),CDFPF_LIEN_CDF_PERE_FILSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFPF_LIEN_CDF_PERE_FILS) Is Nothing) Then
                Me.tableCDFPF_LIEN_CDF_PERE_FILS.InitVars
            End If
        End If
        Me.tableCDFPF_LIEN_CDF_PERE_FILS_2 = CType(MyBase.Tables("CDFPF_LIEN_CDF_PERE_FILS_2"),CDFPF_LIEN_CDF_PERE_FILS_2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDFPF_LIEN_CDF_PERE_FILS_2) Is Nothing) Then
                Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.InitVars
            End If
        End If
        Me.tableRUBCDF_RUBRIQUE_CODIFICATION = CType(MyBase.Tables("RUBCDF_RUBRIQUE_CODIFICATION"),RUBCDF_RUBRIQUE_CODIFICATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRUBCDF_RUBRIQUE_CODIFICATION) Is Nothing) Then
                Me.tableRUBCDF_RUBRIQUE_CODIFICATION.InitVars
            End If
        End If
        Me.relationFK1_CPH_CLASSEPHARMTHER = Me.Relations("FK1_CPH_CLASSEPHARMTHER")
        Me.relationFK1_SYCPH_SYNONYME_CLASSEPHARM = Me.Relations("FK1_SYCPH_SYNONYME_CLASSEPHARM")
        Me.relationFK1_CCH_CLASSECHIMIQUE = Me.Relations("FK1_CCH_CLASSECHIMIQUE")
        Me.relationFK1_SYCCH_SYNONYME_CLASSECHIMI = Me.Relations("FK1_SYCCH_SYNONYME_CLASSECHIMI")
        Me.relationFK1_SYCGE_SYNONYME_CLASSEGESTI = Me.Relations("FK1_SYCGE_SYNONYME_CLASSEGESTI")
        Me.relationFK1_CEPH_CLASSEEPHMRA = Me.Relations("FK1_CEPH_CLASSEEPHMRA")
        Me.relationFK1_CATC_CLASSEATC = Me.Relations("FK1_CATC_CLASSEATC")
        Me.relationFK1_SYFATC_SYNONYMEFR_ATC = Me.Relations("FK1_SYFATC_SYNONYMEFR_ATC")
        Me.relationFK1_SYAATC_SYNONYMEANGLAIS_ATC = Me.Relations("FK1_SYAATC_SYNONYMEANGLAIS_ATC")
        Me.relationFK1_IDVO = Me.Relations("FK1_IDVO")
        Me.relationFK1_CIMCDF_CIM10_CODIF = Me.Relations("FK1_CIMCDF_CIM10_CODIF")
        Me.relationFK1_CIMCDF_CIM10_CODIF1 = Me.Relations("FK1_CIMCDF_CIM10_CODIF1")
        Me.relationFK2_CIMCDF_CIM10_CODIF = Me.Relations("FK2_CIMCDF_CIM10_CODIF")
        Me.relationFK1_CISPCDF_CISP_CODIF = Me.Relations("FK1_CISPCDF_CISP_CODIF")
        Me.relationFK1_CISPCDF_CISP_CODIF1 = Me.Relations("FK1_CISPCDF_CISP_CODIF1")
        Me.relationFK2_CISPCDF_CISP_CODIF = Me.Relations("FK2_CISPCDF_CISP_CODIF")
        Me.relationFK_CDFPF_LIEN_CDF_PERE_FILS = Me.Relations("FK_CDFPF_LIEN_CDF_PERE_FILS")
        Me.relationFK_CDFPF_LIEN_CDF_PERE_FILS1 = Me.Relations("FK_CDFPF_LIEN_CDF_PERE_FILS1")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCPH_CLASSEPHARMTHER = New CPH_CLASSEPHARMTHERDataTable
        MyBase.Tables.Add(Me.tableCPH_CLASSEPHARMTHER)
        Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER = New SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
        MyBase.Tables.Add(Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER)
        Me.tableCCH_CLASSECHIMIQUE = New CCH_CLASSECHIMIQUEDataTable
        MyBase.Tables.Add(Me.tableCCH_CLASSECHIMIQUE)
        Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE = New SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
        MyBase.Tables.Add(Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE)
        Me.tableCGE_CLASSEGESTION = New CGE_CLASSEGESTIONDataTable
        MyBase.Tables.Add(Me.tableCGE_CLASSEGESTION)
        Me.tableSYCGE_SYNONYME_CLASSEGESTION = New SYCGE_SYNONYME_CLASSEGESTIONDataTable
        MyBase.Tables.Add(Me.tableSYCGE_SYNONYME_CLASSEGESTION)
        Me.tableCIM10 = New CIM10DataTable
        MyBase.Tables.Add(Me.tableCIM10)
        Me.tableCIM10_2 = New CIM10_2DataTable
        MyBase.Tables.Add(Me.tableCIM10_2)
        Me.tableCEPH_CLASSEEPHMRA = New CEPH_CLASSEEPHMRADataTable
        MyBase.Tables.Add(Me.tableCEPH_CLASSEEPHMRA)
        Me.tableCATC_CLASSEATC = New CATC_CLASSEATCDataTable
        MyBase.Tables.Add(Me.tableCATC_CLASSEATC)
        Me.tableSYFATC_SYNONYMEFR_ATC = New SYFATC_SYNONYMEFR_ATCDataTable
        MyBase.Tables.Add(Me.tableSYFATC_SYNONYMEFR_ATC)
        Me.tableSYAATC_SYNONYMEANGLAIS_ATC = New SYAATC_SYNONYMEANGLAIS_ATCDataTable
        MyBase.Tables.Add(Me.tableSYAATC_SYNONYMEANGLAIS_ATC)
        Me.tableATCDDD_DOSE_USUELLE_JOUR = New ATCDDD_DOSE_USUELLE_JOURDataTable
        MyBase.Tables.Add(Me.tableATCDDD_DOSE_USUELLE_JOUR)
        Me.tableCDF_CODIF = New CDF_CODIFDataTable
        MyBase.Tables.Add(Me.tableCDF_CODIF)
        Me.tableCISP_CLASSIF_INTER_SOINS = New CISP_CLASSIF_INTER_SOINSDataTable
        MyBase.Tables.Add(Me.tableCISP_CLASSIF_INTER_SOINS)
        Me.tableCISP_CLASSIF_INTER_SOINS_2 = New CISP_CLASSIF_INTER_SOINS_2DataTable
        MyBase.Tables.Add(Me.tableCISP_CLASSIF_INTER_SOINS_2)
        Me.tableSYCDF_SYNCODIF = New SYCDF_SYNCODIFDataTable
        MyBase.Tables.Add(Me.tableSYCDF_SYNCODIF)
        Me.tableIDVO_IDENT_VOIE = New IDVO_IDENT_VOIEDataTable
        MyBase.Tables.Add(Me.tableIDVO_IDENT_VOIE)
        Me.tableCDFNP_CODIF = New CDFNP_CODIFDataTable
        MyBase.Tables.Add(Me.tableCDFNP_CODIF)
        Me.tableCDFTE_TABLE_EQUIVALENCE = New CDFTE_TABLE_EQUIVALENCEDataTable
        MyBase.Tables.Add(Me.tableCDFTE_TABLE_EQUIVALENCE)
        Me.tableCIMCDF_CIM10_CODIF = New CIMCDF_CIM10_CODIFDataTable
        MyBase.Tables.Add(Me.tableCIMCDF_CIM10_CODIF)
        Me.tableNAIN_NATURE_INDICATION = New NAIN_NATURE_INDICATIONDataTable
        MyBase.Tables.Add(Me.tableNAIN_NATURE_INDICATION)
        Me.tableCDFIUP_INFO_UNITE_PRISE = New CDFIUP_INFO_UNITE_PRISEDataTable
        MyBase.Tables.Add(Me.tableCDFIUP_INFO_UNITE_PRISE)
        Me.tableCISPCDF_CISP_CODIF = New CISPCDF_CISP_CODIFDataTable
        MyBase.Tables.Add(Me.tableCISPCDF_CISP_CODIF)
        Me.tableMEDCDF_MEDRA_CODIF = New MEDCDF_MEDRA_CODIFDataTable
        MyBase.Tables.Add(Me.tableMEDCDF_MEDRA_CODIF)
        Me.tableCDFPF_LIEN_CDF_PERE_FILS = New CDFPF_LIEN_CDF_PERE_FILSDataTable
        MyBase.Tables.Add(Me.tableCDFPF_LIEN_CDF_PERE_FILS)
        Me.tableCDFPF_LIEN_CDF_PERE_FILS_2 = New CDFPF_LIEN_CDF_PERE_FILS_2DataTable
        MyBase.Tables.Add(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2)
        Me.tableRUBCDF_RUBRIQUE_CODIFICATION = New RUBCDF_RUBRIQUE_CODIFICATIONDataTable
        MyBase.Tables.Add(Me.tableRUBCDF_RUBRIQUE_CODIFICATION)
        Me.relationFK1_CPH_CLASSEPHARMTHER = New System.Data.DataRelation("FK1_CPH_CLASSEPHARMTHER", New System.Data.DataColumn() {Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CPH_CLASSEPHARMTHER)
        Me.relationFK1_SYCPH_SYNONYME_CLASSEPHARM = New System.Data.DataRelation("FK1_SYCPH_SYNONYME_CLASSEPHARM", New System.Data.DataColumn() {Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER.SYCPH_CPH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYCPH_SYNONYME_CLASSEPHARM)
        Me.relationFK1_CCH_CLASSECHIMIQUE = New System.Data.DataRelation("FK1_CCH_CLASSECHIMIQUE", New System.Data.DataColumn() {Me.tableCCH_CLASSECHIMIQUE.CCH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCCH_CLASSECHIMIQUE.CCH_CCH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CCH_CLASSECHIMIQUE)
        Me.relationFK1_SYCCH_SYNONYME_CLASSECHIMI = New System.Data.DataRelation("FK1_SYCCH_SYNONYME_CLASSECHIMI", New System.Data.DataColumn() {Me.tableCCH_CLASSECHIMIQUE.CCH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE.SYCCH_CCH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYCCH_SYNONYME_CLASSECHIMI)
        Me.relationFK1_SYCGE_SYNONYME_CLASSEGESTI = New System.Data.DataRelation("FK1_SYCGE_SYNONYME_CLASSEGESTI", New System.Data.DataColumn() {Me.tableCGE_CLASSEGESTION.CGE_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSYCGE_SYNONYME_CLASSEGESTION.SYCGE_CGE_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYCGE_SYNONYME_CLASSEGESTI)
        Me.relationFK1_CEPH_CLASSEEPHMRA = New System.Data.DataRelation("FK1_CEPH_CLASSEEPHMRA", New System.Data.DataColumn() {Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CEPH_CLASSEEPHMRA)
        Me.relationFK1_CATC_CLASSEATC = New System.Data.DataRelation("FK1_CATC_CLASSEATC", New System.Data.DataColumn() {Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CATC_CLASSEATC)
        Me.relationFK1_SYFATC_SYNONYMEFR_ATC = New System.Data.DataRelation("FK1_SYFATC_SYNONYMEFR_ATC", New System.Data.DataColumn() {Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSYFATC_SYNONYMEFR_ATC.SYFATC_CATC_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYFATC_SYNONYMEFR_ATC)
        Me.relationFK1_SYAATC_SYNONYMEANGLAIS_ATC = New System.Data.DataRelation("FK1_SYAATC_SYNONYMEANGLAIS_ATC", New System.Data.DataColumn() {Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSYAATC_SYNONYMEANGLAIS_ATC.SYAATC_CATC_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYAATC_SYNONYMEANGLAIS_ATC)
        Me.relationFK1_IDVO = New System.Data.DataRelation("FK1_IDVO", New System.Data.DataColumn() {Me.tableCDF_CODIF.CDF_NUMERO_PKColumn, Me.tableCDF_CODIF.CDF_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableIDVO_IDENT_VOIE.IDVO_CDF_NUMERO_FK_PKColumn, Me.tableIDVO_IDENT_VOIE.IDVO_CDF_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_IDVO)
        Me.relationFK1_CIMCDF_CIM10_CODIF = New System.Data.DataRelation("FK1_CIMCDF_CIM10_CODIF", New System.Data.DataColumn() {Me.tableCIM10.CIM_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CIM_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CIMCDF_CIM10_CODIF)
        Me.relationFK1_CIMCDF_CIM10_CODIF1 = New System.Data.DataRelation("FK1_CIMCDF_CIM10_CODIF1", New System.Data.DataColumn() {Me.tableCIM10_2.CIM_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CIM_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CIMCDF_CIM10_CODIF1)
        Me.relationFK2_CIMCDF_CIM10_CODIF = New System.Data.DataRelation("FK2_CIMCDF_CIM10_CODIF", New System.Data.DataColumn() {Me.tableCDF_CODIF.CDF_NUMERO_PKColumn, Me.tableCDF_CODIF.CDF_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CDF_NUMERO_FK_PKColumn, Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CDF_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK2_CIMCDF_CIM10_CODIF)
        Me.relationFK1_CISPCDF_CISP_CODIF = New System.Data.DataRelation("FK1_CISPCDF_CISP_CODIF", New System.Data.DataColumn() {Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCISPCDF_CISP_CODIF.CISPCDF_CISP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CISPCDF_CISP_CODIF)
        Me.relationFK1_CISPCDF_CISP_CODIF1 = New System.Data.DataRelation("FK1_CISPCDF_CISP_CODIF1", New System.Data.DataColumn() {Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCISPCDF_CISP_CODIF.CISPCDF_CISP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CISPCDF_CISP_CODIF1)
        Me.relationFK2_CISPCDF_CISP_CODIF = New System.Data.DataRelation("FK2_CISPCDF_CISP_CODIF", New System.Data.DataColumn() {Me.tableCDF_CODIF.CDF_NUMERO_PKColumn, Me.tableCDF_CODIF.CDF_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCISPCDF_CISP_CODIF.CISPCDF_CDF_NUMERO_FK_PKColumn, Me.tableCISPCDF_CISP_CODIF.CISPCDF_CDF_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK2_CISPCDF_CISP_CODIF)
        Me.relationFK_CDFPF_LIEN_CDF_PERE_FILS = New System.Data.DataRelation("FK_CDFPF_LIEN_CDF_PERE_FILS", New System.Data.DataColumn() {Me.tableCDF_CODIF.CDF_NUMERO_PKColumn, Me.tableCDF_CODIF.CDF_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMEROP_FK_PKColumn, Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_CODEP_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_CDFPF_LIEN_CDF_PERE_FILS)
        Me.relationFK_CDFPF_LIEN_CDF_PERE_FILS1 = New System.Data.DataRelation("FK_CDFPF_LIEN_CDF_PERE_FILS1", New System.Data.DataColumn() {Me.tableCDF_CODIF.CDF_NUMERO_PKColumn, Me.tableCDF_CODIF.CDF_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMEROP_FK_PKColumn, Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_CODEP_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_CDFPF_LIEN_CDF_PERE_FILS1)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCPH_CLASSEPHARMTHER() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYCPH_SYNONYME_CLASSEPHARMTHER() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCCH_CLASSECHIMIQUE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYCCH_SYNONYME_CLASSECHIMIQUE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCGE_CLASSEGESTION() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYCGE_SYNONYME_CLASSEGESTION() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCIM10() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCIM10_2() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCEPH_CLASSEEPHMRA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCATC_CLASSEATC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYFATC_SYNONYMEFR_ATC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYAATC_SYNONYMEANGLAIS_ATC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeATCDDD_DOSE_USUELLE_JOUR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDF_CODIF() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCISP_CLASSIF_INTER_SOINS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCISP_CLASSIF_INTER_SOINS_2() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYCDF_SYNCODIF() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIDVO_IDENT_VOIE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFNP_CODIF() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFTE_TABLE_EQUIVALENCE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCIMCDF_CIM10_CODIF() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNAIN_NATURE_INDICATION() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFIUP_INFO_UNITE_PRISE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCISPCDF_CISP_CODIF() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMEDCDF_MEDRA_CODIF() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFPF_LIEN_CDF_PERE_FILS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDFPF_LIEN_CDF_PERE_FILS_2() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRUBCDF_RUBRIQUE_CODIFICATION() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque = New dsTheriaque
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub CPH_CLASSEPHARMTHERRowChangeEventHandler(ByVal sender As Object, ByVal e As CPH_CLASSEPHARMTHERRowChangeEvent)
    
    Public Delegate Sub SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEventHandler(ByVal sender As Object, ByVal e As SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEvent)
    
    Public Delegate Sub CCH_CLASSECHIMIQUERowChangeEventHandler(ByVal sender As Object, ByVal e As CCH_CLASSECHIMIQUERowChangeEvent)
    
    Public Delegate Sub SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEventHandler(ByVal sender As Object, ByVal e As SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEvent)
    
    Public Delegate Sub CGE_CLASSEGESTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As CGE_CLASSEGESTIONRowChangeEvent)
    
    Public Delegate Sub SYCGE_SYNONYME_CLASSEGESTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As SYCGE_SYNONYME_CLASSEGESTIONRowChangeEvent)
    
    Public Delegate Sub CIM10RowChangeEventHandler(ByVal sender As Object, ByVal e As CIM10RowChangeEvent)
    
    Public Delegate Sub CIM10_2RowChangeEventHandler(ByVal sender As Object, ByVal e As CIM10_2RowChangeEvent)
    
    Public Delegate Sub CEPH_CLASSEEPHMRARowChangeEventHandler(ByVal sender As Object, ByVal e As CEPH_CLASSEEPHMRARowChangeEvent)
    
    Public Delegate Sub CATC_CLASSEATCRowChangeEventHandler(ByVal sender As Object, ByVal e As CATC_CLASSEATCRowChangeEvent)
    
    Public Delegate Sub SYFATC_SYNONYMEFR_ATCRowChangeEventHandler(ByVal sender As Object, ByVal e As SYFATC_SYNONYMEFR_ATCRowChangeEvent)
    
    Public Delegate Sub SYAATC_SYNONYMEANGLAIS_ATCRowChangeEventHandler(ByVal sender As Object, ByVal e As SYAATC_SYNONYMEANGLAIS_ATCRowChangeEvent)
    
    Public Delegate Sub ATCDDD_DOSE_USUELLE_JOURRowChangeEventHandler(ByVal sender As Object, ByVal e As ATCDDD_DOSE_USUELLE_JOURRowChangeEvent)
    
    Public Delegate Sub CDF_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As CDF_CODIFRowChangeEvent)
    
    Public Delegate Sub CISP_CLASSIF_INTER_SOINSRowChangeEventHandler(ByVal sender As Object, ByVal e As CISP_CLASSIF_INTER_SOINSRowChangeEvent)
    
    Public Delegate Sub CISP_CLASSIF_INTER_SOINS_2RowChangeEventHandler(ByVal sender As Object, ByVal e As CISP_CLASSIF_INTER_SOINS_2RowChangeEvent)
    
    Public Delegate Sub SYCDF_SYNCODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As SYCDF_SYNCODIFRowChangeEvent)
    
    Public Delegate Sub IDVO_IDENT_VOIERowChangeEventHandler(ByVal sender As Object, ByVal e As IDVO_IDENT_VOIERowChangeEvent)
    
    Public Delegate Sub CDFNP_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As CDFNP_CODIFRowChangeEvent)
    
    Public Delegate Sub CDFTE_TABLE_EQUIVALENCERowChangeEventHandler(ByVal sender As Object, ByVal e As CDFTE_TABLE_EQUIVALENCERowChangeEvent)
    
    Public Delegate Sub CIMCDF_CIM10_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As CIMCDF_CIM10_CODIFRowChangeEvent)
    
    Public Delegate Sub NAIN_NATURE_INDICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As NAIN_NATURE_INDICATIONRowChangeEvent)
    
    Public Delegate Sub CDFIUP_INFO_UNITE_PRISERowChangeEventHandler(ByVal sender As Object, ByVal e As CDFIUP_INFO_UNITE_PRISERowChangeEvent)
    
    Public Delegate Sub CISPCDF_CISP_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As CISPCDF_CISP_CODIFRowChangeEvent)
    
    Public Delegate Sub MEDCDF_MEDRA_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As MEDCDF_MEDRA_CODIFRowChangeEvent)
    
    Public Delegate Sub CDFPF_LIEN_CDF_PERE_FILSRowChangeEventHandler(ByVal sender As Object, ByVal e As CDFPF_LIEN_CDF_PERE_FILSRowChangeEvent)
    
    Public Delegate Sub CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEventHandler(ByVal sender As Object, ByVal e As CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEvent)
    
    Public Delegate Sub RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CPH_CLASSEPHARMTHERDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCPH_CODE_PK As System.Data.DataColumn
        
        Private columnCPH_CPH_CODE_FK As System.Data.DataColumn
        
        Private columnCPH_NOM As System.Data.DataColumn
        
        Private columnCPH_DATECR As System.Data.DataColumn
        
        Private columnCPH_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CPH_CLASSEPHARMTHER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPH_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_CPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPH_CPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPH_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPH_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPH_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CPH_CLASSEPHARMTHERRow
            Get
                Return CType(Me.Rows(index),CPH_CLASSEPHARMTHERRow)
            End Get
        End Property
        
        Public Event CPH_CLASSEPHARMTHERRowChanging As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event CPH_CLASSEPHARMTHERRowChanged As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event CPH_CLASSEPHARMTHERRowDeleting As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event CPH_CLASSEPHARMTHERRowDeleted As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCPH_CLASSEPHARMTHERRow(ByVal row As CPH_CLASSEPHARMTHERRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCPH_CLASSEPHARMTHERRow(ByVal CPH_CODE_PK As String, ByVal parentCPH_CLASSEPHARMTHERRowByFK1_CPH_CLASSEPHARMTHER As CPH_CLASSEPHARMTHERRow, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As Date) As CPH_CLASSEPHARMTHERRow
            Dim rowCPH_CLASSEPHARMTHERRow As CPH_CLASSEPHARMTHERRow = CType(Me.NewRow,CPH_CLASSEPHARMTHERRow)
            rowCPH_CLASSEPHARMTHERRow.ItemArray = New Object() {CPH_CODE_PK, parentCPH_CLASSEPHARMTHERRowByFK1_CPH_CLASSEPHARMTHER(0), CPH_NOM, CPH_DATECR, CPH_DATEMJ}
            Me.Rows.Add(rowCPH_CLASSEPHARMTHERRow)
            Return rowCPH_CLASSEPHARMTHERRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCPH_CODE_PK(ByVal CPH_CODE_PK As String) As CPH_CLASSEPHARMTHERRow
            Return CType(Me.Rows.Find(New Object() {CPH_CODE_PK}),CPH_CLASSEPHARMTHERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CPH_CLASSEPHARMTHERDataTable = CType(MyBase.Clone,CPH_CLASSEPHARMTHERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CPH_CLASSEPHARMTHERDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCPH_CODE_PK = MyBase.Columns("CPH_CODE_PK")
            Me.columnCPH_CPH_CODE_FK = MyBase.Columns("CPH_CPH_CODE_FK")
            Me.columnCPH_NOM = MyBase.Columns("CPH_NOM")
            Me.columnCPH_DATECR = MyBase.Columns("CPH_DATECR")
            Me.columnCPH_DATEMJ = MyBase.Columns("CPH_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCPH_CODE_PK = New System.Data.DataColumn("CPH_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_CODE_PK)
            Me.columnCPH_CPH_CODE_FK = New System.Data.DataColumn("CPH_CPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_CPH_CODE_FK)
            Me.columnCPH_NOM = New System.Data.DataColumn("CPH_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_NOM)
            Me.columnCPH_DATECR = New System.Data.DataColumn("CPH_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_DATECR)
            Me.columnCPH_DATEMJ = New System.Data.DataColumn("CPH_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCPH_CODE_PK}, true))
            Me.columnCPH_CODE_PK.AllowDBNull = false
            Me.columnCPH_CODE_PK.Unique = true
            Me.columnCPH_CODE_PK.MaxLength = 10
            Me.columnCPH_CPH_CODE_FK.MaxLength = 10
            Me.columnCPH_NOM.AllowDBNull = false
            Me.columnCPH_NOM.MaxLength = 40
            Me.columnCPH_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCPH_CLASSEPHARMTHERRow() As CPH_CLASSEPHARMTHERRow
            Return CType(Me.NewRow,CPH_CLASSEPHARMTHERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CPH_CLASSEPHARMTHERRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CPH_CLASSEPHARMTHERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowChangedEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowChanged(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowChangingEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowChanging(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowDeletedEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowDeleted(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowDeletingEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowDeleting(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCPH_CLASSEPHARMTHERRow(ByVal row As CPH_CLASSEPHARMTHERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CPH_CLASSEPHARMTHERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYCPH_NOM_PK As System.Data.DataColumn
        
        Private columnSYCPH_CPH_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYCPH_SYNONYME_CLASSEPHARMTHER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCPH_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCPH_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCPH_CPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCPH_CPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYCPH_SYNONYME_CLASSEPHARMTHERRow
            Get
                Return CType(Me.Rows(index),SYCPH_SYNONYME_CLASSEPHARMTHERRow)
            End Get
        End Property
        
        Public Event SYCPH_SYNONYME_CLASSEPHARMTHERRowChanging As SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event SYCPH_SYNONYME_CLASSEPHARMTHERRowChanged As SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event SYCPH_SYNONYME_CLASSEPHARMTHERRowDeleting As SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event SYCPH_SYNONYME_CLASSEPHARMTHERRowDeleted As SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYCPH_SYNONYME_CLASSEPHARMTHERRow(ByVal row As SYCPH_SYNONYME_CLASSEPHARMTHERRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYCPH_SYNONYME_CLASSEPHARMTHERRow(ByVal SYCPH_NOM_PK As String, ByVal parentCPH_CLASSEPHARMTHERRowByFK1_SYCPH_SYNONYME_CLASSEPHARM As CPH_CLASSEPHARMTHERRow) As SYCPH_SYNONYME_CLASSEPHARMTHERRow
            Dim rowSYCPH_SYNONYME_CLASSEPHARMTHERRow As SYCPH_SYNONYME_CLASSEPHARMTHERRow = CType(Me.NewRow,SYCPH_SYNONYME_CLASSEPHARMTHERRow)
            rowSYCPH_SYNONYME_CLASSEPHARMTHERRow.ItemArray = New Object() {SYCPH_NOM_PK, parentCPH_CLASSEPHARMTHERRowByFK1_SYCPH_SYNONYME_CLASSEPHARM(0)}
            Me.Rows.Add(rowSYCPH_SYNONYME_CLASSEPHARMTHERRow)
            Return rowSYCPH_SYNONYME_CLASSEPHARMTHERRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYCPH_NOM_PK(ByVal SYCPH_NOM_PK As String) As SYCPH_SYNONYME_CLASSEPHARMTHERRow
            Return CType(Me.Rows.Find(New Object() {SYCPH_NOM_PK}),SYCPH_SYNONYME_CLASSEPHARMTHERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYCPH_SYNONYME_CLASSEPHARMTHERDataTable = CType(MyBase.Clone,SYCPH_SYNONYME_CLASSEPHARMTHERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYCPH_NOM_PK = MyBase.Columns("SYCPH_NOM_PK")
            Me.columnSYCPH_CPH_CODE_FK = MyBase.Columns("SYCPH_CPH_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYCPH_NOM_PK = New System.Data.DataColumn("SYCPH_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCPH_NOM_PK)
            Me.columnSYCPH_CPH_CODE_FK = New System.Data.DataColumn("SYCPH_CPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCPH_CPH_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYCPH_NOM_PK}, true))
            Me.columnSYCPH_NOM_PK.AllowDBNull = false
            Me.columnSYCPH_NOM_PK.Unique = true
            Me.columnSYCPH_NOM_PK.MaxLength = 40
            Me.columnSYCPH_CPH_CODE_FK.AllowDBNull = false
            Me.columnSYCPH_CPH_CODE_FK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYCPH_SYNONYME_CLASSEPHARMTHERRow() As SYCPH_SYNONYME_CLASSEPHARMTHERRow
            Return CType(Me.NewRow,SYCPH_SYNONYME_CLASSEPHARMTHERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYCPH_SYNONYME_CLASSEPHARMTHERRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYCPH_SYNONYME_CLASSEPHARMTHERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYCPH_SYNONYME_CLASSEPHARMTHERRowChangedEvent) Is Nothing) Then
                RaiseEvent SYCPH_SYNONYME_CLASSEPHARMTHERRowChanged(Me, New SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,SYCPH_SYNONYME_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYCPH_SYNONYME_CLASSEPHARMTHERRowChangingEvent) Is Nothing) Then
                RaiseEvent SYCPH_SYNONYME_CLASSEPHARMTHERRowChanging(Me, New SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,SYCPH_SYNONYME_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYCPH_SYNONYME_CLASSEPHARMTHERRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYCPH_SYNONYME_CLASSEPHARMTHERRowDeleted(Me, New SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,SYCPH_SYNONYME_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYCPH_SYNONYME_CLASSEPHARMTHERRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYCPH_SYNONYME_CLASSEPHARMTHERRowDeleting(Me, New SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,SYCPH_SYNONYME_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYCPH_SYNONYME_CLASSEPHARMTHERRow(ByVal row As SYCPH_SYNONYME_CLASSEPHARMTHERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYCPH_SYNONYME_CLASSEPHARMTHERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CCH_CLASSECHIMIQUEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCCH_CODE_PK As System.Data.DataColumn
        
        Private columnCCH_CCH_CODE_FK As System.Data.DataColumn
        
        Private columnCCH_NOM As System.Data.DataColumn
        
        Private columnCCH_DATECR As System.Data.DataColumn
        
        Private columnCCH_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CCH_CLASSECHIMIQUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCH_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCCH_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCH_CCH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCCH_CCH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCH_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCCH_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCH_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCCH_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCH_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCCH_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CCH_CLASSECHIMIQUERow
            Get
                Return CType(Me.Rows(index),CCH_CLASSECHIMIQUERow)
            End Get
        End Property
        
        Public Event CCH_CLASSECHIMIQUERowChanging As CCH_CLASSECHIMIQUERowChangeEventHandler
        
        Public Event CCH_CLASSECHIMIQUERowChanged As CCH_CLASSECHIMIQUERowChangeEventHandler
        
        Public Event CCH_CLASSECHIMIQUERowDeleting As CCH_CLASSECHIMIQUERowChangeEventHandler
        
        Public Event CCH_CLASSECHIMIQUERowDeleted As CCH_CLASSECHIMIQUERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCCH_CLASSECHIMIQUERow(ByVal row As CCH_CLASSECHIMIQUERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCCH_CLASSECHIMIQUERow(ByVal CCH_CODE_PK As String, ByVal parentCCH_CLASSECHIMIQUERowByFK1_CCH_CLASSECHIMIQUE As CCH_CLASSECHIMIQUERow, ByVal CCH_NOM As String, ByVal CCH_DATECR As Date, ByVal CCH_DATEMJ As Date) As CCH_CLASSECHIMIQUERow
            Dim rowCCH_CLASSECHIMIQUERow As CCH_CLASSECHIMIQUERow = CType(Me.NewRow,CCH_CLASSECHIMIQUERow)
            rowCCH_CLASSECHIMIQUERow.ItemArray = New Object() {CCH_CODE_PK, parentCCH_CLASSECHIMIQUERowByFK1_CCH_CLASSECHIMIQUE(0), CCH_NOM, CCH_DATECR, CCH_DATEMJ}
            Me.Rows.Add(rowCCH_CLASSECHIMIQUERow)
            Return rowCCH_CLASSECHIMIQUERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCCH_CODE_PK(ByVal CCH_CODE_PK As String) As CCH_CLASSECHIMIQUERow
            Return CType(Me.Rows.Find(New Object() {CCH_CODE_PK}),CCH_CLASSECHIMIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CCH_CLASSECHIMIQUEDataTable = CType(MyBase.Clone,CCH_CLASSECHIMIQUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CCH_CLASSECHIMIQUEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCCH_CODE_PK = MyBase.Columns("CCH_CODE_PK")
            Me.columnCCH_CCH_CODE_FK = MyBase.Columns("CCH_CCH_CODE_FK")
            Me.columnCCH_NOM = MyBase.Columns("CCH_NOM")
            Me.columnCCH_DATECR = MyBase.Columns("CCH_DATECR")
            Me.columnCCH_DATEMJ = MyBase.Columns("CCH_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCCH_CODE_PK = New System.Data.DataColumn("CCH_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCH_CODE_PK)
            Me.columnCCH_CCH_CODE_FK = New System.Data.DataColumn("CCH_CCH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCH_CCH_CODE_FK)
            Me.columnCCH_NOM = New System.Data.DataColumn("CCH_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCH_NOM)
            Me.columnCCH_DATECR = New System.Data.DataColumn("CCH_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCH_DATECR)
            Me.columnCCH_DATEMJ = New System.Data.DataColumn("CCH_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCH_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCCH_CODE_PK}, true))
            Me.columnCCH_CODE_PK.AllowDBNull = false
            Me.columnCCH_CODE_PK.Unique = true
            Me.columnCCH_CODE_PK.MaxLength = 10
            Me.columnCCH_CCH_CODE_FK.MaxLength = 10
            Me.columnCCH_NOM.AllowDBNull = false
            Me.columnCCH_NOM.MaxLength = 40
            Me.columnCCH_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCCH_CLASSECHIMIQUERow() As CCH_CLASSECHIMIQUERow
            Return CType(Me.NewRow,CCH_CLASSECHIMIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CCH_CLASSECHIMIQUERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CCH_CLASSECHIMIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CCH_CLASSECHIMIQUERowChangedEvent) Is Nothing) Then
                RaiseEvent CCH_CLASSECHIMIQUERowChanged(Me, New CCH_CLASSECHIMIQUERowChangeEvent(CType(e.Row,CCH_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CCH_CLASSECHIMIQUERowChangingEvent) Is Nothing) Then
                RaiseEvent CCH_CLASSECHIMIQUERowChanging(Me, New CCH_CLASSECHIMIQUERowChangeEvent(CType(e.Row,CCH_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CCH_CLASSECHIMIQUERowDeletedEvent) Is Nothing) Then
                RaiseEvent CCH_CLASSECHIMIQUERowDeleted(Me, New CCH_CLASSECHIMIQUERowChangeEvent(CType(e.Row,CCH_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CCH_CLASSECHIMIQUERowDeletingEvent) Is Nothing) Then
                RaiseEvent CCH_CLASSECHIMIQUERowDeleting(Me, New CCH_CLASSECHIMIQUERowChangeEvent(CType(e.Row,CCH_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCCH_CLASSECHIMIQUERow(ByVal row As CCH_CLASSECHIMIQUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CCH_CLASSECHIMIQUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYCCH_NOM_PK As System.Data.DataColumn
        
        Private columnSYCCH_CCH_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYCCH_SYNONYME_CLASSECHIMIQUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCCH_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCCH_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCCH_CCH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCCH_CCH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYCCH_SYNONYME_CLASSECHIMIQUERow
            Get
                Return CType(Me.Rows(index),SYCCH_SYNONYME_CLASSECHIMIQUERow)
            End Get
        End Property
        
        Public Event SYCCH_SYNONYME_CLASSECHIMIQUERowChanging As SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEventHandler
        
        Public Event SYCCH_SYNONYME_CLASSECHIMIQUERowChanged As SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEventHandler
        
        Public Event SYCCH_SYNONYME_CLASSECHIMIQUERowDeleting As SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEventHandler
        
        Public Event SYCCH_SYNONYME_CLASSECHIMIQUERowDeleted As SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYCCH_SYNONYME_CLASSECHIMIQUERow(ByVal row As SYCCH_SYNONYME_CLASSECHIMIQUERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYCCH_SYNONYME_CLASSECHIMIQUERow(ByVal SYCCH_NOM_PK As String, ByVal parentCCH_CLASSECHIMIQUERowByFK1_SYCCH_SYNONYME_CLASSECHIMI As CCH_CLASSECHIMIQUERow) As SYCCH_SYNONYME_CLASSECHIMIQUERow
            Dim rowSYCCH_SYNONYME_CLASSECHIMIQUERow As SYCCH_SYNONYME_CLASSECHIMIQUERow = CType(Me.NewRow,SYCCH_SYNONYME_CLASSECHIMIQUERow)
            rowSYCCH_SYNONYME_CLASSECHIMIQUERow.ItemArray = New Object() {SYCCH_NOM_PK, parentCCH_CLASSECHIMIQUERowByFK1_SYCCH_SYNONYME_CLASSECHIMI(0)}
            Me.Rows.Add(rowSYCCH_SYNONYME_CLASSECHIMIQUERow)
            Return rowSYCCH_SYNONYME_CLASSECHIMIQUERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYCCH_NOM_PK(ByVal SYCCH_NOM_PK As String) As SYCCH_SYNONYME_CLASSECHIMIQUERow
            Return CType(Me.Rows.Find(New Object() {SYCCH_NOM_PK}),SYCCH_SYNONYME_CLASSECHIMIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYCCH_SYNONYME_CLASSECHIMIQUEDataTable = CType(MyBase.Clone,SYCCH_SYNONYME_CLASSECHIMIQUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYCCH_NOM_PK = MyBase.Columns("SYCCH_NOM_PK")
            Me.columnSYCCH_CCH_CODE_FK = MyBase.Columns("SYCCH_CCH_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYCCH_NOM_PK = New System.Data.DataColumn("SYCCH_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCCH_NOM_PK)
            Me.columnSYCCH_CCH_CODE_FK = New System.Data.DataColumn("SYCCH_CCH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCCH_CCH_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYCCH_NOM_PK}, true))
            Me.columnSYCCH_NOM_PK.AllowDBNull = false
            Me.columnSYCCH_NOM_PK.Unique = true
            Me.columnSYCCH_NOM_PK.MaxLength = 40
            Me.columnSYCCH_CCH_CODE_FK.AllowDBNull = false
            Me.columnSYCCH_CCH_CODE_FK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYCCH_SYNONYME_CLASSECHIMIQUERow() As SYCCH_SYNONYME_CLASSECHIMIQUERow
            Return CType(Me.NewRow,SYCCH_SYNONYME_CLASSECHIMIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYCCH_SYNONYME_CLASSECHIMIQUERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYCCH_SYNONYME_CLASSECHIMIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYCCH_SYNONYME_CLASSECHIMIQUERowChangedEvent) Is Nothing) Then
                RaiseEvent SYCCH_SYNONYME_CLASSECHIMIQUERowChanged(Me, New SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEvent(CType(e.Row,SYCCH_SYNONYME_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYCCH_SYNONYME_CLASSECHIMIQUERowChangingEvent) Is Nothing) Then
                RaiseEvent SYCCH_SYNONYME_CLASSECHIMIQUERowChanging(Me, New SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEvent(CType(e.Row,SYCCH_SYNONYME_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYCCH_SYNONYME_CLASSECHIMIQUERowDeletedEvent) Is Nothing) Then
                RaiseEvent SYCCH_SYNONYME_CLASSECHIMIQUERowDeleted(Me, New SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEvent(CType(e.Row,SYCCH_SYNONYME_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYCCH_SYNONYME_CLASSECHIMIQUERowDeletingEvent) Is Nothing) Then
                RaiseEvent SYCCH_SYNONYME_CLASSECHIMIQUERowDeleting(Me, New SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEvent(CType(e.Row,SYCCH_SYNONYME_CLASSECHIMIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYCCH_SYNONYME_CLASSECHIMIQUERow(ByVal row As SYCCH_SYNONYME_CLASSECHIMIQUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYCCH_SYNONYME_CLASSECHIMIQUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CGE_CLASSEGESTIONDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCGE_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnCGE_NOM As System.Data.DataColumn
        
        Private columnCGE_DATECR As System.Data.DataColumn
        
        Private columnCGE_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CGE_CLASSEGESTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CGE_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCGE_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CGE_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCGE_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CGE_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCGE_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CGE_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCGE_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CGE_CLASSEGESTIONRow
            Get
                Return CType(Me.Rows(index),CGE_CLASSEGESTIONRow)
            End Get
        End Property
        
        Public Event CGE_CLASSEGESTIONRowChanging As CGE_CLASSEGESTIONRowChangeEventHandler
        
        Public Event CGE_CLASSEGESTIONRowChanged As CGE_CLASSEGESTIONRowChangeEventHandler
        
        Public Event CGE_CLASSEGESTIONRowDeleting As CGE_CLASSEGESTIONRowChangeEventHandler
        
        Public Event CGE_CLASSEGESTIONRowDeleted As CGE_CLASSEGESTIONRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCGE_CLASSEGESTIONRow(ByVal row As CGE_CLASSEGESTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCGE_CLASSEGESTIONRow(ByVal CGE_CODE_SQ_PK As Integer, ByVal CGE_NOM As String, ByVal CGE_DATECR As Date, ByVal CGE_DATEMJ As Date) As CGE_CLASSEGESTIONRow
            Dim rowCGE_CLASSEGESTIONRow As CGE_CLASSEGESTIONRow = CType(Me.NewRow,CGE_CLASSEGESTIONRow)
            rowCGE_CLASSEGESTIONRow.ItemArray = New Object() {CGE_CODE_SQ_PK, CGE_NOM, CGE_DATECR, CGE_DATEMJ}
            Me.Rows.Add(rowCGE_CLASSEGESTIONRow)
            Return rowCGE_CLASSEGESTIONRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCGE_CODE_SQ_PK(ByVal CGE_CODE_SQ_PK As Integer) As CGE_CLASSEGESTIONRow
            Return CType(Me.Rows.Find(New Object() {CGE_CODE_SQ_PK}),CGE_CLASSEGESTIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CGE_CLASSEGESTIONDataTable = CType(MyBase.Clone,CGE_CLASSEGESTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CGE_CLASSEGESTIONDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCGE_CODE_SQ_PK = MyBase.Columns("CGE_CODE_SQ_PK")
            Me.columnCGE_NOM = MyBase.Columns("CGE_NOM")
            Me.columnCGE_DATECR = MyBase.Columns("CGE_DATECR")
            Me.columnCGE_DATEMJ = MyBase.Columns("CGE_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCGE_CODE_SQ_PK = New System.Data.DataColumn("CGE_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCGE_CODE_SQ_PK)
            Me.columnCGE_NOM = New System.Data.DataColumn("CGE_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCGE_NOM)
            Me.columnCGE_DATECR = New System.Data.DataColumn("CGE_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCGE_DATECR)
            Me.columnCGE_DATEMJ = New System.Data.DataColumn("CGE_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCGE_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCGE_CODE_SQ_PK}, true))
            Me.columnCGE_CODE_SQ_PK.AllowDBNull = false
            Me.columnCGE_CODE_SQ_PK.Unique = true
            Me.columnCGE_NOM.AllowDBNull = false
            Me.columnCGE_NOM.MaxLength = 40
            Me.columnCGE_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCGE_CLASSEGESTIONRow() As CGE_CLASSEGESTIONRow
            Return CType(Me.NewRow,CGE_CLASSEGESTIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CGE_CLASSEGESTIONRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CGE_CLASSEGESTIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CGE_CLASSEGESTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent CGE_CLASSEGESTIONRowChanged(Me, New CGE_CLASSEGESTIONRowChangeEvent(CType(e.Row,CGE_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CGE_CLASSEGESTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent CGE_CLASSEGESTIONRowChanging(Me, New CGE_CLASSEGESTIONRowChangeEvent(CType(e.Row,CGE_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CGE_CLASSEGESTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent CGE_CLASSEGESTIONRowDeleted(Me, New CGE_CLASSEGESTIONRowChangeEvent(CType(e.Row,CGE_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CGE_CLASSEGESTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent CGE_CLASSEGESTIONRowDeleting(Me, New CGE_CLASSEGESTIONRowChangeEvent(CType(e.Row,CGE_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCGE_CLASSEGESTIONRow(ByVal row As CGE_CLASSEGESTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CGE_CLASSEGESTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYCGE_SYNONYME_CLASSEGESTIONDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYCGE_NOM_PK As System.Data.DataColumn
        
        Private columnSYCGE_CGE_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYCGE_SYNONYME_CLASSEGESTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCGE_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCGE_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCGE_CGE_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCGE_CGE_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYCGE_SYNONYME_CLASSEGESTIONRow
            Get
                Return CType(Me.Rows(index),SYCGE_SYNONYME_CLASSEGESTIONRow)
            End Get
        End Property
        
        Public Event SYCGE_SYNONYME_CLASSEGESTIONRowChanging As SYCGE_SYNONYME_CLASSEGESTIONRowChangeEventHandler
        
        Public Event SYCGE_SYNONYME_CLASSEGESTIONRowChanged As SYCGE_SYNONYME_CLASSEGESTIONRowChangeEventHandler
        
        Public Event SYCGE_SYNONYME_CLASSEGESTIONRowDeleting As SYCGE_SYNONYME_CLASSEGESTIONRowChangeEventHandler
        
        Public Event SYCGE_SYNONYME_CLASSEGESTIONRowDeleted As SYCGE_SYNONYME_CLASSEGESTIONRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYCGE_SYNONYME_CLASSEGESTIONRow(ByVal row As SYCGE_SYNONYME_CLASSEGESTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYCGE_SYNONYME_CLASSEGESTIONRow(ByVal SYCGE_NOM_PK As String, ByVal parentCGE_CLASSEGESTIONRowByFK1_SYCGE_SYNONYME_CLASSEGESTI As CGE_CLASSEGESTIONRow) As SYCGE_SYNONYME_CLASSEGESTIONRow
            Dim rowSYCGE_SYNONYME_CLASSEGESTIONRow As SYCGE_SYNONYME_CLASSEGESTIONRow = CType(Me.NewRow,SYCGE_SYNONYME_CLASSEGESTIONRow)
            rowSYCGE_SYNONYME_CLASSEGESTIONRow.ItemArray = New Object() {SYCGE_NOM_PK, parentCGE_CLASSEGESTIONRowByFK1_SYCGE_SYNONYME_CLASSEGESTI(0)}
            Me.Rows.Add(rowSYCGE_SYNONYME_CLASSEGESTIONRow)
            Return rowSYCGE_SYNONYME_CLASSEGESTIONRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYCGE_NOM_PK(ByVal SYCGE_NOM_PK As String) As SYCGE_SYNONYME_CLASSEGESTIONRow
            Return CType(Me.Rows.Find(New Object() {SYCGE_NOM_PK}),SYCGE_SYNONYME_CLASSEGESTIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYCGE_SYNONYME_CLASSEGESTIONDataTable = CType(MyBase.Clone,SYCGE_SYNONYME_CLASSEGESTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYCGE_SYNONYME_CLASSEGESTIONDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYCGE_NOM_PK = MyBase.Columns("SYCGE_NOM_PK")
            Me.columnSYCGE_CGE_CODE_FK = MyBase.Columns("SYCGE_CGE_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYCGE_NOM_PK = New System.Data.DataColumn("SYCGE_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCGE_NOM_PK)
            Me.columnSYCGE_CGE_CODE_FK = New System.Data.DataColumn("SYCGE_CGE_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCGE_CGE_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYCGE_NOM_PK}, true))
            Me.columnSYCGE_NOM_PK.AllowDBNull = false
            Me.columnSYCGE_NOM_PK.Unique = true
            Me.columnSYCGE_NOM_PK.MaxLength = 40
            Me.columnSYCGE_CGE_CODE_FK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYCGE_SYNONYME_CLASSEGESTIONRow() As SYCGE_SYNONYME_CLASSEGESTIONRow
            Return CType(Me.NewRow,SYCGE_SYNONYME_CLASSEGESTIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYCGE_SYNONYME_CLASSEGESTIONRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYCGE_SYNONYME_CLASSEGESTIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYCGE_SYNONYME_CLASSEGESTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent SYCGE_SYNONYME_CLASSEGESTIONRowChanged(Me, New SYCGE_SYNONYME_CLASSEGESTIONRowChangeEvent(CType(e.Row,SYCGE_SYNONYME_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYCGE_SYNONYME_CLASSEGESTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent SYCGE_SYNONYME_CLASSEGESTIONRowChanging(Me, New SYCGE_SYNONYME_CLASSEGESTIONRowChangeEvent(CType(e.Row,SYCGE_SYNONYME_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYCGE_SYNONYME_CLASSEGESTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYCGE_SYNONYME_CLASSEGESTIONRowDeleted(Me, New SYCGE_SYNONYME_CLASSEGESTIONRowChangeEvent(CType(e.Row,SYCGE_SYNONYME_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYCGE_SYNONYME_CLASSEGESTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYCGE_SYNONYME_CLASSEGESTIONRowDeleting(Me, New SYCGE_SYNONYME_CLASSEGESTIONRowChangeEvent(CType(e.Row,SYCGE_SYNONYME_CLASSEGESTIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYCGE_SYNONYME_CLASSEGESTIONRow(ByVal row As SYCGE_SYNONYME_CLASSEGESTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYCGE_SYNONYME_CLASSEGESTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CIM10DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCIM_CODE_PK As System.Data.DataColumn
        
        Private columnCIM_CIM_CODE_FK As System.Data.DataColumn
        
        Private columnCIM_LIBELLE_COURT As System.Data.DataColumn
        
        Private columnCIM_LIBELLE_LONG As System.Data.DataColumn
        
        Private columnCIM_DATECR As System.Data.DataColumn
        
        Private columnCIM_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CIM10"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_CIM_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_CIM_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_LIBELLE_COURTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_LIBELLE_COURT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_LIBELLE_LONGColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_LIBELLE_LONG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CIM10Row
            Get
                Return CType(Me.Rows(index),CIM10Row)
            End Get
        End Property
        
        Public Event CIM10RowChanging As CIM10RowChangeEventHandler
        
        Public Event CIM10RowChanged As CIM10RowChangeEventHandler
        
        Public Event CIM10RowDeleting As CIM10RowChangeEventHandler
        
        Public Event CIM10RowDeleted As CIM10RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCIM10Row(ByVal row As CIM10Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCIM10Row(ByVal CIM_CODE_PK As String, ByVal CIM_CIM_CODE_FK As String, ByVal CIM_LIBELLE_COURT As String, ByVal CIM_LIBELLE_LONG As String, ByVal CIM_DATECR As Date, ByVal CIM_DATEMJ As Date) As CIM10Row
            Dim rowCIM10Row As CIM10Row = CType(Me.NewRow,CIM10Row)
            rowCIM10Row.ItemArray = New Object() {CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DATECR, CIM_DATEMJ}
            Me.Rows.Add(rowCIM10Row)
            Return rowCIM10Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCIM_CODE_PK(ByVal CIM_CODE_PK As String) As CIM10Row
            Return CType(Me.Rows.Find(New Object() {CIM_CODE_PK}),CIM10Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CIM10DataTable = CType(MyBase.Clone,CIM10DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CIM10DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCIM_CODE_PK = MyBase.Columns("CIM_CODE_PK")
            Me.columnCIM_CIM_CODE_FK = MyBase.Columns("CIM_CIM_CODE_FK")
            Me.columnCIM_LIBELLE_COURT = MyBase.Columns("CIM_LIBELLE_COURT")
            Me.columnCIM_LIBELLE_LONG = MyBase.Columns("CIM_LIBELLE_LONG")
            Me.columnCIM_DATECR = MyBase.Columns("CIM_DATECR")
            Me.columnCIM_DATEMJ = MyBase.Columns("CIM_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCIM_CODE_PK = New System.Data.DataColumn("CIM_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_CODE_PK)
            Me.columnCIM_CIM_CODE_FK = New System.Data.DataColumn("CIM_CIM_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_CIM_CODE_FK)
            Me.columnCIM_LIBELLE_COURT = New System.Data.DataColumn("CIM_LIBELLE_COURT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_LIBELLE_COURT)
            Me.columnCIM_LIBELLE_LONG = New System.Data.DataColumn("CIM_LIBELLE_LONG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_LIBELLE_LONG)
            Me.columnCIM_DATECR = New System.Data.DataColumn("CIM_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_DATECR)
            Me.columnCIM_DATEMJ = New System.Data.DataColumn("CIM_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCIM_CODE_PK}, true))
            Me.columnCIM_CODE_PK.AllowDBNull = false
            Me.columnCIM_CODE_PK.Unique = true
            Me.columnCIM_CODE_PK.MaxLength = 10
            Me.columnCIM_CIM_CODE_FK.MaxLength = 10
            Me.columnCIM_LIBELLE_COURT.AllowDBNull = false
            Me.columnCIM_LIBELLE_COURT.MaxLength = 70
            Me.columnCIM_LIBELLE_LONG.MaxLength = 200
            Me.columnCIM_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCIM10Row() As CIM10Row
            Return CType(Me.NewRow,CIM10Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CIM10Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CIM10Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CIM10RowChangedEvent) Is Nothing) Then
                RaiseEvent CIM10RowChanged(Me, New CIM10RowChangeEvent(CType(e.Row,CIM10Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CIM10RowChangingEvent) Is Nothing) Then
                RaiseEvent CIM10RowChanging(Me, New CIM10RowChangeEvent(CType(e.Row,CIM10Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CIM10RowDeletedEvent) Is Nothing) Then
                RaiseEvent CIM10RowDeleted(Me, New CIM10RowChangeEvent(CType(e.Row,CIM10Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CIM10RowDeletingEvent) Is Nothing) Then
                RaiseEvent CIM10RowDeleting(Me, New CIM10RowChangeEvent(CType(e.Row,CIM10Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCIM10Row(ByVal row As CIM10Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CIM10DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CIM10_2DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCIM_CODE_PK As System.Data.DataColumn
        
        Private columnCIM_CIM_CODE_FK As System.Data.DataColumn
        
        Private columnCIM_LIBELLE_COURT As System.Data.DataColumn
        
        Private columnCIM_LIBELLE_LONG As System.Data.DataColumn
        
        Private columnCIM_DATECR As System.Data.DataColumn
        
        Private columnCIM_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CIM10_2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_CIM_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_CIM_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_LIBELLE_COURTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_LIBELLE_COURT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_LIBELLE_LONGColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_LIBELLE_LONG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIM_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIM_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CIM10_2Row
            Get
                Return CType(Me.Rows(index),CIM10_2Row)
            End Get
        End Property
        
        Public Event CIM10_2RowChanging As CIM10_2RowChangeEventHandler
        
        Public Event CIM10_2RowChanged As CIM10_2RowChangeEventHandler
        
        Public Event CIM10_2RowDeleting As CIM10_2RowChangeEventHandler
        
        Public Event CIM10_2RowDeleted As CIM10_2RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCIM10_2Row(ByVal row As CIM10_2Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCIM10_2Row(ByVal CIM_CODE_PK As String, ByVal CIM_CIM_CODE_FK As String, ByVal CIM_LIBELLE_COURT As String, ByVal CIM_LIBELLE_LONG As String, ByVal CIM_DATECR As Date, ByVal CIM_DATEMJ As Date) As CIM10_2Row
            Dim rowCIM10_2Row As CIM10_2Row = CType(Me.NewRow,CIM10_2Row)
            rowCIM10_2Row.ItemArray = New Object() {CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DATECR, CIM_DATEMJ}
            Me.Rows.Add(rowCIM10_2Row)
            Return rowCIM10_2Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCIM_CODE_PK(ByVal CIM_CODE_PK As String) As CIM10_2Row
            Return CType(Me.Rows.Find(New Object() {CIM_CODE_PK}),CIM10_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CIM10_2DataTable = CType(MyBase.Clone,CIM10_2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CIM10_2DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCIM_CODE_PK = MyBase.Columns("CIM_CODE_PK")
            Me.columnCIM_CIM_CODE_FK = MyBase.Columns("CIM_CIM_CODE_FK")
            Me.columnCIM_LIBELLE_COURT = MyBase.Columns("CIM_LIBELLE_COURT")
            Me.columnCIM_LIBELLE_LONG = MyBase.Columns("CIM_LIBELLE_LONG")
            Me.columnCIM_DATECR = MyBase.Columns("CIM_DATECR")
            Me.columnCIM_DATEMJ = MyBase.Columns("CIM_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCIM_CODE_PK = New System.Data.DataColumn("CIM_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_CODE_PK)
            Me.columnCIM_CIM_CODE_FK = New System.Data.DataColumn("CIM_CIM_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_CIM_CODE_FK)
            Me.columnCIM_LIBELLE_COURT = New System.Data.DataColumn("CIM_LIBELLE_COURT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_LIBELLE_COURT)
            Me.columnCIM_LIBELLE_LONG = New System.Data.DataColumn("CIM_LIBELLE_LONG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_LIBELLE_LONG)
            Me.columnCIM_DATECR = New System.Data.DataColumn("CIM_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_DATECR)
            Me.columnCIM_DATEMJ = New System.Data.DataColumn("CIM_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIM_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCIM_CODE_PK}, true))
            Me.columnCIM_CODE_PK.AllowDBNull = false
            Me.columnCIM_CODE_PK.Unique = true
            Me.columnCIM_CODE_PK.MaxLength = 10
            Me.columnCIM_CIM_CODE_FK.MaxLength = 10
            Me.columnCIM_LIBELLE_COURT.AllowDBNull = false
            Me.columnCIM_LIBELLE_COURT.MaxLength = 70
            Me.columnCIM_LIBELLE_LONG.MaxLength = 200
            Me.columnCIM_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCIM10_2Row() As CIM10_2Row
            Return CType(Me.NewRow,CIM10_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CIM10_2Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CIM10_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CIM10_2RowChangedEvent) Is Nothing) Then
                RaiseEvent CIM10_2RowChanged(Me, New CIM10_2RowChangeEvent(CType(e.Row,CIM10_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CIM10_2RowChangingEvent) Is Nothing) Then
                RaiseEvent CIM10_2RowChanging(Me, New CIM10_2RowChangeEvent(CType(e.Row,CIM10_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CIM10_2RowDeletedEvent) Is Nothing) Then
                RaiseEvent CIM10_2RowDeleted(Me, New CIM10_2RowChangeEvent(CType(e.Row,CIM10_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CIM10_2RowDeletingEvent) Is Nothing) Then
                RaiseEvent CIM10_2RowDeleting(Me, New CIM10_2RowChangeEvent(CType(e.Row,CIM10_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCIM10_2Row(ByVal row As CIM10_2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CIM10_2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CEPH_CLASSEEPHMRADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCEPH_CODE_PK As System.Data.DataColumn
        
        Private columnCEPH_CEPH_CODE_FK As System.Data.DataColumn
        
        Private columnCEPH_NOMF As System.Data.DataColumn
        
        Private columnCEPH_NOMA As System.Data.DataColumn
        
        Private columnCEPH_DATECR As System.Data.DataColumn
        
        Private columnCEPH_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CEPH_CLASSEEPHMRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_CEPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_CEPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_NOMFColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_NOMF
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_NOMAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_NOMA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEPH_CLASSEEPHMRARow
            Get
                Return CType(Me.Rows(index),CEPH_CLASSEEPHMRARow)
            End Get
        End Property
        
        Public Event CEPH_CLASSEEPHMRARowChanging As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        Public Event CEPH_CLASSEEPHMRARowChanged As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        Public Event CEPH_CLASSEEPHMRARowDeleting As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        Public Event CEPH_CLASSEEPHMRARowDeleted As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCEPH_CLASSEEPHMRARow(ByVal row As CEPH_CLASSEEPHMRARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCEPH_CLASSEEPHMRARow(ByVal CEPH_CODE_PK As String, ByVal parentCEPH_CLASSEEPHMRARowByFK1_CEPH_CLASSEEPHMRA As CEPH_CLASSEEPHMRARow, ByVal CEPH_NOMF As String, ByVal CEPH_NOMA As String, ByVal CEPH_DATECR As Date, ByVal CEPH_DATEMJ As Date) As CEPH_CLASSEEPHMRARow
            Dim rowCEPH_CLASSEEPHMRARow As CEPH_CLASSEEPHMRARow = CType(Me.NewRow,CEPH_CLASSEEPHMRARow)
            rowCEPH_CLASSEEPHMRARow.ItemArray = New Object() {CEPH_CODE_PK, parentCEPH_CLASSEEPHMRARowByFK1_CEPH_CLASSEEPHMRA(0), CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_DATEMJ}
            Me.Rows.Add(rowCEPH_CLASSEEPHMRARow)
            Return rowCEPH_CLASSEEPHMRARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCEPH_CODE_PK(ByVal CEPH_CODE_PK As String) As CEPH_CLASSEEPHMRARow
            Return CType(Me.Rows.Find(New Object() {CEPH_CODE_PK}),CEPH_CLASSEEPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CEPH_CLASSEEPHMRADataTable = CType(MyBase.Clone,CEPH_CLASSEEPHMRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CEPH_CLASSEEPHMRADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCEPH_CODE_PK = MyBase.Columns("CEPH_CODE_PK")
            Me.columnCEPH_CEPH_CODE_FK = MyBase.Columns("CEPH_CEPH_CODE_FK")
            Me.columnCEPH_NOMF = MyBase.Columns("CEPH_NOMF")
            Me.columnCEPH_NOMA = MyBase.Columns("CEPH_NOMA")
            Me.columnCEPH_DATECR = MyBase.Columns("CEPH_DATECR")
            Me.columnCEPH_DATEMJ = MyBase.Columns("CEPH_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCEPH_CODE_PK = New System.Data.DataColumn("CEPH_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_CODE_PK)
            Me.columnCEPH_CEPH_CODE_FK = New System.Data.DataColumn("CEPH_CEPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_CEPH_CODE_FK)
            Me.columnCEPH_NOMF = New System.Data.DataColumn("CEPH_NOMF", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_NOMF)
            Me.columnCEPH_NOMA = New System.Data.DataColumn("CEPH_NOMA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_NOMA)
            Me.columnCEPH_DATECR = New System.Data.DataColumn("CEPH_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_DATECR)
            Me.columnCEPH_DATEMJ = New System.Data.DataColumn("CEPH_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCEPH_CODE_PK}, true))
            Me.columnCEPH_CODE_PK.AllowDBNull = false
            Me.columnCEPH_CODE_PK.Unique = true
            Me.columnCEPH_CODE_PK.MaxLength = 10
            Me.columnCEPH_CEPH_CODE_FK.MaxLength = 10
            Me.columnCEPH_NOMF.AllowDBNull = false
            Me.columnCEPH_NOMF.MaxLength = 77
            Me.columnCEPH_NOMA.AllowDBNull = false
            Me.columnCEPH_NOMA.MaxLength = 77
            Me.columnCEPH_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCEPH_CLASSEEPHMRARow() As CEPH_CLASSEEPHMRARow
            Return CType(Me.NewRow,CEPH_CLASSEEPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CEPH_CLASSEEPHMRARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CEPH_CLASSEEPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowChangedEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowChanged(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowChangingEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowChanging(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowDeletedEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowDeleted(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowDeletingEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowDeleting(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCEPH_CLASSEEPHMRARow(ByVal row As CEPH_CLASSEEPHMRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CEPH_CLASSEEPHMRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CATC_CLASSEATCDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCATC_CODE_PK As System.Data.DataColumn
        
        Private columnCATC_CATC_CODE_FK As System.Data.DataColumn
        
        Private columnCATC_NOMF As System.Data.DataColumn
        
        Private columnCATC_NOMA As System.Data.DataColumn
        
        Private columnCATC_DATECR As System.Data.DataColumn
        
        Private columnCATC_DATEMJ As System.Data.DataColumn
        
        Private columnCATC_TEXTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CATC_CLASSEATC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_CATC_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_CATC_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_NOMFColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_NOMF
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_NOMAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_NOMA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATC_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCATC_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CATC_CLASSEATCRow
            Get
                Return CType(Me.Rows(index),CATC_CLASSEATCRow)
            End Get
        End Property
        
        Public Event CATC_CLASSEATCRowChanging As CATC_CLASSEATCRowChangeEventHandler
        
        Public Event CATC_CLASSEATCRowChanged As CATC_CLASSEATCRowChangeEventHandler
        
        Public Event CATC_CLASSEATCRowDeleting As CATC_CLASSEATCRowChangeEventHandler
        
        Public Event CATC_CLASSEATCRowDeleted As CATC_CLASSEATCRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCATC_CLASSEATCRow(ByVal row As CATC_CLASSEATCRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCATC_CLASSEATCRow(ByVal CATC_CODE_PK As String, ByVal parentCATC_CLASSEATCRowByFK1_CATC_CLASSEATC As CATC_CLASSEATCRow, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As Date, ByVal CATC_TEXTE As String) As CATC_CLASSEATCRow
            Dim rowCATC_CLASSEATCRow As CATC_CLASSEATCRow = CType(Me.NewRow,CATC_CLASSEATCRow)
            rowCATC_CLASSEATCRow.ItemArray = New Object() {CATC_CODE_PK, parentCATC_CLASSEATCRowByFK1_CATC_CLASSEATC(0), CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_DATEMJ, CATC_TEXTE}
            Me.Rows.Add(rowCATC_CLASSEATCRow)
            Return rowCATC_CLASSEATCRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCATC_CODE_PK(ByVal CATC_CODE_PK As String) As CATC_CLASSEATCRow
            Return CType(Me.Rows.Find(New Object() {CATC_CODE_PK}),CATC_CLASSEATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CATC_CLASSEATCDataTable = CType(MyBase.Clone,CATC_CLASSEATCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CATC_CLASSEATCDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCATC_CODE_PK = MyBase.Columns("CATC_CODE_PK")
            Me.columnCATC_CATC_CODE_FK = MyBase.Columns("CATC_CATC_CODE_FK")
            Me.columnCATC_NOMF = MyBase.Columns("CATC_NOMF")
            Me.columnCATC_NOMA = MyBase.Columns("CATC_NOMA")
            Me.columnCATC_DATECR = MyBase.Columns("CATC_DATECR")
            Me.columnCATC_DATEMJ = MyBase.Columns("CATC_DATEMJ")
            Me.columnCATC_TEXTE = MyBase.Columns("CATC_TEXTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCATC_CODE_PK = New System.Data.DataColumn("CATC_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_CODE_PK)
            Me.columnCATC_CATC_CODE_FK = New System.Data.DataColumn("CATC_CATC_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_CATC_CODE_FK)
            Me.columnCATC_NOMF = New System.Data.DataColumn("CATC_NOMF", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_NOMF)
            Me.columnCATC_NOMA = New System.Data.DataColumn("CATC_NOMA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_NOMA)
            Me.columnCATC_DATECR = New System.Data.DataColumn("CATC_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_DATECR)
            Me.columnCATC_DATEMJ = New System.Data.DataColumn("CATC_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_DATEMJ)
            Me.columnCATC_TEXTE = New System.Data.DataColumn("CATC_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATC_TEXTE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCATC_CODE_PK}, true))
            Me.columnCATC_CODE_PK.AllowDBNull = false
            Me.columnCATC_CODE_PK.Unique = true
            Me.columnCATC_CODE_PK.MaxLength = 10
            Me.columnCATC_CATC_CODE_FK.MaxLength = 10
            Me.columnCATC_NOMF.AllowDBNull = false
            Me.columnCATC_NOMF.MaxLength = 77
            Me.columnCATC_NOMA.AllowDBNull = false
            Me.columnCATC_NOMA.MaxLength = 77
            Me.columnCATC_DATECR.AllowDBNull = false
            Me.columnCATC_TEXTE.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCATC_CLASSEATCRow() As CATC_CLASSEATCRow
            Return CType(Me.NewRow,CATC_CLASSEATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CATC_CLASSEATCRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CATC_CLASSEATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CATC_CLASSEATCRowChangedEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowChanged(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CATC_CLASSEATCRowChangingEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowChanging(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CATC_CLASSEATCRowDeletedEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowDeleted(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CATC_CLASSEATCRowDeletingEvent) Is Nothing) Then
                RaiseEvent CATC_CLASSEATCRowDeleting(Me, New CATC_CLASSEATCRowChangeEvent(CType(e.Row,CATC_CLASSEATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCATC_CLASSEATCRow(ByVal row As CATC_CLASSEATCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CATC_CLASSEATCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYFATC_SYNONYMEFR_ATCDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYFATC_NOM_PK As System.Data.DataColumn
        
        Private columnSYFATC_CATC_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYFATC_SYNONYMEFR_ATC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFATC_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYFATC_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFATC_CATC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYFATC_CATC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYFATC_SYNONYMEFR_ATCRow
            Get
                Return CType(Me.Rows(index),SYFATC_SYNONYMEFR_ATCRow)
            End Get
        End Property
        
        Public Event SYFATC_SYNONYMEFR_ATCRowChanging As SYFATC_SYNONYMEFR_ATCRowChangeEventHandler
        
        Public Event SYFATC_SYNONYMEFR_ATCRowChanged As SYFATC_SYNONYMEFR_ATCRowChangeEventHandler
        
        Public Event SYFATC_SYNONYMEFR_ATCRowDeleting As SYFATC_SYNONYMEFR_ATCRowChangeEventHandler
        
        Public Event SYFATC_SYNONYMEFR_ATCRowDeleted As SYFATC_SYNONYMEFR_ATCRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYFATC_SYNONYMEFR_ATCRow(ByVal row As SYFATC_SYNONYMEFR_ATCRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYFATC_SYNONYMEFR_ATCRow(ByVal SYFATC_NOM_PK As String, ByVal parentCATC_CLASSEATCRowByFK1_SYFATC_SYNONYMEFR_ATC As CATC_CLASSEATCRow) As SYFATC_SYNONYMEFR_ATCRow
            Dim rowSYFATC_SYNONYMEFR_ATCRow As SYFATC_SYNONYMEFR_ATCRow = CType(Me.NewRow,SYFATC_SYNONYMEFR_ATCRow)
            rowSYFATC_SYNONYMEFR_ATCRow.ItemArray = New Object() {SYFATC_NOM_PK, parentCATC_CLASSEATCRowByFK1_SYFATC_SYNONYMEFR_ATC(0)}
            Me.Rows.Add(rowSYFATC_SYNONYMEFR_ATCRow)
            Return rowSYFATC_SYNONYMEFR_ATCRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYFATC_NOM_PKSYFATC_CATC_CODE_FK_PK(ByVal SYFATC_NOM_PK As String, ByVal SYFATC_CATC_CODE_FK_PK As String) As SYFATC_SYNONYMEFR_ATCRow
            Return CType(Me.Rows.Find(New Object() {SYFATC_NOM_PK, SYFATC_CATC_CODE_FK_PK}),SYFATC_SYNONYMEFR_ATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYFATC_SYNONYMEFR_ATCDataTable = CType(MyBase.Clone,SYFATC_SYNONYMEFR_ATCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYFATC_SYNONYMEFR_ATCDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYFATC_NOM_PK = MyBase.Columns("SYFATC_NOM_PK")
            Me.columnSYFATC_CATC_CODE_FK_PK = MyBase.Columns("SYFATC_CATC_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYFATC_NOM_PK = New System.Data.DataColumn("SYFATC_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFATC_NOM_PK)
            Me.columnSYFATC_CATC_CODE_FK_PK = New System.Data.DataColumn("SYFATC_CATC_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFATC_CATC_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYFATC_NOM_PK, Me.columnSYFATC_CATC_CODE_FK_PK}, true))
            Me.columnSYFATC_NOM_PK.AllowDBNull = false
            Me.columnSYFATC_NOM_PK.MaxLength = 36
            Me.columnSYFATC_CATC_CODE_FK_PK.AllowDBNull = false
            Me.columnSYFATC_CATC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYFATC_SYNONYMEFR_ATCRow() As SYFATC_SYNONYMEFR_ATCRow
            Return CType(Me.NewRow,SYFATC_SYNONYMEFR_ATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYFATC_SYNONYMEFR_ATCRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYFATC_SYNONYMEFR_ATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYFATC_SYNONYMEFR_ATCRowChangedEvent) Is Nothing) Then
                RaiseEvent SYFATC_SYNONYMEFR_ATCRowChanged(Me, New SYFATC_SYNONYMEFR_ATCRowChangeEvent(CType(e.Row,SYFATC_SYNONYMEFR_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYFATC_SYNONYMEFR_ATCRowChangingEvent) Is Nothing) Then
                RaiseEvent SYFATC_SYNONYMEFR_ATCRowChanging(Me, New SYFATC_SYNONYMEFR_ATCRowChangeEvent(CType(e.Row,SYFATC_SYNONYMEFR_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYFATC_SYNONYMEFR_ATCRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYFATC_SYNONYMEFR_ATCRowDeleted(Me, New SYFATC_SYNONYMEFR_ATCRowChangeEvent(CType(e.Row,SYFATC_SYNONYMEFR_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYFATC_SYNONYMEFR_ATCRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYFATC_SYNONYMEFR_ATCRowDeleting(Me, New SYFATC_SYNONYMEFR_ATCRowChangeEvent(CType(e.Row,SYFATC_SYNONYMEFR_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYFATC_SYNONYMEFR_ATCRow(ByVal row As SYFATC_SYNONYMEFR_ATCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYFATC_SYNONYMEFR_ATCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYAATC_SYNONYMEANGLAIS_ATCDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYAATC_NOM_PK As System.Data.DataColumn
        
        Private columnSYAATC_CATC_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYAATC_SYNONYMEANGLAIS_ATC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYAATC_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYAATC_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYAATC_CATC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYAATC_CATC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYAATC_SYNONYMEANGLAIS_ATCRow
            Get
                Return CType(Me.Rows(index),SYAATC_SYNONYMEANGLAIS_ATCRow)
            End Get
        End Property
        
        Public Event SYAATC_SYNONYMEANGLAIS_ATCRowChanging As SYAATC_SYNONYMEANGLAIS_ATCRowChangeEventHandler
        
        Public Event SYAATC_SYNONYMEANGLAIS_ATCRowChanged As SYAATC_SYNONYMEANGLAIS_ATCRowChangeEventHandler
        
        Public Event SYAATC_SYNONYMEANGLAIS_ATCRowDeleting As SYAATC_SYNONYMEANGLAIS_ATCRowChangeEventHandler
        
        Public Event SYAATC_SYNONYMEANGLAIS_ATCRowDeleted As SYAATC_SYNONYMEANGLAIS_ATCRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYAATC_SYNONYMEANGLAIS_ATCRow(ByVal row As SYAATC_SYNONYMEANGLAIS_ATCRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYAATC_SYNONYMEANGLAIS_ATCRow(ByVal SYAATC_NOM_PK As String, ByVal parentCATC_CLASSEATCRowByFK1_SYAATC_SYNONYMEANGLAIS_ATC As CATC_CLASSEATCRow) As SYAATC_SYNONYMEANGLAIS_ATCRow
            Dim rowSYAATC_SYNONYMEANGLAIS_ATCRow As SYAATC_SYNONYMEANGLAIS_ATCRow = CType(Me.NewRow,SYAATC_SYNONYMEANGLAIS_ATCRow)
            rowSYAATC_SYNONYMEANGLAIS_ATCRow.ItemArray = New Object() {SYAATC_NOM_PK, parentCATC_CLASSEATCRowByFK1_SYAATC_SYNONYMEANGLAIS_ATC(0)}
            Me.Rows.Add(rowSYAATC_SYNONYMEANGLAIS_ATCRow)
            Return rowSYAATC_SYNONYMEANGLAIS_ATCRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYAATC_NOM_PKSYAATC_CATC_CODE_FK_PK(ByVal SYAATC_NOM_PK As String, ByVal SYAATC_CATC_CODE_FK_PK As String) As SYAATC_SYNONYMEANGLAIS_ATCRow
            Return CType(Me.Rows.Find(New Object() {SYAATC_NOM_PK, SYAATC_CATC_CODE_FK_PK}),SYAATC_SYNONYMEANGLAIS_ATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYAATC_SYNONYMEANGLAIS_ATCDataTable = CType(MyBase.Clone,SYAATC_SYNONYMEANGLAIS_ATCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYAATC_SYNONYMEANGLAIS_ATCDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYAATC_NOM_PK = MyBase.Columns("SYAATC_NOM_PK")
            Me.columnSYAATC_CATC_CODE_FK_PK = MyBase.Columns("SYAATC_CATC_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYAATC_NOM_PK = New System.Data.DataColumn("SYAATC_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYAATC_NOM_PK)
            Me.columnSYAATC_CATC_CODE_FK_PK = New System.Data.DataColumn("SYAATC_CATC_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYAATC_CATC_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYAATC_NOM_PK, Me.columnSYAATC_CATC_CODE_FK_PK}, true))
            Me.columnSYAATC_NOM_PK.AllowDBNull = false
            Me.columnSYAATC_NOM_PK.MaxLength = 36
            Me.columnSYAATC_CATC_CODE_FK_PK.AllowDBNull = false
            Me.columnSYAATC_CATC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYAATC_SYNONYMEANGLAIS_ATCRow() As SYAATC_SYNONYMEANGLAIS_ATCRow
            Return CType(Me.NewRow,SYAATC_SYNONYMEANGLAIS_ATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYAATC_SYNONYMEANGLAIS_ATCRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYAATC_SYNONYMEANGLAIS_ATCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYAATC_SYNONYMEANGLAIS_ATCRowChangedEvent) Is Nothing) Then
                RaiseEvent SYAATC_SYNONYMEANGLAIS_ATCRowChanged(Me, New SYAATC_SYNONYMEANGLAIS_ATCRowChangeEvent(CType(e.Row,SYAATC_SYNONYMEANGLAIS_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYAATC_SYNONYMEANGLAIS_ATCRowChangingEvent) Is Nothing) Then
                RaiseEvent SYAATC_SYNONYMEANGLAIS_ATCRowChanging(Me, New SYAATC_SYNONYMEANGLAIS_ATCRowChangeEvent(CType(e.Row,SYAATC_SYNONYMEANGLAIS_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYAATC_SYNONYMEANGLAIS_ATCRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYAATC_SYNONYMEANGLAIS_ATCRowDeleted(Me, New SYAATC_SYNONYMEANGLAIS_ATCRowChangeEvent(CType(e.Row,SYAATC_SYNONYMEANGLAIS_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYAATC_SYNONYMEANGLAIS_ATCRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYAATC_SYNONYMEANGLAIS_ATCRowDeleting(Me, New SYAATC_SYNONYMEANGLAIS_ATCRowChangeEvent(CType(e.Row,SYAATC_SYNONYMEANGLAIS_ATCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYAATC_SYNONYMEANGLAIS_ATCRow(ByVal row As SYAATC_SYNONYMEANGLAIS_ATCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYAATC_SYNONYMEANGLAIS_ATCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ATCDDD_DOSE_USUELLE_JOURDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnATCDDD_CATC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnATCDDD_CDF_VO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnATCDDD_DOSAGE_PK As System.Data.DataColumn
        
        Private columnATCDDD_CDF_UD_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ATCDDD_DOSE_USUELLE_JOUR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATCDDD_CATC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnATCDDD_CATC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATCDDD_CDF_VO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnATCDDD_CDF_VO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATCDDD_DOSAGE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnATCDDD_DOSAGE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATCDDD_CDF_UD_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnATCDDD_CDF_UD_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ATCDDD_DOSE_USUELLE_JOURRow
            Get
                Return CType(Me.Rows(index),ATCDDD_DOSE_USUELLE_JOURRow)
            End Get
        End Property
        
        Public Event ATCDDD_DOSE_USUELLE_JOURRowChanging As ATCDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        Public Event ATCDDD_DOSE_USUELLE_JOURRowChanged As ATCDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        Public Event ATCDDD_DOSE_USUELLE_JOURRowDeleting As ATCDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        Public Event ATCDDD_DOSE_USUELLE_JOURRowDeleted As ATCDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddATCDDD_DOSE_USUELLE_JOURRow(ByVal row As ATCDDD_DOSE_USUELLE_JOURRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddATCDDD_DOSE_USUELLE_JOURRow(ByVal ATCDDD_CATC_CODE_FK_PK As String, ByVal ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal ATCDDD_DOSAGE_PK As Decimal, ByVal ATCDDD_CDF_UD_CODE_FK_PK As String) As ATCDDD_DOSE_USUELLE_JOURRow
            Dim rowATCDDD_DOSE_USUELLE_JOURRow As ATCDDD_DOSE_USUELLE_JOURRow = CType(Me.NewRow,ATCDDD_DOSE_USUELLE_JOURRow)
            rowATCDDD_DOSE_USUELLE_JOURRow.ItemArray = New Object() {ATCDDD_CATC_CODE_FK_PK, ATCDDD_CDF_VO_CODE_FK_PK, ATCDDD_DOSAGE_PK, ATCDDD_CDF_UD_CODE_FK_PK}
            Me.Rows.Add(rowATCDDD_DOSE_USUELLE_JOURRow)
            Return rowATCDDD_DOSE_USUELLE_JOURRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByATCDDD_CATC_CODE_FK_PKATCDDD_CDF_VO_CODE_FK_PKATCDDD_DOSAGE_PKATCDDD_CDF_UD_CODE_FK_PK(ByVal ATCDDD_CATC_CODE_FK_PK As String, ByVal ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal ATCDDD_DOSAGE_PK As Decimal, ByVal ATCDDD_CDF_UD_CODE_FK_PK As String) As ATCDDD_DOSE_USUELLE_JOURRow
            Return CType(Me.Rows.Find(New Object() {ATCDDD_CATC_CODE_FK_PK, ATCDDD_CDF_VO_CODE_FK_PK, ATCDDD_DOSAGE_PK, ATCDDD_CDF_UD_CODE_FK_PK}),ATCDDD_DOSE_USUELLE_JOURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ATCDDD_DOSE_USUELLE_JOURDataTable = CType(MyBase.Clone,ATCDDD_DOSE_USUELLE_JOURDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ATCDDD_DOSE_USUELLE_JOURDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnATCDDD_CATC_CODE_FK_PK = MyBase.Columns("ATCDDD_CATC_CODE_FK_PK")
            Me.columnATCDDD_CDF_VO_CODE_FK_PK = MyBase.Columns("ATCDDD_CDF_VO_CODE_FK_PK")
            Me.columnATCDDD_DOSAGE_PK = MyBase.Columns("ATCDDD_DOSAGE_PK")
            Me.columnATCDDD_CDF_UD_CODE_FK_PK = MyBase.Columns("ATCDDD_CDF_UD_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnATCDDD_CATC_CODE_FK_PK = New System.Data.DataColumn("ATCDDD_CATC_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATCDDD_CATC_CODE_FK_PK)
            Me.columnATCDDD_CDF_VO_CODE_FK_PK = New System.Data.DataColumn("ATCDDD_CDF_VO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATCDDD_CDF_VO_CODE_FK_PK)
            Me.columnATCDDD_DOSAGE_PK = New System.Data.DataColumn("ATCDDD_DOSAGE_PK", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATCDDD_DOSAGE_PK)
            Me.columnATCDDD_CDF_UD_CODE_FK_PK = New System.Data.DataColumn("ATCDDD_CDF_UD_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATCDDD_CDF_UD_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnATCDDD_CATC_CODE_FK_PK, Me.columnATCDDD_CDF_VO_CODE_FK_PK, Me.columnATCDDD_DOSAGE_PK, Me.columnATCDDD_CDF_UD_CODE_FK_PK}, true))
            Me.columnATCDDD_CATC_CODE_FK_PK.AllowDBNull = false
            Me.columnATCDDD_CATC_CODE_FK_PK.MaxLength = 10
            Me.columnATCDDD_CDF_VO_CODE_FK_PK.AllowDBNull = false
            Me.columnATCDDD_CDF_VO_CODE_FK_PK.MaxLength = 10
            Me.columnATCDDD_DOSAGE_PK.AllowDBNull = false
            Me.columnATCDDD_CDF_UD_CODE_FK_PK.AllowDBNull = false
            Me.columnATCDDD_CDF_UD_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewATCDDD_DOSE_USUELLE_JOURRow() As ATCDDD_DOSE_USUELLE_JOURRow
            Return CType(Me.NewRow,ATCDDD_DOSE_USUELLE_JOURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ATCDDD_DOSE_USUELLE_JOURRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ATCDDD_DOSE_USUELLE_JOURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ATCDDD_DOSE_USUELLE_JOURRowChangedEvent) Is Nothing) Then
                RaiseEvent ATCDDD_DOSE_USUELLE_JOURRowChanged(Me, New ATCDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,ATCDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ATCDDD_DOSE_USUELLE_JOURRowChangingEvent) Is Nothing) Then
                RaiseEvent ATCDDD_DOSE_USUELLE_JOURRowChanging(Me, New ATCDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,ATCDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ATCDDD_DOSE_USUELLE_JOURRowDeletedEvent) Is Nothing) Then
                RaiseEvent ATCDDD_DOSE_USUELLE_JOURRowDeleted(Me, New ATCDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,ATCDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ATCDDD_DOSE_USUELLE_JOURRowDeletingEvent) Is Nothing) Then
                RaiseEvent ATCDDD_DOSE_USUELLE_JOURRowDeleting(Me, New ATCDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,ATCDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveATCDDD_DOSE_USUELLE_JOURRow(ByVal row As ATCDDD_DOSE_USUELLE_JOURRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ATCDDD_DOSE_USUELLE_JOURDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDF_CODIFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCDF_NUMERO_PK As System.Data.DataColumn
        
        Private columnCDF_CODE_PK As System.Data.DataColumn
        
        Private columnCDF_NOM As System.Data.DataColumn

        Private columnCDF_VAL_NUM As System.Data.DataColumn

        Private columnCDF_NOMABRG As System.Data.DataColumn

        Private columnCDF_UNIT_NUM As System.Data.DataColumn

        Private columnCDF_TEXTE As System.Data.DataColumn

        Private columnCDF_DATECR As System.Data.DataColumn
        
        Private columnCDF_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDF_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NUMERO_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_NUMERO_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_NOM
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CDF_UNIT_NUMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_UNIT_NUM
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CDF_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_TEXTE
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CDF_NOMABRGColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_NOMABRG
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
       Public ReadOnly Property CDF_VAL_NUMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_VAL_NUM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDF_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDF_CODIFRow
            Get
                Return CType(Me.Rows(index),CDF_CODIFRow)
            End Get
        End Property
        
        Public Event CDF_CODIFRowChanging As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowChanged As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowDeleting As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowDeleted As CDF_CODIFRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDF_CODIFRow(ByVal row As CDF_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCDF_CODIFRow(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_VAL_NUM As Decimal, ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Date) As CDF_CODIFRow
            Dim rowCDF_CODIFRow As CDF_CODIFRow = CType(Me.NewRow, CDF_CODIFRow)
            rowCDF_CODIFRow.ItemArray = New Object() {CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ}
            Me.Rows.Add(rowCDF_CODIFRow)
            Return rowCDF_CODIFRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDF_NUMERO_PKCDF_CODE_PK(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As CDF_CODIFRow
            Return CType(Me.Rows.Find(New Object() {CDF_NUMERO_PK, CDF_CODE_PK}),CDF_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CDF_CODIFDataTable = CType(MyBase.Clone,CDF_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CDF_CODIFDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDF_NUMERO_PK = MyBase.Columns("CDF_NUMERO_PK")
            Me.columnCDF_CODE_PK = MyBase.Columns("CDF_CODE_PK")
            Me.columnCDF_NOM = MyBase.Columns("CDF_NOM")
            Me.columnCDF_VAL_NUM = MyBase.Columns("CDF_VAL_NUM")
            Me.columnCDF_NOMABRG = MyBase.Columns("CDF_NOMABRG")
            Me.columnCDF_UNIT_NUM = MyBase.Columns("CDF_UNIT_NUM")
            Me.columnCDF_TEXTE = MyBase.Columns("CDF_TEXTE")
            Me.columnCDF_DATECR = MyBase.Columns("CDF_DATECR")
            Me.columnCDF_DATEMJ = MyBase.Columns("CDF_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDF_NUMERO_PK = New System.Data.DataColumn("CDF_NUMERO_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NUMERO_PK)
            Me.columnCDF_CODE_PK = New System.Data.DataColumn("CDF_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_CODE_PK)
            Me.columnCDF_NOM = New System.Data.DataColumn("CDF_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NOM)
            Me.columnCDF_VAL_NUM = New System.Data.DataColumn("CDF_VAL_NUM", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_VAL_NUM)
            Me.columnCDF_NOMABRG = New System.Data.DataColumn("CDF_NOMABRG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NOMABRG)
            Me.columnCDF_UNIT_NUM = New System.Data.DataColumn("CDF_UNIT_NUM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_UNIT_NUM)
            Me.columnCDF_TEXTE = New System.Data.DataColumn("CDF_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_TEXTE)
            Me.columnCDF_DATECR = New System.Data.DataColumn("CDF_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_DATECR)
            Me.columnCDF_DATEMJ = New System.Data.DataColumn("CDF_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCDF_NUMERO_PK, Me.columnCDF_CODE_PK}, true))
            Me.columnCDF_NUMERO_PK.AllowDBNull = false
            Me.columnCDF_NUMERO_PK.MaxLength = 2
            Me.columnCDF_CODE_PK.AllowDBNull = false
            Me.columnCDF_CODE_PK.MaxLength = 10
            Me.columnCDF_NOM.AllowDBNull = false
            Me.columnCDF_NOM.MaxLength = 80
            Me.columnCDF_DATECR.AllowDBNull = false
            Me.CaseSensitive = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDF_CODIFRow() As CDF_CODIFRow
            Return CType(Me.NewRow,CDF_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CDF_CODIFRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CDF_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDF_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowChanged(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDF_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowChanging(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDF_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowDeleted(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDF_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowDeleting(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDF_CODIFRow(ByVal row As CDF_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDF_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CISP_CLASSIF_INTER_SOINSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCISP_CODE_PK As System.Data.DataColumn
        
        Private columnCISP_CISP_CODE_FK As System.Data.DataColumn
        
        Private columnCISP_LIBELLE_COURT As System.Data.DataColumn
        
        Private columnCISP_LIBELLE_LONG As System.Data.DataColumn
        
        Private columnCISP_DATECR As System.Data.DataColumn
        
        Private columnCISP_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CISP_CLASSIF_INTER_SOINS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_CISP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_CISP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_LIBELLE_COURTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_LIBELLE_COURT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_LIBELLE_LONGColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_LIBELLE_LONG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CISP_CLASSIF_INTER_SOINSRow
            Get
                Return CType(Me.Rows(index),CISP_CLASSIF_INTER_SOINSRow)
            End Get
        End Property
        
        Public Event CISP_CLASSIF_INTER_SOINSRowChanging As CISP_CLASSIF_INTER_SOINSRowChangeEventHandler
        
        Public Event CISP_CLASSIF_INTER_SOINSRowChanged As CISP_CLASSIF_INTER_SOINSRowChangeEventHandler
        
        Public Event CISP_CLASSIF_INTER_SOINSRowDeleting As CISP_CLASSIF_INTER_SOINSRowChangeEventHandler
        
        Public Event CISP_CLASSIF_INTER_SOINSRowDeleted As CISP_CLASSIF_INTER_SOINSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCISP_CLASSIF_INTER_SOINSRow(ByVal row As CISP_CLASSIF_INTER_SOINSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCISP_CLASSIF_INTER_SOINSRow(ByVal CISP_CODE_PK As String, ByVal CISP_CISP_CODE_FK As String, ByVal CISP_LIBELLE_COURT As String, ByVal CISP_LIBELLE_LONG As String, ByVal CISP_DATECR As Date, ByVal CISP_DATEMJ As Date) As CISP_CLASSIF_INTER_SOINSRow
            Dim rowCISP_CLASSIF_INTER_SOINSRow As CISP_CLASSIF_INTER_SOINSRow = CType(Me.NewRow,CISP_CLASSIF_INTER_SOINSRow)
            rowCISP_CLASSIF_INTER_SOINSRow.ItemArray = New Object() {CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CISP_DATECR, CISP_DATEMJ}
            Me.Rows.Add(rowCISP_CLASSIF_INTER_SOINSRow)
            Return rowCISP_CLASSIF_INTER_SOINSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCISP_CODE_PK(ByVal CISP_CODE_PK As String) As CISP_CLASSIF_INTER_SOINSRow
            Return CType(Me.Rows.Find(New Object() {CISP_CODE_PK}),CISP_CLASSIF_INTER_SOINSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CISP_CLASSIF_INTER_SOINSDataTable = CType(MyBase.Clone,CISP_CLASSIF_INTER_SOINSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CISP_CLASSIF_INTER_SOINSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCISP_CODE_PK = MyBase.Columns("CISP_CODE_PK")
            Me.columnCISP_CISP_CODE_FK = MyBase.Columns("CISP_CISP_CODE_FK")
            Me.columnCISP_LIBELLE_COURT = MyBase.Columns("CISP_LIBELLE_COURT")
            Me.columnCISP_LIBELLE_LONG = MyBase.Columns("CISP_LIBELLE_LONG")
            Me.columnCISP_DATECR = MyBase.Columns("CISP_DATECR")
            Me.columnCISP_DATEMJ = MyBase.Columns("CISP_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCISP_CODE_PK = New System.Data.DataColumn("CISP_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_CODE_PK)
            Me.columnCISP_CISP_CODE_FK = New System.Data.DataColumn("CISP_CISP_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_CISP_CODE_FK)
            Me.columnCISP_LIBELLE_COURT = New System.Data.DataColumn("CISP_LIBELLE_COURT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_LIBELLE_COURT)
            Me.columnCISP_LIBELLE_LONG = New System.Data.DataColumn("CISP_LIBELLE_LONG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_LIBELLE_LONG)
            Me.columnCISP_DATECR = New System.Data.DataColumn("CISP_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_DATECR)
            Me.columnCISP_DATEMJ = New System.Data.DataColumn("CISP_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCISP_CODE_PK}, true))
            Me.columnCISP_CODE_PK.AllowDBNull = false
            Me.columnCISP_CODE_PK.Unique = true
            Me.columnCISP_CODE_PK.MaxLength = 10
            Me.columnCISP_CISP_CODE_FK.MaxLength = 10
            Me.columnCISP_LIBELLE_COURT.AllowDBNull = false
            Me.columnCISP_LIBELLE_COURT.MaxLength = 70
            Me.columnCISP_LIBELLE_LONG.MaxLength = 200
            Me.columnCISP_DATECR.AllowDBNull = false
            Me.CaseSensitive = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCISP_CLASSIF_INTER_SOINSRow() As CISP_CLASSIF_INTER_SOINSRow
            Return CType(Me.NewRow,CISP_CLASSIF_INTER_SOINSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CISP_CLASSIF_INTER_SOINSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CISP_CLASSIF_INTER_SOINSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINSRowChangedEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINSRowChanged(Me, New CISP_CLASSIF_INTER_SOINSRowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINSRowChangingEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINSRowChanging(Me, New CISP_CLASSIF_INTER_SOINSRowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINSRowDeleted(Me, New CISP_CLASSIF_INTER_SOINSRowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINSRowDeleting(Me, New CISP_CLASSIF_INTER_SOINSRowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCISP_CLASSIF_INTER_SOINSRow(ByVal row As CISP_CLASSIF_INTER_SOINSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CISP_CLASSIF_INTER_SOINSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CISP_CLASSIF_INTER_SOINS_2DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCISP_CODE_PK As System.Data.DataColumn
        
        Private columnCISP_CISP_CODE_FK As System.Data.DataColumn
        
        Private columnCISP_LIBELLE_COURT As System.Data.DataColumn
        
        Private columnCISP_LIBELLE_LONG As System.Data.DataColumn
        
        Private columnCISP_DATECR As System.Data.DataColumn
        
        Private columnCISP_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CISP_CLASSIF_INTER_SOINS_2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_CISP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_CISP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_LIBELLE_COURTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_LIBELLE_COURT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_LIBELLE_LONGColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_LIBELLE_LONG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISP_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISP_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CISP_CLASSIF_INTER_SOINS_2Row
            Get
                Return CType(Me.Rows(index),CISP_CLASSIF_INTER_SOINS_2Row)
            End Get
        End Property
        
        Public Event CISP_CLASSIF_INTER_SOINS_2RowChanging As CISP_CLASSIF_INTER_SOINS_2RowChangeEventHandler
        
        Public Event CISP_CLASSIF_INTER_SOINS_2RowChanged As CISP_CLASSIF_INTER_SOINS_2RowChangeEventHandler
        
        Public Event CISP_CLASSIF_INTER_SOINS_2RowDeleting As CISP_CLASSIF_INTER_SOINS_2RowChangeEventHandler
        
        Public Event CISP_CLASSIF_INTER_SOINS_2RowDeleted As CISP_CLASSIF_INTER_SOINS_2RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCISP_CLASSIF_INTER_SOINS_2Row(ByVal row As CISP_CLASSIF_INTER_SOINS_2Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCISP_CLASSIF_INTER_SOINS_2Row(ByVal CISP_CODE_PK As String, ByVal CISP_CISP_CODE_FK As String, ByVal CISP_LIBELLE_COURT As String, ByVal CISP_LIBELLE_LONG As String, ByVal CISP_DATECR As Date, ByVal CISP_DATEMJ As Date) As CISP_CLASSIF_INTER_SOINS_2Row
            Dim rowCISP_CLASSIF_INTER_SOINS_2Row As CISP_CLASSIF_INTER_SOINS_2Row = CType(Me.NewRow,CISP_CLASSIF_INTER_SOINS_2Row)
            rowCISP_CLASSIF_INTER_SOINS_2Row.ItemArray = New Object() {CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CISP_DATECR, CISP_DATEMJ}
            Me.Rows.Add(rowCISP_CLASSIF_INTER_SOINS_2Row)
            Return rowCISP_CLASSIF_INTER_SOINS_2Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCISP_CODE_PK(ByVal CISP_CODE_PK As String) As CISP_CLASSIF_INTER_SOINS_2Row
            Return CType(Me.Rows.Find(New Object() {CISP_CODE_PK}),CISP_CLASSIF_INTER_SOINS_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CISP_CLASSIF_INTER_SOINS_2DataTable = CType(MyBase.Clone,CISP_CLASSIF_INTER_SOINS_2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CISP_CLASSIF_INTER_SOINS_2DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCISP_CODE_PK = MyBase.Columns("CISP_CODE_PK")
            Me.columnCISP_CISP_CODE_FK = MyBase.Columns("CISP_CISP_CODE_FK")
            Me.columnCISP_LIBELLE_COURT = MyBase.Columns("CISP_LIBELLE_COURT")
            Me.columnCISP_LIBELLE_LONG = MyBase.Columns("CISP_LIBELLE_LONG")
            Me.columnCISP_DATECR = MyBase.Columns("CISP_DATECR")
            Me.columnCISP_DATEMJ = MyBase.Columns("CISP_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCISP_CODE_PK = New System.Data.DataColumn("CISP_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_CODE_PK)
            Me.columnCISP_CISP_CODE_FK = New System.Data.DataColumn("CISP_CISP_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_CISP_CODE_FK)
            Me.columnCISP_LIBELLE_COURT = New System.Data.DataColumn("CISP_LIBELLE_COURT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_LIBELLE_COURT)
            Me.columnCISP_LIBELLE_LONG = New System.Data.DataColumn("CISP_LIBELLE_LONG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_LIBELLE_LONG)
            Me.columnCISP_DATECR = New System.Data.DataColumn("CISP_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_DATECR)
            Me.columnCISP_DATEMJ = New System.Data.DataColumn("CISP_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISP_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCISP_CODE_PK}, true))
            Me.columnCISP_CODE_PK.AllowDBNull = false
            Me.columnCISP_CODE_PK.Unique = true
            Me.columnCISP_CODE_PK.MaxLength = 10
            Me.columnCISP_CISP_CODE_FK.MaxLength = 10
            Me.columnCISP_LIBELLE_COURT.AllowDBNull = false
            Me.columnCISP_LIBELLE_COURT.MaxLength = 70
            Me.columnCISP_LIBELLE_LONG.MaxLength = 200
            Me.columnCISP_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCISP_CLASSIF_INTER_SOINS_2Row() As CISP_CLASSIF_INTER_SOINS_2Row
            Return CType(Me.NewRow,CISP_CLASSIF_INTER_SOINS_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CISP_CLASSIF_INTER_SOINS_2Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CISP_CLASSIF_INTER_SOINS_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINS_2RowChangedEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINS_2RowChanged(Me, New CISP_CLASSIF_INTER_SOINS_2RowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINS_2RowChangingEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINS_2RowChanging(Me, New CISP_CLASSIF_INTER_SOINS_2RowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINS_2RowDeletedEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINS_2RowDeleted(Me, New CISP_CLASSIF_INTER_SOINS_2RowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CISP_CLASSIF_INTER_SOINS_2RowDeletingEvent) Is Nothing) Then
                RaiseEvent CISP_CLASSIF_INTER_SOINS_2RowDeleting(Me, New CISP_CLASSIF_INTER_SOINS_2RowChangeEvent(CType(e.Row,CISP_CLASSIF_INTER_SOINS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCISP_CLASSIF_INTER_SOINS_2Row(ByVal row As CISP_CLASSIF_INTER_SOINS_2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CISP_CLASSIF_INTER_SOINS_2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYCDF_SYNCODIFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYCDF_NOM_PK As System.Data.DataColumn
        
        Private columnSYCDF_CDF_NUMERO_FK_PK As System.Data.DataColumn
        
        Private columnSYCDF_CDF_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYCDF_SYNCODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCDF_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCDF_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCDF_CDF_NUMERO_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCDF_CDF_NUMERO_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYCDF_CDF_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYCDF_CDF_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYCDF_SYNCODIFRow
            Get
                Return CType(Me.Rows(index),SYCDF_SYNCODIFRow)
            End Get
        End Property
        
        Public Event SYCDF_SYNCODIFRowChanging As SYCDF_SYNCODIFRowChangeEventHandler
        
        Public Event SYCDF_SYNCODIFRowChanged As SYCDF_SYNCODIFRowChangeEventHandler
        
        Public Event SYCDF_SYNCODIFRowDeleting As SYCDF_SYNCODIFRowChangeEventHandler
        
        Public Event SYCDF_SYNCODIFRowDeleted As SYCDF_SYNCODIFRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYCDF_SYNCODIFRow(ByVal row As SYCDF_SYNCODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYCDF_SYNCODIFRow(ByVal SYCDF_NOM_PK As String, ByVal SYCDF_CDF_NUMERO_FK_PK As String, ByVal SYCDF_CDF_CODE_FK As String) As SYCDF_SYNCODIFRow
            Dim rowSYCDF_SYNCODIFRow As SYCDF_SYNCODIFRow = CType(Me.NewRow,SYCDF_SYNCODIFRow)
            rowSYCDF_SYNCODIFRow.ItemArray = New Object() {SYCDF_NOM_PK, SYCDF_CDF_NUMERO_FK_PK, SYCDF_CDF_CODE_FK}
            Me.Rows.Add(rowSYCDF_SYNCODIFRow)
            Return rowSYCDF_SYNCODIFRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYCDF_NOM_PKSYCDF_CDF_NUMERO_FK_PK(ByVal SYCDF_NOM_PK As String, ByVal SYCDF_CDF_NUMERO_FK_PK As String) As SYCDF_SYNCODIFRow
            Return CType(Me.Rows.Find(New Object() {SYCDF_NOM_PK, SYCDF_CDF_NUMERO_FK_PK}),SYCDF_SYNCODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYCDF_SYNCODIFDataTable = CType(MyBase.Clone,SYCDF_SYNCODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYCDF_SYNCODIFDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYCDF_NOM_PK = MyBase.Columns("SYCDF_NOM_PK")
            Me.columnSYCDF_CDF_NUMERO_FK_PK = MyBase.Columns("SYCDF_CDF_NUMERO_FK_PK")
            Me.columnSYCDF_CDF_CODE_FK = MyBase.Columns("SYCDF_CDF_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYCDF_NOM_PK = New System.Data.DataColumn("SYCDF_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCDF_NOM_PK)
            Me.columnSYCDF_CDF_NUMERO_FK_PK = New System.Data.DataColumn("SYCDF_CDF_NUMERO_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCDF_CDF_NUMERO_FK_PK)
            Me.columnSYCDF_CDF_CODE_FK = New System.Data.DataColumn("SYCDF_CDF_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYCDF_CDF_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYCDF_NOM_PK, Me.columnSYCDF_CDF_NUMERO_FK_PK}, true))
            Me.columnSYCDF_NOM_PK.AllowDBNull = false
            Me.columnSYCDF_NOM_PK.MaxLength = 40
            Me.columnSYCDF_CDF_NUMERO_FK_PK.AllowDBNull = false
            Me.columnSYCDF_CDF_NUMERO_FK_PK.MaxLength = 2
            Me.columnSYCDF_CDF_CODE_FK.AllowDBNull = false
            Me.columnSYCDF_CDF_CODE_FK.MaxLength = 10
            Me.CaseSensitive = True
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYCDF_SYNCODIFRow() As SYCDF_SYNCODIFRow
            Return CType(Me.NewRow,SYCDF_SYNCODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYCDF_SYNCODIFRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYCDF_SYNCODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYCDF_SYNCODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent SYCDF_SYNCODIFRowChanged(Me, New SYCDF_SYNCODIFRowChangeEvent(CType(e.Row,SYCDF_SYNCODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYCDF_SYNCODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent SYCDF_SYNCODIFRowChanging(Me, New SYCDF_SYNCODIFRowChangeEvent(CType(e.Row,SYCDF_SYNCODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYCDF_SYNCODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYCDF_SYNCODIFRowDeleted(Me, New SYCDF_SYNCODIFRowChangeEvent(CType(e.Row,SYCDF_SYNCODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYCDF_SYNCODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYCDF_SYNCODIFRowDeleting(Me, New SYCDF_SYNCODIFRowChangeEvent(CType(e.Row,SYCDF_SYNCODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYCDF_SYNCODIFRow(ByVal row As SYCDF_SYNCODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYCDF_SYNCODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IDVO_IDENT_VOIEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDVO_CDF_NUMERO_FK_PK As System.Data.DataColumn
        
        Private columnIDVO_CDF_CODE_FK_PK As System.Data.DataColumn
        
        Private columnIDVO_CODE_VOIE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IDVO_IDENT_VOIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDVO_CDF_NUMERO_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDVO_CDF_NUMERO_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDVO_CDF_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDVO_CDF_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDVO_CODE_VOIEColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDVO_CODE_VOIE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IDVO_IDENT_VOIERow
            Get
                Return CType(Me.Rows(index),IDVO_IDENT_VOIERow)
            End Get
        End Property
        
        Public Event IDVO_IDENT_VOIERowChanging As IDVO_IDENT_VOIERowChangeEventHandler
        
        Public Event IDVO_IDENT_VOIERowChanged As IDVO_IDENT_VOIERowChangeEventHandler
        
        Public Event IDVO_IDENT_VOIERowDeleting As IDVO_IDENT_VOIERowChangeEventHandler
        
        Public Event IDVO_IDENT_VOIERowDeleted As IDVO_IDENT_VOIERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIDVO_IDENT_VOIERow(ByVal row As IDVO_IDENT_VOIERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIDVO_IDENT_VOIERow(ByVal IDVO_CDF_NUMERO_FK_PK As String, ByVal IDVO_CDF_CODE_FK_PK As String, ByVal IDVO_CODE_VOIE As String) As IDVO_IDENT_VOIERow
            Dim rowIDVO_IDENT_VOIERow As IDVO_IDENT_VOIERow = CType(Me.NewRow,IDVO_IDENT_VOIERow)
            rowIDVO_IDENT_VOIERow.ItemArray = New Object() {IDVO_CDF_NUMERO_FK_PK, IDVO_CDF_CODE_FK_PK, IDVO_CODE_VOIE}
            Me.Rows.Add(rowIDVO_IDENT_VOIERow)
            Return rowIDVO_IDENT_VOIERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDVO_CDF_NUMERO_FK_PKIDVO_CDF_CODE_FK_PK(ByVal IDVO_CDF_NUMERO_FK_PK As String, ByVal IDVO_CDF_CODE_FK_PK As String) As IDVO_IDENT_VOIERow
            Return CType(Me.Rows.Find(New Object() {IDVO_CDF_NUMERO_FK_PK, IDVO_CDF_CODE_FK_PK}),IDVO_IDENT_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IDVO_IDENT_VOIEDataTable = CType(MyBase.Clone,IDVO_IDENT_VOIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IDVO_IDENT_VOIEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDVO_CDF_NUMERO_FK_PK = MyBase.Columns("IDVO_CDF_NUMERO_FK_PK")
            Me.columnIDVO_CDF_CODE_FK_PK = MyBase.Columns("IDVO_CDF_CODE_FK_PK")
            Me.columnIDVO_CODE_VOIE = MyBase.Columns("IDVO_CODE_VOIE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDVO_CDF_NUMERO_FK_PK = New System.Data.DataColumn("IDVO_CDF_NUMERO_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDVO_CDF_NUMERO_FK_PK)
            Me.columnIDVO_CDF_CODE_FK_PK = New System.Data.DataColumn("IDVO_CDF_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDVO_CDF_CODE_FK_PK)
            Me.columnIDVO_CODE_VOIE = New System.Data.DataColumn("IDVO_CODE_VOIE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDVO_CODE_VOIE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnIDVO_CDF_NUMERO_FK_PK, Me.columnIDVO_CDF_CODE_FK_PK}, true))
            Me.columnIDVO_CDF_NUMERO_FK_PK.AllowDBNull = false
            Me.columnIDVO_CDF_NUMERO_FK_PK.MaxLength = 2
            Me.columnIDVO_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnIDVO_CDF_CODE_FK_PK.MaxLength = 10
            Me.columnIDVO_CODE_VOIE.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIDVO_IDENT_VOIERow() As IDVO_IDENT_VOIERow
            Return CType(Me.NewRow,IDVO_IDENT_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IDVO_IDENT_VOIERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IDVO_IDENT_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IDVO_IDENT_VOIERowChangedEvent) Is Nothing) Then
                RaiseEvent IDVO_IDENT_VOIERowChanged(Me, New IDVO_IDENT_VOIERowChangeEvent(CType(e.Row,IDVO_IDENT_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IDVO_IDENT_VOIERowChangingEvent) Is Nothing) Then
                RaiseEvent IDVO_IDENT_VOIERowChanging(Me, New IDVO_IDENT_VOIERowChangeEvent(CType(e.Row,IDVO_IDENT_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IDVO_IDENT_VOIERowDeletedEvent) Is Nothing) Then
                RaiseEvent IDVO_IDENT_VOIERowDeleted(Me, New IDVO_IDENT_VOIERowChangeEvent(CType(e.Row,IDVO_IDENT_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IDVO_IDENT_VOIERowDeletingEvent) Is Nothing) Then
                RaiseEvent IDVO_IDENT_VOIERowDeleting(Me, New IDVO_IDENT_VOIERowChangeEvent(CType(e.Row,IDVO_IDENT_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIDVO_IDENT_VOIERow(ByVal row As IDVO_IDENT_VOIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IDVO_IDENT_VOIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFNP_CODIFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCDFNP_NUMERO_FK_PK As System.Data.DataColumn
        
        Private columnCDFNP_CDF_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCDFNP_REF_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCDFNP_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFNP_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFNP_NUMERO_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFNP_NUMERO_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFNP_CDF_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFNP_CDF_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFNP_REF_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFNP_REF_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFNP_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFNP_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFNP_CODIFRow
            Get
                Return CType(Me.Rows(index),CDFNP_CODIFRow)
            End Get
        End Property
        
        Public Event CDFNP_CODIFRowChanging As CDFNP_CODIFRowChangeEventHandler
        
        Public Event CDFNP_CODIFRowChanged As CDFNP_CODIFRowChangeEventHandler
        
        Public Event CDFNP_CODIFRowDeleting As CDFNP_CODIFRowChangeEventHandler
        
        Public Event CDFNP_CODIFRowDeleted As CDFNP_CODIFRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFNP_CODIFRow(ByVal row As CDFNP_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFNP_CODIFRow(ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_CDF_CODE_FK_PK As String, ByVal CDFNP_REF_CODE_FK_PK As String, ByVal CDFNP_NUMORD As Short) As CDFNP_CODIFRow
            Dim rowCDFNP_CODIFRow As CDFNP_CODIFRow = CType(Me.NewRow,CDFNP_CODIFRow)
            rowCDFNP_CODIFRow.ItemArray = New Object() {CDFNP_NUMERO_FK_PK, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_CODE_FK_PK, CDFNP_NUMORD}
            Me.Rows.Add(rowCDFNP_CODIFRow)
            Return rowCDFNP_CODIFRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDFNP_NUMERO_FK_PKCDFNP_CDF_CODE_FK_PKCDFNP_REF_CODE_FK_PK(ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_CDF_CODE_FK_PK As String, ByVal CDFNP_REF_CODE_FK_PK As String) As CDFNP_CODIFRow
            Return CType(Me.Rows.Find(New Object() {CDFNP_NUMERO_FK_PK, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_CODE_FK_PK}),CDFNP_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CDFNP_CODIFDataTable = CType(MyBase.Clone,CDFNP_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CDFNP_CODIFDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFNP_NUMERO_FK_PK = MyBase.Columns("CDFNP_NUMERO_FK_PK")
            Me.columnCDFNP_CDF_CODE_FK_PK = MyBase.Columns("CDFNP_CDF_CODE_FK_PK")
            Me.columnCDFNP_REF_CODE_FK_PK = MyBase.Columns("CDFNP_REF_CODE_FK_PK")
            Me.columnCDFNP_NUMORD = MyBase.Columns("CDFNP_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFNP_NUMERO_FK_PK = New System.Data.DataColumn("CDFNP_NUMERO_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFNP_NUMERO_FK_PK)
            Me.columnCDFNP_CDF_CODE_FK_PK = New System.Data.DataColumn("CDFNP_CDF_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFNP_CDF_CODE_FK_PK)
            Me.columnCDFNP_REF_CODE_FK_PK = New System.Data.DataColumn("CDFNP_REF_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFNP_REF_CODE_FK_PK)
            Me.columnCDFNP_NUMORD = New System.Data.DataColumn("CDFNP_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFNP_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCDFNP_NUMERO_FK_PK, Me.columnCDFNP_CDF_CODE_FK_PK, Me.columnCDFNP_REF_CODE_FK_PK}, true))
            Me.columnCDFNP_NUMERO_FK_PK.AllowDBNull = false
            Me.columnCDFNP_NUMERO_FK_PK.MaxLength = 2
            Me.columnCDFNP_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnCDFNP_CDF_CODE_FK_PK.MaxLength = 10
            Me.columnCDFNP_REF_CODE_FK_PK.AllowDBNull = false
            Me.columnCDFNP_REF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFNP_CODIFRow() As CDFNP_CODIFRow
            Return CType(Me.NewRow,CDFNP_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CDFNP_CODIFRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CDFNP_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFNP_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent CDFNP_CODIFRowChanged(Me, New CDFNP_CODIFRowChangeEvent(CType(e.Row,CDFNP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFNP_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent CDFNP_CODIFRowChanging(Me, New CDFNP_CODIFRowChangeEvent(CType(e.Row,CDFNP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFNP_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFNP_CODIFRowDeleted(Me, New CDFNP_CODIFRowChangeEvent(CType(e.Row,CDFNP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFNP_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFNP_CODIFRowDeleting(Me, New CDFNP_CODIFRowChangeEvent(CType(e.Row,CDFNP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFNP_CODIFRow(ByVal row As CDFNP_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFNP_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFTE_TABLE_EQUIVALENCEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCDFTE_NUMERO_PK As System.Data.DataColumn
        
        Private columnCDFTE_CODE_PK As System.Data.DataColumn
        
        Private columnCDFTE_APPLICABLE As System.Data.DataColumn
        
        Private columnCDFTE_COEFFICIENT As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFTE_TABLE_EQUIVALENCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFTE_NUMERO_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFTE_NUMERO_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFTE_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFTE_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFTE_APPLICABLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFTE_APPLICABLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFTE_COEFFICIENTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFTE_COEFFICIENT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFTE_TABLE_EQUIVALENCERow
            Get
                Return CType(Me.Rows(index),CDFTE_TABLE_EQUIVALENCERow)
            End Get
        End Property
        
        Public Event CDFTE_TABLE_EQUIVALENCERowChanging As CDFTE_TABLE_EQUIVALENCERowChangeEventHandler
        
        Public Event CDFTE_TABLE_EQUIVALENCERowChanged As CDFTE_TABLE_EQUIVALENCERowChangeEventHandler
        
        Public Event CDFTE_TABLE_EQUIVALENCERowDeleting As CDFTE_TABLE_EQUIVALENCERowChangeEventHandler
        
        Public Event CDFTE_TABLE_EQUIVALENCERowDeleted As CDFTE_TABLE_EQUIVALENCERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFTE_TABLE_EQUIVALENCERow(ByVal row As CDFTE_TABLE_EQUIVALENCERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFTE_TABLE_EQUIVALENCERow(ByVal CDFTE_NUMERO_PK As String, ByVal CDFTE_CODE_PK As String, ByVal CDFTE_APPLICABLE As String, ByVal CDFTE_COEFFICIENT As Decimal) As CDFTE_TABLE_EQUIVALENCERow
            Dim rowCDFTE_TABLE_EQUIVALENCERow As CDFTE_TABLE_EQUIVALENCERow = CType(Me.NewRow,CDFTE_TABLE_EQUIVALENCERow)
            rowCDFTE_TABLE_EQUIVALENCERow.ItemArray = New Object() {CDFTE_NUMERO_PK, CDFTE_CODE_PK, CDFTE_APPLICABLE, CDFTE_COEFFICIENT}
            Me.Rows.Add(rowCDFTE_TABLE_EQUIVALENCERow)
            Return rowCDFTE_TABLE_EQUIVALENCERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDFTE_NUMERO_PKCDFTE_CODE_PK(ByVal CDFTE_NUMERO_PK As String, ByVal CDFTE_CODE_PK As String) As CDFTE_TABLE_EQUIVALENCERow
            Return CType(Me.Rows.Find(New Object() {CDFTE_NUMERO_PK, CDFTE_CODE_PK}),CDFTE_TABLE_EQUIVALENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CDFTE_TABLE_EQUIVALENCEDataTable = CType(MyBase.Clone,CDFTE_TABLE_EQUIVALENCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CDFTE_TABLE_EQUIVALENCEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFTE_NUMERO_PK = MyBase.Columns("CDFTE_NUMERO_PK")
            Me.columnCDFTE_CODE_PK = MyBase.Columns("CDFTE_CODE_PK")
            Me.columnCDFTE_APPLICABLE = MyBase.Columns("CDFTE_APPLICABLE")
            Me.columnCDFTE_COEFFICIENT = MyBase.Columns("CDFTE_COEFFICIENT")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFTE_NUMERO_PK = New System.Data.DataColumn("CDFTE_NUMERO_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFTE_NUMERO_PK)
            Me.columnCDFTE_CODE_PK = New System.Data.DataColumn("CDFTE_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFTE_CODE_PK)
            Me.columnCDFTE_APPLICABLE = New System.Data.DataColumn("CDFTE_APPLICABLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFTE_APPLICABLE)
            Me.columnCDFTE_COEFFICIENT = New System.Data.DataColumn("CDFTE_COEFFICIENT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFTE_COEFFICIENT)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCDFTE_NUMERO_PK, Me.columnCDFTE_CODE_PK}, true))
            Me.columnCDFTE_NUMERO_PK.AllowDBNull = false
            Me.columnCDFTE_NUMERO_PK.MaxLength = 2
            Me.columnCDFTE_CODE_PK.AllowDBNull = false
            Me.columnCDFTE_CODE_PK.MaxLength = 10
            Me.columnCDFTE_APPLICABLE.MaxLength = 1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFTE_TABLE_EQUIVALENCERow() As CDFTE_TABLE_EQUIVALENCERow
            Return CType(Me.NewRow,CDFTE_TABLE_EQUIVALENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CDFTE_TABLE_EQUIVALENCERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CDFTE_TABLE_EQUIVALENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFTE_TABLE_EQUIVALENCERowChangedEvent) Is Nothing) Then
                RaiseEvent CDFTE_TABLE_EQUIVALENCERowChanged(Me, New CDFTE_TABLE_EQUIVALENCERowChangeEvent(CType(e.Row,CDFTE_TABLE_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFTE_TABLE_EQUIVALENCERowChangingEvent) Is Nothing) Then
                RaiseEvent CDFTE_TABLE_EQUIVALENCERowChanging(Me, New CDFTE_TABLE_EQUIVALENCERowChangeEvent(CType(e.Row,CDFTE_TABLE_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFTE_TABLE_EQUIVALENCERowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFTE_TABLE_EQUIVALENCERowDeleted(Me, New CDFTE_TABLE_EQUIVALENCERowChangeEvent(CType(e.Row,CDFTE_TABLE_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFTE_TABLE_EQUIVALENCERowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFTE_TABLE_EQUIVALENCERowDeleting(Me, New CDFTE_TABLE_EQUIVALENCERowChangeEvent(CType(e.Row,CDFTE_TABLE_EQUIVALENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFTE_TABLE_EQUIVALENCERow(ByVal row As CDFTE_TABLE_EQUIVALENCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFTE_TABLE_EQUIVALENCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CIMCDF_CIM10_CODIFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCIMCDF_CIM_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCIMCDF_CDF_NUMERO_FK_PK As System.Data.DataColumn
        
        Private columnCIMCDF_CDF_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CIMCDF_CIM10_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIMCDF_CIM_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIMCDF_CIM_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIMCDF_CDF_NUMERO_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIMCDF_CDF_NUMERO_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIMCDF_CDF_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCIMCDF_CDF_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CIMCDF_CIM10_CODIFRow
            Get
                Return CType(Me.Rows(index),CIMCDF_CIM10_CODIFRow)
            End Get
        End Property
        
        Public Event CIMCDF_CIM10_CODIFRowChanging As CIMCDF_CIM10_CODIFRowChangeEventHandler
        
        Public Event CIMCDF_CIM10_CODIFRowChanged As CIMCDF_CIM10_CODIFRowChangeEventHandler
        
        Public Event CIMCDF_CIM10_CODIFRowDeleting As CIMCDF_CIM10_CODIFRowChangeEventHandler
        
        Public Event CIMCDF_CIM10_CODIFRowDeleted As CIMCDF_CIM10_CODIFRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCIMCDF_CIM10_CODIFRow(ByVal row As CIMCDF_CIM10_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCIMCDF_CIM10_CODIFRow(ByVal parentCIM10RowByFK1_CIMCDF_CIM10_CODIF As CIM10Row, ByVal CIMCDF_CDF_NUMERO_FK_PK As String, ByVal CIMCDF_CDF_CODE_FK_PK As String) As CIMCDF_CIM10_CODIFRow
            Dim rowCIMCDF_CIM10_CODIFRow As CIMCDF_CIM10_CODIFRow = CType(Me.NewRow,CIMCDF_CIM10_CODIFRow)
            rowCIMCDF_CIM10_CODIFRow.ItemArray = New Object() {parentCIM10RowByFK1_CIMCDF_CIM10_CODIF(0), CIMCDF_CDF_NUMERO_FK_PK, CIMCDF_CDF_CODE_FK_PK}
            Me.Rows.Add(rowCIMCDF_CIM10_CODIFRow)
            Return rowCIMCDF_CIM10_CODIFRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCIMCDF_CIM_CODE_FK_PKCIMCDF_CDF_NUMERO_FK_PKCIMCDF_CDF_CODE_FK_PK(ByVal CIMCDF_CIM_CODE_FK_PK As String, ByVal CIMCDF_CDF_NUMERO_FK_PK As String, ByVal CIMCDF_CDF_CODE_FK_PK As String) As CIMCDF_CIM10_CODIFRow
            Return CType(Me.Rows.Find(New Object() {CIMCDF_CIM_CODE_FK_PK, CIMCDF_CDF_NUMERO_FK_PK, CIMCDF_CDF_CODE_FK_PK}),CIMCDF_CIM10_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CIMCDF_CIM10_CODIFDataTable = CType(MyBase.Clone,CIMCDF_CIM10_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CIMCDF_CIM10_CODIFDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCIMCDF_CIM_CODE_FK_PK = MyBase.Columns("CIMCDF_CIM_CODE_FK_PK")
            Me.columnCIMCDF_CDF_NUMERO_FK_PK = MyBase.Columns("CIMCDF_CDF_NUMERO_FK_PK")
            Me.columnCIMCDF_CDF_CODE_FK_PK = MyBase.Columns("CIMCDF_CDF_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCIMCDF_CIM_CODE_FK_PK = New System.Data.DataColumn("CIMCDF_CIM_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIMCDF_CIM_CODE_FK_PK)
            Me.columnCIMCDF_CDF_NUMERO_FK_PK = New System.Data.DataColumn("CIMCDF_CDF_NUMERO_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIMCDF_CDF_NUMERO_FK_PK)
            Me.columnCIMCDF_CDF_CODE_FK_PK = New System.Data.DataColumn("CIMCDF_CDF_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIMCDF_CDF_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCIMCDF_CIM_CODE_FK_PK, Me.columnCIMCDF_CDF_NUMERO_FK_PK, Me.columnCIMCDF_CDF_CODE_FK_PK}, true))
            Me.columnCIMCDF_CIM_CODE_FK_PK.AllowDBNull = false
            Me.columnCIMCDF_CIM_CODE_FK_PK.MaxLength = 10
            Me.columnCIMCDF_CDF_NUMERO_FK_PK.AllowDBNull = false
            Me.columnCIMCDF_CDF_NUMERO_FK_PK.MaxLength = 2
            Me.columnCIMCDF_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnCIMCDF_CDF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCIMCDF_CIM10_CODIFRow() As CIMCDF_CIM10_CODIFRow
            Return CType(Me.NewRow,CIMCDF_CIM10_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CIMCDF_CIM10_CODIFRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CIMCDF_CIM10_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CIMCDF_CIM10_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent CIMCDF_CIM10_CODIFRowChanged(Me, New CIMCDF_CIM10_CODIFRowChangeEvent(CType(e.Row,CIMCDF_CIM10_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CIMCDF_CIM10_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent CIMCDF_CIM10_CODIFRowChanging(Me, New CIMCDF_CIM10_CODIFRowChangeEvent(CType(e.Row,CIMCDF_CIM10_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CIMCDF_CIM10_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent CIMCDF_CIM10_CODIFRowDeleted(Me, New CIMCDF_CIM10_CODIFRowChangeEvent(CType(e.Row,CIMCDF_CIM10_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CIMCDF_CIM10_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent CIMCDF_CIM10_CODIFRowDeleting(Me, New CIMCDF_CIM10_CODIFRowChangeEvent(CType(e.Row,CIMCDF_CIM10_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCIMCDF_CIM10_CODIFRow(ByVal row As CIMCDF_CIM10_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CIMCDF_CIM10_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NAIN_NATURE_INDICATIONDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNAIN_CODE_PK As System.Data.DataColumn
        
        Private columnNAIN_MALADIE_RARE As System.Data.DataColumn
        
        Private columnNAIN_TEXTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NAIN_NATURE_INDICATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAIN_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnNAIN_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAIN_MALADIE_RAREColumn() As System.Data.DataColumn
            Get
                Return Me.columnNAIN_MALADIE_RARE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAIN_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnNAIN_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NAIN_NATURE_INDICATIONRow
            Get
                Return CType(Me.Rows(index),NAIN_NATURE_INDICATIONRow)
            End Get
        End Property
        
        Public Event NAIN_NATURE_INDICATIONRowChanging As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        Public Event NAIN_NATURE_INDICATIONRowChanged As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        Public Event NAIN_NATURE_INDICATIONRowDeleting As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        Public Event NAIN_NATURE_INDICATIONRowDeleted As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNAIN_NATURE_INDICATIONRow(ByVal row As NAIN_NATURE_INDICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNAIN_NATURE_INDICATIONRow(ByVal NAIN_CODE_PK As String, ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String) As NAIN_NATURE_INDICATIONRow
            Dim rowNAIN_NATURE_INDICATIONRow As NAIN_NATURE_INDICATIONRow = CType(Me.NewRow,NAIN_NATURE_INDICATIONRow)
            rowNAIN_NATURE_INDICATIONRow.ItemArray = New Object() {NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE}
            Me.Rows.Add(rowNAIN_NATURE_INDICATIONRow)
            Return rowNAIN_NATURE_INDICATIONRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNAIN_CODE_PK(ByVal NAIN_CODE_PK As String) As NAIN_NATURE_INDICATIONRow
            Return CType(Me.Rows.Find(New Object() {NAIN_CODE_PK}),NAIN_NATURE_INDICATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As NAIN_NATURE_INDICATIONDataTable = CType(MyBase.Clone,NAIN_NATURE_INDICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New NAIN_NATURE_INDICATIONDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNAIN_CODE_PK = MyBase.Columns("NAIN_CODE_PK")
            Me.columnNAIN_MALADIE_RARE = MyBase.Columns("NAIN_MALADIE_RARE")
            Me.columnNAIN_TEXTE = MyBase.Columns("NAIN_TEXTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNAIN_CODE_PK = New System.Data.DataColumn("NAIN_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAIN_CODE_PK)
            Me.columnNAIN_MALADIE_RARE = New System.Data.DataColumn("NAIN_MALADIE_RARE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAIN_MALADIE_RARE)
            Me.columnNAIN_TEXTE = New System.Data.DataColumn("NAIN_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAIN_TEXTE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNAIN_CODE_PK}, true))
            Me.columnNAIN_CODE_PK.AllowDBNull = false
            Me.columnNAIN_CODE_PK.Unique = true
            Me.columnNAIN_CODE_PK.MaxLength = 10
            Me.columnNAIN_MALADIE_RARE.MaxLength = 1
            Me.columnNAIN_TEXTE.MaxLength = 1024
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNAIN_NATURE_INDICATIONRow() As NAIN_NATURE_INDICATIONRow
            Return CType(Me.NewRow,NAIN_NATURE_INDICATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New NAIN_NATURE_INDICATIONRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NAIN_NATURE_INDICATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowChanged(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowChanging(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowDeleted(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowDeleting(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNAIN_NATURE_INDICATIONRow(ByVal row As NAIN_NATURE_INDICATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NAIN_NATURE_INDICATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFIUP_INFO_UNITE_PRISEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCDFIUP_NUMERO_PK As System.Data.DataColumn
        
        Private columnCDFIUP_CODE_PK As System.Data.DataColumn
        
        Private columnCDFIUP_APPLICABLE As System.Data.DataColumn
        
        Private columnCDFIUP_DONANTH_CDF_CODE_FK As System.Data.DataColumn
        
        Private columnCDFIUP_COEFDUR_CDF_CODE_FK As System.Data.DataColumn
        
        Private columnCDFIUP_COEFDUR_CDF_NUM_FK As System.Data.DataColumn
        
        Private columnCDFIUP_COEFVOL_CDF_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFIUP_INFO_UNITE_PRISE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_NUMERO_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_NUMERO_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_APPLICABLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_APPLICABLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_DONANTH_CDF_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_DONANTH_CDF_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_COEFDUR_CDF_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_COEFDUR_CDF_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_COEFDUR_CDF_NUM_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_COEFDUR_CDF_NUM_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFIUP_COEFVOL_CDF_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFIUP_COEFVOL_CDF_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFIUP_INFO_UNITE_PRISERow
            Get
                Return CType(Me.Rows(index),CDFIUP_INFO_UNITE_PRISERow)
            End Get
        End Property
        
        Public Event CDFIUP_INFO_UNITE_PRISERowChanging As CDFIUP_INFO_UNITE_PRISERowChangeEventHandler
        
        Public Event CDFIUP_INFO_UNITE_PRISERowChanged As CDFIUP_INFO_UNITE_PRISERowChangeEventHandler
        
        Public Event CDFIUP_INFO_UNITE_PRISERowDeleting As CDFIUP_INFO_UNITE_PRISERowChangeEventHandler
        
        Public Event CDFIUP_INFO_UNITE_PRISERowDeleted As CDFIUP_INFO_UNITE_PRISERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFIUP_INFO_UNITE_PRISERow(ByVal row As CDFIUP_INFO_UNITE_PRISERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFIUP_INFO_UNITE_PRISERow(ByVal CDFIUP_NUMERO_PK As String, ByVal CDFIUP_CODE_PK As String, ByVal CDFIUP_APPLICABLE As String, ByVal CDFIUP_DONANTH_CDF_CODE_FK As String, ByVal CDFIUP_COEFDUR_CDF_CODE_FK As String, ByVal CDFIUP_COEFDUR_CDF_NUM_FK As String, ByVal CDFIUP_COEFVOL_CDF_CODE_FK As String) As CDFIUP_INFO_UNITE_PRISERow
            Dim rowCDFIUP_INFO_UNITE_PRISERow As CDFIUP_INFO_UNITE_PRISERow = CType(Me.NewRow,CDFIUP_INFO_UNITE_PRISERow)
            rowCDFIUP_INFO_UNITE_PRISERow.ItemArray = New Object() {CDFIUP_NUMERO_PK, CDFIUP_CODE_PK, CDFIUP_APPLICABLE, CDFIUP_DONANTH_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_NUM_FK, CDFIUP_COEFVOL_CDF_CODE_FK}
            Me.Rows.Add(rowCDFIUP_INFO_UNITE_PRISERow)
            Return rowCDFIUP_INFO_UNITE_PRISERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDFIUP_NUMERO_PKCDFIUP_CODE_PK(ByVal CDFIUP_NUMERO_PK As String, ByVal CDFIUP_CODE_PK As String) As CDFIUP_INFO_UNITE_PRISERow
            Return CType(Me.Rows.Find(New Object() {CDFIUP_NUMERO_PK, CDFIUP_CODE_PK}),CDFIUP_INFO_UNITE_PRISERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CDFIUP_INFO_UNITE_PRISEDataTable = CType(MyBase.Clone,CDFIUP_INFO_UNITE_PRISEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CDFIUP_INFO_UNITE_PRISEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFIUP_NUMERO_PK = MyBase.Columns("CDFIUP_NUMERO_PK")
            Me.columnCDFIUP_CODE_PK = MyBase.Columns("CDFIUP_CODE_PK")
            Me.columnCDFIUP_APPLICABLE = MyBase.Columns("CDFIUP_APPLICABLE")
            Me.columnCDFIUP_DONANTH_CDF_CODE_FK = MyBase.Columns("CDFIUP_DONANTH_CDF_CODE_FK")
            Me.columnCDFIUP_COEFDUR_CDF_CODE_FK = MyBase.Columns("CDFIUP_COEFDUR_CDF_CODE_FK")
            Me.columnCDFIUP_COEFDUR_CDF_NUM_FK = MyBase.Columns("CDFIUP_COEFDUR_CDF_NUM_FK")
            Me.columnCDFIUP_COEFVOL_CDF_CODE_FK = MyBase.Columns("CDFIUP_COEFVOL_CDF_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFIUP_NUMERO_PK = New System.Data.DataColumn("CDFIUP_NUMERO_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_NUMERO_PK)
            Me.columnCDFIUP_CODE_PK = New System.Data.DataColumn("CDFIUP_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_CODE_PK)
            Me.columnCDFIUP_APPLICABLE = New System.Data.DataColumn("CDFIUP_APPLICABLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_APPLICABLE)
            Me.columnCDFIUP_DONANTH_CDF_CODE_FK = New System.Data.DataColumn("CDFIUP_DONANTH_CDF_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_DONANTH_CDF_CODE_FK)
            Me.columnCDFIUP_COEFDUR_CDF_CODE_FK = New System.Data.DataColumn("CDFIUP_COEFDUR_CDF_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_COEFDUR_CDF_CODE_FK)
            Me.columnCDFIUP_COEFDUR_CDF_NUM_FK = New System.Data.DataColumn("CDFIUP_COEFDUR_CDF_NUM_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_COEFDUR_CDF_NUM_FK)
            Me.columnCDFIUP_COEFVOL_CDF_CODE_FK = New System.Data.DataColumn("CDFIUP_COEFVOL_CDF_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFIUP_COEFVOL_CDF_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCDFIUP_NUMERO_PK, Me.columnCDFIUP_CODE_PK}, true))
            Me.columnCDFIUP_NUMERO_PK.AllowDBNull = false
            Me.columnCDFIUP_NUMERO_PK.MaxLength = 2
            Me.columnCDFIUP_CODE_PK.AllowDBNull = false
            Me.columnCDFIUP_CODE_PK.MaxLength = 10
            Me.columnCDFIUP_APPLICABLE.MaxLength = 1
            Me.columnCDFIUP_DONANTH_CDF_CODE_FK.MaxLength = 10
            Me.columnCDFIUP_COEFDUR_CDF_CODE_FK.MaxLength = 10
            Me.columnCDFIUP_COEFDUR_CDF_NUM_FK.MaxLength = 2
            Me.columnCDFIUP_COEFVOL_CDF_CODE_FK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFIUP_INFO_UNITE_PRISERow() As CDFIUP_INFO_UNITE_PRISERow
            Return CType(Me.NewRow,CDFIUP_INFO_UNITE_PRISERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CDFIUP_INFO_UNITE_PRISERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CDFIUP_INFO_UNITE_PRISERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFIUP_INFO_UNITE_PRISERowChangedEvent) Is Nothing) Then
                RaiseEvent CDFIUP_INFO_UNITE_PRISERowChanged(Me, New CDFIUP_INFO_UNITE_PRISERowChangeEvent(CType(e.Row,CDFIUP_INFO_UNITE_PRISERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFIUP_INFO_UNITE_PRISERowChangingEvent) Is Nothing) Then
                RaiseEvent CDFIUP_INFO_UNITE_PRISERowChanging(Me, New CDFIUP_INFO_UNITE_PRISERowChangeEvent(CType(e.Row,CDFIUP_INFO_UNITE_PRISERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFIUP_INFO_UNITE_PRISERowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFIUP_INFO_UNITE_PRISERowDeleted(Me, New CDFIUP_INFO_UNITE_PRISERowChangeEvent(CType(e.Row,CDFIUP_INFO_UNITE_PRISERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFIUP_INFO_UNITE_PRISERowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFIUP_INFO_UNITE_PRISERowDeleting(Me, New CDFIUP_INFO_UNITE_PRISERowChangeEvent(CType(e.Row,CDFIUP_INFO_UNITE_PRISERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFIUP_INFO_UNITE_PRISERow(ByVal row As CDFIUP_INFO_UNITE_PRISERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFIUP_INFO_UNITE_PRISEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CISPCDF_CISP_CODIFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCISPCDF_CISP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCISPCDF_CDF_NUMERO_FK_PK As System.Data.DataColumn
        
        Private columnCISPCDF_CDF_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCISPCDF_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CISPCDF_CISP_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISPCDF_CISP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISPCDF_CISP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISPCDF_CDF_NUMERO_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISPCDF_CDF_NUMERO_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISPCDF_CDF_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISPCDF_CDF_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CISPCDF_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCISPCDF_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CISPCDF_CISP_CODIFRow
            Get
                Return CType(Me.Rows(index),CISPCDF_CISP_CODIFRow)
            End Get
        End Property
        
        Public Event CISPCDF_CISP_CODIFRowChanging As CISPCDF_CISP_CODIFRowChangeEventHandler
        
        Public Event CISPCDF_CISP_CODIFRowChanged As CISPCDF_CISP_CODIFRowChangeEventHandler
        
        Public Event CISPCDF_CISP_CODIFRowDeleting As CISPCDF_CISP_CODIFRowChangeEventHandler
        
        Public Event CISPCDF_CISP_CODIFRowDeleted As CISPCDF_CISP_CODIFRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCISPCDF_CISP_CODIFRow(ByVal row As CISPCDF_CISP_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCISPCDF_CISP_CODIFRow(ByVal parentCISP_CLASSIF_INTER_SOINSRowByFK1_CISPCDF_CISP_CODIF As CISP_CLASSIF_INTER_SOINSRow, ByVal CISPCDF_CDF_NUMERO_FK_PK As String, ByVal CISPCDF_CDF_CODE_FK_PK As String, ByVal CISPCDF_NUMORD As Short) As CISPCDF_CISP_CODIFRow
            Dim rowCISPCDF_CISP_CODIFRow As CISPCDF_CISP_CODIFRow = CType(Me.NewRow,CISPCDF_CISP_CODIFRow)
            rowCISPCDF_CISP_CODIFRow.ItemArray = New Object() {parentCISP_CLASSIF_INTER_SOINSRowByFK1_CISPCDF_CISP_CODIF(0), CISPCDF_CDF_NUMERO_FK_PK, CISPCDF_CDF_CODE_FK_PK, CISPCDF_NUMORD}
            Me.Rows.Add(rowCISPCDF_CISP_CODIFRow)
            Return rowCISPCDF_CISP_CODIFRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCISPCDF_CISP_CODE_FK_PKCISPCDF_CDF_NUMERO_FK_PKCISPCDF_CDF_CODE_FK_PK(ByVal CISPCDF_CISP_CODE_FK_PK As String, ByVal CISPCDF_CDF_NUMERO_FK_PK As String, ByVal CISPCDF_CDF_CODE_FK_PK As String) As CISPCDF_CISP_CODIFRow
            Return CType(Me.Rows.Find(New Object() {CISPCDF_CISP_CODE_FK_PK, CISPCDF_CDF_NUMERO_FK_PK, CISPCDF_CDF_CODE_FK_PK}),CISPCDF_CISP_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CISPCDF_CISP_CODIFDataTable = CType(MyBase.Clone,CISPCDF_CISP_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CISPCDF_CISP_CODIFDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCISPCDF_CISP_CODE_FK_PK = MyBase.Columns("CISPCDF_CISP_CODE_FK_PK")
            Me.columnCISPCDF_CDF_NUMERO_FK_PK = MyBase.Columns("CISPCDF_CDF_NUMERO_FK_PK")
            Me.columnCISPCDF_CDF_CODE_FK_PK = MyBase.Columns("CISPCDF_CDF_CODE_FK_PK")
            Me.columnCISPCDF_NUMORD = MyBase.Columns("CISPCDF_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCISPCDF_CISP_CODE_FK_PK = New System.Data.DataColumn("CISPCDF_CISP_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISPCDF_CISP_CODE_FK_PK)
            Me.columnCISPCDF_CDF_NUMERO_FK_PK = New System.Data.DataColumn("CISPCDF_CDF_NUMERO_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISPCDF_CDF_NUMERO_FK_PK)
            Me.columnCISPCDF_CDF_CODE_FK_PK = New System.Data.DataColumn("CISPCDF_CDF_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISPCDF_CDF_CODE_FK_PK)
            Me.columnCISPCDF_NUMORD = New System.Data.DataColumn("CISPCDF_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCISPCDF_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCISPCDF_CISP_CODE_FK_PK, Me.columnCISPCDF_CDF_NUMERO_FK_PK, Me.columnCISPCDF_CDF_CODE_FK_PK}, true))
            Me.columnCISPCDF_CISP_CODE_FK_PK.AllowDBNull = false
            Me.columnCISPCDF_CISP_CODE_FK_PK.MaxLength = 10
            Me.columnCISPCDF_CDF_NUMERO_FK_PK.AllowDBNull = false
            Me.columnCISPCDF_CDF_NUMERO_FK_PK.MaxLength = 2
            Me.columnCISPCDF_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnCISPCDF_CDF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCISPCDF_CISP_CODIFRow() As CISPCDF_CISP_CODIFRow
            Return CType(Me.NewRow,CISPCDF_CISP_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CISPCDF_CISP_CODIFRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CISPCDF_CISP_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CISPCDF_CISP_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent CISPCDF_CISP_CODIFRowChanged(Me, New CISPCDF_CISP_CODIFRowChangeEvent(CType(e.Row,CISPCDF_CISP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CISPCDF_CISP_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent CISPCDF_CISP_CODIFRowChanging(Me, New CISPCDF_CISP_CODIFRowChangeEvent(CType(e.Row,CISPCDF_CISP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CISPCDF_CISP_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent CISPCDF_CISP_CODIFRowDeleted(Me, New CISPCDF_CISP_CODIFRowChangeEvent(CType(e.Row,CISPCDF_CISP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CISPCDF_CISP_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent CISPCDF_CISP_CODIFRowDeleting(Me, New CISPCDF_CISP_CODIFRowChangeEvent(CType(e.Row,CISPCDF_CISP_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCISPCDF_CISP_CODIFRow(ByVal row As CISPCDF_CISP_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CISPCDF_CISP_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MEDCDF_MEDRA_CODIFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEDCDF_MED_CODE_FK_PK As System.Data.DataColumn
        
        Private columnMEDCDF_CDF_NUMERO_FK_PK As System.Data.DataColumn
        
        Private columnMEDCDF_CDF_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MEDCDF_MEDRA_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDCDF_MED_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnMEDCDF_MED_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDCDF_CDF_NUMERO_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnMEDCDF_CDF_NUMERO_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDCDF_CDF_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnMEDCDF_CDF_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MEDCDF_MEDRA_CODIFRow
            Get
                Return CType(Me.Rows(index),MEDCDF_MEDRA_CODIFRow)
            End Get
        End Property
        
        Public Event MEDCDF_MEDRA_CODIFRowChanging As MEDCDF_MEDRA_CODIFRowChangeEventHandler
        
        Public Event MEDCDF_MEDRA_CODIFRowChanged As MEDCDF_MEDRA_CODIFRowChangeEventHandler
        
        Public Event MEDCDF_MEDRA_CODIFRowDeleting As MEDCDF_MEDRA_CODIFRowChangeEventHandler
        
        Public Event MEDCDF_MEDRA_CODIFRowDeleted As MEDCDF_MEDRA_CODIFRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMEDCDF_MEDRA_CODIFRow(ByVal row As MEDCDF_MEDRA_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMEDCDF_MEDRA_CODIFRow(ByVal MEDCDF_MED_CODE_FK_PK As String, ByVal MEDCDF_CDF_NUMERO_FK_PK As String, ByVal MEDCDF_CDF_CODE_FK_PK As String) As MEDCDF_MEDRA_CODIFRow
            Dim rowMEDCDF_MEDRA_CODIFRow As MEDCDF_MEDRA_CODIFRow = CType(Me.NewRow,MEDCDF_MEDRA_CODIFRow)
            rowMEDCDF_MEDRA_CODIFRow.ItemArray = New Object() {MEDCDF_MED_CODE_FK_PK, MEDCDF_CDF_NUMERO_FK_PK, MEDCDF_CDF_CODE_FK_PK}
            Me.Rows.Add(rowMEDCDF_MEDRA_CODIFRow)
            Return rowMEDCDF_MEDRA_CODIFRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMEDCDF_MED_CODE_FK_PKMEDCDF_CDF_NUMERO_FK_PKMEDCDF_CDF_CODE_FK_PK(ByVal MEDCDF_MED_CODE_FK_PK As String, ByVal MEDCDF_CDF_NUMERO_FK_PK As String, ByVal MEDCDF_CDF_CODE_FK_PK As String) As MEDCDF_MEDRA_CODIFRow
            Return CType(Me.Rows.Find(New Object() {MEDCDF_MED_CODE_FK_PK, MEDCDF_CDF_NUMERO_FK_PK, MEDCDF_CDF_CODE_FK_PK}),MEDCDF_MEDRA_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MEDCDF_MEDRA_CODIFDataTable = CType(MyBase.Clone,MEDCDF_MEDRA_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MEDCDF_MEDRA_CODIFDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMEDCDF_MED_CODE_FK_PK = MyBase.Columns("MEDCDF_MED_CODE_FK_PK")
            Me.columnMEDCDF_CDF_NUMERO_FK_PK = MyBase.Columns("MEDCDF_CDF_NUMERO_FK_PK")
            Me.columnMEDCDF_CDF_CODE_FK_PK = MyBase.Columns("MEDCDF_CDF_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMEDCDF_MED_CODE_FK_PK = New System.Data.DataColumn("MEDCDF_MED_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDCDF_MED_CODE_FK_PK)
            Me.columnMEDCDF_CDF_NUMERO_FK_PK = New System.Data.DataColumn("MEDCDF_CDF_NUMERO_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDCDF_CDF_NUMERO_FK_PK)
            Me.columnMEDCDF_CDF_CODE_FK_PK = New System.Data.DataColumn("MEDCDF_CDF_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDCDF_CDF_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnMEDCDF_MED_CODE_FK_PK, Me.columnMEDCDF_CDF_NUMERO_FK_PK, Me.columnMEDCDF_CDF_CODE_FK_PK}, true))
            Me.columnMEDCDF_MED_CODE_FK_PK.AllowDBNull = false
            Me.columnMEDCDF_MED_CODE_FK_PK.MaxLength = 10
            Me.columnMEDCDF_CDF_NUMERO_FK_PK.AllowDBNull = false
            Me.columnMEDCDF_CDF_NUMERO_FK_PK.MaxLength = 2
            Me.columnMEDCDF_CDF_CODE_FK_PK.AllowDBNull = false
            Me.columnMEDCDF_CDF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMEDCDF_MEDRA_CODIFRow() As MEDCDF_MEDRA_CODIFRow
            Return CType(Me.NewRow,MEDCDF_MEDRA_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MEDCDF_MEDRA_CODIFRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MEDCDF_MEDRA_CODIFRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MEDCDF_MEDRA_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent MEDCDF_MEDRA_CODIFRowChanged(Me, New MEDCDF_MEDRA_CODIFRowChangeEvent(CType(e.Row,MEDCDF_MEDRA_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MEDCDF_MEDRA_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent MEDCDF_MEDRA_CODIFRowChanging(Me, New MEDCDF_MEDRA_CODIFRowChangeEvent(CType(e.Row,MEDCDF_MEDRA_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MEDCDF_MEDRA_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent MEDCDF_MEDRA_CODIFRowDeleted(Me, New MEDCDF_MEDRA_CODIFRowChangeEvent(CType(e.Row,MEDCDF_MEDRA_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MEDCDF_MEDRA_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent MEDCDF_MEDRA_CODIFRowDeleting(Me, New MEDCDF_MEDRA_CODIFRowChangeEvent(CType(e.Row,MEDCDF_MEDRA_CODIFRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMEDCDF_MEDRA_CODIFRow(ByVal row As MEDCDF_MEDRA_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MEDCDF_MEDRA_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFPF_LIEN_CDF_PERE_FILSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCDFPF_NUMEROP_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_CODEP_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_NUMEROF_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_CODEF_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFPF_LIEN_CDF_PERE_FILS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_NUMEROP_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_NUMEROP_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_CODEP_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_CODEP_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_NUMEROF_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_NUMEROF_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_CODEF_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_CODEF_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFPF_LIEN_CDF_PERE_FILSRow
            Get
                Return CType(Me.Rows(index),CDFPF_LIEN_CDF_PERE_FILSRow)
            End Get
        End Property
        
        Public Event CDFPF_LIEN_CDF_PERE_FILSRowChanging As CDFPF_LIEN_CDF_PERE_FILSRowChangeEventHandler
        
        Public Event CDFPF_LIEN_CDF_PERE_FILSRowChanged As CDFPF_LIEN_CDF_PERE_FILSRowChangeEventHandler
        
        Public Event CDFPF_LIEN_CDF_PERE_FILSRowDeleting As CDFPF_LIEN_CDF_PERE_FILSRowChangeEventHandler
        
        Public Event CDFPF_LIEN_CDF_PERE_FILSRowDeleted As CDFPF_LIEN_CDF_PERE_FILSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFPF_LIEN_CDF_PERE_FILSRow(ByVal row As CDFPF_LIEN_CDF_PERE_FILSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFPF_LIEN_CDF_PERE_FILSRow(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String, ByVal CDFPF_NUMORD As Short) As CDFPF_LIEN_CDF_PERE_FILSRow
            Dim rowCDFPF_LIEN_CDF_PERE_FILSRow As CDFPF_LIEN_CDF_PERE_FILSRow = CType(Me.NewRow,CDFPF_LIEN_CDF_PERE_FILSRow)
            rowCDFPF_LIEN_CDF_PERE_FILSRow.ItemArray = New Object() {CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_FK_PK, CDFPF_NUMORD}
            Me.Rows.Add(rowCDFPF_LIEN_CDF_PERE_FILSRow)
            Return rowCDFPF_LIEN_CDF_PERE_FILSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDFPF_NUMEROP_FK_PKCDFPF_CODEP_FK_PKCDFPF_NUMEROF_FK_PKCDFPF_CODEF_FK_PK(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String) As CDFPF_LIEN_CDF_PERE_FILSRow
            Return CType(Me.Rows.Find(New Object() {CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_FK_PK}),CDFPF_LIEN_CDF_PERE_FILSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CDFPF_LIEN_CDF_PERE_FILSDataTable = CType(MyBase.Clone,CDFPF_LIEN_CDF_PERE_FILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CDFPF_LIEN_CDF_PERE_FILSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFPF_NUMEROP_FK_PK = MyBase.Columns("CDFPF_NUMEROP_FK_PK")
            Me.columnCDFPF_CODEP_FK_PK = MyBase.Columns("CDFPF_CODEP_FK_PK")
            Me.columnCDFPF_NUMEROF_FK_PK = MyBase.Columns("CDFPF_NUMEROF_FK_PK")
            Me.columnCDFPF_CODEF_FK_PK = MyBase.Columns("CDFPF_CODEF_FK_PK")
            Me.columnCDFPF_NUMORD = MyBase.Columns("CDFPF_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFPF_NUMEROP_FK_PK = New System.Data.DataColumn("CDFPF_NUMEROP_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_NUMEROP_FK_PK)
            Me.columnCDFPF_CODEP_FK_PK = New System.Data.DataColumn("CDFPF_CODEP_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_CODEP_FK_PK)
            Me.columnCDFPF_NUMEROF_FK_PK = New System.Data.DataColumn("CDFPF_NUMEROF_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_NUMEROF_FK_PK)
            Me.columnCDFPF_CODEF_FK_PK = New System.Data.DataColumn("CDFPF_CODEF_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_CODEF_FK_PK)
            Me.columnCDFPF_NUMORD = New System.Data.DataColumn("CDFPF_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCDFPF_NUMEROP_FK_PK, Me.columnCDFPF_CODEP_FK_PK, Me.columnCDFPF_NUMEROF_FK_PK, Me.columnCDFPF_CODEF_FK_PK}, true))
            Me.columnCDFPF_NUMEROP_FK_PK.AllowDBNull = false
            Me.columnCDFPF_NUMEROP_FK_PK.MaxLength = 2
            Me.columnCDFPF_CODEP_FK_PK.AllowDBNull = false
            Me.columnCDFPF_CODEP_FK_PK.MaxLength = 10
            Me.columnCDFPF_NUMEROF_FK_PK.AllowDBNull = false
            Me.columnCDFPF_NUMEROF_FK_PK.MaxLength = 2
            Me.columnCDFPF_CODEF_FK_PK.AllowDBNull = false
            Me.columnCDFPF_CODEF_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFPF_LIEN_CDF_PERE_FILSRow() As CDFPF_LIEN_CDF_PERE_FILSRow
            Return CType(Me.NewRow,CDFPF_LIEN_CDF_PERE_FILSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CDFPF_LIEN_CDF_PERE_FILSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CDFPF_LIEN_CDF_PERE_FILSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILSRowChangedEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILSRowChanged(Me, New CDFPF_LIEN_CDF_PERE_FILSRowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILSRowChangingEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILSRowChanging(Me, New CDFPF_LIEN_CDF_PERE_FILSRowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILSRowDeleted(Me, New CDFPF_LIEN_CDF_PERE_FILSRowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILSRowDeleting(Me, New CDFPF_LIEN_CDF_PERE_FILSRowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFPF_LIEN_CDF_PERE_FILSRow(ByVal row As CDFPF_LIEN_CDF_PERE_FILSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFPF_LIEN_CDF_PERE_FILSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDFPF_LIEN_CDF_PERE_FILS_2DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCDFPF_NUMEROP_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_CODEP_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_NUMEROF_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_CODEF_FK_PK As System.Data.DataColumn
        
        Private columnCDFPF_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDFPF_LIEN_CDF_PERE_FILS_2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_NUMEROP_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_NUMEROP_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_CODEP_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_CODEP_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_NUMEROF_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_NUMEROF_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_CODEF_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_CODEF_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDFPF_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDFPF_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDFPF_LIEN_CDF_PERE_FILS_2Row
            Get
                Return CType(Me.Rows(index),CDFPF_LIEN_CDF_PERE_FILS_2Row)
            End Get
        End Property
        
        Public Event CDFPF_LIEN_CDF_PERE_FILS_2RowChanging As CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEventHandler
        
        Public Event CDFPF_LIEN_CDF_PERE_FILS_2RowChanged As CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEventHandler
        
        Public Event CDFPF_LIEN_CDF_PERE_FILS_2RowDeleting As CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEventHandler
        
        Public Event CDFPF_LIEN_CDF_PERE_FILS_2RowDeleted As CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDFPF_LIEN_CDF_PERE_FILS_2Row(ByVal row As CDFPF_LIEN_CDF_PERE_FILS_2Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDFPF_LIEN_CDF_PERE_FILS_2Row(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String, ByVal CDFPF_NUMORD As Short) As CDFPF_LIEN_CDF_PERE_FILS_2Row
            Dim rowCDFPF_LIEN_CDF_PERE_FILS_2Row As CDFPF_LIEN_CDF_PERE_FILS_2Row = CType(Me.NewRow,CDFPF_LIEN_CDF_PERE_FILS_2Row)
            rowCDFPF_LIEN_CDF_PERE_FILS_2Row.ItemArray = New Object() {CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_FK_PK, CDFPF_NUMORD}
            Me.Rows.Add(rowCDFPF_LIEN_CDF_PERE_FILS_2Row)
            Return rowCDFPF_LIEN_CDF_PERE_FILS_2Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDFPF_NUMEROP_FK_PKCDFPF_CODEP_FK_PKCDFPF_NUMEROF_FK_PKCDFPF_CODEF_FK_PK(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String) As CDFPF_LIEN_CDF_PERE_FILS_2Row
            Return CType(Me.Rows.Find(New Object() {CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_FK_PK}),CDFPF_LIEN_CDF_PERE_FILS_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CDFPF_LIEN_CDF_PERE_FILS_2DataTable = CType(MyBase.Clone,CDFPF_LIEN_CDF_PERE_FILS_2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CDFPF_LIEN_CDF_PERE_FILS_2DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDFPF_NUMEROP_FK_PK = MyBase.Columns("CDFPF_NUMEROP_FK_PK")
            Me.columnCDFPF_CODEP_FK_PK = MyBase.Columns("CDFPF_CODEP_FK_PK")
            Me.columnCDFPF_NUMEROF_FK_PK = MyBase.Columns("CDFPF_NUMEROF_FK_PK")
            Me.columnCDFPF_CODEF_FK_PK = MyBase.Columns("CDFPF_CODEF_FK_PK")
            Me.columnCDFPF_NUMORD = MyBase.Columns("CDFPF_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDFPF_NUMEROP_FK_PK = New System.Data.DataColumn("CDFPF_NUMEROP_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_NUMEROP_FK_PK)
            Me.columnCDFPF_CODEP_FK_PK = New System.Data.DataColumn("CDFPF_CODEP_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_CODEP_FK_PK)
            Me.columnCDFPF_NUMEROF_FK_PK = New System.Data.DataColumn("CDFPF_NUMEROF_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_NUMEROF_FK_PK)
            Me.columnCDFPF_CODEF_FK_PK = New System.Data.DataColumn("CDFPF_CODEF_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_CODEF_FK_PK)
            Me.columnCDFPF_NUMORD = New System.Data.DataColumn("CDFPF_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDFPF_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCDFPF_NUMEROP_FK_PK, Me.columnCDFPF_CODEP_FK_PK, Me.columnCDFPF_NUMEROF_FK_PK, Me.columnCDFPF_CODEF_FK_PK}, true))
            Me.columnCDFPF_NUMEROP_FK_PK.AllowDBNull = false
            Me.columnCDFPF_NUMEROP_FK_PK.MaxLength = 2
            Me.columnCDFPF_CODEP_FK_PK.AllowDBNull = false
            Me.columnCDFPF_CODEP_FK_PK.MaxLength = 10
            Me.columnCDFPF_NUMEROF_FK_PK.AllowDBNull = false
            Me.columnCDFPF_NUMEROF_FK_PK.MaxLength = 2
            Me.columnCDFPF_CODEF_FK_PK.AllowDBNull = false
            Me.columnCDFPF_CODEF_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDFPF_LIEN_CDF_PERE_FILS_2Row() As CDFPF_LIEN_CDF_PERE_FILS_2Row
            Return CType(Me.NewRow,CDFPF_LIEN_CDF_PERE_FILS_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CDFPF_LIEN_CDF_PERE_FILS_2Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CDFPF_LIEN_CDF_PERE_FILS_2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILS_2RowChangedEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILS_2RowChanged(Me, New CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILS_2RowChangingEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILS_2RowChanging(Me, New CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILS_2RowDeletedEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILS_2RowDeleted(Me, New CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDFPF_LIEN_CDF_PERE_FILS_2RowDeletingEvent) Is Nothing) Then
                RaiseEvent CDFPF_LIEN_CDF_PERE_FILS_2RowDeleting(Me, New CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEvent(CType(e.Row,CDFPF_LIEN_CDF_PERE_FILS_2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDFPF_LIEN_CDF_PERE_FILS_2Row(ByVal row As CDFPF_LIEN_CDF_PERE_FILS_2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDFPF_LIEN_CDF_PERE_FILS_2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RUBCDF_RUBRIQUE_CODIFICATIONDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRUBCDF_NUMERO_PK As System.Data.DataColumn
        
        Private columnRUBCDF_NOM As System.Data.DataColumn
        
        Private columnRUBCDF_SYN As System.Data.DataColumn
        
        Private columnRUBCDF_DATECR As System.Data.DataColumn
        
        Private columnRUBCDF_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RUBCDF_RUBRIQUE_CODIFICATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUBCDF_NUMERO_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUBCDF_NUMERO_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUBCDF_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUBCDF_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUBCDF_SYNColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUBCDF_SYN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUBCDF_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUBCDF_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUBCDF_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUBCDF_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RUBCDF_RUBRIQUE_CODIFICATIONRow
            Get
                Return CType(Me.Rows(index),RUBCDF_RUBRIQUE_CODIFICATIONRow)
            End Get
        End Property
        
        Public Event RUBCDF_RUBRIQUE_CODIFICATIONRowChanging As RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEventHandler
        
        Public Event RUBCDF_RUBRIQUE_CODIFICATIONRowChanged As RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEventHandler
        
        Public Event RUBCDF_RUBRIQUE_CODIFICATIONRowDeleting As RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEventHandler
        
        Public Event RUBCDF_RUBRIQUE_CODIFICATIONRowDeleted As RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRUBCDF_RUBRIQUE_CODIFICATIONRow(ByVal row As RUBCDF_RUBRIQUE_CODIFICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRUBCDF_RUBRIQUE_CODIFICATIONRow(ByVal RUBCDF_NUMERO_PK As String, ByVal RUBCDF_NOM As String, ByVal RUBCDF_SYN As String, ByVal RUBCDF_DATECR As Date, ByVal RUBCDF_DATEMJ As Date) As RUBCDF_RUBRIQUE_CODIFICATIONRow
            Dim rowRUBCDF_RUBRIQUE_CODIFICATIONRow As RUBCDF_RUBRIQUE_CODIFICATIONRow = CType(Me.NewRow,RUBCDF_RUBRIQUE_CODIFICATIONRow)
            rowRUBCDF_RUBRIQUE_CODIFICATIONRow.ItemArray = New Object() {RUBCDF_NUMERO_PK, RUBCDF_NOM, RUBCDF_SYN, RUBCDF_DATECR, RUBCDF_DATEMJ}
            Me.Rows.Add(rowRUBCDF_RUBRIQUE_CODIFICATIONRow)
            Return rowRUBCDF_RUBRIQUE_CODIFICATIONRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRUBCDF_NUMERO_PK(ByVal RUBCDF_NUMERO_PK As String) As RUBCDF_RUBRIQUE_CODIFICATIONRow
            Return CType(Me.Rows.Find(New Object() {RUBCDF_NUMERO_PK}),RUBCDF_RUBRIQUE_CODIFICATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RUBCDF_RUBRIQUE_CODIFICATIONDataTable = CType(MyBase.Clone,RUBCDF_RUBRIQUE_CODIFICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RUBCDF_RUBRIQUE_CODIFICATIONDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRUBCDF_NUMERO_PK = MyBase.Columns("RUBCDF_NUMERO_PK")
            Me.columnRUBCDF_NOM = MyBase.Columns("RUBCDF_NOM")
            Me.columnRUBCDF_SYN = MyBase.Columns("RUBCDF_SYN")
            Me.columnRUBCDF_DATECR = MyBase.Columns("RUBCDF_DATECR")
            Me.columnRUBCDF_DATEMJ = MyBase.Columns("RUBCDF_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRUBCDF_NUMERO_PK = New System.Data.DataColumn("RUBCDF_NUMERO_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUBCDF_NUMERO_PK)
            Me.columnRUBCDF_NOM = New System.Data.DataColumn("RUBCDF_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUBCDF_NOM)
            Me.columnRUBCDF_SYN = New System.Data.DataColumn("RUBCDF_SYN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUBCDF_SYN)
            Me.columnRUBCDF_DATECR = New System.Data.DataColumn("RUBCDF_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUBCDF_DATECR)
            Me.columnRUBCDF_DATEMJ = New System.Data.DataColumn("RUBCDF_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUBCDF_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnRUBCDF_NUMERO_PK}, true))
            Me.columnRUBCDF_NUMERO_PK.AllowDBNull = false
            Me.columnRUBCDF_NUMERO_PK.Unique = true
            Me.columnRUBCDF_NUMERO_PK.MaxLength = 10
            Me.columnRUBCDF_NOM.AllowDBNull = false
            Me.columnRUBCDF_NOM.MaxLength = 40
            Me.columnRUBCDF_SYN.MaxLength = 40
            Me.columnRUBCDF_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRUBCDF_RUBRIQUE_CODIFICATIONRow() As RUBCDF_RUBRIQUE_CODIFICATIONRow
            Return CType(Me.NewRow,RUBCDF_RUBRIQUE_CODIFICATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RUBCDF_RUBRIQUE_CODIFICATIONRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RUBCDF_RUBRIQUE_CODIFICATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RUBCDF_RUBRIQUE_CODIFICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent RUBCDF_RUBRIQUE_CODIFICATIONRowChanged(Me, New RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEvent(CType(e.Row,RUBCDF_RUBRIQUE_CODIFICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RUBCDF_RUBRIQUE_CODIFICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent RUBCDF_RUBRIQUE_CODIFICATIONRowChanging(Me, New RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEvent(CType(e.Row,RUBCDF_RUBRIQUE_CODIFICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RUBCDF_RUBRIQUE_CODIFICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent RUBCDF_RUBRIQUE_CODIFICATIONRowDeleted(Me, New RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEvent(CType(e.Row,RUBCDF_RUBRIQUE_CODIFICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RUBCDF_RUBRIQUE_CODIFICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent RUBCDF_RUBRIQUE_CODIFICATIONRowDeleting(Me, New RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEvent(CType(e.Row,RUBCDF_RUBRIQUE_CODIFICATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRUBCDF_RUBRIQUE_CODIFICATIONRow(ByVal row As RUBCDF_RUBRIQUE_CODIFICATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque = New dsTheriaque
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RUBCDF_RUBRIQUE_CODIFICATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CPH_CLASSEPHARMTHERRow
        Inherits System.Data.DataRow
        
        Private tableCPH_CLASSEPHARMTHER As CPH_CLASSEPHARMTHERDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCPH_CLASSEPHARMTHER = CType(Me.Table,CPH_CLASSEPHARMTHERDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CPH_CPH_CODE_FK' dans la table 'CPH_CLASSEPHARMTHER' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_NOM() As String
            Get
                Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_DATECR() As Date
            Get
                Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CPH_DATEMJ' dans la table 'CPH_CLASSEPHARMTHER' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CLASSEPHARMTHERRowParent() As CPH_CLASSEPHARMTHERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CPH_CLASSEPHARMTHER")),CPH_CLASSEPHARMTHERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CPH_CLASSEPHARMTHER"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCPH_CPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCPH_CPH_CODE_FKNull()
            Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
                Public Function IsCDF_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableCPH_CLASSEPHARMTHER.CPH_DATECRColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCPH_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCDF_DATECRNull()
            Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATECRColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCPH_DATEMJNull()
            Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCPH_CLASSEPHARMTHERRows() As CPH_CLASSEPHARMTHERRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CPH_CLASSEPHARMTHER")),CPH_CLASSEPHARMTHERRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYCPH_SYNONYME_CLASSEPHARMTHERRows() As SYCPH_SYNONYME_CLASSEPHARMTHERRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYCPH_SYNONYME_CLASSEPHARM")),SYCPH_SYNONYME_CLASSEPHARMTHERRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYCPH_SYNONYME_CLASSEPHARMTHERRow
        Inherits System.Data.DataRow
        
        Private tableSYCPH_SYNONYME_CLASSEPHARMTHER As SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER = CType(Me.Table,SYCPH_SYNONYME_CLASSEPHARMTHERDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCPH_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER.SYCPH_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER.SYCPH_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCPH_CPH_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER.SYCPH_CPH_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSYCPH_SYNONYME_CLASSEPHARMTHER.SYCPH_CPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CLASSEPHARMTHERRow() As CPH_CLASSEPHARMTHERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYCPH_SYNONYME_CLASSEPHARM")),CPH_CLASSEPHARMTHERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYCPH_SYNONYME_CLASSEPHARM"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CCH_CLASSECHIMIQUERow
        Inherits System.Data.DataRow
        
        Private tableCCH_CLASSECHIMIQUE As CCH_CLASSECHIMIQUEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCCH_CLASSECHIMIQUE = CType(Me.Table,CCH_CLASSECHIMIQUEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCCH_CLASSECHIMIQUE.CCH_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCCH_CLASSECHIMIQUE.CCH_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_CCH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCH_CLASSECHIMIQUE.CCH_CCH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CCH_CCH_CODE_FK' dans la table 'CCH_CLASSECHIMIQUE' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCH_CLASSECHIMIQUE.CCH_CCH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_NOM() As String
            Get
                Return CType(Me(Me.tableCCH_CLASSECHIMIQUE.CCH_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCCH_CLASSECHIMIQUE.CCH_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_DATECR() As Date
            Get
                Return CType(Me(Me.tableCCH_CLASSECHIMIQUE.CCH_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCCH_CLASSECHIMIQUE.CCH_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCH_CLASSECHIMIQUE.CCH_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CCH_DATEMJ' dans la table 'CCH_CLASSECHIMIQUE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCH_CLASSECHIMIQUE.CCH_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_CLASSECHIMIQUERowParent() As CCH_CLASSECHIMIQUERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CCH_CLASSECHIMIQUE")),CCH_CLASSECHIMIQUERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CCH_CLASSECHIMIQUE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCH_CCH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCCH_CLASSECHIMIQUE.CCH_CCH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCH_CCH_CODE_FKNull()
            Me(Me.tableCCH_CLASSECHIMIQUE.CCH_CCH_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCH_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCCH_CLASSECHIMIQUE.CCH_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCH_DATEMJNull()
            Me(Me.tableCCH_CLASSECHIMIQUE.CCH_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCCH_CLASSECHIMIQUERows() As CCH_CLASSECHIMIQUERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CCH_CLASSECHIMIQUE")),CCH_CLASSECHIMIQUERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYCCH_SYNONYME_CLASSECHIMIQUERows() As SYCCH_SYNONYME_CLASSECHIMIQUERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYCCH_SYNONYME_CLASSECHIMI")),SYCCH_SYNONYME_CLASSECHIMIQUERow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYCCH_SYNONYME_CLASSECHIMIQUERow
        Inherits System.Data.DataRow
        
        Private tableSYCCH_SYNONYME_CLASSECHIMIQUE As SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE = CType(Me.Table,SYCCH_SYNONYME_CLASSECHIMIQUEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCCH_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE.SYCCH_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE.SYCCH_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCCH_CCH_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE.SYCCH_CCH_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSYCCH_SYNONYME_CLASSECHIMIQUE.SYCCH_CCH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCH_CLASSECHIMIQUERow() As CCH_CLASSECHIMIQUERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYCCH_SYNONYME_CLASSECHIMI")),CCH_CLASSECHIMIQUERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYCCH_SYNONYME_CLASSECHIMI"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CGE_CLASSEGESTIONRow
        Inherits System.Data.DataRow
        
        Private tableCGE_CLASSEGESTION As CGE_CLASSEGESTIONDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCGE_CLASSEGESTION = CType(Me.Table,CGE_CLASSEGESTIONDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CGE_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableCGE_CLASSEGESTION.CGE_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCGE_CLASSEGESTION.CGE_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CGE_NOM() As String
            Get
                Return CType(Me(Me.tableCGE_CLASSEGESTION.CGE_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCGE_CLASSEGESTION.CGE_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CGE_DATECR() As Date
            Get
                Return CType(Me(Me.tableCGE_CLASSEGESTION.CGE_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCGE_CLASSEGESTION.CGE_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CGE_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCGE_CLASSEGESTION.CGE_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CGE_DATEMJ' dans la table 'CGE_CLASSEGESTION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCGE_CLASSEGESTION.CGE_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCGE_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCGE_CLASSEGESTION.CGE_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCGE_DATEMJNull()
            Me(Me.tableCGE_CLASSEGESTION.CGE_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYCGE_SYNONYME_CLASSEGESTIONRows() As SYCGE_SYNONYME_CLASSEGESTIONRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYCGE_SYNONYME_CLASSEGESTI")),SYCGE_SYNONYME_CLASSEGESTIONRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYCGE_SYNONYME_CLASSEGESTIONRow
        Inherits System.Data.DataRow
        
        Private tableSYCGE_SYNONYME_CLASSEGESTION As SYCGE_SYNONYME_CLASSEGESTIONDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYCGE_SYNONYME_CLASSEGESTION = CType(Me.Table,SYCGE_SYNONYME_CLASSEGESTIONDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCGE_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYCGE_SYNONYME_CLASSEGESTION.SYCGE_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYCGE_SYNONYME_CLASSEGESTION.SYCGE_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCGE_CGE_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSYCGE_SYNONYME_CLASSEGESTION.SYCGE_CGE_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYCGE_SYNONYME_CLASSEGESTION.SYCGE_CGE_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CGE_CLASSEGESTIONRow() As CGE_CLASSEGESTIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYCGE_SYNONYME_CLASSEGESTI")),CGE_CLASSEGESTIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYCGE_SYNONYME_CLASSEGESTI"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CIM10Row
        Inherits System.Data.DataRow
        
        Private tableCIM10 As CIM10DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCIM10 = CType(Me.Table,CIM10DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCIM10.CIM_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCIM10.CIM_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_CIM_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCIM10.CIM_CIM_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CIM_CIM_CODE_FK' dans la table 'CIM10' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCIM10.CIM_CIM_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_LIBELLE_COURT() As String
            Get
                Return CType(Me(Me.tableCIM10.CIM_LIBELLE_COURTColumn),String)
            End Get
            Set
                Me(Me.tableCIM10.CIM_LIBELLE_COURTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_LIBELLE_LONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableCIM10.CIM_LIBELLE_LONGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CIM_LIBELLE_LONG' dans la table 'CIM10' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCIM10.CIM_LIBELLE_LONGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_DATECR() As Date
            Get
                Return CType(Me(Me.tableCIM10.CIM_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCIM10.CIM_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCIM10.CIM_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CIM_DATEMJ' dans la table 'CIM10' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCIM10.CIM_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIM_CIM_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCIM10.CIM_CIM_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIM_CIM_CODE_FKNull()
            Me(Me.tableCIM10.CIM_CIM_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIM_LIBELLE_LONGNull() As Boolean
            Return Me.IsNull(Me.tableCIM10.CIM_LIBELLE_LONGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIM_LIBELLE_LONGNull()
            Me(Me.tableCIM10.CIM_LIBELLE_LONGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIM_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCIM10.CIM_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIM_DATEMJNull()
            Me(Me.tableCIM10.CIM_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCIMCDF_CIM10_CODIFRows() As CIMCDF_CIM10_CODIFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CIMCDF_CIM10_CODIF")),CIMCDF_CIM10_CODIFRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CIM10_2Row
        Inherits System.Data.DataRow
        
        Private tableCIM10_2 As CIM10_2DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCIM10_2 = CType(Me.Table,CIM10_2DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCIM10_2.CIM_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCIM10_2.CIM_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_CIM_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCIM10_2.CIM_CIM_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CIM_CIM_CODE_FK' dans la table 'CIM10_2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCIM10_2.CIM_CIM_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_LIBELLE_COURT() As String
            Get
                Return CType(Me(Me.tableCIM10_2.CIM_LIBELLE_COURTColumn),String)
            End Get
            Set
                Me(Me.tableCIM10_2.CIM_LIBELLE_COURTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_LIBELLE_LONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableCIM10_2.CIM_LIBELLE_LONGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CIM_LIBELLE_LONG' dans la table 'CIM10_2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCIM10_2.CIM_LIBELLE_LONGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_DATECR() As Date
            Get
                Return CType(Me(Me.tableCIM10_2.CIM_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCIM10_2.CIM_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCIM10_2.CIM_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CIM_DATEMJ' dans la table 'CIM10_2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCIM10_2.CIM_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIM_CIM_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCIM10_2.CIM_CIM_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIM_CIM_CODE_FKNull()
            Me(Me.tableCIM10_2.CIM_CIM_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIM_LIBELLE_LONGNull() As Boolean
            Return Me.IsNull(Me.tableCIM10_2.CIM_LIBELLE_LONGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIM_LIBELLE_LONGNull()
            Me(Me.tableCIM10_2.CIM_LIBELLE_LONGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIM_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCIM10_2.CIM_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIM_DATEMJNull()
            Me(Me.tableCIM10_2.CIM_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCIMCDF_CIM10_CODIFRows() As CIMCDF_CIM10_CODIFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CIMCDF_CIM10_CODIF1")),CIMCDF_CIM10_CODIFRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CEPH_CLASSEEPHMRARow
        Inherits System.Data.DataRow
        
        Private tableCEPH_CLASSEEPHMRA As CEPH_CLASSEEPHMRADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEPH_CLASSEEPHMRA = CType(Me.Table,CEPH_CLASSEEPHMRADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CEPH_CEPH_CODE_FK' dans la table 'CEPH_CLASSEEPHMRA' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_NOMF() As String
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMFColumn),String)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_NOMA() As String
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMAColumn),String)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_DATECR() As Date
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CEPH_DATEMJ' dans la table 'CEPH_CLASSEEPHMRA' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CLASSEEPHMRARowParent() As CEPH_CLASSEEPHMRARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CEPH_CLASSEEPHMRA")),CEPH_CLASSEEPHMRARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CEPH_CLASSEEPHMRA"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEPH_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEPH_CEPH_CODE_FKNull()
            Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEPH_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEPH_DATEMJNull()
            Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCEPH_CLASSEEPHMRARows() As CEPH_CLASSEEPHMRARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CEPH_CLASSEEPHMRA")),CEPH_CLASSEEPHMRARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CATC_CLASSEATCRow
        Inherits System.Data.DataRow
        
        Private tableCATC_CLASSEATC As CATC_CLASSEATCDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCATC_CLASSEATC = CType(Me.Table,CATC_CLASSEATCDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CATC_CATC_CODE_FK' dans la table 'CATC_CLASSEATC' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_NOMF() As String
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_NOMFColumn),String)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_NOMFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_NOMA() As String
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_NOMAColumn),String)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_NOMAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_DATECR() As Date
            Get
                Return CType(Me(Me.tableCATC_CLASSEATC.CATC_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CATC_DATEMJ' dans la table 'CATC_CLASSEATC' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CATC_TEXTE' dans la table 'CATC_CLASSEATC' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CLASSEATCRowParent() As CATC_CLASSEATCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CATC_CLASSEATC")),CATC_CLASSEATCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CATC_CLASSEATC"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATC_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATC_CATC_CODE_FKNull()
            Me(Me.tableCATC_CLASSEATC.CATC_CATC_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATC_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATC_DATEMJNull()
            Me(Me.tableCATC_CLASSEATC.CATC_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATC_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATC_TEXTENull()
            Me(Me.tableCATC_CLASSEATC.CATC_TEXTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCATC_CLASSEATCRows() As CATC_CLASSEATCRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CATC_CLASSEATC")),CATC_CLASSEATCRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYFATC_SYNONYMEFR_ATCRows() As SYFATC_SYNONYMEFR_ATCRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYFATC_SYNONYMEFR_ATC")),SYFATC_SYNONYMEFR_ATCRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYAATC_SYNONYMEANGLAIS_ATCRows() As SYAATC_SYNONYMEANGLAIS_ATCRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYAATC_SYNONYMEANGLAIS_ATC")),SYAATC_SYNONYMEANGLAIS_ATCRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYFATC_SYNONYMEFR_ATCRow
        Inherits System.Data.DataRow
        
        Private tableSYFATC_SYNONYMEFR_ATC As SYFATC_SYNONYMEFR_ATCDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYFATC_SYNONYMEFR_ATC = CType(Me.Table,SYFATC_SYNONYMEFR_ATCDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFATC_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYFATC_SYNONYMEFR_ATC.SYFATC_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYFATC_SYNONYMEFR_ATC.SYFATC_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFATC_CATC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSYFATC_SYNONYMEFR_ATC.SYFATC_CATC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYFATC_SYNONYMEFR_ATC.SYFATC_CATC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CLASSEATCRow() As CATC_CLASSEATCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYFATC_SYNONYMEFR_ATC")),CATC_CLASSEATCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYFATC_SYNONYMEFR_ATC"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYAATC_SYNONYMEANGLAIS_ATCRow
        Inherits System.Data.DataRow
        
        Private tableSYAATC_SYNONYMEANGLAIS_ATC As SYAATC_SYNONYMEANGLAIS_ATCDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYAATC_SYNONYMEANGLAIS_ATC = CType(Me.Table,SYAATC_SYNONYMEANGLAIS_ATCDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYAATC_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYAATC_SYNONYMEANGLAIS_ATC.SYAATC_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYAATC_SYNONYMEANGLAIS_ATC.SYAATC_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYAATC_CATC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSYAATC_SYNONYMEANGLAIS_ATC.SYAATC_CATC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYAATC_SYNONYMEANGLAIS_ATC.SYAATC_CATC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATC_CLASSEATCRow() As CATC_CLASSEATCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYAATC_SYNONYMEANGLAIS_ATC")),CATC_CLASSEATCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYAATC_SYNONYMEANGLAIS_ATC"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ATCDDD_DOSE_USUELLE_JOURRow
        Inherits System.Data.DataRow
        
        Private tableATCDDD_DOSE_USUELLE_JOUR As ATCDDD_DOSE_USUELLE_JOURDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableATCDDD_DOSE_USUELLE_JOUR = CType(Me.Table,ATCDDD_DOSE_USUELLE_JOURDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATCDDD_CATC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_CATC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_CATC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATCDDD_CDF_VO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_CDF_VO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_CDF_VO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATCDDD_DOSAGE_PK() As Decimal
            Get
                Return CType(Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_DOSAGE_PKColumn),Decimal)
            End Get
            Set
                Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_DOSAGE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATCDDD_CDF_UD_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_CDF_UD_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableATCDDD_DOSE_USUELLE_JOUR.ATCDDD_CDF_UD_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDF_CODIFRow
        Inherits System.Data.DataRow
        
        Private tableCDF_CODIF As CDF_CODIFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDF_CODIF = CType(Me.Table,CDF_CODIFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NOM() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NOMColumn) = value
            End Set
        End Property


        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CDF_VAL_NUM() As Decimal
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn), Decimal)
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CDF_NOMABRG() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NOMABRGColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableCDF_CODIF.CDF_NOMABRGColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
                Public Property CDF_UNIT_NUM() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_UNIT_NUMColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableCDF_CODIF.CDF_UNIT_NUMColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
                Public Property CDF_TEXTE() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_TEXTEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableCDF_CODIF.CDF_TEXTEColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CDF_DATECR() As Date
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_DATECRColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableCDF_CODIF.CDF_DATECRColumn) = Value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCDF_CODIF.CDF_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDF_DATEMJ' dans la table 'CDF_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDF_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCDF_CODIF.CDF_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDF_DATEMJNull()
            Me(Me.tableCDF_CODIF.CDF_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIDVO_IDENT_VOIERows() As IDVO_IDENT_VOIERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_IDVO")),IDVO_IDENT_VOIERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCIMCDF_CIM10_CODIFRows() As CIMCDF_CIM10_CODIFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK2_CIMCDF_CIM10_CODIF")),CIMCDF_CIM10_CODIFRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCISPCDF_CISP_CODIFRows() As CISPCDF_CISP_CODIFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK2_CISPCDF_CISP_CODIF")),CISPCDF_CISP_CODIFRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCDFPF_LIEN_CDF_PERE_FILSRows() As CDFPF_LIEN_CDF_PERE_FILSRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CDFPF_LIEN_CDF_PERE_FILS")),CDFPF_LIEN_CDF_PERE_FILSRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCDFPF_LIEN_CDF_PERE_FILS_2Rows() As CDFPF_LIEN_CDF_PERE_FILS_2Row()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CDFPF_LIEN_CDF_PERE_FILS1")),CDFPF_LIEN_CDF_PERE_FILS_2Row())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CISP_CLASSIF_INTER_SOINSRow
        Inherits System.Data.DataRow
        
        Private tableCISP_CLASSIF_INTER_SOINS As CISP_CLASSIF_INTER_SOINSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCISP_CLASSIF_INTER_SOINS = CType(Me.Table,CISP_CLASSIF_INTER_SOINSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_CISP_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CISP_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISP_CISP_CODE_FK' dans la table 'CISP_CLASSIF_INTER_S"& _ 
                            "OINS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CISP_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_LIBELLE_COURT() As String
            Get
                Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_LIBELLE_COURTColumn),String)
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_LIBELLE_COURTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_LIBELLE_LONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_LIBELLE_LONGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISP_LIBELLE_LONG' dans la table 'CISP_CLASSIF_INTER_S"& _ 
                            "OINS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_LIBELLE_LONGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_DATECR() As Date
            Get
                Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISP_DATEMJ' dans la table 'CISP_CLASSIF_INTER_SOINS' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISP_CISP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CISP_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISP_CISP_CODE_FKNull()
            Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_CISP_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISP_LIBELLE_LONGNull() As Boolean
            Return Me.IsNull(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_LIBELLE_LONGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISP_LIBELLE_LONGNull()
            Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_LIBELLE_LONGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISP_DATEMJNull()
            Me(Me.tableCISP_CLASSIF_INTER_SOINS.CISP_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCISPCDF_CISP_CODIFRows() As CISPCDF_CISP_CODIFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CISPCDF_CISP_CODIF")),CISPCDF_CISP_CODIFRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CISP_CLASSIF_INTER_SOINS_2Row
        Inherits System.Data.DataRow
        
        Private tableCISP_CLASSIF_INTER_SOINS_2 As CISP_CLASSIF_INTER_SOINS_2DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCISP_CLASSIF_INTER_SOINS_2 = CType(Me.Table,CISP_CLASSIF_INTER_SOINS_2DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_CISP_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CISP_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISP_CISP_CODE_FK' dans la table 'CISP_CLASSIF_INTER_S"& _ 
                            "OINS_2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CISP_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_LIBELLE_COURT() As String
            Get
                Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_LIBELLE_COURTColumn),String)
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_LIBELLE_COURTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_LIBELLE_LONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_LIBELLE_LONGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISP_LIBELLE_LONG' dans la table 'CISP_CLASSIF_INTER_S"& _ 
                            "OINS_2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_LIBELLE_LONGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_DATECR() As Date
            Get
                Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISP_DATEMJ' dans la table 'CISP_CLASSIF_INTER_SOINS_2"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISP_CISP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CISP_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISP_CISP_CODE_FKNull()
            Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_CISP_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISP_LIBELLE_LONGNull() As Boolean
            Return Me.IsNull(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_LIBELLE_LONGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISP_LIBELLE_LONGNull()
            Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_LIBELLE_LONGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISP_DATEMJNull()
            Me(Me.tableCISP_CLASSIF_INTER_SOINS_2.CISP_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCISPCDF_CISP_CODIFRows() As CISPCDF_CISP_CODIFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CISPCDF_CISP_CODIF1")),CISPCDF_CISP_CODIFRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYCDF_SYNCODIFRow
        Inherits System.Data.DataRow
        
        Private tableSYCDF_SYNCODIF As SYCDF_SYNCODIFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYCDF_SYNCODIF = CType(Me.Table,SYCDF_SYNCODIFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCDF_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYCDF_SYNCODIF.SYCDF_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYCDF_SYNCODIF.SYCDF_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCDF_CDF_NUMERO_FK_PK() As String
            Get
                Return CType(Me(Me.tableSYCDF_SYNCODIF.SYCDF_CDF_NUMERO_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYCDF_SYNCODIF.SYCDF_CDF_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYCDF_CDF_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSYCDF_SYNCODIF.SYCDF_CDF_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSYCDF_SYNCODIF.SYCDF_CDF_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IDVO_IDENT_VOIERow
        Inherits System.Data.DataRow
        
        Private tableIDVO_IDENT_VOIE As IDVO_IDENT_VOIEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIDVO_IDENT_VOIE = CType(Me.Table,IDVO_IDENT_VOIEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDVO_CDF_NUMERO_FK_PK() As String
            Get
                Return CType(Me(Me.tableIDVO_IDENT_VOIE.IDVO_CDF_NUMERO_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIDVO_IDENT_VOIE.IDVO_CDF_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDVO_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIDVO_IDENT_VOIE.IDVO_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIDVO_IDENT_VOIE.IDVO_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDVO_CODE_VOIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableIDVO_IDENT_VOIE.IDVO_CODE_VOIEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IDVO_CODE_VOIE' dans la table 'IDVO_IDENT_VOIE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIDVO_IDENT_VOIE.IDVO_CODE_VOIEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODIFRowParent() As CDF_CODIFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_IDVO")),CDF_CODIFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_IDVO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDVO_CODE_VOIENull() As Boolean
            Return Me.IsNull(Me.tableIDVO_IDENT_VOIE.IDVO_CODE_VOIEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDVO_CODE_VOIENull()
            Me(Me.tableIDVO_IDENT_VOIE.IDVO_CODE_VOIEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFNP_CODIFRow
        Inherits System.Data.DataRow
        
        Private tableCDFNP_CODIF As CDFNP_CODIFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFNP_CODIF = CType(Me.Table,CDFNP_CODIFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFNP_NUMERO_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFNP_CODIF.CDFNP_NUMERO_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFNP_CODIF.CDFNP_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFNP_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFNP_CODIF.CDFNP_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFNP_CODIF.CDFNP_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFNP_REF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFNP_CODIF.CDFNP_REF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFNP_CODIF.CDFNP_REF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFNP_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCDFNP_CODIF.CDFNP_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFNP_NUMORD' dans la table 'CDFNP_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFNP_CODIF.CDFNP_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFNP_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCDFNP_CODIF.CDFNP_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFNP_NUMORDNull()
            Me(Me.tableCDFNP_CODIF.CDFNP_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFTE_TABLE_EQUIVALENCERow
        Inherits System.Data.DataRow
        
        Private tableCDFTE_TABLE_EQUIVALENCE As CDFTE_TABLE_EQUIVALENCEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFTE_TABLE_EQUIVALENCE = CType(Me.Table,CDFTE_TABLE_EQUIVALENCEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFTE_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFTE_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFTE_APPLICABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_APPLICABLEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFTE_APPLICABLE' dans la table 'CDFTE_TABLE_EQUIVALEN"& _ 
                            "CE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_APPLICABLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFTE_COEFFICIENT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_COEFFICIENTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFTE_COEFFICIENT' dans la table 'CDFTE_TABLE_EQUIVALE"& _ 
                            "NCE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_COEFFICIENTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFTE_APPLICABLENull() As Boolean
            Return Me.IsNull(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_APPLICABLEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFTE_APPLICABLENull()
            Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_APPLICABLEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFTE_COEFFICIENTNull() As Boolean
            Return Me.IsNull(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_COEFFICIENTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFTE_COEFFICIENTNull()
            Me(Me.tableCDFTE_TABLE_EQUIVALENCE.CDFTE_COEFFICIENTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CIMCDF_CIM10_CODIFRow
        Inherits System.Data.DataRow
        
        Private tableCIMCDF_CIM10_CODIF As CIMCDF_CIM10_CODIFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCIMCDF_CIM10_CODIF = CType(Me.Table,CIMCDF_CIM10_CODIFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIMCDF_CIM_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CIM_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CIM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIMCDF_CDF_NUMERO_FK_PK() As String
            Get
                Return CType(Me(Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CDF_NUMERO_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CDF_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIMCDF_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCIMCDF_CIM10_CODIF.CIMCDF_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM10Row() As CIM10Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CIMCDF_CIM10_CODIF")),CIM10Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CIMCDF_CIM10_CODIF"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIM10_2Row() As CIM10_2Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CIMCDF_CIM10_CODIF1")),CIM10_2Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CIMCDF_CIM10_CODIF1"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODIFRowParent() As CDF_CODIFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK2_CIMCDF_CIM10_CODIF")),CDF_CODIFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK2_CIMCDF_CIM10_CODIF"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NAIN_NATURE_INDICATIONRow
        Inherits System.Data.DataRow
        
        Private tableNAIN_NATURE_INDICATION As NAIN_NATURE_INDICATIONDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNAIN_NATURE_INDICATION = CType(Me.Table,NAIN_NATURE_INDICATIONDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAIN_CODE_PK() As String
            Get
                Return CType(Me(Me.tableNAIN_NATURE_INDICATION.NAIN_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableNAIN_NATURE_INDICATION.NAIN_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAIN_MALADIE_RARE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NAIN_MALADIE_RARE' dans la table 'NAIN_NATURE_INDICATI"& _ 
                            "ON' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAIN_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NAIN_TEXTE' dans la table 'NAIN_NATURE_INDICATION' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAIN_MALADIE_RARENull() As Boolean
            Return Me.IsNull(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAIN_MALADIE_RARENull()
            Me(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAIN_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAIN_TEXTENull()
            Me(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFIUP_INFO_UNITE_PRISERow
        Inherits System.Data.DataRow
        
        Private tableCDFIUP_INFO_UNITE_PRISE As CDFIUP_INFO_UNITE_PRISEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFIUP_INFO_UNITE_PRISE = CType(Me.Table,CDFIUP_INFO_UNITE_PRISEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_APPLICABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_APPLICABLEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFIUP_APPLICABLE' dans la table 'CDFIUP_INFO_UNITE_PR"& _ 
                            "ISE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_APPLICABLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_DONANTH_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_DONANTH_CDF_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFIUP_DONANTH_CDF_CODE_FK' dans la table 'CDFIUP_INFO"& _ 
                            "_UNITE_PRISE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_DONANTH_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_COEFDUR_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFIUP_COEFDUR_CDF_CODE_FK' dans la table 'CDFIUP_INFO"& _ 
                            "_UNITE_PRISE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_COEFDUR_CDF_NUM_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_NUM_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFIUP_COEFDUR_CDF_NUM_FK' dans la table 'CDFIUP_INFO_"& _ 
                            "UNITE_PRISE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_NUM_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFIUP_COEFVOL_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFVOL_CDF_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFIUP_COEFVOL_CDF_CODE_FK' dans la table 'CDFIUP_INFO"& _ 
                            "_UNITE_PRISE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFVOL_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFIUP_APPLICABLENull() As Boolean
            Return Me.IsNull(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_APPLICABLEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFIUP_APPLICABLENull()
            Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_APPLICABLEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFIUP_DONANTH_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_DONANTH_CDF_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFIUP_DONANTH_CDF_CODE_FKNull()
            Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_DONANTH_CDF_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFIUP_COEFDUR_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFIUP_COEFDUR_CDF_CODE_FKNull()
            Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFIUP_COEFDUR_CDF_NUM_FKNull() As Boolean
            Return Me.IsNull(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_NUM_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFIUP_COEFDUR_CDF_NUM_FKNull()
            Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFDUR_CDF_NUM_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFIUP_COEFVOL_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFVOL_CDF_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFIUP_COEFVOL_CDF_CODE_FKNull()
            Me(Me.tableCDFIUP_INFO_UNITE_PRISE.CDFIUP_COEFVOL_CDF_CODE_FKColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CISPCDF_CISP_CODIFRow
        Inherits System.Data.DataRow
        
        Private tableCISPCDF_CISP_CODIF As CISPCDF_CISP_CODIFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCISPCDF_CISP_CODIF = CType(Me.Table,CISPCDF_CISP_CODIFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISPCDF_CISP_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_CISP_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_CISP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISPCDF_CDF_NUMERO_FK_PK() As String
            Get
                Return CType(Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_CDF_NUMERO_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_CDF_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISPCDF_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISPCDF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CISPCDF_NUMORD' dans la table 'CISPCDF_CISP_CODIF' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_CLASSIF_INTER_SOINSRow() As CISP_CLASSIF_INTER_SOINSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CISPCDF_CISP_CODIF")),CISP_CLASSIF_INTER_SOINSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CISPCDF_CISP_CODIF"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CISP_CLASSIF_INTER_SOINS_2Row() As CISP_CLASSIF_INTER_SOINS_2Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CISPCDF_CISP_CODIF1")),CISP_CLASSIF_INTER_SOINS_2Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CISPCDF_CISP_CODIF1"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODIFRowParent() As CDF_CODIFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK2_CISPCDF_CISP_CODIF")),CDF_CODIFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK2_CISPCDF_CISP_CODIF"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCISPCDF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCISPCDF_CISP_CODIF.CISPCDF_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCISPCDF_NUMORDNull()
            Me(Me.tableCISPCDF_CISP_CODIF.CISPCDF_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MEDCDF_MEDRA_CODIFRow
        Inherits System.Data.DataRow
        
        Private tableMEDCDF_MEDRA_CODIF As MEDCDF_MEDRA_CODIFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMEDCDF_MEDRA_CODIF = CType(Me.Table,MEDCDF_MEDRA_CODIFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDCDF_MED_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableMEDCDF_MEDRA_CODIF.MEDCDF_MED_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableMEDCDF_MEDRA_CODIF.MEDCDF_MED_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDCDF_CDF_NUMERO_FK_PK() As String
            Get
                Return CType(Me(Me.tableMEDCDF_MEDRA_CODIF.MEDCDF_CDF_NUMERO_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableMEDCDF_MEDRA_CODIF.MEDCDF_CDF_NUMERO_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDCDF_CDF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableMEDCDF_MEDRA_CODIF.MEDCDF_CDF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableMEDCDF_MEDRA_CODIF.MEDCDF_CDF_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFPF_LIEN_CDF_PERE_FILSRow
        Inherits System.Data.DataRow
        
        Private tableCDFPF_LIEN_CDF_PERE_FILS As CDFPF_LIEN_CDF_PERE_FILSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFPF_LIEN_CDF_PERE_FILS = CType(Me.Table,CDFPF_LIEN_CDF_PERE_FILSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_NUMEROP_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMEROP_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMEROP_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_CODEP_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_CODEP_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_CODEP_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_NUMEROF_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMEROF_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMEROF_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_CODEF_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_CODEF_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_CODEF_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFPF_NUMORD' dans la table 'CDFPF_LIEN_CDF_PERE_FILS'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODIFRowParent() As CDF_CODIFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CDFPF_LIEN_CDF_PERE_FILS")),CDF_CODIFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CDFPF_LIEN_CDF_PERE_FILS"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFPF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFPF_NUMORDNull()
            Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS.CDFPF_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDFPF_LIEN_CDF_PERE_FILS_2Row
        Inherits System.Data.DataRow
        
        Private tableCDFPF_LIEN_CDF_PERE_FILS_2 As CDFPF_LIEN_CDF_PERE_FILS_2DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDFPF_LIEN_CDF_PERE_FILS_2 = CType(Me.Table,CDFPF_LIEN_CDF_PERE_FILS_2DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_NUMEROP_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMEROP_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMEROP_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_CODEP_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_CODEP_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_CODEP_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_NUMEROF_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMEROF_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMEROF_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_CODEF_FK_PK() As String
            Get
                Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_CODEF_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_CODEF_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDFPF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CDFPF_NUMORD' dans la table 'CDFPF_LIEN_CDF_PERE_FILS_"& _ 
                            "2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODIFRowParent() As CDF_CODIFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CDFPF_LIEN_CDF_PERE_FILS1")),CDF_CODIFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CDFPF_LIEN_CDF_PERE_FILS1"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDFPF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDFPF_NUMORDNull()
            Me(Me.tableCDFPF_LIEN_CDF_PERE_FILS_2.CDFPF_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RUBCDF_RUBRIQUE_CODIFICATIONRow
        Inherits System.Data.DataRow
        
        Private tableRUBCDF_RUBRIQUE_CODIFICATION As RUBCDF_RUBRIQUE_CODIFICATIONDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRUBCDF_RUBRIQUE_CODIFICATION = CType(Me.Table,RUBCDF_RUBRIQUE_CODIFICATIONDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUBCDF_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUBCDF_NOM() As String
            Get
                Return CType(Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_NOMColumn),String)
            End Get
            Set
                Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUBCDF_SYN() As String
            Get
                Try 
                    Return CType(Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_SYNColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'RUBCDF_SYN' dans la table 'RUBCDF_RUBRIQUE_CODIFICATIO"& _ 
                            "N' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_SYNColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUBCDF_DATECR() As Date
            Get
                Return CType(Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUBCDF_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'RUBCDF_DATEMJ' dans la table 'RUBCDF_RUBRIQUE_CODIFICA"& _ 
                            "TION' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUBCDF_SYNNull() As Boolean
            Return Me.IsNull(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_SYNColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUBCDF_SYNNull()
            Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_SYNColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUBCDF_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUBCDF_DATEMJNull()
            Me(Me.tableRUBCDF_RUBRIQUE_CODIFICATION.RUBCDF_DATEMJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CPH_CLASSEPHARMTHERRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CPH_CLASSEPHARMTHERRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CPH_CLASSEPHARMTHERRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CPH_CLASSEPHARMTHERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYCPH_SYNONYME_CLASSEPHARMTHERRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYCPH_SYNONYME_CLASSEPHARMTHERRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYCPH_SYNONYME_CLASSEPHARMTHERRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYCPH_SYNONYME_CLASSEPHARMTHERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CCH_CLASSECHIMIQUERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CCH_CLASSECHIMIQUERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CCH_CLASSECHIMIQUERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CCH_CLASSECHIMIQUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYCCH_SYNONYME_CLASSECHIMIQUERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYCCH_SYNONYME_CLASSECHIMIQUERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYCCH_SYNONYME_CLASSECHIMIQUERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYCCH_SYNONYME_CLASSECHIMIQUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CGE_CLASSEGESTIONRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CGE_CLASSEGESTIONRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CGE_CLASSEGESTIONRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CGE_CLASSEGESTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYCGE_SYNONYME_CLASSEGESTIONRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYCGE_SYNONYME_CLASSEGESTIONRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYCGE_SYNONYME_CLASSEGESTIONRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYCGE_SYNONYME_CLASSEGESTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CIM10RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CIM10Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CIM10Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CIM10Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CIM10_2RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CIM10_2Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CIM10_2Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CIM10_2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CEPH_CLASSEEPHMRARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CEPH_CLASSEEPHMRARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CEPH_CLASSEEPHMRARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CEPH_CLASSEEPHMRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CATC_CLASSEATCRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CATC_CLASSEATCRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CATC_CLASSEATCRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CATC_CLASSEATCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYFATC_SYNONYMEFR_ATCRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYFATC_SYNONYMEFR_ATCRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYFATC_SYNONYMEFR_ATCRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYFATC_SYNONYMEFR_ATCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYAATC_SYNONYMEANGLAIS_ATCRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYAATC_SYNONYMEANGLAIS_ATCRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYAATC_SYNONYMEANGLAIS_ATCRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYAATC_SYNONYMEANGLAIS_ATCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ATCDDD_DOSE_USUELLE_JOURRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ATCDDD_DOSE_USUELLE_JOURRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ATCDDD_DOSE_USUELLE_JOURRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ATCDDD_DOSE_USUELLE_JOURRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDF_CODIFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CDF_CODIFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDF_CODIFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDF_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CISP_CLASSIF_INTER_SOINSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CISP_CLASSIF_INTER_SOINSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CISP_CLASSIF_INTER_SOINSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CISP_CLASSIF_INTER_SOINSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CISP_CLASSIF_INTER_SOINS_2RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CISP_CLASSIF_INTER_SOINS_2Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CISP_CLASSIF_INTER_SOINS_2Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CISP_CLASSIF_INTER_SOINS_2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYCDF_SYNCODIFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYCDF_SYNCODIFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYCDF_SYNCODIFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYCDF_SYNCODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IDVO_IDENT_VOIERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IDVO_IDENT_VOIERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IDVO_IDENT_VOIERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IDVO_IDENT_VOIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFNP_CODIFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CDFNP_CODIFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFNP_CODIFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFNP_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFTE_TABLE_EQUIVALENCERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CDFTE_TABLE_EQUIVALENCERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFTE_TABLE_EQUIVALENCERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFTE_TABLE_EQUIVALENCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CIMCDF_CIM10_CODIFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CIMCDF_CIM10_CODIFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CIMCDF_CIM10_CODIFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CIMCDF_CIM10_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NAIN_NATURE_INDICATIONRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As NAIN_NATURE_INDICATIONRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NAIN_NATURE_INDICATIONRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NAIN_NATURE_INDICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFIUP_INFO_UNITE_PRISERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CDFIUP_INFO_UNITE_PRISERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFIUP_INFO_UNITE_PRISERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFIUP_INFO_UNITE_PRISERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CISPCDF_CISP_CODIFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CISPCDF_CISP_CODIFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CISPCDF_CISP_CODIFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CISPCDF_CISP_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MEDCDF_MEDRA_CODIFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MEDCDF_MEDRA_CODIFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MEDCDF_MEDRA_CODIFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MEDCDF_MEDRA_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFPF_LIEN_CDF_PERE_FILSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CDFPF_LIEN_CDF_PERE_FILSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFPF_LIEN_CDF_PERE_FILSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFPF_LIEN_CDF_PERE_FILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDFPF_LIEN_CDF_PERE_FILS_2RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CDFPF_LIEN_CDF_PERE_FILS_2Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDFPF_LIEN_CDF_PERE_FILS_2Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDFPF_LIEN_CDF_PERE_FILS_2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RUBCDF_RUBRIQUE_CODIFICATIONRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RUBCDF_RUBRIQUE_CODIFICATIONRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RUBCDF_RUBRIQUE_CODIFICATIONRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RUBCDF_RUBRIQUE_CODIFICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaqueTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CPH_CLASSEPHARMTHERTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CPH_CLASSEPHARMTHER"
            tableMapping.ColumnMappings.Add("CPH_CODE_PK", "CPH_CODE_PK")
            tableMapping.ColumnMappings.Add("CPH_CPH_CODE_FK", "CPH_CPH_CODE_FK")
            tableMapping.ColumnMappings.Add("CPH_NOM", "CPH_NOM")
            tableMapping.ColumnMappings.Add("CPH_DATECR", "CPH_DATECR")
            tableMapping.ColumnMappings.Add("CPH_DATEMJ", "CPH_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CPH_CLASSEPHARMTHER] WHERE (([CPH_CODE_PK] = @Original_C"& _ 
                "PH_CODE_PK) AND ((@IsNull_CPH_CPH_CODE_FK = 1 AND [CPH_CPH_CODE_FK] IS NULL) OR "& _ 
                "([CPH_CPH_CODE_FK] = @Original_CPH_CPH_CODE_FK)) AND ([CPH_NOM] = @Original_CPH_"& _ 
                "NOM) AND ([CPH_DATECR] = @Original_CPH_DATECR) AND ((@IsNull_CPH_DATEMJ = 1 AND "& _ 
                "[CPH_DATEMJ] IS NULL) OR ([CPH_DATEMJ] = @Original_CPH_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CPH_CPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CPH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CPH_CLASSEPHARMTHER] ([CPH_CODE_PK], [CPH_CPH_CODE_FK], "& _ 
                "[CPH_NOM], [CPH_DATECR], [CPH_DATEMJ]) VALUES (@CPH_CODE_PK, @CPH_CPH_CODE_FK, @"& _ 
                "CPH_NOM, @CPH_DATECR, @CPH_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NO"& _ 
                "M, CPH_DATECR, CPH_DATEMJ FROM THERIAQUE.CPH_CLASSEPHARMTHER WHERE (CPH_CODE_PK "& _ 
                "= @CPH_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CPH_CLASSEPHARMTHER] SET [CPH_CODE_PK] = @CPH_CODE_PK, [CPH_C"& _ 
                "PH_CODE_FK] = @CPH_CPH_CODE_FK, [CPH_NOM] = @CPH_NOM, [CPH_DATECR] = @CPH_DATECR"& _ 
                ", [CPH_DATEMJ] = @CPH_DATEMJ WHERE (([CPH_CODE_PK] = @Original_CPH_CODE_PK) AND "& _ 
                "((@IsNull_CPH_CPH_CODE_FK = 1 AND [CPH_CPH_CODE_FK] IS NULL) OR ([CPH_CPH_CODE_F"& _ 
                "K] = @Original_CPH_CPH_CODE_FK)) AND ([CPH_NOM] = @Original_CPH_NOM) AND ([CPH_D"& _ 
                "ATECR] = @Original_CPH_DATECR) AND ((@IsNull_CPH_DATEMJ = 1 AND [CPH_DATEMJ] IS "& _ 
                "NULL) OR ([CPH_DATEMJ] = @Original_CPH_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CPH_CODE_PK, CPH_CPH_C"& _ 
                "ODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ FROM THERIAQUE.CPH_CLASSEPHARMTHER WHERE"& _ 
                " (CPH_CODE_PK = @CPH_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CPH_CPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CPH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ FROM THERIAQ" & _
                "UE.CPH_CLASSEPHARMTHER"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ FROM THERIAQ" & _
                "UE.CPH_CLASSEPHARMTHER where CPH_CODE_PK = @CPH_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ FROM THERIAQ" & _
                "UE.CPH_CLASSEPHARMTHER" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CPH_CODE_PK like @CPH_CODE_PK + '_'"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM   " & _
                "      THERIAQUE.CPH_CLASSEPHARMTHER" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CPH_NOM = @CPH_NOM"
            Me._commandCollection(3).CommandType = System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPH_NOM", System.Data.SqlDbType.VarChar, 40, System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable = New dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable, ByVal CPH_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CPH_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CPH_CODE_PK As String) As dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CPH_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable = New dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByfils(ByVal dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable, ByVal CPH_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CPH_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByfils(ByVal CPH_CODE_PK As String) As dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CPH_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable = New dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByNom(ByVal dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable, ByVal CPH_NOM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CPH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_NOM")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CPH_NOM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByNom(ByVal CPH_NOM As String) As dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CPH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_NOM")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CPH_NOM, String)
            End If
            Dim dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable = New dsTheriaque.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CPH_CLASSEPHARMTHERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CPH_CLASSEPHARMTHER")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CPH_CODE_PK As String, ByVal Original_CPH_CPH_CODE_FK As String, ByVal Original_CPH_NOM As String, ByVal Original_CPH_DATECR As Date, ByVal Original_CPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CPH_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CPH_CODE_PK, String)
            End If
            If (Original_CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CPH_CPH_CODE_FK, String)
            End If
            If (Original_CPH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CPH_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CPH_NOM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CPH_DATECR, Date)
            If (Original_CPH_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CPH_CODE_PK As String, ByVal CPH_CPH_CODE_FK As String, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CPH_CODE_PK, String)
            End If
            If (CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CPH_CPH_CODE_FK, String)
            End If
            If (CPH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CPH_NOM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CPH_DATECR, Date)
            If (CPH_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CPH_CODE_PK As String, ByVal CPH_CPH_CODE_FK As String, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As System.Nullable(Of Date), ByVal Original_CPH_CODE_PK As String, ByVal Original_CPH_CPH_CODE_FK As String, ByVal Original_CPH_NOM As String, ByVal Original_CPH_DATECR As Date, ByVal Original_CPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CPH_CODE_PK, String)
            End If
            If (CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CPH_CPH_CODE_FK, String)
            End If
            If (CPH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CPH_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CPH_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CPH_DATECR, Date)
            If (CPH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_CPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CPH_CODE_PK, String)
            End If
            If (Original_CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CPH_CPH_CODE_FK, String)
            End If
            If (Original_CPH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CPH_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CPH_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CPH_DATECR, Date)
            If (Original_CPH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYCPH_SYNONYME_CLASSEPHARMTHERTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYCPH_SYNONYME_CLASSEPHARMTHER"
            tableMapping.ColumnMappings.Add("SYCPH_NOM_PK", "SYCPH_NOM_PK")
            tableMapping.ColumnMappings.Add("SYCPH_CPH_CODE_FK", "SYCPH_CPH_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYCPH_SYNONYME_CLASSEPHARMTHER] WHERE (([SYCPH_NOM_PK] =" & _
                " @Original_SYCPH_NOM_PK) AND ([SYCPH_CPH_CODE_FK] = @Original_SYCPH_CPH_CODE_FK)" & _
                ")"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_CPH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYCPH_SYNONYME_CLASSEPHARMTHER] ([SYCPH_NOM_PK], [SYCPH_" & _
                "CPH_CODE_FK]) VALUES (@SYCPH_NOM_PK, @SYCPH_CPH_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYCPH_NOM_PK, " & _
                "SYCPH_CPH_CODE_FK FROM THERIAQUE.SYCPH_SYNONYME_CLASSEPHARMTHER WHERE (SYCPH_NOM" & _
                "_PK = @SYCPH_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_CPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYCPH_SYNONYME_CLASSEPHARMTHER] SET [SYCPH_NOM_PK] = @SYCPH_N" & _
                "OM_PK, [SYCPH_CPH_CODE_FK] = @SYCPH_CPH_CODE_FK WHERE (([SYCPH_NOM_PK] = @Origin" & _
                "al_SYCPH_NOM_PK) AND ([SYCPH_CPH_CODE_FK] = @Original_SYCPH_CPH_CODE_FK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELE" & _
                "CT SYCPH_NOM_PK, SYCPH_CPH_CODE_FK FROM THERIAQUE.SYCPH_SYNONYME_CLASSEPHARMTHER" & _
                " WHERE (SYCPH_NOM_PK = @SYCPH_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_CPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_CPH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     THERIAQUE.SYCPH_SYNONYME_CLASSEPHARMTHER.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.SYC" & _
                "PH_SYNONYME_CLASSEPHARMTHER"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     THERIAQUE.SYCPH_SYNONYME_CLASSEPHARMTHER.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.SYC" & _
                "PH_SYNONYME_CLASSEPHARMTHER" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where SYCPH_CPH_CODE_FK = @SYCPH_CPH_CODE_FK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCPH_CPH_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYCPH_CPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable = New dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable, ByVal SYCPH_CPH_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYCPH_CPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCPH_CPH_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCPH_CPH_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYCPH_CPH_CODE_FK As String) As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYCPH_CPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCPH_CPH_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCPH_CPH_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable = New dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.SYCPH_SYNONYME_CLASSEPHARMTHERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "SYCPH_SYNONYME_CLASSEPHARMTHER")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYCPH_NOM_PK As String, ByVal Original_SYCPH_CPH_CODE_FK As String) As Integer
            If (Original_SYCPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCPH_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYCPH_NOM_PK, String)
            End If
            If (Original_SYCPH_CPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCPH_CPH_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYCPH_CPH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYCPH_NOM_PK As String, ByVal SYCPH_CPH_CODE_FK As String) As Integer
            If (SYCPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCPH_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYCPH_NOM_PK, String)
            End If
            If (SYCPH_CPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCPH_CPH_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYCPH_CPH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYCPH_NOM_PK As String, ByVal SYCPH_CPH_CODE_FK As String, ByVal Original_SYCPH_NOM_PK As String, ByVal Original_SYCPH_CPH_CODE_FK As String) As Integer
            If (SYCPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCPH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYCPH_NOM_PK, String)
            End If
            If (SYCPH_CPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCPH_CPH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYCPH_CPH_CODE_FK, String)
            End If
            If (Original_SYCPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCPH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYCPH_NOM_PK, String)
            End If
            If (Original_SYCPH_CPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCPH_CPH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYCPH_CPH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CCH_CLASSECHIMIQUETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CCH_CLASSECHIMIQUE"
            tableMapping.ColumnMappings.Add("CCH_CODE_PK", "CCH_CODE_PK")
            tableMapping.ColumnMappings.Add("CCH_CCH_CODE_FK", "CCH_CCH_CODE_FK")
            tableMapping.ColumnMappings.Add("CCH_NOM", "CCH_NOM")
            tableMapping.ColumnMappings.Add("CCH_DATECR", "CCH_DATECR")
            tableMapping.ColumnMappings.Add("CCH_DATEMJ", "CCH_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CCH_CLASSECHIMIQUE] WHERE (([CCH_CODE_PK] = @Original_CC"& _ 
                "H_CODE_PK) AND ((@IsNull_CCH_CCH_CODE_FK = 1 AND [CCH_CCH_CODE_FK] IS NULL) OR ("& _ 
                "[CCH_CCH_CODE_FK] = @Original_CCH_CCH_CODE_FK)) AND ([CCH_NOM] = @Original_CCH_N"& _ 
                "OM) AND ([CCH_DATECR] = @Original_CCH_DATECR) AND ((@IsNull_CCH_DATEMJ = 1 AND ["& _ 
                "CCH_DATEMJ] IS NULL) OR ([CCH_DATEMJ] = @Original_CCH_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CCH_CCH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CCH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CCH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CCH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CCH_CLASSECHIMIQUE] ([CCH_CODE_PK], [CCH_CCH_CODE_FK], ["& _ 
                "CCH_NOM], [CCH_DATECR], [CCH_DATEMJ]) VALUES (@CCH_CODE_PK, @CCH_CCH_CODE_FK, @C"& _ 
                "CH_NOM, @CCH_DATECR, @CCH_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CCH_CODE_PK, CCH_CCH_CODE_FK, CCH_NOM"& _ 
                ", CCH_DATECR, CCH_DATEMJ FROM THERIAQUE.CCH_CLASSECHIMIQUE WHERE (CCH_CODE_PK = "& _ 
                "@CCH_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CCH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CCH_CLASSECHIMIQUE] SET [CCH_CODE_PK] = @CCH_CODE_PK, [CCH_CC"& _ 
                "H_CODE_FK] = @CCH_CCH_CODE_FK, [CCH_NOM] = @CCH_NOM, [CCH_DATECR] = @CCH_DATECR,"& _ 
                " [CCH_DATEMJ] = @CCH_DATEMJ WHERE (([CCH_CODE_PK] = @Original_CCH_CODE_PK) AND ("& _ 
                "(@IsNull_CCH_CCH_CODE_FK = 1 AND [CCH_CCH_CODE_FK] IS NULL) OR ([CCH_CCH_CODE_FK"& _ 
                "] = @Original_CCH_CCH_CODE_FK)) AND ([CCH_NOM] = @Original_CCH_NOM) AND ([CCH_DA"& _ 
                "TECR] = @Original_CCH_DATECR) AND ((@IsNull_CCH_DATEMJ = 1 AND [CCH_DATEMJ] IS N"& _ 
                "ULL) OR ([CCH_DATEMJ] = @Original_CCH_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CCH_CODE_PK, CCH_CCH_CO"& _ 
                "DE_FK, CCH_NOM, CCH_DATECR, CCH_DATEMJ FROM THERIAQUE.CCH_CLASSECHIMIQUE WHERE ("& _ 
                "CCH_CODE_PK = @CCH_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CCH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CCH_CCH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CCH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_CCH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CCH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CCH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CCH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     THERIAQUE.CCH_CLASSECHIMIQUE.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.CCH_CLASSECHIMI" & _
                "QUE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     THERIAQUE.CCH_CLASSECHIMIQUE.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.CCH_CLASSECHIMI" & _
                "QUE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CCH_CODE_PK = @CCH_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CCH_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     THERIAQUE.CCH_CLASSECHIMIQUE.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.CCH_CLASSECHIMI" & _
                "QUE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CCH_CODE_PK like @CCH_CODE_PK + '_'"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CCH_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     THERIAQUE.CCH_CLASSECHIMIQUE.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.CCH_CLASSECHIMI" & _
                "QUE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CCH_NOM = @CCH_NOM"
            Me._commandCollection(3).CommandType = System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CCH_NOM", System.Data.SqlDbType.VarChar, 40, System.Data.ParameterDirection.Input, 0, 0, "CCH_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable = New dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable, ByVal CCH_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CCH_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CCH_CODE_PK As String) As dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CCH_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable = New dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByfils(ByVal dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable, ByVal CCH_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CCH_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByfils(ByVal CCH_CODE_PK As String) As dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CCH_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable = New dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByNom(ByVal dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable, ByVal CCH_NOM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CCH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_NOM")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CCH_NOM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByNom(ByVal CCH_NOM As String) As dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CCH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_NOM")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CCH_NOM, String)
            End If
            Dim dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable = New dsTheriaque.CCH_CLASSECHIMIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CCH_CLASSECHIMIQUEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CCH_CLASSECHIMIQUE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CCH_CODE_PK As String, ByVal Original_CCH_CCH_CODE_FK As String, ByVal Original_CCH_NOM As String, ByVal Original_CCH_DATECR As Date, ByVal Original_CCH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CCH_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CCH_CODE_PK, String)
            End If
            If (Original_CCH_CCH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CCH_CCH_CODE_FK, String)
            End If
            If (Original_CCH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CCH_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CCH_NOM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CCH_DATECR, Date)
            If (Original_CCH_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CCH_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CCH_CODE_PK As String, ByVal CCH_CCH_CODE_FK As String, ByVal CCH_NOM As String, ByVal CCH_DATECR As Date, ByVal CCH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CCH_CODE_PK, String)
            End If
            If (CCH_CCH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CCH_CCH_CODE_FK, String)
            End If
            If (CCH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CCH_NOM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CCH_DATECR, Date)
            If (CCH_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CCH_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CCH_CODE_PK As String, ByVal CCH_CCH_CODE_FK As String, ByVal CCH_NOM As String, ByVal CCH_DATECR As Date, ByVal CCH_DATEMJ As System.Nullable(Of Date), ByVal Original_CCH_CODE_PK As String, ByVal Original_CCH_CCH_CODE_FK As String, ByVal Original_CCH_NOM As String, ByVal Original_CCH_DATECR As Date, ByVal Original_CCH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CCH_CODE_PK, String)
            End If
            If (CCH_CCH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CCH_CCH_CODE_FK, String)
            End If
            If (CCH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CCH_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CCH_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CCH_DATECR, Date)
            If (CCH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CCH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_CCH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CCH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CCH_CODE_PK, String)
            End If
            If (Original_CCH_CCH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CCH_CCH_CODE_FK, String)
            End If
            If (Original_CCH_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CCH_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CCH_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CCH_DATECR, Date)
            If (Original_CCH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CCH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYCCH_SYNONYME_CLASSECHIMIQUETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYCCH_SYNONYME_CLASSECHIMIQUE"
            tableMapping.ColumnMappings.Add("SYCCH_NOM_PK", "SYCCH_NOM_PK")
            tableMapping.ColumnMappings.Add("SYCCH_CCH_CODE_FK", "SYCCH_CCH_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYCCH_SYNONYME_CLASSECHIMIQUE] WHERE (([SYCCH_NOM_PK] = " & _
                "@Original_SYCCH_NOM_PK) AND ([SYCCH_CCH_CODE_FK] = @Original_SYCCH_CCH_CODE_FK))" & _
                ""
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCCH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_CCH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYCCH_SYNONYME_CLASSECHIMIQUE] ([SYCCH_NOM_PK], [SYCCH_C" & _
                "CH_CODE_FK]) VALUES (@SYCCH_NOM_PK, @SYCCH_CCH_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYCCH_NOM_PK, S" & _
                "YCCH_CCH_CODE_FK FROM THERIAQUE.SYCCH_SYNONYME_CLASSECHIMIQUE WHERE (SYCCH_NOM_P" & _
                "K = @SYCCH_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCCH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_CCH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYCCH_SYNONYME_CLASSECHIMIQUE] SET [SYCCH_NOM_PK] = @SYCCH_NO" & _
                "M_PK, [SYCCH_CCH_CODE_FK] = @SYCCH_CCH_CODE_FK WHERE (([SYCCH_NOM_PK] = @Origina" & _
                "l_SYCCH_NOM_PK) AND ([SYCCH_CCH_CODE_FK] = @Original_SYCCH_CCH_CODE_FK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T SYCCH_NOM_PK, SYCCH_CCH_CODE_FK FROM THERIAQUE.SYCCH_SYNONYME_CLASSECHIMIQUE W" & _
                "HERE (SYCCH_NOM_PK = @SYCCH_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCCH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_CCH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCCH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_CCH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     THERIAQUE.SYCCH_SYNONYME_CLASSECHIMIQUE.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.SYCC" & _
                "H_SYNONYME_CLASSECHIMIQUE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     THERIAQUE.SYCCH_SYNONYME_CLASSECHIMIQUE.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         THERIAQUE.SYCC" & _
                "H_SYNONYME_CLASSECHIMIQUE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYCCH_CCH_CODE_FK = @SYCCH_CCH_CODE_FK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCCH_CCH_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYCCH_CCH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable = New dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable, ByVal SYCCH_CCH_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYCCH_CCH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCCH_CCH_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCCH_CCH_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYCCH_CCH_CODE_FK As String) As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYCCH_CCH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCCH_CCH_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCCH_CCH_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable = New dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.SYCCH_SYNONYME_CLASSECHIMIQUEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "SYCCH_SYNONYME_CLASSECHIMIQUE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYCCH_NOM_PK As String, ByVal Original_SYCCH_CCH_CODE_FK As String) As Integer
            If (Original_SYCCH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCCH_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYCCH_NOM_PK, String)
            End If
            If (Original_SYCCH_CCH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCCH_CCH_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYCCH_CCH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYCCH_NOM_PK As String, ByVal SYCCH_CCH_CODE_FK As String) As Integer
            If (SYCCH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCCH_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYCCH_NOM_PK, String)
            End If
            If (SYCCH_CCH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCCH_CCH_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYCCH_CCH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYCCH_NOM_PK As String, ByVal SYCCH_CCH_CODE_FK As String, ByVal Original_SYCCH_NOM_PK As String, ByVal Original_SYCCH_CCH_CODE_FK As String) As Integer
            If (SYCCH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCCH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYCCH_NOM_PK, String)
            End If
            If (SYCCH_CCH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCCH_CCH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYCCH_CCH_CODE_FK, String)
            End If
            If (Original_SYCCH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCCH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYCCH_NOM_PK, String)
            End If
            If (Original_SYCCH_CCH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCCH_CCH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYCCH_CCH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CGE_CLASSEGESTIONTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CGE_CLASSEGESTION"
            tableMapping.ColumnMappings.Add("CGE_CODE_SQ_PK", "CGE_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("CGE_NOM", "CGE_NOM")
            tableMapping.ColumnMappings.Add("CGE_DATECR", "CGE_DATECR")
            tableMapping.ColumnMappings.Add("CGE_DATEMJ", "CGE_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CGE_CLASSEGESTION] WHERE (([CGE_CODE_SQ_PK] = @Original_"& _ 
                "CGE_CODE_SQ_PK) AND ([CGE_NOM] = @Original_CGE_NOM) AND ([CGE_DATECR] = @Origina"& _ 
                "l_CGE_DATECR) AND ((@IsNull_CGE_DATEMJ = 1 AND [CGE_DATEMJ] IS NULL) OR ([CGE_DA"& _ 
                "TEMJ] = @Original_CGE_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CGE_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CGE_CLASSEGESTION] ([CGE_CODE_SQ_PK], [CGE_NOM], [CGE_DA"& _ 
                "TECR], [CGE_DATEMJ]) VALUES (@CGE_CODE_SQ_PK, @CGE_NOM, @CGE_DATECR, @CGE_DATEMJ"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CGE_CODE_SQ_PK, CGE_NOM, CGE_DATECR, CGE_DATEMJ FROM THERIAQUE.CGE_CL"& _ 
                "ASSEGESTION WHERE (CGE_CODE_SQ_PK = @CGE_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CGE_CLASSEGESTION] SET [CGE_CODE_SQ_PK] = @CGE_CODE_SQ_PK, [C"& _ 
                "GE_NOM] = @CGE_NOM, [CGE_DATECR] = @CGE_DATECR, [CGE_DATEMJ] = @CGE_DATEMJ WHERE"& _ 
                " (([CGE_CODE_SQ_PK] = @Original_CGE_CODE_SQ_PK) AND ([CGE_NOM] = @Original_CGE_N"& _ 
                "OM) AND ([CGE_DATECR] = @Original_CGE_DATECR) AND ((@IsNull_CGE_DATEMJ = 1 AND ["& _ 
                "CGE_DATEMJ] IS NULL) OR ([CGE_DATEMJ] = @Original_CGE_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CGE_COD"& _ 
                "E_SQ_PK, CGE_NOM, CGE_DATECR, CGE_DATEMJ FROM THERIAQUE.CGE_CLASSEGESTION WHERE "& _ 
                "(CGE_CODE_SQ_PK = @CGE_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CGE_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CGE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CGE_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CGE_CODE_SQ_PK, CGE_NOM, CGE_DATECR, CGE_DATEMJ FROM THERIAQUE.CGE_CLASSEG" & _
                "ESTION"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CGE_CODE_SQ_PK, CGE_NOM, CGE_DATECR, CGE_DATEMJ FROM THERIAQUE.CGE_CLASSEG" & _
                "ESTION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CGE_CODE_SQ_PK = @CGE_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CGE_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "CGE_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CGE_CLASSEGESTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CGE_CLASSEGESTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CGE_CLASSEGESTIONDataTable = New dsTheriaque.CGE_CLASSEGESTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CGE_CLASSEGESTIONDataTable, ByVal CGE_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CGE_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CGE_CODE_SQ_PK As Integer) As dsTheriaque.CGE_CLASSEGESTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CGE_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque.CGE_CLASSEGESTIONDataTable = New dsTheriaque.CGE_CLASSEGESTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CGE_CLASSEGESTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CGE_CLASSEGESTION")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CGE_CODE_SQ_PK As Integer, ByVal Original_CGE_NOM As String, ByVal Original_CGE_DATECR As Date, ByVal Original_CGE_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CGE_CODE_SQ_PK, Integer)
            If (Original_CGE_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CGE_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CGE_NOM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CGE_DATECR, Date)
            If (Original_CGE_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CGE_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CGE_CODE_SQ_PK As Integer, ByVal CGE_NOM As String, ByVal CGE_DATECR As Date, ByVal CGE_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CGE_CODE_SQ_PK, Integer)
            If (CGE_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CGE_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CGE_NOM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CGE_DATECR, Date)
            If (CGE_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CGE_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CGE_CODE_SQ_PK As Integer, ByVal CGE_NOM As String, ByVal CGE_DATECR As Date, ByVal CGE_DATEMJ As System.Nullable(Of Date), ByVal Original_CGE_CODE_SQ_PK As Integer, ByVal Original_CGE_NOM As String, ByVal Original_CGE_DATECR As Date, ByVal Original_CGE_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CGE_CODE_SQ_PK, Integer)
            If (CGE_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CGE_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CGE_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CGE_DATECR, Date)
            If (CGE_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CGE_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CGE_CODE_SQ_PK, Integer)
            If (Original_CGE_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CGE_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CGE_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CGE_DATECR, Date)
            If (Original_CGE_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CGE_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYCGE_SYNONYME_CLASSEGESTIONTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYCGE_SYNONYME_CLASSEGESTION"
            tableMapping.ColumnMappings.Add("SYCGE_NOM_PK", "SYCGE_NOM_PK")
            tableMapping.ColumnMappings.Add("SYCGE_CGE_CODE_FK", "SYCGE_CGE_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYCGE_SYNONYME_CLASSEGESTION] WHERE (([SYCGE_NOM_PK] = @" & _
                "Original_SYCGE_NOM_PK) AND ([SYCGE_CGE_CODE_FK] = @Original_SYCGE_CGE_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCGE_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCGE_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_CGE_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYCGE_SYNONYME_CLASSEGESTION] ([SYCGE_NOM_PK], [SYCGE_CG" & _
                "E_CODE_FK]) VALUES (@SYCGE_NOM_PK, @SYCGE_CGE_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYCGE_NOM_PK, SY" & _
                "CGE_CGE_CODE_FK FROM THERIAQUE.SYCGE_SYNONYME_CLASSEGESTION WHERE (SYCGE_NOM_PK " & _
                "= @SYCGE_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCGE_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCGE_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_CGE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYCGE_SYNONYME_CLASSEGESTION] SET [SYCGE_NOM_PK] = @SYCGE_NOM" & _
                "_PK, [SYCGE_CGE_CODE_FK] = @SYCGE_CGE_CODE_FK WHERE (([SYCGE_NOM_PK] = @Original" & _
                "_SYCGE_NOM_PK) AND ([SYCGE_CGE_CODE_FK] = @Original_SYCGE_CGE_CODE_FK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " SYCGE_NOM_PK, SYCGE_CGE_CODE_FK FROM THERIAQUE.SYCGE_SYNONYME_CLASSEGESTION WHE" & _
                "RE (SYCGE_NOM_PK = @SYCGE_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCGE_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCGE_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_CGE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCGE_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCGE_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_CGE_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYCGE_NOM_PK, SYCGE_CGE_CODE_FK FROM THERIAQUE.SYCGE_SYNONYME_CLASSEGESTIO" & _
                "N"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYCGE_NOM_PK, SYCGE_CGE_CODE_FK FROM THERIAQUE.SYCGE_SYNONYME_CLASSEGESTIO" & _
                "N" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where SYCGE_CGE_CODE_FK = @SYCGE_CGE_CODE_FK "
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCGE_CGE_CODE_FK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SYCGE_CGE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable = New dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable, ByVal SYCGE_CGE_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCGE_CGE_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYCGE_CGE_CODE_FK As Integer) As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCGE_CGE_CODE_FK, Integer)
            Dim dataTable As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable = New dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.SYCGE_SYNONYME_CLASSEGESTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "SYCGE_SYNONYME_CLASSEGESTION")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYCGE_NOM_PK As String, ByVal Original_SYCGE_CGE_CODE_FK As Integer) As Integer
            If (Original_SYCGE_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCGE_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYCGE_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYCGE_CGE_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYCGE_NOM_PK As String, ByVal SYCGE_CGE_CODE_FK As Integer) As Integer
            If (SYCGE_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCGE_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYCGE_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYCGE_CGE_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYCGE_NOM_PK As String, ByVal SYCGE_CGE_CODE_FK As Integer, ByVal Original_SYCGE_NOM_PK As String, ByVal Original_SYCGE_CGE_CODE_FK As Integer) As Integer
            If (SYCGE_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCGE_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYCGE_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYCGE_CGE_CODE_FK, Integer)
            If (Original_SYCGE_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCGE_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYCGE_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYCGE_CGE_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CIM10TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CIM10"
            tableMapping.ColumnMappings.Add("CIM_CODE_PK", "CIM_CODE_PK")
            tableMapping.ColumnMappings.Add("CIM_CIM_CODE_FK", "CIM_CIM_CODE_FK")
            tableMapping.ColumnMappings.Add("CIM_LIBELLE_COURT", "CIM_LIBELLE_COURT")
            tableMapping.ColumnMappings.Add("CIM_LIBELLE_LONG", "CIM_LIBELLE_LONG")
            tableMapping.ColumnMappings.Add("CIM_DATECR", "CIM_DATECR")
            tableMapping.ColumnMappings.Add("CIM_DATEMJ", "CIM_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CIM10] WHERE (([CIM_CODE_PK] = @Original_CIM_CODE_PK) AN"& _ 
                "D ((@IsNull_CIM_CIM_CODE_FK = 1 AND [CIM_CIM_CODE_FK] IS NULL) OR ([CIM_CIM_CODE"& _ 
                "_FK] = @Original_CIM_CIM_CODE_FK)) AND ([CIM_LIBELLE_COURT] = @Original_CIM_LIBE"& _ 
                "LLE_COURT) AND ((@IsNull_CIM_LIBELLE_LONG = 1 AND [CIM_LIBELLE_LONG] IS NULL) OR"& _ 
                " ([CIM_LIBELLE_LONG] = @Original_CIM_LIBELLE_LONG)) AND ([CIM_DATECR] = @Origina"& _ 
                "l_CIM_DATECR) AND ((@IsNull_CIM_DATEMJ = 1 AND [CIM_DATEMJ] IS NULL) OR ([CIM_DA"& _ 
                "TEMJ] = @Original_CIM_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_CIM_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CIM10] ([CIM_CODE_PK], [CIM_CIM_CODE_FK], [CIM_LIBELLE_C"& _ 
                "OURT], [CIM_LIBELLE_LONG], [CIM_DATECR], [CIM_DATEMJ]) VALUES (@CIM_CODE_PK, @CI"& _ 
                "M_CIM_CODE_FK, @CIM_LIBELLE_COURT, @CIM_LIBELLE_LONG, @CIM_DATECR, @CIM_DATEMJ);"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_"& _ 
                "DATECR, CIM_DATEMJ FROM THERIAQUE.CIM10 WHERE (CIM_CODE_PK = @CIM_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CIM10] SET [CIM_CODE_PK] = @CIM_CODE_PK, [CIM_CIM_CODE_FK] = "& _ 
                "@CIM_CIM_CODE_FK, [CIM_LIBELLE_COURT] = @CIM_LIBELLE_COURT, [CIM_LIBELLE_LONG] ="& _ 
                " @CIM_LIBELLE_LONG, [CIM_DATECR] = @CIM_DATECR, [CIM_DATEMJ] = @CIM_DATEMJ WHERE"& _ 
                " (([CIM_CODE_PK] = @Original_CIM_CODE_PK) AND ((@IsNull_CIM_CIM_CODE_FK = 1 AND "& _ 
                "[CIM_CIM_CODE_FK] IS NULL) OR ([CIM_CIM_CODE_FK] = @Original_CIM_CIM_CODE_FK)) A"& _ 
                "ND ([CIM_LIBELLE_COURT] = @Original_CIM_LIBELLE_COURT) AND ((@IsNull_CIM_LIBELLE"& _ 
                "_LONG = 1 AND [CIM_LIBELLE_LONG] IS NULL) OR ([CIM_LIBELLE_LONG] = @Original_CIM"& _ 
                "_LIBELLE_LONG)) AND ([CIM_DATECR] = @Original_CIM_DATECR) AND ((@IsNull_CIM_DATE"& _ 
                "MJ = 1 AND [CIM_DATEMJ] IS NULL) OR ([CIM_DATEMJ] = @Original_CIM_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DATE"& _ 
                "CR, CIM_DATEMJ FROM THERIAQUE.CIM10 WHERE (CIM_CODE_PK = @CIM_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_CIM_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DAT" & _
                "ECR, CIM_DATEMJ FROM THERIAQUE.CIM10"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DAT" & _
                "ECR, CIM_DATEMJ FROM THERIAQUE.CIM10" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CIM_CODE_PK = @CIM_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DAT" & _
                "ECR, CIM_DATEMJ FROM THERIAQUE.CIM10" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CIM_CIM_CODE_FK=@CIM_CIM_CODE_FK"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CIM10DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CIM10DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CIM10DataTable = New dsTheriaque.CIM10DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CIM10DataTable, ByVal CIM_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CIM_CODE_PK As String) As dsTheriaque.CIM10DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CIM10DataTable = New dsTheriaque.CIM10DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByFils(ByVal dataTable As dsTheriaque.CIM10DataTable, ByVal CIM_CIM_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByFils(ByVal CIM_CIM_CODE_FK As String) As dsTheriaque.CIM10DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.CIM10DataTable = New dsTheriaque.CIM10DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CIM10DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CIM10")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CIM_CODE_PK As String, ByVal Original_CIM_CIM_CODE_FK As String, ByVal Original_CIM_LIBELLE_COURT As String, ByVal Original_CIM_LIBELLE_LONG As String, ByVal Original_CIM_DATECR As Date, ByVal Original_CIM_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CIM_CODE_PK, String)
            End If
            If (Original_CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CIM_CIM_CODE_FK, String)
            End If
            If (Original_CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_LIBELLE_COURT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CIM_LIBELLE_COURT, String)
            End If
            If (Original_CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CIM_DATECR, Date)
            If (Original_CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CIM_CODE_PK As String, ByVal CIM_CIM_CODE_FK As String, ByVal CIM_LIBELLE_COURT As String, ByVal CIM_LIBELLE_LONG As String, ByVal CIM_DATECR As Date, ByVal CIM_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            If (CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_LIBELLE_COURT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CIM_LIBELLE_COURT, String)
            End If
            If (CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CIM_DATECR, Date)
            If (CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CIM_CODE_PK As String, ByVal CIM_CIM_CODE_FK As String, ByVal CIM_LIBELLE_COURT As String, ByVal CIM_LIBELLE_LONG As String, ByVal CIM_DATECR As Date, ByVal CIM_DATEMJ As System.Nullable(Of Date), ByVal Original_CIM_CODE_PK As String, ByVal Original_CIM_CIM_CODE_FK As String, ByVal Original_CIM_LIBELLE_COURT As String, ByVal Original_CIM_LIBELLE_LONG As String, ByVal Original_CIM_DATECR As Date, ByVal Original_CIM_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            If (CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CIM_LIBELLE_COURT, String)
            End If
            If (CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CIM_DATECR, Date)
            If (CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CIM_CODE_PK, String)
            End If
            If (Original_CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CIM_CIM_CODE_FK, String)
            End If
            If (Original_CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CIM_LIBELLE_COURT, String)
            End If
            If (Original_CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CIM_DATECR, Date)
            If (Original_CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CIM10_2TableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CIM10_2"
            tableMapping.ColumnMappings.Add("CIM_CODE_PK", "CIM_CODE_PK")
            tableMapping.ColumnMappings.Add("CIM_CIM_CODE_FK", "CIM_CIM_CODE_FK")
            tableMapping.ColumnMappings.Add("CIM_LIBELLE_COURT", "CIM_LIBELLE_COURT")
            tableMapping.ColumnMappings.Add("CIM_LIBELLE_LONG", "CIM_LIBELLE_LONG")
            tableMapping.ColumnMappings.Add("CIM_DATECR", "CIM_DATECR")
            tableMapping.ColumnMappings.Add("CIM_DATEMJ", "CIM_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CIM10] WHERE (([CIM_CODE_PK] = @Original_CIM_CODE_PK) AN" & _
                "D ((@IsNull_CIM_CIM_CODE_FK = 1 AND [CIM_CIM_CODE_FK] IS NULL) OR ([CIM_CIM_CODE" & _
                "_FK] = @Original_CIM_CIM_CODE_FK)) AND ([CIM_LIBELLE_COURT] = @Original_CIM_LIBE" & _
                "LLE_COURT) AND ((@IsNull_CIM_LIBELLE_LONG = 1 AND [CIM_LIBELLE_LONG] IS NULL) OR" & _
                " ([CIM_LIBELLE_LONG] = @Original_CIM_LIBELLE_LONG)) AND ([CIM_DATECR] = @Origina" & _
                "l_CIM_DATECR) AND ((@IsNull_CIM_DATEMJ = 1 AND [CIM_DATEMJ] IS NULL) OR ([CIM_DA" & _
                "TEMJ] = @Original_CIM_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_CIM_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CIM10] ([CIM_CODE_PK], [CIM_CIM_CODE_FK], [CIM_LIBELLE_C" & _
                "OURT], [CIM_LIBELLE_LONG], [CIM_DATECR], [CIM_DATEMJ]) VALUES (@CIM_CODE_PK, @CI" & _
                "M_CIM_CODE_FK, @CIM_LIBELLE_COURT, @CIM_LIBELLE_LONG, @CIM_DATECR, @CIM_DATEMJ);" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_" & _
                "DATECR, CIM_DATEMJ FROM THERIAQUE.CIM10 WHERE (CIM_CODE_PK = @CIM_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CIM10] SET [CIM_CODE_PK] = @CIM_CODE_PK, [CIM_CIM_CODE_FK] = " & _
                "@CIM_CIM_CODE_FK, [CIM_LIBELLE_COURT] = @CIM_LIBELLE_COURT, [CIM_LIBELLE_LONG] =" & _
                " @CIM_LIBELLE_LONG, [CIM_DATECR] = @CIM_DATECR, [CIM_DATEMJ] = @CIM_DATEMJ WHERE" & _
                " (([CIM_CODE_PK] = @Original_CIM_CODE_PK) AND ((@IsNull_CIM_CIM_CODE_FK = 1 AND " & _
                "[CIM_CIM_CODE_FK] IS NULL) OR ([CIM_CIM_CODE_FK] = @Original_CIM_CIM_CODE_FK)) A" & _
                "ND ([CIM_LIBELLE_COURT] = @Original_CIM_LIBELLE_COURT) AND ((@IsNull_CIM_LIBELLE" & _
                "_LONG = 1 AND [CIM_LIBELLE_LONG] IS NULL) OR ([CIM_LIBELLE_LONG] = @Original_CIM" & _
                "_LIBELLE_LONG)) AND ([CIM_DATECR] = @Original_CIM_DATECR) AND ((@IsNull_CIM_DATE" & _
                "MJ = 1 AND [CIM_DATEMJ] IS NULL) OR ([CIM_DATEMJ] = @Original_CIM_DATEMJ)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SE" & _
                "LECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DATE" & _
                "CR, CIM_DATEMJ FROM THERIAQUE.CIM10 WHERE (CIM_CODE_PK = @CIM_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_CIM_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_COURT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_LIBELLE_LONG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CIM_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIM_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CIM_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CIM_CODE_PK, CIM_CIM_CODE_FK, CIM_LIBELLE_COURT, CIM_LIBELLE_LONG, CIM_DAT" & _
                "ECR, CIM_DATEMJ FROM THERIAQUE.CIM10"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CIM_CIM_CODE_FK, CIM_CODE_PK, CIM_DATECR, CIM_DATEMJ, CIM_LIBELLE_COURT, C" & _
                "IM_LIBELLE_LONG FROM THERIAQUE.CIM10 WHERE (CIM_CODE_PK = @CIM_CODE_PK)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CIM_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CIM_CIM_CODE_FK, CIM_CODE_PK, CIM_DATECR, CIM_DATEMJ, CIM_LIBELLE_COURT, C" & _
                "IM_LIBELLE_LONG FROM THERIAQUE.CIM10 WHERE (CIM_CIM_CODE_FK = @CIM_CIM_CODE_FK)"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIM_CIM_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CIM_CIM_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CIM10_2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CIM10_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CIM10_2DataTable = New dsTheriaque.CIM10_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CIM10_2DataTable, ByVal CIM_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CIM_CODE_PK As String) As dsTheriaque.CIM10_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CIM10_2DataTable = New dsTheriaque.CIM10_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByFils(ByVal dataTable As dsTheriaque.CIM10_2DataTable, ByVal CIM_CIM_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByFils(ByVal CIM_CIM_CODE_FK As String) As dsTheriaque.CIM10_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.CIM10_2DataTable = New dsTheriaque.CIM10_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CIM10_2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CIM10_2")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CIM_CODE_PK As String, ByVal Original_CIM_CIM_CODE_FK As String, ByVal Original_CIM_LIBELLE_COURT As String, ByVal Original_CIM_LIBELLE_LONG As String, ByVal Original_CIM_DATECR As Date, ByVal Original_CIM_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CIM_CODE_PK, String)
            End If
            If (Original_CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CIM_CIM_CODE_FK, String)
            End If
            If (Original_CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_LIBELLE_COURT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CIM_LIBELLE_COURT, String)
            End If
            If (Original_CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CIM_DATECR, Date)
            If (Original_CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CIM_CODE_PK As String, ByVal CIM_CIM_CODE_FK As String, ByVal CIM_LIBELLE_COURT As String, ByVal CIM_LIBELLE_LONG As String, ByVal CIM_DATECR As Date, ByVal CIM_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            If (CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_LIBELLE_COURT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CIM_LIBELLE_COURT, String)
            End If
            If (CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CIM_DATECR, Date)
            If (CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CIM_CODE_PK As String, ByVal CIM_CIM_CODE_FK As String, ByVal CIM_LIBELLE_COURT As String, ByVal CIM_LIBELLE_LONG As String, ByVal CIM_DATECR As Date, ByVal CIM_DATEMJ As System.Nullable(Of Date), ByVal Original_CIM_CODE_PK As String, ByVal Original_CIM_CIM_CODE_FK As String, ByVal Original_CIM_LIBELLE_COURT As String, ByVal Original_CIM_LIBELLE_LONG As String, ByVal Original_CIM_DATECR As Date, ByVal Original_CIM_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CIM_CODE_PK, String)
            End If
            If (CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CIM_CIM_CODE_FK, String)
            End If
            If (CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CIM_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CIM_LIBELLE_COURT, String)
            End If
            If (CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CIM_DATECR, Date)
            If (CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_CIM_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CIM_CODE_PK, String)
            End If
            If (Original_CIM_CIM_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CIM_CIM_CODE_FK, String)
            End If
            If (Original_CIM_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIM_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CIM_LIBELLE_COURT, String)
            End If
            If (Original_CIM_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CIM_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CIM_DATECR, Date)
            If (Original_CIM_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CIM_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CEPH_CLASSEEPHMRATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CEPH_CLASSEEPHMRA"
            tableMapping.ColumnMappings.Add("CEPH_CODE_PK", "CEPH_CODE_PK")
            tableMapping.ColumnMappings.Add("CEPH_CEPH_CODE_FK", "CEPH_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("CEPH_NOMF", "CEPH_NOMF")
            tableMapping.ColumnMappings.Add("CEPH_NOMA", "CEPH_NOMA")
            tableMapping.ColumnMappings.Add("CEPH_DATECR", "CEPH_DATECR")
            tableMapping.ColumnMappings.Add("CEPH_DATEMJ", "CEPH_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CEPH_CLASSEEPHMRA] WHERE (([CEPH_CODE_PK] = @Original_CE"& _ 
                "PH_CODE_PK) AND ((@IsNull_CEPH_CEPH_CODE_FK = 1 AND [CEPH_CEPH_CODE_FK] IS NULL)"& _ 
                " OR ([CEPH_CEPH_CODE_FK] = @Original_CEPH_CEPH_CODE_FK)) AND ([CEPH_NOMF] = @Ori"& _ 
                "ginal_CEPH_NOMF) AND ([CEPH_NOMA] = @Original_CEPH_NOMA) AND ([CEPH_DATECR] = @O"& _ 
                "riginal_CEPH_DATECR) AND ((@IsNull_CEPH_DATEMJ = 1 AND [CEPH_DATEMJ] IS NULL) OR"& _ 
                " ([CEPH_DATEMJ] = @Original_CEPH_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CEPH_CLASSEEPHMRA] ([CEPH_CODE_PK], [CEPH_CEPH_CODE_FK],"& _ 
                " [CEPH_NOMF], [CEPH_NOMA], [CEPH_DATECR], [CEPH_DATEMJ]) VALUES (@CEPH_CODE_PK, "& _ 
                "@CEPH_CEPH_CODE_FK, @CEPH_NOMF, @CEPH_NOMA, @CEPH_DATECR, @CEPH_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_DATEMJ"& _ 
                " FROM THERIAQUE.CEPH_CLASSEEPHMRA WHERE (CEPH_CODE_PK = @CEPH_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CEPH_CLASSEEPHMRA] SET [CEPH_CODE_PK] = @CEPH_CODE_PK, [CEPH_"& _ 
                "CEPH_CODE_FK] = @CEPH_CEPH_CODE_FK, [CEPH_NOMF] = @CEPH_NOMF, [CEPH_NOMA] = @CEP"& _ 
                "H_NOMA, [CEPH_DATECR] = @CEPH_DATECR, [CEPH_DATEMJ] = @CEPH_DATEMJ WHERE (([CEPH"& _ 
                "_CODE_PK] = @Original_CEPH_CODE_PK) AND ((@IsNull_CEPH_CEPH_CODE_FK = 1 AND [CEP"& _ 
                "H_CEPH_CODE_FK] IS NULL) OR ([CEPH_CEPH_CODE_FK] = @Original_CEPH_CEPH_CODE_FK))"& _ 
                " AND ([CEPH_NOMF] = @Original_CEPH_NOMF) AND ([CEPH_NOMA] = @Original_CEPH_NOMA)"& _ 
                " AND ([CEPH_DATECR] = @Original_CEPH_DATECR) AND ((@IsNull_CEPH_DATEMJ = 1 AND ["& _ 
                "CEPH_DATEMJ] IS NULL) OR ([CEPH_DATEMJ] = @Original_CEPH_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CEPH"& _ 
                "_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_DATEMJ FROM"& _ 
                " THERIAQUE.CEPH_CLASSEEPHMRA WHERE (CEPH_CODE_PK = @CEPH_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_D" & _
                "ATEMJ FROM THERIAQUE.CEPH_CLASSEEPHMRA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CEPH_CLASSEEPHMRADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CEPH_CLASSEEPHMRADataTable = New dsTheriaque.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CEPH_CLASSEEPHMRADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CEPH_CLASSEEPHMRA")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CEPH_CODE_PK As String, ByVal Original_CEPH_CEPH_CODE_FK As String, ByVal Original_CEPH_NOMF As String, ByVal Original_CEPH_NOMA As String, ByVal Original_CEPH_DATECR As Date, ByVal Original_CEPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CEPH_CODE_PK, String)
            End If
            If (Original_CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CEPH_CEPH_CODE_FK, String)
            End If
            If (Original_CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMF")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CEPH_NOMF, String)
            End If
            If (Original_CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMA")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CEPH_NOMA, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CEPH_DATECR, Date)
            If (Original_CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CEPH_CODE_PK As String, ByVal CEPH_CEPH_CODE_FK As String, ByVal CEPH_NOMF As String, ByVal CEPH_NOMA As String, ByVal CEPH_DATECR As Date, ByVal CEPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CEPH_CODE_PK, String)
            End If
            If (CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CEPH_CEPH_CODE_FK, String)
            End If
            If (CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMF")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CEPH_NOMF, String)
            End If
            If (CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CEPH_NOMA, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CEPH_DATECR, Date)
            If (CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CEPH_CODE_PK As String, ByVal CEPH_CEPH_CODE_FK As String, ByVal CEPH_NOMF As String, ByVal CEPH_NOMA As String, ByVal CEPH_DATECR As Date, ByVal CEPH_DATEMJ As System.Nullable(Of Date), ByVal Original_CEPH_CODE_PK As String, ByVal Original_CEPH_CEPH_CODE_FK As String, ByVal Original_CEPH_NOMF As String, ByVal Original_CEPH_NOMA As String, ByVal Original_CEPH_DATECR As Date, ByVal Original_CEPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CEPH_CODE_PK, String)
            End If
            If (CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CEPH_CEPH_CODE_FK, String)
            End If
            If (CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CEPH_NOMF, String)
            End If
            If (CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CEPH_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CEPH_DATECR, Date)
            If (CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CEPH_CODE_PK, String)
            End If
            If (Original_CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CEPH_CEPH_CODE_FK, String)
            End If
            If (Original_CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CEPH_NOMF, String)
            End If
            If (Original_CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CEPH_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CEPH_DATECR, Date)
            If (Original_CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CATC_CLASSEATCTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CATC_CLASSEATC"
            tableMapping.ColumnMappings.Add("CATC_CODE_PK", "CATC_CODE_PK")
            tableMapping.ColumnMappings.Add("CATC_CATC_CODE_FK", "CATC_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("CATC_NOMF", "CATC_NOMF")
            tableMapping.ColumnMappings.Add("CATC_NOMA", "CATC_NOMA")
            tableMapping.ColumnMappings.Add("CATC_DATECR", "CATC_DATECR")
            tableMapping.ColumnMappings.Add("CATC_DATEMJ", "CATC_DATEMJ")
            tableMapping.ColumnMappings.Add("CATC_TEXTE", "CATC_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CATC_CLASSEATC] WHERE (([CATC_CODE_PK] = @Original_CATC_" & _
                "CODE_PK) AND ((@IsNull_CATC_CATC_CODE_FK = 1 AND [CATC_CATC_CODE_FK] IS NULL) OR" & _
                " ([CATC_CATC_CODE_FK] = @Original_CATC_CATC_CODE_FK)) AND ([CATC_NOMF] = @Origin" & _
                "al_CATC_NOMF) AND ([CATC_NOMA] = @Original_CATC_NOMA) AND ([CATC_DATECR] = @Orig" & _
                "inal_CATC_DATECR) AND ((@IsNull_CATC_DATEMJ = 1 AND [CATC_DATEMJ] IS NULL) OR ([" & _
                "CATC_DATEMJ] = @Original_CATC_DATEMJ)) AND ((@IsNull_CATC_TEXTE = 1 AND [CATC_TE" & _
                "XTE] IS NULL) OR ([CATC_TEXTE] = @Original_CATC_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CATC_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CATC_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CATC_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CATC_CLASSEATC] ([CATC_CODE_PK], [CATC_CATC_CODE_FK], [C" & _
                "ATC_NOMF], [CATC_NOMA], [CATC_DATECR], [CATC_DATEMJ], [CATC_TEXTE]) VALUES (@CAT" & _
                "C_CODE_PK, @CATC_CATC_CODE_FK, @CATC_NOMF, @CATC_NOMA, @CATC_DATECR, @CATC_DATEM" & _
                "J, @CATC_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, " & _
                "CATC_DATECR, CATC_DATEMJ, CATC_TEXTE FROM THERIAQUE.CATC_CLASSEATC WHERE (CATC_C" & _
                "ODE_PK = @CATC_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CATC_CLASSEATC] SET [CATC_CODE_PK] = @CATC_CODE_PK, [CATC_CAT" & _
                "C_CODE_FK] = @CATC_CATC_CODE_FK, [CATC_NOMF] = @CATC_NOMF, [CATC_NOMA] = @CATC_N" & _
                "OMA, [CATC_DATECR] = @CATC_DATECR, [CATC_DATEMJ] = @CATC_DATEMJ, [CATC_TEXTE] = " & _
                "@CATC_TEXTE WHERE (([CATC_CODE_PK] = @Original_CATC_CODE_PK) AND ((@IsNull_CATC_" & _
                "CATC_CODE_FK = 1 AND [CATC_CATC_CODE_FK] IS NULL) OR ([CATC_CATC_CODE_FK] = @Ori" & _
                "ginal_CATC_CATC_CODE_FK)) AND ([CATC_NOMF] = @Original_CATC_NOMF) AND ([CATC_NOM" & _
                "A] = @Original_CATC_NOMA) AND ([CATC_DATECR] = @Original_CATC_DATECR) AND ((@IsN" & _
                "ull_CATC_DATEMJ = 1 AND [CATC_DATEMJ] IS NULL) OR ([CATC_DATEMJ] = @Original_CAT" & _
                "C_DATEMJ)) AND ((@IsNull_CATC_TEXTE = 1 AND [CATC_TEXTE] IS NULL) OR ([CATC_TEXT" & _
                "E] = @Original_CATC_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF" & _
                ", CATC_NOMA, CATC_DATECR, CATC_DATEMJ, CATC_TEXTE FROM THERIAQUE.CATC_CLASSEATC " & _
                "WHERE (CATC_CODE_PK = @CATC_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CATC_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMF", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_NOMA", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CATC_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CATC_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CATC_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATC_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_D" & _
                "ATEMJ, CATC_TEXTE FROM THERIAQUE.CATC_CLASSEATC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_D" & _
                "ATEMJ, CATC_TEXTE FROM THERIAQUE.CATC_CLASSEATC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CATC_CODE_PK = @CATC_CODE" & _
                "_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CATC_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CATC_CODE_PK, CATC_CATC_CODE_FK, CATC_NOMF, CATC_NOMA, CATC_DATECR, CATC_D" & _
                "ATEMJ, CATC_TEXTE FROM THERIAQUE.CATC_CLASSEATC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CATC_CATC_CODE_FK = @CATC" & _
                "_CATC_CODE_FK"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CATC_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CATC_CATC_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CATC_CLASSEATCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CATC_CLASSEATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CATC_CLASSEATCDataTable = New dsTheriaque.CATC_CLASSEATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CATC_CLASSEATCDataTable, ByVal CATC_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CATC_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CATC_CODE_PK As String) As dsTheriaque.CATC_CLASSEATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CATC_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CATC_CLASSEATCDataTable = New dsTheriaque.CATC_CLASSEATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByFils(ByVal dataTable As dsTheriaque.CATC_CLASSEATCDataTable, ByVal CATC_CATC_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATC_CATC_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByFils(ByVal CATC_CATC_CODE_FK As String) As dsTheriaque.CATC_CLASSEATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CATC_CATC_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.CATC_CLASSEATCDataTable = New dsTheriaque.CATC_CLASSEATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CATC_CLASSEATCDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CATC_CLASSEATC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CATC_CODE_PK As String, ByVal Original_CATC_CATC_CODE_FK As String, ByVal Original_CATC_NOMF As String, ByVal Original_CATC_NOMA As String, ByVal Original_CATC_DATECR As Date, ByVal Original_CATC_DATEMJ As System.Nullable(Of Date), ByVal Original_CATC_TEXTE As String) As Integer
            If (Original_CATC_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CATC_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CATC_CODE_PK, String)
            End If
            If (Original_CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CATC_CATC_CODE_FK, String)
            End If
            If (Original_CATC_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CATC_NOMF")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CATC_NOMF, String)
            End If
            If (Original_CATC_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CATC_NOMA")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CATC_NOMA, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CATC_DATECR, Date)
            If (Original_CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Original_CATC_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CATC_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CATC_CODE_PK As String, ByVal CATC_CATC_CODE_FK As String, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As System.Nullable(Of Date), ByVal CATC_TEXTE As String) As Integer
            If (CATC_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            If (CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CATC_CATC_CODE_FK, String)
            End If
            If (CATC_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_NOMF")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CATC_NOMF, String)
            End If
            If (CATC_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_NOMA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CATC_NOMA, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CATC_DATECR, Date)
            If (CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (CATC_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CATC_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CATC_CODE_PK As String, ByVal CATC_CATC_CODE_FK As String, ByVal CATC_NOMF As String, ByVal CATC_NOMA As String, ByVal CATC_DATECR As Date, ByVal CATC_DATEMJ As System.Nullable(Of Date), ByVal CATC_TEXTE As String, ByVal Original_CATC_CODE_PK As String, ByVal Original_CATC_CATC_CODE_FK As String, ByVal Original_CATC_NOMF As String, ByVal Original_CATC_NOMA As String, ByVal Original_CATC_DATECR As Date, ByVal Original_CATC_DATEMJ As System.Nullable(Of Date), ByVal Original_CATC_TEXTE As String) As Integer
            If (CATC_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CATC_CODE_PK, String)
            End If
            If (CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CATC_CATC_CODE_FK, String)
            End If
            If (CATC_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CATC_NOMF, String)
            End If
            If (CATC_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("CATC_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CATC_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CATC_DATECR, Date)
            If (CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (CATC_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CATC_TEXTE, String)
            End If
            If (Original_CATC_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CATC_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CATC_CODE_PK, String)
            End If
            If (Original_CATC_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CATC_CATC_CODE_FK, String)
            End If
            If (Original_CATC_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CATC_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CATC_NOMF, String)
            End If
            If (Original_CATC_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CATC_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CATC_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CATC_DATECR, Date)
            If (Original_CATC_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CATC_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_CATC_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CATC_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYFATC_SYNONYMEFR_ATCTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYFATC_SYNONYMEFR_ATC"
            tableMapping.ColumnMappings.Add("SYFATC_NOM_PK", "SYFATC_NOM_PK")
            tableMapping.ColumnMappings.Add("SYFATC_CATC_CODE_FK_PK", "SYFATC_CATC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYFATC_SYNONYMEFR_ATC] WHERE (([SYFATC_NOM_PK] = @Origin"& _ 
                "al_SYFATC_NOM_PK) AND ([SYFATC_CATC_CODE_FK_PK] = @Original_SYFATC_CATC_CODE_FK_"& _ 
                "PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYFATC_SYNONYMEFR_ATC] ([SYFATC_NOM_PK], [SYFATC_CATC_CO"& _ 
                "DE_FK_PK]) VALUES (@SYFATC_NOM_PK, @SYFATC_CATC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYFATC_NOM_"& _ 
                "PK, SYFATC_CATC_CODE_FK_PK FROM THERIAQUE.SYFATC_SYNONYMEFR_ATC WHERE (SYFATC_CA"& _ 
                "TC_CODE_FK_PK = @SYFATC_CATC_CODE_FK_PK) AND (SYFATC_NOM_PK = @SYFATC_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYFATC_SYNONYMEFR_ATC] SET [SYFATC_NOM_PK] = @SYFATC_NOM_PK, "& _ 
                "[SYFATC_CATC_CODE_FK_PK] = @SYFATC_CATC_CODE_FK_PK WHERE (([SYFATC_NOM_PK] = @Or"& _ 
                "iginal_SYFATC_NOM_PK) AND ([SYFATC_CATC_CODE_FK_PK] = @Original_SYFATC_CATC_CODE"& _ 
                "_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYFATC_NOM_PK, SYFATC_CATC_CODE_FK_PK FROM THERIAQUE.SYFATC_SY"& _ 
                "NONYMEFR_ATC WHERE (SYFATC_CATC_CODE_FK_PK = @SYFATC_CATC_CODE_FK_PK) AND (SYFAT"& _ 
                "C_NOM_PK = @SYFATC_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYFATC_NOM_PK, SYFATC_CATC_CODE_FK_PK FROM THERIAQUE.SYFATC_SYNONYMEFR_ATC" & _
                ""
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYFATC_NOM_PK, SYFATC_CATC_CODE_FK_PK FROM THERIAQUE.SYFATC_SYNONYMEFR_ATC" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SYFATC_CATC_CODE_FK_PK = @SYFATC_CATC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYFATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable = New dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable, ByVal SYFATC_CATC_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYFATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFATC_CATC_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYFATC_CATC_CODE_FK_PK As String) As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYFATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFATC_CATC_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable = New dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.SYFATC_SYNONYMEFR_ATCDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "SYFATC_SYNONYMEFR_ATC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYFATC_NOM_PK As String, ByVal Original_SYFATC_CATC_CODE_FK_PK As String) As Integer
            If (Original_SYFATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFATC_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYFATC_NOM_PK, String)
            End If
            If (Original_SYFATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYFATC_CATC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYFATC_NOM_PK As String, ByVal SYFATC_CATC_CODE_FK_PK As String) As Integer
            If (SYFATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFATC_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYFATC_NOM_PK, String)
            End If
            If (SYFATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYFATC_CATC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYFATC_NOM_PK As String, ByVal SYFATC_CATC_CODE_FK_PK As String, ByVal Original_SYFATC_NOM_PK As String, ByVal Original_SYFATC_CATC_CODE_FK_PK As String) As Integer
            If (SYFATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFATC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYFATC_NOM_PK, String)
            End If
            If (SYFATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYFATC_CATC_CODE_FK_PK, String)
            End If
            If (Original_SYFATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFATC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYFATC_NOM_PK, String)
            End If
            If (Original_SYFATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYFATC_CATC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYAATC_SYNONYMEANGLAIS_ATCTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYAATC_SYNONYMEANGLAIS_ATC"
            tableMapping.ColumnMappings.Add("SYAATC_NOM_PK", "SYAATC_NOM_PK")
            tableMapping.ColumnMappings.Add("SYAATC_CATC_CODE_FK_PK", "SYAATC_CATC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYAATC_SYNONYMEANGLAIS_ATC] WHERE (([SYAATC_NOM_PK] = @O" & _
                "riginal_SYAATC_NOM_PK) AND ([SYAATC_CATC_CODE_FK_PK] = @Original_SYAATC_CATC_COD" & _
                "E_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYAATC_SYNONYMEANGLAIS_ATC] ([SYAATC_NOM_PK], [SYAATC_CA" & _
                "TC_CODE_FK_PK]) VALUES (@SYAATC_NOM_PK, @SYAATC_CATC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYAATC" & _
                "_NOM_PK, SYAATC_CATC_CODE_FK_PK FROM THERIAQUE.SYAATC_SYNONYMEANGLAIS_ATC WHERE " & _
                "(SYAATC_CATC_CODE_FK_PK = @SYAATC_CATC_CODE_FK_PK) AND (SYAATC_NOM_PK = @SYAATC_" & _
                "NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYAATC_SYNONYMEANGLAIS_ATC] SET [SYAATC_NOM_PK] = @SYAATC_NOM" & _
                "_PK, [SYAATC_CATC_CODE_FK_PK] = @SYAATC_CATC_CODE_FK_PK WHERE (([SYAATC_NOM_PK] " & _
                "= @Original_SYAATC_NOM_PK) AND ([SYAATC_CATC_CODE_FK_PK] = @Original_SYAATC_CATC" & _
                "_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYAATC_NOM_PK, SYAATC_CATC_CODE_FK_PK FROM THERIAQUE.SYAA" & _
                "TC_SYNONYMEANGLAIS_ATC WHERE (SYAATC_CATC_CODE_FK_PK = @SYAATC_CATC_CODE_FK_PK) " & _
                "AND (SYAATC_NOM_PK = @SYAATC_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAATC_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYAATC_NOM_PK, SYAATC_CATC_CODE_FK_PK FROM THERIAQUE.SYAATC_SYNONYMEANGLAI" & _
                "S_ATC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYAATC_NOM_PK, SYAATC_CATC_CODE_FK_PK FROM THERIAQUE.SYAATC_SYNONYMEANGLAI" & _
                "S_ATC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYAATC_CATC_CODE_FK_PK = @SYAATC_CATC_CODE_FK_PK "
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAATC_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYAATC_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable = New dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable, ByVal SYAATC_CATC_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYAATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYAATC_CATC_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYAATC_CATC_CODE_FK_PK As String) As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYAATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYAATC_CATC_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable = New dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.SYAATC_SYNONYMEANGLAIS_ATCDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "SYAATC_SYNONYMEANGLAIS_ATC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYAATC_NOM_PK As String, ByVal Original_SYAATC_CATC_CODE_FK_PK As String) As Integer
            If (Original_SYAATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAATC_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYAATC_NOM_PK, String)
            End If
            If (Original_SYAATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYAATC_CATC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYAATC_NOM_PK As String, ByVal SYAATC_CATC_CODE_FK_PK As String) As Integer
            If (SYAATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAATC_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYAATC_NOM_PK, String)
            End If
            If (SYAATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYAATC_CATC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYAATC_NOM_PK As String, ByVal SYAATC_CATC_CODE_FK_PK As String, ByVal Original_SYAATC_NOM_PK As String, ByVal Original_SYAATC_CATC_CODE_FK_PK As String) As Integer
            If (SYAATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAATC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYAATC_NOM_PK, String)
            End If
            If (SYAATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYAATC_CATC_CODE_FK_PK, String)
            End If
            If (Original_SYAATC_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAATC_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYAATC_NOM_PK, String)
            End If
            If (Original_SYAATC_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAATC_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYAATC_CATC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ATCDDD_DOSE_USUELLE_JOURTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ATCDDD_DOSE_USUELLE_JOUR"
            tableMapping.ColumnMappings.Add("ATCDDD_CATC_CODE_FK_PK", "ATCDDD_CATC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ATCDDD_CDF_VO_CODE_FK_PK", "ATCDDD_CDF_VO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ATCDDD_DOSAGE_PK", "ATCDDD_DOSAGE_PK")
            tableMapping.ColumnMappings.Add("ATCDDD_CDF_UD_CODE_FK_PK", "ATCDDD_CDF_UD_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ATCDDD_DOSE_USUELLE_JOUR] WHERE (([ATCDDD_CATC_CODE_FK_P"& _ 
                "K] = @Original_ATCDDD_CATC_CODE_FK_PK) AND ([ATCDDD_CDF_VO_CODE_FK_PK] = @Origin"& _ 
                "al_ATCDDD_CDF_VO_CODE_FK_PK) AND ([ATCDDD_DOSAGE_PK] = @Original_ATCDDD_DOSAGE_P"& _ 
                "K) AND ([ATCDDD_CDF_UD_CODE_FK_PK] = @Original_ATCDDD_CDF_UD_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ATCDDD_DOSE_USUELLE_JOUR] ([ATCDDD_CATC_CODE_FK_PK], [AT"& _ 
                "CDDD_CDF_VO_CODE_FK_PK], [ATCDDD_DOSAGE_PK], [ATCDDD_CDF_UD_CODE_FK_PK]) VALUES "& _ 
                "(@ATCDDD_CATC_CODE_FK_PK, @ATCDDD_CDF_VO_CODE_FK_PK, @ATCDDD_DOSAGE_PK, @ATCDDD_"& _ 
                "CDF_UD_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ATCDDD_CATC_CODE_FK_PK, ATCDDD_CDF_VO_CODE_FK_PK, AT"& _ 
                "CDDD_DOSAGE_PK, ATCDDD_CDF_UD_CODE_FK_PK FROM THERIAQUE.ATCDDD_DOSE_USUELLE_JOUR"& _ 
                " WHERE (ATCDDD_CATC_CODE_FK_PK = @ATCDDD_CATC_CODE_FK_PK) AND (ATCDDD_CDF_UD_COD"& _ 
                "E_FK_PK = @ATCDDD_CDF_UD_CODE_FK_PK) AND (ATCDDD_CDF_VO_CODE_FK_PK = @ATCDDD_CDF"& _ 
                "_VO_CODE_FK_PK) AND (ATCDDD_DOSAGE_PK = @ATCDDD_DOSAGE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ATCDDD_DOSE_USUELLE_JOUR] SET [ATCDDD_CATC_CODE_FK_PK] = @ATC"& _ 
                "DDD_CATC_CODE_FK_PK, [ATCDDD_CDF_VO_CODE_FK_PK] = @ATCDDD_CDF_VO_CODE_FK_PK, [AT"& _ 
                "CDDD_DOSAGE_PK] = @ATCDDD_DOSAGE_PK, [ATCDDD_CDF_UD_CODE_FK_PK] = @ATCDDD_CDF_UD"& _ 
                "_CODE_FK_PK WHERE (([ATCDDD_CATC_CODE_FK_PK] = @Original_ATCDDD_CATC_CODE_FK_PK)"& _ 
                " AND ([ATCDDD_CDF_VO_CODE_FK_PK] = @Original_ATCDDD_CDF_VO_CODE_FK_PK) AND ([ATC"& _ 
                "DDD_DOSAGE_PK] = @Original_ATCDDD_DOSAGE_PK) AND ([ATCDDD_CDF_UD_CODE_FK_PK] = @"& _ 
                "Original_ATCDDD_CDF_UD_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ATCDDD_CATC_CODE_FK_PK, ATCDDD_CDF_"& _ 
                "VO_CODE_FK_PK, ATCDDD_DOSAGE_PK, ATCDDD_CDF_UD_CODE_FK_PK FROM THERIAQUE.ATCDDD_"& _ 
                "DOSE_USUELLE_JOUR WHERE (ATCDDD_CATC_CODE_FK_PK = @ATCDDD_CATC_CODE_FK_PK) AND ("& _ 
                "ATCDDD_CDF_UD_CODE_FK_PK = @ATCDDD_CDF_UD_CODE_FK_PK) AND (ATCDDD_CDF_VO_CODE_FK"& _ 
                "_PK = @ATCDDD_CDF_VO_CODE_FK_PK) AND (ATCDDD_DOSAGE_PK = @ATCDDD_DOSAGE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ATCDDD_CATC_CODE_FK_PK, ATCDDD_CDF_VO_CODE_FK_PK, ATCDDD_DOSAGE_PK, ATCDDD" & _
                "_CDF_UD_CODE_FK_PK FROM THERIAQUE.ATCDDD_DOSE_USUELLE_JOUR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ATCDDD_CATC_CODE_FK_PK, ATCDDD_CDF_VO_CODE_FK_PK, ATCDDD_DOSAGE_PK, ATCDDD" & _
                "_CDF_UD_CODE_FK_PK FROM THERIAQUE.ATCDDD_DOSE_USUELLE_JOUR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where ATCDDD_CATC_CO" & _
                "DE_FK_PK = @ATCDDD_CATC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable = New dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable, ByVal ATCDDD_CATC_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ATCDDD_CATC_CODE_FK_PK As String) As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ATCDDD_CATC_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable = New dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.ATCDDD_DOSE_USUELLE_JOURDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "ATCDDD_DOSE_USUELLE_JOUR")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ATCDDD_CATC_CODE_FK_PK As String, ByVal Original_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal Original_ATCDDD_DOSAGE_PK As Decimal, ByVal Original_ATCDDD_CDF_UD_CODE_FK_PK As String) As Integer
            If (Original_ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (Original_ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ATCDDD_DOSAGE_PK, Decimal)
            If (Original_ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ATCDDD_CATC_CODE_FK_PK As String, ByVal ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal ATCDDD_DOSAGE_PK As Decimal, ByVal ATCDDD_CDF_UD_CODE_FK_PK As String) As Integer
            If (ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ATCDDD_DOSAGE_PK, Decimal)
            If (ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ATCDDD_CATC_CODE_FK_PK As String, ByVal ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal ATCDDD_DOSAGE_PK As Decimal, ByVal ATCDDD_CDF_UD_CODE_FK_PK As String, ByVal Original_ATCDDD_CATC_CODE_FK_PK As String, ByVal Original_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal Original_ATCDDD_DOSAGE_PK As Decimal, ByVal Original_ATCDDD_CDF_UD_CODE_FK_PK As String) As Integer
            If (ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ATCDDD_DOSAGE_PK, Decimal)
            If (ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            If (Original_ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (Original_ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ATCDDD_DOSAGE_PK, Decimal)
            If (Original_ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CDF_CODIFTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDF_CODIF"
            tableMapping.ColumnMappings.Add("CDF_NUMERO_PK", "CDF_NUMERO_PK")
            tableMapping.ColumnMappings.Add("CDF_CODE_PK", "CDF_CODE_PK")
            tableMapping.ColumnMappings.Add("CDF_NOM", "CDF_NOM")
            tableMapping.ColumnMappings.Add("CDF_VAL_NUM", "CDF_VAL_NUM")
            tableMapping.ColumnMappings.Add("CDF_NOMABRG", "CDF_NOMABRG")
            tableMapping.ColumnMappings.Add("CDF_UNIT_NUM", "CDF_UNIT_NUM")
            tableMapping.ColumnMappings.Add("CDF_TEXTE", "CDF_TEXTE")
            tableMapping.ColumnMappings.Add("CDF_DATECR", "CDF_DATECR")
            tableMapping.ColumnMappings.Add("CDF_DATEMJ", "CDF_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CDF_CODIF] WHERE (([CDF_NUMERO_PK] = @Original_CDF_NUMER" & _
                "O_PK) AND ([CDF_CODE_PK] = @Original_CDF_CODE_PK) AND ([CDF_NOM] = @Original_CDF" & _
                "_NOM) AND ([CDF_DATECR] = @Original_CDF_DATECR) AND ((@IsNull_CDF_DATEMJ = 1 AND" & _
                " [CDF_DATEMJ] IS NULL) OR ([CDF_DATEMJ] = @Original_CDF_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_VAL_NUM", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_NOMABRG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_UNIT_NUM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDF_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CDF_CODIF] ([CDF_NUMERO_PK], [CDF_CODE_PK], [CDF_NOM],[CDF_VAL_NUM],[CDF_NOMABRG],[CDF_UNIT_NUM],[CDF_TEXTE], [" & _
                "CDF_DATECR], [CDF_DATEMJ]) VALUES (@CDF_NUMERO_PK, @CDF_CODE_PK, @CDF_NOM,IsNull(@CDF_VAL_NUM,0),@CDF_NOMABRG,IsNull(@CDF_UNIT_NUM,''),IsNull(@CDF_TEXTE,''), @CDF_" & _
                "DATECR, @CDF_DATEMJ);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,CDF_VAL_NUM,CDF_NOMABRG,CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, C" & _
                "DF_DATEMJ FROM THERIAQUE.CDF_CODIF WHERE (CDF_CODE_PK = @CDF_CODE_PK) AND (CDF_N" & _
                "UMERO_PK = @CDF_NUMERO_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_VAL_NUM", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NOMABRG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_UNIT_NUM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CDF_CODIF] SET [CDF_NUMERO_PK] = @CDF_NUMERO_PK, [CDF_CODE_PK" & _
                "] = @CDF_CODE_PK, [CDF_NOM] = @CDF_NOM,[CDF_VAL_NUM] = @CDF_VAL_NUM,[CDF_NOMABRG] = @CDF_NOMABRG,[CDF_UNIT_NUM] = @CDF_UNIT_NUM, [CDF_TEXTE] = @CDF_TEXTE, [CDF_DATECR] = @CDF_DATECR, [CDF_DATEMJ]" & _
                " = @CDF_DATEMJ WHERE (([CDF_NUMERO_PK] = @Original_CDF_NUMERO_PK) AND ([CDF_CODE" & _
                "_PK] = @Original_CDF_CODE_PK) AND ([CDF_NOM] = @Original_CDF_NOM) AND ([CDF_VAL_NUM] = @Original_CDF_VAL_NUM) AND ([CDF_NOMABRG] = @Original_CDF_NOMABRG) AND ([CDF_UNIT_NUM] = @Original_CDF_UNIT_NUM) AND ([CDF_TEXTE] = @Original_CDF_TEXTE) AND ([CDF_DATE" & _
                "CR] = @Original_CDF_DATECR) AND ((@IsNull_CDF_DATEMJ = 1 AND [CDF_DATEMJ] IS NUL" & _
                "L) OR ([CDF_DATEMJ] = @Original_CDF_DATEMJ)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDF_NUMERO_PK, CDF_CODE_P" & _
                "K, CDF_NOM,CDF_VAL_NUM, CDF_NOMABRG ,CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ FROM THERIAQUE.CDF_CODIF WHERE (CDF_CODE_PK =" & _
                " @CDF_CODE_PK) AND (CDF_NUMERO_PK = @CDF_NUMERO_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_VAL_NUM", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NOMABRG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_UNIT_NUM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_VAL_NUM", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_NOMABRG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_UNIT_NUM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDF_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,CDF_VAL_NUM,CDF_NOMABRG,CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ FROM THERIAQUE" & _
                ".CDF_CODIF"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ FROM THERIAQUE" & _
                ".CDF_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CDF_NUMERO_PK = @CDF_NUMERO_PK and  CDF_CODE_PK = @CDF_CODE_PK" & _
                ""
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,CDF_VAL_NUM,CDF_NOMABRG,CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ FROM THERIAQUE" & _
                ".CDF_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CDF_NUMERO_PK = '19'"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(3) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,CDF_VAL_NUM,CDF_NOMABRG,CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ FROM THERIAQUE" & _
                ".CDF_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CDF_NUMERO_PK = @CDF_NUMERO_PK"
            Me._commandCollection(3).CommandType = System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,CDF_VAL_NUM,CDF_NOMABRG,CDF_UNIT_NUM, CDF_TEXTE, CDF_DATECR, CDF_DATEMJ FROM THERIAQUE" & _
                ".CDF_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CDF_NUMERO_PK = '18'"
            Me._commandCollection(4).CommandType = System.Data.CommandType.Text
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CDF_CODIFDataTable = New dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CDF_CODIFDataTable, ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDF_CODIFDataTable = New dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByDosage(ByVal dataTable As dsTheriaque.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByDosage() As dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As dsTheriaque.CDF_CODIFDataTable = New dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByNumero(ByVal dataTable As dsTheriaque.CDF_CODIFDataTable, ByVal CDF_NUMERO_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByNumero(ByVal CDF_NUMERO_PK As String) As dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDF_CODIFDataTable = New dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByVoieAdministration(ByVal dataTable As dsTheriaque.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByVoieAdministration() As dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Dim dataTable As dsTheriaque.CDF_CODIFDataTable = New dsTheriaque.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CDF_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CDF_CODIF")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDF_NUMERO_PK As String, ByVal Original_CDF_CODE_PK As String, ByVal Original_CDF_NOM As String, ByVal Original_CDF_VAL_NUM As Decimal, ByVal Original_CDF_NOMABRG As String, ByVal Original_CDF_UNIT_NUM As String, ByVal Original_CDF_TEXTE As String, ByVal Original_CDF_DATECR As Date, ByVal Original_CDF_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDF_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDF_NUMERO_PK, String)
            End If
            If (Original_CDF_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDF_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDF_CODE_PK, String)
            End If
            If (Original_CDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDF_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CDF_NOM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDF_VAL_NUM, Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CDF_NOMABRG, String)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CDF_UNIT_NUM, String)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDF_TEXTE, String)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CDF_DATECR, Date)
            If (Original_CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_VAL_NUM As Decimal, ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            If (CDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDF_NOM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDF_VAL_NUM, Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CDF_NOMABRG, String)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(CDF_UNIT_NUM, String)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(CDF_TEXTE, String)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(CDF_DATECR, Date)
            If (CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_VAL_NUM As Decimal, ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As System.Nullable(Of Date), ByVal Original_CDF_NUMERO_PK As String, ByVal Original_CDF_CODE_PK As String, ByVal Original_CDF_NOM As String, ByVal Original_CDF_VAL_NUM As Decimal, ByVal Original_CDF_NOMABRG As String, ByVal Original_CDF_UNIT_NUM As String, ByVal Original_CDF_TEXTE As String, ByVal Original_CDF_DATECR As Date, ByVal Original_CDF_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDF_NUMERO_PK, String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDF_CODE_PK, String)
            End If
            If (CDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("CDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDF_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDF_VAL_NUM, Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CDF_NOMABRG, String)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CDF_UNIT_NUM, String)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CDF_TEXTE, String)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CDF_DATECR, Date)
            If (CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_CDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CDF_NUMERO_PK, String)
            End If
            If (Original_CDF_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDF_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDF_CODE_PK, String)
            End If
            If (Original_CDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDF_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CDF_VAL_NUM, Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CDF_TEXTE, Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CDF_NOMABRG, String)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CDF_UNIT_NUM, String)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_CDF_TEXTE, String)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CDF_DATECR, Date)
            If (Original_CDF_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CISP_CLASSIF_INTER_SOINSTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CISP_CLASSIF_INTER_SOINS"
            tableMapping.ColumnMappings.Add("CISP_CODE_PK", "CISP_CODE_PK")
            tableMapping.ColumnMappings.Add("CISP_CISP_CODE_FK", "CISP_CISP_CODE_FK")
            tableMapping.ColumnMappings.Add("CISP_LIBELLE_COURT", "CISP_LIBELLE_COURT")
            tableMapping.ColumnMappings.Add("CISP_LIBELLE_LONG", "CISP_LIBELLE_LONG")
            tableMapping.ColumnMappings.Add("CISP_DATECR", "CISP_DATECR")
            tableMapping.ColumnMappings.Add("CISP_DATEMJ", "CISP_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CISP_CLASSIF_INTER_SOINS] WHERE (([CISP_CODE_PK] = @Orig"& _ 
                "inal_CISP_CODE_PK) AND ((@IsNull_CISP_CISP_CODE_FK = 1 AND [CISP_CISP_CODE_FK] I"& _ 
                "S NULL) OR ([CISP_CISP_CODE_FK] = @Original_CISP_CISP_CODE_FK)) AND ([CISP_LIBEL"& _ 
                "LE_COURT] = @Original_CISP_LIBELLE_COURT) AND ((@IsNull_CISP_LIBELLE_LONG = 1 AN"& _ 
                "D [CISP_LIBELLE_LONG] IS NULL) OR ([CISP_LIBELLE_LONG] = @Original_CISP_LIBELLE_"& _ 
                "LONG)) AND ([CISP_DATECR] = @Original_CISP_DATECR) AND ((@IsNull_CISP_DATEMJ = 1"& _ 
                " AND [CISP_DATEMJ] IS NULL) OR ([CISP_DATEMJ] = @Original_CISP_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_CISP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CISP_CLASSIF_INTER_SOINS] ([CISP_CODE_PK], [CISP_CISP_CO"& _ 
                "DE_FK], [CISP_LIBELLE_COURT], [CISP_LIBELLE_LONG], [CISP_DATECR], [CISP_DATEMJ])"& _ 
                " VALUES (@CISP_CODE_PK, @CISP_CISP_CODE_FK, @CISP_LIBELLE_COURT, @CISP_LIBELLE_L"& _ 
                "ONG, @CISP_DATECR, @CISP_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_"& _ 
                "LIBELLE_COURT, CISP_LIBELLE_LONG, CISP_DATECR, CISP_DATEMJ FROM THERIAQUE.CISP_C"& _ 
                "LASSIF_INTER_SOINS WHERE (CISP_CODE_PK = @CISP_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CISP_CLASSIF_INTER_SOINS] SET [CISP_CODE_PK] = @CISP_CODE_PK,"& _ 
                " [CISP_CISP_CODE_FK] = @CISP_CISP_CODE_FK, [CISP_LIBELLE_COURT] = @CISP_LIBELLE_"& _ 
                "COURT, [CISP_LIBELLE_LONG] = @CISP_LIBELLE_LONG, [CISP_DATECR] = @CISP_DATECR, ["& _ 
                "CISP_DATEMJ] = @CISP_DATEMJ WHERE (([CISP_CODE_PK] = @Original_CISP_CODE_PK) AND"& _ 
                " ((@IsNull_CISP_CISP_CODE_FK = 1 AND [CISP_CISP_CODE_FK] IS NULL) OR ([CISP_CISP"& _ 
                "_CODE_FK] = @Original_CISP_CISP_CODE_FK)) AND ([CISP_LIBELLE_COURT] = @Original_"& _ 
                "CISP_LIBELLE_COURT) AND ((@IsNull_CISP_LIBELLE_LONG = 1 AND [CISP_LIBELLE_LONG] "& _ 
                "IS NULL) OR ([CISP_LIBELLE_LONG] = @Original_CISP_LIBELLE_LONG)) AND ([CISP_DATE"& _ 
                "CR] = @Original_CISP_DATECR) AND ((@IsNull_CISP_DATEMJ = 1 AND [CISP_DATEMJ] IS "& _ 
                "NULL) OR ([CISP_DATEMJ] = @Original_CISP_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CISP_CODE_PK, CISP_C"& _ 
                "ISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CISP_DATECR, CISP_DATEMJ FRO"& _ 
                "M THERIAQUE.CISP_CLASSIF_INTER_SOINS WHERE (CISP_CODE_PK = @CISP_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_CISP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CI" & _
                "SP_DATECR, CISP_DATEMJ FROM THERIAQUE.CISP_CLASSIF_INTER_SOINS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CI" & _
                "SP_DATECR, CISP_DATEMJ FROM THERIAQUE.CISP_CLASSIF_INTER_SOINS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CISP_CODE_" & _
                "PK = @CISP_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CI" & _
                "SP_DATECR, CISP_DATEMJ FROM THERIAQUE.CISP_CLASSIF_INTER_SOINS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CISP_CISP_" & _
                "CODE_FK = @CISP_CISP_CODE_FK"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable = New dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable, ByVal CISP_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CISP_CODE_PK As String) As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable = New dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByFils(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable, ByVal CISP_CISP_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByFils(ByVal CISP_CISP_CODE_FK As String) As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable = New dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CISP_CLASSIF_INTER_SOINS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CISP_CODE_PK As String, ByVal Original_CISP_CISP_CODE_FK As String, ByVal Original_CISP_LIBELLE_COURT As String, ByVal Original_CISP_LIBELLE_LONG As String, ByVal Original_CISP_DATECR As Date, ByVal Original_CISP_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CISP_CODE_PK, String)
            End If
            If (Original_CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CISP_CISP_CODE_FK, String)
            End If
            If (Original_CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_LIBELLE_COURT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CISP_LIBELLE_COURT, String)
            End If
            If (Original_CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CISP_DATECR, Date)
            If (Original_CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CISP_CODE_PK As String, ByVal CISP_CISP_CODE_FK As String, ByVal CISP_LIBELLE_COURT As String, ByVal CISP_LIBELLE_LONG As String, ByVal CISP_DATECR As Date, ByVal CISP_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            If (CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_LIBELLE_COURT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CISP_LIBELLE_COURT, String)
            End If
            If (CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CISP_DATECR, Date)
            If (CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CISP_CODE_PK As String, ByVal CISP_CISP_CODE_FK As String, ByVal CISP_LIBELLE_COURT As String, ByVal CISP_LIBELLE_LONG As String, ByVal CISP_DATECR As Date, ByVal CISP_DATEMJ As System.Nullable(Of Date), ByVal Original_CISP_CODE_PK As String, ByVal Original_CISP_CISP_CODE_FK As String, ByVal Original_CISP_LIBELLE_COURT As String, ByVal Original_CISP_LIBELLE_LONG As String, ByVal Original_CISP_DATECR As Date, ByVal Original_CISP_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            If (CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CISP_LIBELLE_COURT, String)
            End If
            If (CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CISP_DATECR, Date)
            If (CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CISP_CODE_PK, String)
            End If
            If (Original_CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CISP_CISP_CODE_FK, String)
            End If
            If (Original_CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CISP_LIBELLE_COURT, String)
            End If
            If (Original_CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CISP_DATECR, Date)
            If (Original_CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CISP_CLASSIF_INTER_SOINS_2TableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CISP_CLASSIF_INTER_SOINS_2"
            tableMapping.ColumnMappings.Add("CISP_CODE_PK", "CISP_CODE_PK")
            tableMapping.ColumnMappings.Add("CISP_CISP_CODE_FK", "CISP_CISP_CODE_FK")
            tableMapping.ColumnMappings.Add("CISP_LIBELLE_COURT", "CISP_LIBELLE_COURT")
            tableMapping.ColumnMappings.Add("CISP_LIBELLE_LONG", "CISP_LIBELLE_LONG")
            tableMapping.ColumnMappings.Add("CISP_DATECR", "CISP_DATECR")
            tableMapping.ColumnMappings.Add("CISP_DATEMJ", "CISP_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CISP_CLASSIF_INTER_SOINS] WHERE (([CISP_CODE_PK] = @Orig" & _
                "inal_CISP_CODE_PK) AND ((@IsNull_CISP_CISP_CODE_FK = 1 AND [CISP_CISP_CODE_FK] I" & _
                "S NULL) OR ([CISP_CISP_CODE_FK] = @Original_CISP_CISP_CODE_FK)) AND ([CISP_LIBEL" & _
                "LE_COURT] = @Original_CISP_LIBELLE_COURT) AND ((@IsNull_CISP_LIBELLE_LONG = 1 AN" & _
                "D [CISP_LIBELLE_LONG] IS NULL) OR ([CISP_LIBELLE_LONG] = @Original_CISP_LIBELLE_" & _
                "LONG)) AND ([CISP_DATECR] = @Original_CISP_DATECR) AND ((@IsNull_CISP_DATEMJ = 1" & _
                " AND [CISP_DATEMJ] IS NULL) OR ([CISP_DATEMJ] = @Original_CISP_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_CISP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CISP_CLASSIF_INTER_SOINS] ([CISP_CODE_PK], [CISP_CISP_CO" & _
                "DE_FK], [CISP_LIBELLE_COURT], [CISP_LIBELLE_LONG], [CISP_DATECR], [CISP_DATEMJ])" & _
                " VALUES (@CISP_CODE_PK, @CISP_CISP_CODE_FK, @CISP_LIBELLE_COURT, @CISP_LIBELLE_L" & _
                "ONG, @CISP_DATECR, @CISP_DATEMJ);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_" & _
                "LIBELLE_COURT, CISP_LIBELLE_LONG, CISP_DATECR, CISP_DATEMJ FROM THERIAQUE.CISP_C" & _
                "LASSIF_INTER_SOINS WHERE (CISP_CODE_PK = @CISP_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CISP_CLASSIF_INTER_SOINS] SET [CISP_CODE_PK] = @CISP_CODE_PK," & _
                " [CISP_CISP_CODE_FK] = @CISP_CISP_CODE_FK, [CISP_LIBELLE_COURT] = @CISP_LIBELLE_" & _
                "COURT, [CISP_LIBELLE_LONG] = @CISP_LIBELLE_LONG, [CISP_DATECR] = @CISP_DATECR, [" & _
                "CISP_DATEMJ] = @CISP_DATEMJ WHERE (([CISP_CODE_PK] = @Original_CISP_CODE_PK) AND" & _
                " ((@IsNull_CISP_CISP_CODE_FK = 1 AND [CISP_CISP_CODE_FK] IS NULL) OR ([CISP_CISP" & _
                "_CODE_FK] = @Original_CISP_CISP_CODE_FK)) AND ([CISP_LIBELLE_COURT] = @Original_" & _
                "CISP_LIBELLE_COURT) AND ((@IsNull_CISP_LIBELLE_LONG = 1 AND [CISP_LIBELLE_LONG] " & _
                "IS NULL) OR ([CISP_LIBELLE_LONG] = @Original_CISP_LIBELLE_LONG)) AND ([CISP_DATE" & _
                "CR] = @Original_CISP_DATECR) AND ((@IsNull_CISP_DATEMJ = 1 AND [CISP_DATEMJ] IS " & _
                "NULL) OR ([CISP_DATEMJ] = @Original_CISP_DATEMJ)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CISP_CODE_PK, CISP_C" & _
                "ISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CISP_DATECR, CISP_DATEMJ FRO" & _
                "M THERIAQUE.CISP_CLASSIF_INTER_SOINS WHERE (CISP_CODE_PK = @CISP_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_CISP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_COURT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_COURT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_LIBELLE_LONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_LIBELLE_LONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_LIBELLE_LONG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CISP_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CISP_CODE_PK, CISP_CISP_CODE_FK, CISP_LIBELLE_COURT, CISP_LIBELLE_LONG, CI" & _
                "SP_DATECR, CISP_DATEMJ FROM THERIAQUE.CISP_CLASSIF_INTER_SOINS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CISP_CISP_CODE_FK, CISP_CODE_PK, CISP_DATECR, CISP_DATEMJ, CISP_LIBELLE_CO" & _
                "URT, CISP_LIBELLE_LONG FROM THERIAQUE.CISP_CLASSIF_INTER_SOINS WHERE (CISP_CODE_" & _
                "PK = @CISP_CODE_PK)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CISP_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CISP_CISP_CODE_FK, CISP_CODE_PK, CISP_DATECR, CISP_DATEMJ, CISP_LIBELLE_CO" & _
                "URT, CISP_LIBELLE_LONG FROM THERIAQUE.CISP_CLASSIF_INTER_SOINS WHERE (CISP_CISP_" & _
                "CODE_FK = @CISP_CISP_CODE_FK)"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISP_CISP_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CISP_CISP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable = New dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable, ByVal CISP_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CISP_CODE_PK As String) As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable = New dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByFils(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable, ByVal CISP_CISP_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByFils(ByVal CISP_CISP_CODE_FK As String) As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable = New dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CISP_CLASSIF_INTER_SOINS_2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CISP_CLASSIF_INTER_SOINS_2")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CISP_CODE_PK As String, ByVal Original_CISP_CISP_CODE_FK As String, ByVal Original_CISP_LIBELLE_COURT As String, ByVal Original_CISP_LIBELLE_LONG As String, ByVal Original_CISP_DATECR As Date, ByVal Original_CISP_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CISP_CODE_PK, String)
            End If
            If (Original_CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CISP_CISP_CODE_FK, String)
            End If
            If (Original_CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_LIBELLE_COURT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CISP_LIBELLE_COURT, String)
            End If
            If (Original_CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CISP_DATECR, Date)
            If (Original_CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CISP_CODE_PK As String, ByVal CISP_CISP_CODE_FK As String, ByVal CISP_LIBELLE_COURT As String, ByVal CISP_LIBELLE_LONG As String, ByVal CISP_DATECR As Date, ByVal CISP_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            If (CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_LIBELLE_COURT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CISP_LIBELLE_COURT, String)
            End If
            If (CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CISP_DATECR, Date)
            If (CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CISP_CODE_PK As String, ByVal CISP_CISP_CODE_FK As String, ByVal CISP_LIBELLE_COURT As String, ByVal CISP_LIBELLE_LONG As String, ByVal CISP_DATECR As Date, ByVal CISP_DATEMJ As System.Nullable(Of Date), ByVal Original_CISP_CODE_PK As String, ByVal Original_CISP_CISP_CODE_FK As String, ByVal Original_CISP_LIBELLE_COURT As String, ByVal Original_CISP_LIBELLE_LONG As String, ByVal Original_CISP_DATECR As Date, ByVal Original_CISP_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CISP_CODE_PK, String)
            End If
            If (CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CISP_CISP_CODE_FK, String)
            End If
            If (CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("CISP_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CISP_LIBELLE_COURT, String)
            End If
            If (CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CISP_DATECR, Date)
            If (CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_CISP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CISP_CODE_PK, String)
            End If
            If (Original_CISP_CISP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CISP_CISP_CODE_FK, String)
            End If
            If (Original_CISP_LIBELLE_COURT Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISP_LIBELLE_COURT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CISP_LIBELLE_COURT, String)
            End If
            If (Original_CISP_LIBELLE_LONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CISP_LIBELLE_LONG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CISP_DATECR, Date)
            If (Original_CISP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CISP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYCDF_SYNCODIFTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYCDF_SYNCODIF"
            tableMapping.ColumnMappings.Add("SYCDF_NOM_PK", "SYCDF_NOM_PK")
            tableMapping.ColumnMappings.Add("SYCDF_CDF_NUMERO_FK_PK", "SYCDF_CDF_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("SYCDF_CDF_CODE_FK", "SYCDF_CDF_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYCDF_SYNCODIF] WHERE (([SYCDF_NOM_PK] = @Original_SYCDF"& _ 
                "_NOM_PK) AND ([SYCDF_CDF_NUMERO_FK_PK] = @Original_SYCDF_CDF_NUMERO_FK_PK) AND ("& _ 
                "[SYCDF_CDF_CODE_FK] = @Original_SYCDF_CDF_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCDF_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCDF_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYCDF_SYNCODIF] ([SYCDF_NOM_PK], [SYCDF_CDF_NUMERO_FK_PK"& _ 
                "], [SYCDF_CDF_CODE_FK]) VALUES (@SYCDF_NOM_PK, @SYCDF_CDF_NUMERO_FK_PK, @SYCDF_C"& _ 
                "DF_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYCDF_NOM_PK, SYCDF_CDF_NUMERO_FK_PK, SYCDF_CDF_CODE_FK FRO"& _ 
                "M THERIAQUE.SYCDF_SYNCODIF WHERE (SYCDF_CDF_NUMERO_FK_PK = @SYCDF_CDF_NUMERO_FK_"& _ 
                "PK) AND (SYCDF_NOM_PK = @SYCDF_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYCDF_SYNCODIF] SET [SYCDF_NOM_PK] = @SYCDF_NOM_PK, [SYCDF_CD"& _ 
                "F_NUMERO_FK_PK] = @SYCDF_CDF_NUMERO_FK_PK, [SYCDF_CDF_CODE_FK] = @SYCDF_CDF_CODE"& _ 
                "_FK WHERE (([SYCDF_NOM_PK] = @Original_SYCDF_NOM_PK) AND ([SYCDF_CDF_NUMERO_FK_P"& _ 
                "K] = @Original_SYCDF_CDF_NUMERO_FK_PK) AND ([SYCDF_CDF_CODE_FK] = @Original_SYCD"& _ 
                "F_CDF_CODE_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYCDF_NOM_PK, SYCDF_CDF_NUMERO_FK_PK, SYCDF_CDF_CODE_FK"& _ 
                " FROM THERIAQUE.SYCDF_SYNCODIF WHERE (SYCDF_CDF_NUMERO_FK_PK = @SYCDF_CDF_NUMERO"& _ 
                "_FK_PK) AND (SYCDF_NOM_PK = @SYCDF_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCDF_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYCDF_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYCDF_NOM_PK, SYCDF_CDF_NUMERO_FK_PK, SYCDF_CDF_CODE_FK FROM THERIAQUE.SYC" & _
                "DF_SYNCODIF"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYCDF_NOM_PK, SYCDF_CDF_NUMERO_FK_PK, SYCDF_CDF_CODE_FK FROM THERIAQUE.SYC" & _
                "DF_SYNCODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  SYCDF_CDF_NUMERO_FK_PK = @SYCDF_CDF_NUMERO_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and SYCDF_" & _
                "CDF_CODE_FK  = @SYCDF_CDF_CODE_FK "
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYCDF_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYCDF_CDF_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.SYCDF_SYNCODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.SYCDF_SYNCODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.SYCDF_SYNCODIFDataTable = New dsTheriaque.SYCDF_SYNCODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.SYCDF_SYNCODIFDataTable, ByVal SYCDF_CDF_NUMERO_FK_PK As String, ByVal SYCDF_CDF_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (SYCDF_CDF_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SYCDF_CDF_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYCDF_CDF_NUMERO_FK_PK As String, ByVal SYCDF_CDF_CODE_FK As String) As dsTheriaque.SYCDF_SYNCODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (SYCDF_CDF_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SYCDF_CDF_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque.SYCDF_SYNCODIFDataTable = New dsTheriaque.SYCDF_SYNCODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.SYCDF_SYNCODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "SYCDF_SYNCODIF")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYCDF_NOM_PK As String, ByVal Original_SYCDF_CDF_NUMERO_FK_PK As String, ByVal Original_SYCDF_CDF_CODE_FK As String) As Integer
            If (Original_SYCDF_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCDF_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYCDF_NOM_PK, String)
            End If
            If (Original_SYCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_SYCDF_CDF_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCDF_CDF_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYCDF_CDF_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYCDF_NOM_PK As String, ByVal SYCDF_CDF_NUMERO_FK_PK As String, ByVal SYCDF_CDF_CODE_FK As String) As Integer
            If (SYCDF_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYCDF_NOM_PK, String)
            End If
            If (SYCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (SYCDF_CDF_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYCDF_CDF_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYCDF_NOM_PK As String, ByVal SYCDF_CDF_NUMERO_FK_PK As String, ByVal SYCDF_CDF_CODE_FK As String, ByVal Original_SYCDF_NOM_PK As String, ByVal Original_SYCDF_CDF_NUMERO_FK_PK As String, ByVal Original_SYCDF_CDF_CODE_FK As String) As Integer
            If (SYCDF_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYCDF_NOM_PK, String)
            End If
            If (SYCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (SYCDF_CDF_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYCDF_CDF_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYCDF_CDF_CODE_FK, String)
            End If
            If (Original_SYCDF_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCDF_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYCDF_NOM_PK, String)
            End If
            If (Original_SYCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SYCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_SYCDF_CDF_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYCDF_CDF_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SYCDF_CDF_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IDVO_IDENT_VOIETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IDVO_IDENT_VOIE"
            tableMapping.ColumnMappings.Add("IDVO_CDF_NUMERO_FK_PK", "IDVO_CDF_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("IDVO_CDF_CODE_FK_PK", "IDVO_CDF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IDVO_CODE_VOIE", "IDVO_CODE_VOIE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IDVO_IDENT_VOIE] WHERE (([IDVO_CDF_NUMERO_FK_PK] = @Orig" & _
                "inal_IDVO_CDF_NUMERO_FK_PK) AND ([IDVO_CDF_CODE_FK_PK] = @Original_IDVO_CDF_CODE" & _
                "_FK_PK) AND ((@IsNull_IDVO_CODE_VOIE = 1 AND [IDVO_CODE_VOIE] IS NULL) OR ([IDVO" & _
                "_CODE_VOIE] = @Original_IDVO_CODE_VOIE)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDVO_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDVO_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_IDVO_CODE_VOIE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CODE_VOIE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDVO_CODE_VOIE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CODE_VOIE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IDVO_IDENT_VOIE] ([IDVO_CDF_NUMERO_FK_PK], [IDVO_CDF_COD" & _
                "E_FK_PK], [IDVO_CODE_VOIE]) VALUES (@IDVO_CDF_NUMERO_FK_PK, @IDVO_CDF_CODE_FK_PK" & _
                ", @IDVO_CODE_VOIE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDVO_CDF_NUMERO_FK_PK, IDVO_CDF_CODE_FK_PK, IDVO_COD" & _
                "E_VOIE FROM THERIAQUE.IDVO_IDENT_VOIE WHERE (IDVO_CDF_CODE_FK_PK = @IDVO_CDF_COD" & _
                "E_FK_PK) AND (IDVO_CDF_NUMERO_FK_PK = @IDVO_CDF_NUMERO_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CODE_VOIE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CODE_VOIE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IDVO_IDENT_VOIE] SET [IDVO_CDF_NUMERO_FK_PK] = @IDVO_CDF_NUME" & _
                "RO_FK_PK, [IDVO_CDF_CODE_FK_PK] = @IDVO_CDF_CODE_FK_PK, [IDVO_CODE_VOIE] = @IDVO" & _
                "_CODE_VOIE WHERE (([IDVO_CDF_NUMERO_FK_PK] = @Original_IDVO_CDF_NUMERO_FK_PK) AN" & _
                "D ([IDVO_CDF_CODE_FK_PK] = @Original_IDVO_CDF_CODE_FK_PK) AND ((@IsNull_IDVO_COD" & _
                "E_VOIE = 1 AND [IDVO_CODE_VOIE] IS NULL) OR ([IDVO_CODE_VOIE] = @Original_IDVO_C" & _
                "ODE_VOIE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDVO_CDF_NUMERO_FK_PK, IDVO_CDF_CODE_FK_PK, IDVO_CODE_VOIE " & _
                "FROM THERIAQUE.IDVO_IDENT_VOIE WHERE (IDVO_CDF_CODE_FK_PK = @IDVO_CDF_CODE_FK_PK" & _
                ") AND (IDVO_CDF_NUMERO_FK_PK = @IDVO_CDF_NUMERO_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CODE_VOIE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CODE_VOIE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDVO_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDVO_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_IDVO_CODE_VOIE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CODE_VOIE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDVO_CODE_VOIE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CODE_VOIE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IDVO_CDF_NUMERO_FK_PK, IDVO_CDF_CODE_FK_PK, IDVO_CODE_VOIE FROM THERIAQUE." & _
                "IDVO_IDENT_VOIE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IDVO_CDF_NUMERO_FK_PK, IDVO_CDF_CODE_FK_PK, IDVO_CODE_VOIE FROM THERIAQUE." & _
                "IDVO_IDENT_VOIE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where IDVO_CDF_NUMERO_FK_PK = @IDVO_CDF_NUMERO_FK_PK and  IDVO_" & _
                "CDF_CODE_FK_PK =@IDVO_CDF_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDVO_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "IDVO_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.IDVO_IDENT_VOIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.IDVO_IDENT_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.IDVO_IDENT_VOIEDataTable = New dsTheriaque.IDVO_IDENT_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.IDVO_IDENT_VOIEDataTable, ByVal IDVO_CDF_NUMERO_FK_PK As String, ByVal IDVO_CDF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IDVO_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDVO_CDF_NUMERO_FK_PK, String)
            End If
            If (IDVO_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IDVO_CDF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IDVO_CDF_NUMERO_FK_PK As String, ByVal IDVO_CDF_CODE_FK_PK As String) As dsTheriaque.IDVO_IDENT_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (IDVO_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDVO_CDF_NUMERO_FK_PK, String)
            End If
            If (IDVO_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IDVO_CDF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.IDVO_IDENT_VOIEDataTable = New dsTheriaque.IDVO_IDENT_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.IDVO_IDENT_VOIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "IDVO_IDENT_VOIE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IDVO_CDF_NUMERO_FK_PK As String, ByVal Original_IDVO_CDF_CODE_FK_PK As String, ByVal Original_IDVO_CODE_VOIE As String) As Integer
            If (Original_IDVO_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_IDVO_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDVO_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_IDVO_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_IDVO_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IDVO_CDF_CODE_FK_PK, String)
            End If
            If (Original_IDVO_CODE_VOIE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IDVO_CODE_VOIE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IDVO_CDF_NUMERO_FK_PK As String, ByVal IDVO_CDF_CODE_FK_PK As String, ByVal IDVO_CODE_VOIE As String) As Integer
            If (IDVO_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDVO_CDF_NUMERO_FK_PK, String)
            End If
            If (IDVO_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDVO_CDF_CODE_FK_PK, String)
            End If
            If (IDVO_CODE_VOIE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDVO_CODE_VOIE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IDVO_CDF_NUMERO_FK_PK As String, ByVal IDVO_CDF_CODE_FK_PK As String, ByVal IDVO_CODE_VOIE As String, ByVal Original_IDVO_CDF_NUMERO_FK_PK As String, ByVal Original_IDVO_CDF_CODE_FK_PK As String, ByVal Original_IDVO_CODE_VOIE As String) As Integer
            If (IDVO_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDVO_CDF_NUMERO_FK_PK, String)
            End If
            If (IDVO_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("IDVO_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDVO_CDF_CODE_FK_PK, String)
            End If
            If (IDVO_CODE_VOIE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDVO_CODE_VOIE, String)
            End If
            If (Original_IDVO_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_IDVO_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IDVO_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_IDVO_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_IDVO_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IDVO_CDF_CODE_FK_PK, String)
            End If
            If (Original_IDVO_CODE_VOIE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IDVO_CODE_VOIE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CDFNP_CODIFTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFNP_CODIF"
            tableMapping.ColumnMappings.Add("CDFNP_NUMERO_FK_PK", "CDFNP_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("CDFNP_CDF_CODE_FK_PK", "CDFNP_CDF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CDFNP_REF_CODE_FK_PK", "CDFNP_REF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CDFNP_NUMORD", "CDFNP_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CDFNP_CODIF] WHERE (([CDFNP_NUMERO_FK_PK] = @Original_CD"& _ 
                "FNP_NUMERO_FK_PK) AND ([CDFNP_CDF_CODE_FK_PK] = @Original_CDFNP_CDF_CODE_FK_PK) "& _ 
                "AND ([CDFNP_REF_CODE_FK_PK] = @Original_CDFNP_REF_CODE_FK_PK) AND ((@IsNull_CDFN"& _ 
                "P_NUMORD = 1 AND [CDFNP_NUMORD] IS NULL) OR ([CDFNP_NUMORD] = @Original_CDFNP_NU"& _ 
                "MORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_REF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_REF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFNP_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CDFNP_CODIF] ([CDFNP_NUMERO_FK_PK], [CDFNP_CDF_CODE_FK_P"& _ 
                "K], [CDFNP_REF_CODE_FK_PK], [CDFNP_NUMORD]) VALUES (@CDFNP_NUMERO_FK_PK, @CDFNP_"& _ 
                "CDF_CODE_FK_PK, @CDFNP_REF_CODE_FK_PK, @CDFNP_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDFNP_NUMERO_FK_P"& _ 
                "K, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_CODE_FK_PK, CDFNP_NUMORD FROM THERIAQUE.CDFNP"& _ 
                "_CODIF WHERE (CDFNP_CDF_CODE_FK_PK = @CDFNP_CDF_CODE_FK_PK) AND (CDFNP_NUMERO_FK"& _ 
                "_PK = @CDFNP_NUMERO_FK_PK) AND (CDFNP_REF_CODE_FK_PK = @CDFNP_REF_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_REF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_REF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CDFNP_CODIF] SET [CDFNP_NUMERO_FK_PK] = @CDFNP_NUMERO_FK_PK, "& _ 
                "[CDFNP_CDF_CODE_FK_PK] = @CDFNP_CDF_CODE_FK_PK, [CDFNP_REF_CODE_FK_PK] = @CDFNP_"& _ 
                "REF_CODE_FK_PK, [CDFNP_NUMORD] = @CDFNP_NUMORD WHERE (([CDFNP_NUMERO_FK_PK] = @O"& _ 
                "riginal_CDFNP_NUMERO_FK_PK) AND ([CDFNP_CDF_CODE_FK_PK] = @Original_CDFNP_CDF_CO"& _ 
                "DE_FK_PK) AND ([CDFNP_REF_CODE_FK_PK] = @Original_CDFNP_REF_CODE_FK_PK) AND ((@I"& _ 
                "sNull_CDFNP_NUMORD = 1 AND [CDFNP_NUMORD] IS NULL) OR ([CDFNP_NUMORD] = @Origina"& _ 
                "l_CDFNP_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDFNP_NUMERO_FK_PK, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_C"& _ 
                "ODE_FK_PK, CDFNP_NUMORD FROM THERIAQUE.CDFNP_CODIF WHERE (CDFNP_CDF_CODE_FK_PK ="& _ 
                " @CDFNP_CDF_CODE_FK_PK) AND (CDFNP_NUMERO_FK_PK = @CDFNP_NUMERO_FK_PK) AND (CDFN"& _ 
                "P_REF_CODE_FK_PK = @CDFNP_REF_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_REF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_REF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_REF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_REF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFNP_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFNP_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFNP_NUMERO_FK_PK, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_CODE_FK_PK, CDFNP_NUMO" & _
                "RD FROM THERIAQUE.CDFNP_CODIF"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFNP_NUMERO_FK_PK, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_CODE_FK_PK, CDFNP_NUMO" & _
                "RD FROM THERIAQUE.CDFNP_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CDFNP_NUMERO_FK_PK =@CDFNP_NUMERO_FK_PK and" & _
                " CDFNP_CDF_CODE_FK_PK = @CDFNP_CDF_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CDFNP_NUMERO_FK_PK, CDFNP_CDF_CODE_FK_PK, CDFNP_REF_CODE_FK_PK, CDFNP_NUMO" & _
                "RD FROM THERIAQUE.CDFNP_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CDFNP_NUMERO_FK_PK = @CDFNP_NUMERO_FK_PK " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "and" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CDFNP_REF_CODE_FK_PK = @CDFNP_REF_CODE_FK_PK"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFNP_REF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDFNP_REF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CDFNP_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CDFNP_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CDFNP_CODIFDataTable = New dsTheriaque.CDFNP_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CDFNP_CODIFDataTable, ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_CDF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFNP_NUMERO_FK_PK, String)
            End If
            If (CDFNP_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFNP_CDF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_CDF_CODE_FK_PK As String) As dsTheriaque.CDFNP_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFNP_NUMERO_FK_PK, String)
            End If
            If (CDFNP_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFNP_CDF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDFNP_CODIFDataTable = New dsTheriaque.CDFNP_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCodeOrphanet(ByVal dataTable As dsTheriaque.CDFNP_CODIFDataTable, ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_REF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFNP_NUMERO_FK_PK, String)
            End If
            If (CDFNP_REF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_REF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFNP_REF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCodeOrphanet(ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_REF_CODE_FK_PK As String) As dsTheriaque.CDFNP_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFNP_NUMERO_FK_PK, String)
            End If
            If (CDFNP_REF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_REF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFNP_REF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDFNP_CODIFDataTable = New dsTheriaque.CDFNP_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CDFNP_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CDFNP_CODIF")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDFNP_NUMERO_FK_PK As String, ByVal Original_CDFNP_CDF_CODE_FK_PK As String, ByVal Original_CDFNP_REF_CODE_FK_PK As String, ByVal Original_CDFNP_NUMORD As System.Nullable(Of Short)) As Integer
            If (Original_CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDFNP_NUMERO_FK_PK, String)
            End If
            If (Original_CDFNP_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFNP_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDFNP_CDF_CODE_FK_PK, String)
            End If
            If (Original_CDFNP_REF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFNP_REF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CDFNP_REF_CODE_FK_PK, String)
            End If
            If (Original_CDFNP_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CDFNP_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_CDF_CODE_FK_PK As String, ByVal CDFNP_REF_CODE_FK_PK As String, ByVal CDFNP_NUMORD As System.Nullable(Of Short)) As Integer
            If (CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFNP_NUMERO_FK_PK, String)
            End If
            If (CDFNP_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFNP_CDF_CODE_FK_PK, String)
            End If
            If (CDFNP_REF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_REF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFNP_REF_CODE_FK_PK, String)
            End If
            If (CDFNP_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDFNP_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFNP_NUMERO_FK_PK As String, ByVal CDFNP_CDF_CODE_FK_PK As String, ByVal CDFNP_REF_CODE_FK_PK As String, ByVal CDFNP_NUMORD As System.Nullable(Of Short), ByVal Original_CDFNP_NUMERO_FK_PK As String, ByVal Original_CDFNP_CDF_CODE_FK_PK As String, ByVal Original_CDFNP_REF_CODE_FK_PK As String, ByVal Original_CDFNP_NUMORD As System.Nullable(Of Short)) As Integer
            If (CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDFNP_NUMERO_FK_PK, String)
            End If
            If (CDFNP_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDFNP_CDF_CODE_FK_PK, String)
            End If
            If (CDFNP_REF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFNP_REF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDFNP_REF_CODE_FK_PK, String)
            End If
            If (CDFNP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDFNP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_CDFNP_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFNP_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CDFNP_NUMERO_FK_PK, String)
            End If
            If (Original_CDFNP_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFNP_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CDFNP_CDF_CODE_FK_PK, String)
            End If
            If (Original_CDFNP_REF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFNP_REF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CDFNP_REF_CODE_FK_PK, String)
            End If
            If (Original_CDFNP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CDFNP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CDFTE_TABLE_EQUIVALENCETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFTE_TABLE_EQUIVALENCE"
            tableMapping.ColumnMappings.Add("CDFTE_NUMERO_PK", "CDFTE_NUMERO_PK")
            tableMapping.ColumnMappings.Add("CDFTE_CODE_PK", "CDFTE_CODE_PK")
            tableMapping.ColumnMappings.Add("CDFTE_APPLICABLE", "CDFTE_APPLICABLE")
            tableMapping.ColumnMappings.Add("CDFTE_COEFFICIENT", "CDFTE_COEFFICIENT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CDFTE_TABLE_EQUIVALENCE] WHERE (([CDFTE_NUMERO_PK] = @Or" & _
                "iginal_CDFTE_NUMERO_PK) AND ([CDFTE_CODE_PK] = @Original_CDFTE_CODE_PK) AND ((@I" & _
                "sNull_CDFTE_APPLICABLE = 1 AND [CDFTE_APPLICABLE] IS NULL) OR ([CDFTE_APPLICABLE" & _
                "] = @Original_CDFTE_APPLICABLE)) AND ((@IsNull_CDFTE_COEFFICIENT = 1 AND [CDFTE_" & _
                "COEFFICIENT] IS NULL) OR ([CDFTE_COEFFICIENT] = @Original_CDFTE_COEFFICIENT)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_NUMERO_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFTE_APPLICABLE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_APPLICABLE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_APPLICABLE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFTE_COEFFICIENT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_COEFFICIENT", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_COEFFICIENT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 15, 5, "CDFTE_COEFFICIENT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CDFTE_TABLE_EQUIVALENCE] ([CDFTE_NUMERO_PK], [CDFTE_CODE" & _
                "_PK], [CDFTE_APPLICABLE], [CDFTE_COEFFICIENT]) VALUES (@CDFTE_NUMERO_PK, @CDFTE_" & _
                "CODE_PK, @CDFTE_APPLICABLE, @CDFTE_COEFFICIENT);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDFTE_NUMERO_PK, CDFTE_" & _
                "CODE_PK, CDFTE_APPLICABLE, CDFTE_COEFFICIENT FROM THERIAQUE.CDFTE_TABLE_EQUIVALE" & _
                "NCE WHERE (CDFTE_CODE_PK = @CDFTE_CODE_PK) AND (CDFTE_NUMERO_PK = @CDFTE_NUMERO_" & _
                "PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_APPLICABLE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_COEFFICIENT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 15, 5, "CDFTE_COEFFICIENT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CDFTE_TABLE_EQUIVALENCE] SET [CDFTE_NUMERO_PK] = @CDFTE_NUMER" & _
                "O_PK, [CDFTE_CODE_PK] = @CDFTE_CODE_PK, [CDFTE_APPLICABLE] = @CDFTE_APPLICABLE, " & _
                "[CDFTE_COEFFICIENT] = @CDFTE_COEFFICIENT WHERE (([CDFTE_NUMERO_PK] = @Original_C" & _
                "DFTE_NUMERO_PK) AND ([CDFTE_CODE_PK] = @Original_CDFTE_CODE_PK) AND ((@IsNull_CD" & _
                "FTE_APPLICABLE = 1 AND [CDFTE_APPLICABLE] IS NULL) OR ([CDFTE_APPLICABLE] = @Ori" & _
                "ginal_CDFTE_APPLICABLE)) AND ((@IsNull_CDFTE_COEFFICIENT = 1 AND [CDFTE_COEFFICI" & _
                "ENT] IS NULL) OR ([CDFTE_COEFFICIENT] = @Original_CDFTE_COEFFICIENT)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT " & _
                "CDFTE_NUMERO_PK, CDFTE_CODE_PK, CDFTE_APPLICABLE, CDFTE_COEFFICIENT FROM THERIAQ" & _
                "UE.CDFTE_TABLE_EQUIVALENCE WHERE (CDFTE_CODE_PK = @CDFTE_CODE_PK) AND (CDFTE_NUM" & _
                "ERO_PK = @CDFTE_NUMERO_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_APPLICABLE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_COEFFICIENT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 15, 5, "CDFTE_COEFFICIENT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_NUMERO_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFTE_APPLICABLE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_APPLICABLE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_APPLICABLE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFTE_COEFFICIENT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_COEFFICIENT", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFTE_COEFFICIENT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 15, 5, "CDFTE_COEFFICIENT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFTE_NUMERO_PK, CDFTE_CODE_PK, CDFTE_APPLICABLE, CDFTE_COEFFICIENT FROM T" & _
                "HERIAQUE.CDFTE_TABLE_EQUIVALENCE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFTE_NUMERO_PK, CDFTE_CODE_PK, CDFTE_APPLICABLE, CDFTE_COEFFICIENT FROM T" & _
                "HERIAQUE.CDFTE_TABLE_EQUIVALENCE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CDFTE_NUMERO_PK = @CDFTE_NUMERO_PK and  " & _
                "CDFTE_CODE_PK = @CDFTE_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_NUMERO_PK", System.Data.SqlDbType.VarChar, 2, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFTE_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDFTE_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable = New dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable, ByVal CDFTE_NUMERO_PK As String, ByVal CDFTE_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFTE_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFTE_NUMERO_PK, String)
            End If
            If (CDFTE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFTE_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFTE_NUMERO_PK As String, ByVal CDFTE_CODE_PK As String) As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFTE_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFTE_NUMERO_PK, String)
            End If
            If (CDFTE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFTE_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable = New dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CDFTE_TABLE_EQUIVALENCEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CDFTE_TABLE_EQUIVALENCE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDFTE_NUMERO_PK As String, ByVal Original_CDFTE_CODE_PK As String, ByVal Original_CDFTE_APPLICABLE As String, ByVal Original_CDFTE_COEFFICIENT As System.Nullable(Of Decimal)) As Integer
            If (Original_CDFTE_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFTE_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDFTE_NUMERO_PK, String)
            End If
            If (Original_CDFTE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFTE_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDFTE_CODE_PK, String)
            End If
            If (Original_CDFTE_APPLICABLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDFTE_APPLICABLE, String)
            End If
            If (Original_CDFTE_COEFFICIENT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDFTE_COEFFICIENT.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFTE_NUMERO_PK As String, ByVal CDFTE_CODE_PK As String, ByVal CDFTE_APPLICABLE As String, ByVal CDFTE_COEFFICIENT As System.Nullable(Of Decimal)) As Integer
            If (CDFTE_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFTE_NUMERO_PK, String)
            End If
            If (CDFTE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFTE_CODE_PK, String)
            End If
            If (CDFTE_APPLICABLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFTE_APPLICABLE, String)
            End If
            If (CDFTE_COEFFICIENT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDFTE_COEFFICIENT.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFTE_NUMERO_PK As String, ByVal CDFTE_CODE_PK As String, ByVal CDFTE_APPLICABLE As String, ByVal CDFTE_COEFFICIENT As System.Nullable(Of Decimal), ByVal Original_CDFTE_NUMERO_PK As String, ByVal Original_CDFTE_CODE_PK As String, ByVal Original_CDFTE_APPLICABLE As String, ByVal Original_CDFTE_COEFFICIENT As System.Nullable(Of Decimal)) As Integer
            If (CDFTE_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDFTE_NUMERO_PK, String)
            End If
            If (CDFTE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFTE_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDFTE_CODE_PK, String)
            End If
            If (CDFTE_APPLICABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDFTE_APPLICABLE, String)
            End If
            If (CDFTE_COEFFICIENT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDFTE_COEFFICIENT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_CDFTE_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFTE_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CDFTE_NUMERO_PK, String)
            End If
            If (Original_CDFTE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFTE_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CDFTE_CODE_PK, String)
            End If
            If (Original_CDFTE_APPLICABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CDFTE_APPLICABLE, String)
            End If
            If (Original_CDFTE_COEFFICIENT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CDFTE_COEFFICIENT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CIMCDF_CIM10_CODIFTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CIMCDF_CIM10_CODIF"
            tableMapping.ColumnMappings.Add("CIMCDF_CIM_CODE_FK_PK", "CIMCDF_CIM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CIMCDF_CDF_NUMERO_FK_PK", "CIMCDF_CDF_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("CIMCDF_CDF_CODE_FK_PK", "CIMCDF_CDF_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CIMCDF_CIM10_CODIF] WHERE (([CIMCDF_CIM_CODE_FK_PK] = @O"& _ 
                "riginal_CIMCDF_CIM_CODE_FK_PK) AND ([CIMCDF_CDF_NUMERO_FK_PK] = @Original_CIMCDF"& _ 
                "_CDF_NUMERO_FK_PK) AND ([CIMCDF_CDF_CODE_FK_PK] = @Original_CIMCDF_CDF_CODE_FK_P"& _ 
                "K))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIMCDF_CIM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CIM_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIMCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIMCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CIMCDF_CIM10_CODIF] ([CIMCDF_CIM_CODE_FK_PK], [CIMCDF_CD"& _ 
                "F_NUMERO_FK_PK], [CIMCDF_CDF_CODE_FK_PK]) VALUES (@CIMCDF_CIM_CODE_FK_PK, @CIMCD"& _ 
                "F_CDF_NUMERO_FK_PK, @CIMCDF_CDF_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CIMCDF_CIM_CODE_FK_PK, CIMC"& _ 
                "DF_CDF_NUMERO_FK_PK, CIMCDF_CDF_CODE_FK_PK FROM THERIAQUE.CIMCDF_CIM10_CODIF WHE"& _ 
                "RE (CIMCDF_CDF_CODE_FK_PK = @CIMCDF_CDF_CODE_FK_PK) AND (CIMCDF_CDF_NUMERO_FK_PK"& _ 
                " = @CIMCDF_CDF_NUMERO_FK_PK) AND (CIMCDF_CIM_CODE_FK_PK = @CIMCDF_CIM_CODE_FK_PK"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CIM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CIM_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CIMCDF_CIM10_CODIF] SET [CIMCDF_CIM_CODE_FK_PK] = @CIMCDF_CIM"& _ 
                "_CODE_FK_PK, [CIMCDF_CDF_NUMERO_FK_PK] = @CIMCDF_CDF_NUMERO_FK_PK, [CIMCDF_CDF_C"& _ 
                "ODE_FK_PK] = @CIMCDF_CDF_CODE_FK_PK WHERE (([CIMCDF_CIM_CODE_FK_PK] = @Original_"& _ 
                "CIMCDF_CIM_CODE_FK_PK) AND ([CIMCDF_CDF_NUMERO_FK_PK] = @Original_CIMCDF_CDF_NUM"& _ 
                "ERO_FK_PK) AND ([CIMCDF_CDF_CODE_FK_PK] = @Original_CIMCDF_CDF_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT CIMCDF_CIM_CODE_FK_PK, CIMCDF_CDF_NUMERO_FK_PK, CIMCDF_CDF_CODE_FK_PK FROM "& _ 
                "THERIAQUE.CIMCDF_CIM10_CODIF WHERE (CIMCDF_CDF_CODE_FK_PK = @CIMCDF_CDF_CODE_FK_"& _ 
                "PK) AND (CIMCDF_CDF_NUMERO_FK_PK = @CIMCDF_CDF_NUMERO_FK_PK) AND (CIMCDF_CIM_COD"& _ 
                "E_FK_PK = @CIMCDF_CIM_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CIM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CIM_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIMCDF_CIM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CIM_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIMCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CIMCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CIMCDF_CIM_CODE_FK_PK, CIMCDF_CDF_NUMERO_FK_PK, CIMCDF_CDF_CODE_FK_PK FROM" & _
                " THERIAQUE.CIMCDF_CIM10_CODIF"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CIMCDF_CIM_CODE_FK_PK, CIMCDF_CDF_NUMERO_FK_PK, CIMCDF_CDF_CODE_FK_PK FROM" & _
                " THERIAQUE.CIMCDF_CIM10_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CIMCDF_CDF_NUMERO_FK_PK =@CIMCDF_CDF_NUME" & _
                "RO_FK_PK " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CIMCDF_CDF_CODE_FK_PK = @CIMCDF_CDF_CODE_FK_PK " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CIMCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CIMCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CIMCDF_CIM10_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CIMCDF_CIM10_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CIMCDF_CIM10_CODIFDataTable = New dsTheriaque.CIMCDF_CIM10_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CIMCDF_CIM10_CODIFDataTable, ByVal CIMCDF_CDF_NUMERO_FK_PK As String, ByVal CIMCDF_CDF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CIMCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIMCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CIMCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CIMCDF_CDF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CIMCDF_CDF_NUMERO_FK_PK As String, ByVal CIMCDF_CDF_CODE_FK_PK As String) As dsTheriaque.CIMCDF_CIM10_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CIMCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CIMCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CIMCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CIMCDF_CDF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.CIMCDF_CIM10_CODIFDataTable = New dsTheriaque.CIMCDF_CIM10_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CIMCDF_CIM10_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CIMCDF_CIM10_CODIF")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CIMCDF_CIM_CODE_FK_PK As String, ByVal Original_CIMCDF_CDF_NUMERO_FK_PK As String, ByVal Original_CIMCDF_CDF_CODE_FK_PK As String) As Integer
            If (Original_CIMCDF_CIM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIMCDF_CIM_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CIMCDF_CIM_CODE_FK_PK, String)
            End If
            If (Original_CIMCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIMCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CIMCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_CIMCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIMCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CIMCDF_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CIMCDF_CIM_CODE_FK_PK As String, ByVal CIMCDF_CDF_NUMERO_FK_PK As String, ByVal CIMCDF_CDF_CODE_FK_PK As String) As Integer
            If (CIMCDF_CIM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CIM_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CIMCDF_CIM_CODE_FK_PK, String)
            End If
            If (CIMCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CIMCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CIMCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CIMCDF_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CIMCDF_CIM_CODE_FK_PK As String, ByVal CIMCDF_CDF_NUMERO_FK_PK As String, ByVal CIMCDF_CDF_CODE_FK_PK As String, ByVal Original_CIMCDF_CIM_CODE_FK_PK As String, ByVal Original_CIMCDF_CDF_NUMERO_FK_PK As String, ByVal Original_CIMCDF_CDF_CODE_FK_PK As String) As Integer
            If (CIMCDF_CIM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CIM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CIMCDF_CIM_CODE_FK_PK, String)
            End If
            If (CIMCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CIMCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CIMCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CIMCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CIMCDF_CDF_CODE_FK_PK, String)
            End If
            If (Original_CIMCDF_CIM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIMCDF_CIM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CIMCDF_CIM_CODE_FK_PK, String)
            End If
            If (Original_CIMCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIMCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CIMCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_CIMCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CIMCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CIMCDF_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class NAIN_NATURE_INDICATIONTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NAIN_NATURE_INDICATION"
            tableMapping.ColumnMappings.Add("NAIN_CODE_PK", "NAIN_CODE_PK")
            tableMapping.ColumnMappings.Add("NAIN_MALADIE_RARE", "NAIN_MALADIE_RARE")
            tableMapping.ColumnMappings.Add("NAIN_TEXTE", "NAIN_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[NAIN_NATURE_INDICATION] WHERE (([NAIN_CODE_PK] = @Origin" & _
                "al_NAIN_CODE_PK) AND ((@IsNull_NAIN_MALADIE_RARE = 1 AND [NAIN_MALADIE_RARE] IS " & _
                "NULL) OR ([NAIN_MALADIE_RARE] = @Original_NAIN_MALADIE_RARE)) AND ((@IsNull_NAIN" & _
                "_TEXTE = 1 AND [NAIN_TEXTE] IS NULL) OR ([NAIN_TEXTE] = @Original_NAIN_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_NAIN_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_NAIN_MALADIE_RARE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_NAIN_MALADIE_RARE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_NAIN_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_NAIN_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[NAIN_NATURE_INDICATION] ([NAIN_CODE_PK], [NAIN_MALADIE_R" & _
                "ARE], [NAIN_TEXTE]) VALUES (@NAIN_CODE_PK, @NAIN_MALADIE_RARE, @NAIN_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SE" & _
                "LECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM THERIAQUE.NAIN_NATURE_INDI" & _
                "CATION WHERE (NAIN_CODE_PK = @NAIN_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_MALADIE_RARE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[NAIN_NATURE_INDICATION] SET [NAIN_CODE_PK] = @NAIN_CODE_PK, [" & _
                "NAIN_MALADIE_RARE] = @NAIN_MALADIE_RARE, [NAIN_TEXTE] = @NAIN_TEXTE WHERE (([NAI" & _
                "N_CODE_PK] = @Original_NAIN_CODE_PK) AND ((@IsNull_NAIN_MALADIE_RARE = 1 AND [NA" & _
                "IN_MALADIE_RARE] IS NULL) OR ([NAIN_MALADIE_RARE] = @Original_NAIN_MALADIE_RARE)" & _
                ") AND ((@IsNull_NAIN_TEXTE = 1 AND [NAIN_TEXTE] IS NULL) OR ([NAIN_TEXTE] = @Ori" & _
                "ginal_NAIN_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM TH" & _
                "ERIAQUE.NAIN_NATURE_INDICATION WHERE (NAIN_CODE_PK = @NAIN_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_MALADIE_RARE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_NAIN_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_NAIN_MALADIE_RARE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_NAIN_MALADIE_RARE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_NAIN_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_NAIN_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM THERIAQUE.NAIN_NATURE_IND" & _
                "ICATION"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM THERIAQUE.NAIN_NATURE_IND" & _
                "ICATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where NAIN_CODE_PK = @NAIN_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@NAIN_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.NAIN_NATURE_INDICATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.NAIN_NATURE_INDICATIONDataTable = New dsTheriaque.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.NAIN_NATURE_INDICATIONDataTable, ByVal NAIN_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(NAIN_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal NAIN_CODE_PK As String) As dsTheriaque.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(NAIN_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque.NAIN_NATURE_INDICATIONDataTable = New dsTheriaque.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.NAIN_NATURE_INDICATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "NAIN_NATURE_INDICATION")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_NAIN_CODE_PK As String, ByVal Original_NAIN_MALADIE_RARE As String, ByVal Original_NAIN_TEXTE As String) As Integer
            If (Original_NAIN_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_NAIN_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_NAIN_CODE_PK, String)
            End If
            If (Original_NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NAIN_MALADIE_RARE, String)
            End If
            If (Original_NAIN_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NAIN_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal NAIN_CODE_PK As String, ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String) As Integer
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NAIN_CODE_PK, String)
            End If
            If (NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NAIN_MALADIE_RARE, String)
            End If
            If (NAIN_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NAIN_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal NAIN_CODE_PK As String, ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String, ByVal Original_NAIN_CODE_PK As String, ByVal Original_NAIN_MALADIE_RARE As String, ByVal Original_NAIN_TEXTE As String) As Integer
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NAIN_CODE_PK, String)
            End If
            If (NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NAIN_MALADIE_RARE, String)
            End If
            If (NAIN_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NAIN_TEXTE, String)
            End If
            If (Original_NAIN_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_NAIN_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_NAIN_CODE_PK, String)
            End If
            If (Original_NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_NAIN_MALADIE_RARE, String)
            End If
            If (Original_NAIN_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_NAIN_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CDFIUP_INFO_UNITE_PRISETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFIUP_INFO_UNITE_PRISE"
            tableMapping.ColumnMappings.Add("CDFIUP_NUMERO_PK", "CDFIUP_NUMERO_PK")
            tableMapping.ColumnMappings.Add("CDFIUP_CODE_PK", "CDFIUP_CODE_PK")
            tableMapping.ColumnMappings.Add("CDFIUP_APPLICABLE", "CDFIUP_APPLICABLE")
            tableMapping.ColumnMappings.Add("CDFIUP_DONANTH_CDF_CODE_FK", "CDFIUP_DONANTH_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("CDFIUP_COEFDUR_CDF_CODE_FK", "CDFIUP_COEFDUR_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("CDFIUP_COEFDUR_CDF_NUM_FK", "CDFIUP_COEFDUR_CDF_NUM_FK")
            tableMapping.ColumnMappings.Add("CDFIUP_COEFVOL_CDF_CODE_FK", "CDFIUP_COEFVOL_CDF_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CDFIUP_INFO_UNITE_PRISE] WHERE (([CDFIUP_NUMERO_PK] = @O"& _ 
                "riginal_CDFIUP_NUMERO_PK) AND ([CDFIUP_CODE_PK] = @Original_CDFIUP_CODE_PK) AND "& _ 
                "((@IsNull_CDFIUP_APPLICABLE = 1 AND [CDFIUP_APPLICABLE] IS NULL) OR ([CDFIUP_APP"& _ 
                "LICABLE] = @Original_CDFIUP_APPLICABLE)) AND ((@IsNull_CDFIUP_DONANTH_CDF_CODE_F"& _ 
                "K = 1 AND [CDFIUP_DONANTH_CDF_CODE_FK] IS NULL) OR ([CDFIUP_DONANTH_CDF_CODE_FK]"& _ 
                " = @Original_CDFIUP_DONANTH_CDF_CODE_FK)) AND ((@IsNull_CDFIUP_COEFDUR_CDF_CODE_"& _ 
                "FK = 1 AND [CDFIUP_COEFDUR_CDF_CODE_FK] IS NULL) OR ([CDFIUP_COEFDUR_CDF_CODE_FK"& _ 
                "] = @Original_CDFIUP_COEFDUR_CDF_CODE_FK)) AND ((@IsNull_CDFIUP_COEFDUR_CDF_NUM_"& _ 
                "FK = 1 AND [CDFIUP_COEFDUR_CDF_NUM_FK] IS NULL) OR ([CDFIUP_COEFDUR_CDF_NUM_FK] "& _ 
                "= @Original_CDFIUP_COEFDUR_CDF_NUM_FK)) AND ((@IsNull_CDFIUP_COEFVOL_CDF_CODE_FK"& _ 
                " = 1 AND [CDFIUP_COEFVOL_CDF_CODE_FK] IS NULL) OR ([CDFIUP_COEFVOL_CDF_CODE_FK] "& _ 
                "= @Original_CDFIUP_COEFVOL_CDF_CODE_FK)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_NUMERO_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_APPLICABLE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_APPLICABLE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_APPLICABLE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_DONANTH_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_DONANTH_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_DONANTH_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_DONANTH_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CDFIUP_INFO_UNITE_PRISE] ([CDFIUP_NUMERO_PK], [CDFIUP_CO"& _ 
                "DE_PK], [CDFIUP_APPLICABLE], [CDFIUP_DONANTH_CDF_CODE_FK], [CDFIUP_COEFDUR_CDF_C"& _ 
                "ODE_FK], [CDFIUP_COEFDUR_CDF_NUM_FK], [CDFIUP_COEFVOL_CDF_CODE_FK]) VALUES (@CDF"& _ 
                "IUP_NUMERO_PK, @CDFIUP_CODE_PK, @CDFIUP_APPLICABLE, @CDFIUP_DONANTH_CDF_CODE_FK,"& _ 
                " @CDFIUP_COEFDUR_CDF_CODE_FK, @CDFIUP_COEFDUR_CDF_NUM_FK, @CDFIUP_COEFVOL_CDF_CO"& _ 
                "DE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDFIUP_NUMERO_PK, CDFIUP_CODE_PK, CDFIUP_APPLICABLE, CDFIUP_DONA"& _ 
                "NTH_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_NUM_FK, CDFIUP_C"& _ 
                "OEFVOL_CDF_CODE_FK FROM THERIAQUE.CDFIUP_INFO_UNITE_PRISE WHERE (CDFIUP_CODE_PK "& _ 
                "= @CDFIUP_CODE_PK) AND (CDFIUP_NUMERO_PK = @CDFIUP_NUMERO_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_NUMERO_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_APPLICABLE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_DONANTH_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_DONANTH_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CDFIUP_INFO_UNITE_PRISE] SET [CDFIUP_NUMERO_PK] = @CDFIUP_NUM"& _ 
                "ERO_PK, [CDFIUP_CODE_PK] = @CDFIUP_CODE_PK, [CDFIUP_APPLICABLE] = @CDFIUP_APPLIC"& _ 
                "ABLE, [CDFIUP_DONANTH_CDF_CODE_FK] = @CDFIUP_DONANTH_CDF_CODE_FK, [CDFIUP_COEFDU"& _ 
                "R_CDF_CODE_FK] = @CDFIUP_COEFDUR_CDF_CODE_FK, [CDFIUP_COEFDUR_CDF_NUM_FK] = @CDF"& _ 
                "IUP_COEFDUR_CDF_NUM_FK, [CDFIUP_COEFVOL_CDF_CODE_FK] = @CDFIUP_COEFVOL_CDF_CODE_"& _ 
                "FK WHERE (([CDFIUP_NUMERO_PK] = @Original_CDFIUP_NUMERO_PK) AND ([CDFIUP_CODE_PK"& _ 
                "] = @Original_CDFIUP_CODE_PK) AND ((@IsNull_CDFIUP_APPLICABLE = 1 AND [CDFIUP_AP"& _ 
                "PLICABLE] IS NULL) OR ([CDFIUP_APPLICABLE] = @Original_CDFIUP_APPLICABLE)) AND ("& _ 
                "(@IsNull_CDFIUP_DONANTH_CDF_CODE_FK = 1 AND [CDFIUP_DONANTH_CDF_CODE_FK] IS NULL"& _ 
                ") OR ([CDFIUP_DONANTH_CDF_CODE_FK] = @Original_CDFIUP_DONANTH_CDF_CODE_FK)) AND "& _ 
                "((@IsNull_CDFIUP_COEFDUR_CDF_CODE_FK = 1 AND [CDFIUP_COEFDUR_CDF_CODE_FK] IS NUL"& _ 
                "L) OR ([CDFIUP_COEFDUR_CDF_CODE_FK] = @Original_CDFIUP_COEFDUR_CDF_CODE_FK)) AND"& _ 
                " ((@IsNull_CDFIUP_COEFDUR_CDF_NUM_FK = 1 AND [CDFIUP_COEFDUR_CDF_NUM_FK] IS NULL"& _ 
                ") OR ([CDFIUP_COEFDUR_CDF_NUM_FK] = @Original_CDFIUP_COEFDUR_CDF_NUM_FK)) AND (("& _ 
                "@IsNull_CDFIUP_COEFVOL_CDF_CODE_FK = 1 AND [CDFIUP_COEFVOL_CDF_CODE_FK] IS NULL)"& _ 
                " OR ([CDFIUP_COEFVOL_CDF_CODE_FK] = @Original_CDFIUP_COEFVOL_CDF_CODE_FK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT CDFIUP_NUMERO_PK, CDFIUP_CODE_PK, CDFIUP_APPLICABLE, CDFIUP_DONANTH_CDF_COD"& _ 
                "E_FK, CDFIUP_COEFDUR_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_NUM_FK, CDFIUP_COEFVOL_CDF_"& _ 
                "CODE_FK FROM THERIAQUE.CDFIUP_INFO_UNITE_PRISE WHERE (CDFIUP_CODE_PK = @CDFIUP_C"& _ 
                "ODE_PK) AND (CDFIUP_NUMERO_PK = @CDFIUP_NUMERO_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_NUMERO_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_APPLICABLE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_DONANTH_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_DONANTH_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_NUMERO_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_NUMERO_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_APPLICABLE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_APPLICABLE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_APPLICABLE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_APPLICABLE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_DONANTH_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_DONANTH_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_DONANTH_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_DONANTH_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFDUR_CDF_NUM_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_COEFVOL_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFIUP_NUMERO_PK, CDFIUP_CODE_PK, CDFIUP_APPLICABLE, CDFIUP_DONANTH_CDF_CO" & _
                "DE_FK, CDFIUP_COEFDUR_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_NUM_FK, CDFIUP_COEFVOL_CDF" & _
                "_CODE_FK FROM THERIAQUE.CDFIUP_INFO_UNITE_PRISE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFIUP_NUMERO_PK, CDFIUP_CODE_PK, CDFIUP_APPLICABLE, CDFIUP_DONANTH_CDF_CO" & _
                "DE_FK, CDFIUP_COEFDUR_CDF_CODE_FK, CDFIUP_COEFDUR_CDF_NUM_FK, CDFIUP_COEFVOL_CDF" & _
                "_CODE_FK FROM THERIAQUE.CDFIUP_INFO_UNITE_PRISE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CDFIUP_CODE_PK =@CDFIUP_C" & _
                "ODE_PK " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " CDFIUP_NUMERO_PK = @CDFIUP_NUMERO_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFIUP_NUMERO_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDFIUP_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable = New dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable, ByVal CDFIUP_CODE_PK As String, ByVal CDFIUP_NUMERO_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFIUP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFIUP_CODE_PK, String)
            End If
            If (CDFIUP_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFIUP_NUMERO_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFIUP_CODE_PK As String, ByVal CDFIUP_NUMERO_PK As String) As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFIUP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFIUP_CODE_PK, String)
            End If
            If (CDFIUP_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFIUP_NUMERO_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable = New dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CDFIUP_INFO_UNITE_PRISEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CDFIUP_INFO_UNITE_PRISE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDFIUP_NUMERO_PK As String, ByVal Original_CDFIUP_CODE_PK As String, ByVal Original_CDFIUP_APPLICABLE As String, ByVal Original_CDFIUP_DONANTH_CDF_CODE_FK As String, ByVal Original_CDFIUP_COEFDUR_CDF_CODE_FK As String, ByVal Original_CDFIUP_COEFDUR_CDF_NUM_FK As String, ByVal Original_CDFIUP_COEFVOL_CDF_CODE_FK As String) As Integer
            If (Original_CDFIUP_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFIUP_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDFIUP_NUMERO_PK, String)
            End If
            If (Original_CDFIUP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFIUP_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDFIUP_CODE_PK, String)
            End If
            If (Original_CDFIUP_APPLICABLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDFIUP_APPLICABLE, String)
            End If
            If (Original_CDFIUP_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDFIUP_DONANTH_CDF_CODE_FK, String)
            End If
            If (Original_CDFIUP_COEFDUR_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CDFIUP_COEFDUR_CDF_CODE_FK, String)
            End If
            If (Original_CDFIUP_COEFDUR_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CDFIUP_COEFDUR_CDF_NUM_FK, String)
            End If
            If (Original_CDFIUP_COEFVOL_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_CDFIUP_COEFVOL_CDF_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFIUP_NUMERO_PK As String, ByVal CDFIUP_CODE_PK As String, ByVal CDFIUP_APPLICABLE As String, ByVal CDFIUP_DONANTH_CDF_CODE_FK As String, ByVal CDFIUP_COEFDUR_CDF_CODE_FK As String, ByVal CDFIUP_COEFDUR_CDF_NUM_FK As String, ByVal CDFIUP_COEFVOL_CDF_CODE_FK As String) As Integer
            If (CDFIUP_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFIUP_NUMERO_PK, String)
            End If
            If (CDFIUP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFIUP_CODE_PK, String)
            End If
            If (CDFIUP_APPLICABLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFIUP_APPLICABLE, String)
            End If
            If (CDFIUP_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDFIUP_DONANTH_CDF_CODE_FK, String)
            End If
            If (CDFIUP_COEFDUR_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CDFIUP_COEFDUR_CDF_CODE_FK, String)
            End If
            If (CDFIUP_COEFDUR_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CDFIUP_COEFDUR_CDF_NUM_FK, String)
            End If
            If (CDFIUP_COEFVOL_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CDFIUP_COEFVOL_CDF_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFIUP_NUMERO_PK As String, ByVal CDFIUP_CODE_PK As String, ByVal CDFIUP_APPLICABLE As String, ByVal CDFIUP_DONANTH_CDF_CODE_FK As String, ByVal CDFIUP_COEFDUR_CDF_CODE_FK As String, ByVal CDFIUP_COEFDUR_CDF_NUM_FK As String, ByVal CDFIUP_COEFVOL_CDF_CODE_FK As String, ByVal Original_CDFIUP_NUMERO_PK As String, ByVal Original_CDFIUP_CODE_PK As String, ByVal Original_CDFIUP_APPLICABLE As String, ByVal Original_CDFIUP_DONANTH_CDF_CODE_FK As String, ByVal Original_CDFIUP_COEFDUR_CDF_CODE_FK As String, ByVal Original_CDFIUP_COEFDUR_CDF_NUM_FK As String, ByVal Original_CDFIUP_COEFVOL_CDF_CODE_FK As String) As Integer
            If (CDFIUP_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDFIUP_NUMERO_PK, String)
            End If
            If (CDFIUP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFIUP_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDFIUP_CODE_PK, String)
            End If
            If (CDFIUP_APPLICABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDFIUP_APPLICABLE, String)
            End If
            If (CDFIUP_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDFIUP_DONANTH_CDF_CODE_FK, String)
            End If
            If (CDFIUP_COEFDUR_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CDFIUP_COEFDUR_CDF_CODE_FK, String)
            End If
            If (CDFIUP_COEFDUR_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CDFIUP_COEFDUR_CDF_NUM_FK, String)
            End If
            If (CDFIUP_COEFVOL_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CDFIUP_COEFVOL_CDF_CODE_FK, String)
            End If
            If (Original_CDFIUP_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFIUP_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CDFIUP_NUMERO_PK, String)
            End If
            If (Original_CDFIUP_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFIUP_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CDFIUP_CODE_PK, String)
            End If
            If (Original_CDFIUP_APPLICABLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDFIUP_APPLICABLE, String)
            End If
            If (Original_CDFIUP_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CDFIUP_DONANTH_CDF_CODE_FK, String)
            End If
            If (Original_CDFIUP_COEFDUR_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CDFIUP_COEFDUR_CDF_CODE_FK, String)
            End If
            If (Original_CDFIUP_COEFDUR_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CDFIUP_COEFDUR_CDF_NUM_FK, String)
            End If
            If (Original_CDFIUP_COEFVOL_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CDFIUP_COEFVOL_CDF_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CISPCDF_CISP_CODIFTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CISPCDF_CISP_CODIF"
            tableMapping.ColumnMappings.Add("CISPCDF_CISP_CODE_FK_PK", "CISPCDF_CISP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CISPCDF_CDF_NUMERO_FK_PK", "CISPCDF_CDF_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("CISPCDF_CDF_CODE_FK_PK", "CISPCDF_CDF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("CISPCDF_NUMORD", "CISPCDF_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CISPCDF_CISP_CODIF] WHERE (([CISPCDF_CISP_CODE_FK_PK] = " & _
                "@Original_CISPCDF_CISP_CODE_FK_PK) AND ([CISPCDF_CDF_NUMERO_FK_PK] = @Original_C" & _
                "ISPCDF_CDF_NUMERO_FK_PK) AND ([CISPCDF_CDF_CODE_FK_PK] = @Original_CISPCDF_CDF_C" & _
                "ODE_FK_PK) AND ((@IsNull_CISPCDF_NUMORD = 1 AND [CISPCDF_NUMORD] IS NULL) OR ([C" & _
                "ISPCDF_NUMORD] = @Original_CISPCDF_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_CISP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CISP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISPCDF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CISPCDF_CISP_CODIF] ([CISPCDF_CISP_CODE_FK_PK], [CISPCDF" & _
                "_CDF_NUMERO_FK_PK], [CISPCDF_CDF_CODE_FK_PK], [CISPCDF_NUMORD]) VALUES (@CISPCDF" & _
                "_CISP_CODE_FK_PK, @CISPCDF_CDF_NUMERO_FK_PK, @CISPCDF_CDF_CODE_FK_PK, @CISPCDF_N" & _
                "UMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CISPCDF_CISP_CODE_FK_PK, CISPCDF_CDF_NUMERO_FK_PK, CISPCDF_CDF_C" & _
                "ODE_FK_PK, CISPCDF_NUMORD FROM THERIAQUE.CISPCDF_CISP_CODIF WHERE (CISPCDF_CDF_C" & _
                "ODE_FK_PK = @CISPCDF_CDF_CODE_FK_PK) AND (CISPCDF_CDF_NUMERO_FK_PK = @CISPCDF_CD" & _
                "F_NUMERO_FK_PK) AND (CISPCDF_CISP_CODE_FK_PK = @CISPCDF_CISP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CISP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CISP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CISPCDF_CISP_CODIF] SET [CISPCDF_CISP_CODE_FK_PK] = @CISPCDF_" & _
                "CISP_CODE_FK_PK, [CISPCDF_CDF_NUMERO_FK_PK] = @CISPCDF_CDF_NUMERO_FK_PK, [CISPCD" & _
                "F_CDF_CODE_FK_PK] = @CISPCDF_CDF_CODE_FK_PK, [CISPCDF_NUMORD] = @CISPCDF_NUMORD " & _
                "WHERE (([CISPCDF_CISP_CODE_FK_PK] = @Original_CISPCDF_CISP_CODE_FK_PK) AND ([CIS" & _
                "PCDF_CDF_NUMERO_FK_PK] = @Original_CISPCDF_CDF_NUMERO_FK_PK) AND ([CISPCDF_CDF_C" & _
                "ODE_FK_PK] = @Original_CISPCDF_CDF_CODE_FK_PK) AND ((@IsNull_CISPCDF_NUMORD = 1 " & _
                "AND [CISPCDF_NUMORD] IS NULL) OR ([CISPCDF_NUMORD] = @Original_CISPCDF_NUMORD)))" & _
                ";" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CISPCDF_CISP_CODE_FK_PK, CISPCDF_CDF_NUMERO_FK_PK, CISPCDF_CDF_CODE_FK" & _
                "_PK, CISPCDF_NUMORD FROM THERIAQUE.CISPCDF_CISP_CODIF WHERE (CISPCDF_CDF_CODE_FK" & _
                "_PK = @CISPCDF_CDF_CODE_FK_PK) AND (CISPCDF_CDF_NUMERO_FK_PK = @CISPCDF_CDF_NUME" & _
                "RO_FK_PK) AND (CISPCDF_CISP_CODE_FK_PK = @CISPCDF_CISP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CISP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CISP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_CISP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CISP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CISPCDF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CISPCDF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CISPCDF_CISP_CODE_FK_PK, CISPCDF_CDF_NUMERO_FK_PK, CISPCDF_CDF_CODE_FK_PK," & _
                " CISPCDF_NUMORD FROM THERIAQUE.CISPCDF_CISP_CODIF"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CISPCDF_CISP_CODE_FK_PK, CISPCDF_CDF_NUMERO_FK_PK, CISPCDF_CDF_CODE_FK_PK," & _
                " CISPCDF_NUMORD FROM THERIAQUE.CISPCDF_CISP_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CISPCDF_CDF_NUMERO_FK_" & _
                "PK =@CISPCDF_CDF_NUMERO_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CISPCDF_CDF_CODE_FK_PK= @CISPCDF_CDF_CODE_F" & _
                "K_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CISPCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CISPCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CISPCDF_CISP_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CISPCDF_CISP_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CISPCDF_CISP_CODIFDataTable = New dsTheriaque.CISPCDF_CISP_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CISPCDF_CISP_CODIFDataTable, ByVal CISPCDF_CDF_NUMERO_FK_PK As String, ByVal CISPCDF_CDF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CISPCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISPCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CISPCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CISPCDF_CDF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CISPCDF_CDF_NUMERO_FK_PK As String, ByVal CISPCDF_CDF_CODE_FK_PK As String) As dsTheriaque.CISPCDF_CISP_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CISPCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CISPCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CISPCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CISPCDF_CDF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.CISPCDF_CISP_CODIFDataTable = New dsTheriaque.CISPCDF_CISP_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CISPCDF_CISP_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CISPCDF_CISP_CODIF")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CISPCDF_CISP_CODE_FK_PK As String, ByVal Original_CISPCDF_CDF_NUMERO_FK_PK As String, ByVal Original_CISPCDF_CDF_CODE_FK_PK As String, ByVal Original_CISPCDF_NUMORD As System.Nullable(Of Short)) As Integer
            If (Original_CISPCDF_CISP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISPCDF_CISP_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CISPCDF_CISP_CODE_FK_PK, String)
            End If
            If (Original_CISPCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISPCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CISPCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_CISPCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISPCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CISPCDF_CDF_CODE_FK_PK, String)
            End If
            If (Original_CISPCDF_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CISPCDF_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CISPCDF_CISP_CODE_FK_PK As String, ByVal CISPCDF_CDF_NUMERO_FK_PK As String, ByVal CISPCDF_CDF_CODE_FK_PK As String, ByVal CISPCDF_NUMORD As System.Nullable(Of Short)) As Integer
            If (CISPCDF_CISP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CISP_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CISPCDF_CISP_CODE_FK_PK, String)
            End If
            If (CISPCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CISPCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CISPCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CISPCDF_CDF_CODE_FK_PK, String)
            End If
            If (CISPCDF_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CISPCDF_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CISPCDF_CISP_CODE_FK_PK As String, ByVal CISPCDF_CDF_NUMERO_FK_PK As String, ByVal CISPCDF_CDF_CODE_FK_PK As String, ByVal CISPCDF_NUMORD As System.Nullable(Of Short), ByVal Original_CISPCDF_CISP_CODE_FK_PK As String, ByVal Original_CISPCDF_CDF_NUMERO_FK_PK As String, ByVal Original_CISPCDF_CDF_CODE_FK_PK As String, ByVal Original_CISPCDF_NUMORD As System.Nullable(Of Short)) As Integer
            If (CISPCDF_CISP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CISP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CISPCDF_CISP_CODE_FK_PK, String)
            End If
            If (CISPCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CISPCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (CISPCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CISPCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CISPCDF_CDF_CODE_FK_PK, String)
            End If
            If (CISPCDF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CISPCDF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_CISPCDF_CISP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISPCDF_CISP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CISPCDF_CISP_CODE_FK_PK, String)
            End If
            If (Original_CISPCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISPCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CISPCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_CISPCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CISPCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CISPCDF_CDF_CODE_FK_PK, String)
            End If
            If (Original_CISPCDF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CISPCDF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MEDCDF_MEDRA_CODIFTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MEDCDF_MEDRA_CODIF"
            tableMapping.ColumnMappings.Add("MEDCDF_MED_CODE_FK_PK", "MEDCDF_MED_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MEDCDF_CDF_NUMERO_FK_PK", "MEDCDF_CDF_NUMERO_FK_PK")
            tableMapping.ColumnMappings.Add("MEDCDF_CDF_CODE_FK_PK", "MEDCDF_CDF_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[MEDCDF_MEDRA_CODIF] WHERE (([MEDCDF_MED_CODE_FK_PK] = @O"& _ 
                "riginal_MEDCDF_MED_CODE_FK_PK) AND ([MEDCDF_CDF_NUMERO_FK_PK] = @Original_MEDCDF"& _ 
                "_CDF_NUMERO_FK_PK) AND ([MEDCDF_CDF_CODE_FK_PK] = @Original_MEDCDF_CDF_CODE_FK_P"& _ 
                "K))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MEDCDF_MED_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_MED_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MEDCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MEDCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[MEDCDF_MEDRA_CODIF] ([MEDCDF_MED_CODE_FK_PK], [MEDCDF_CD"& _ 
                "F_NUMERO_FK_PK], [MEDCDF_CDF_CODE_FK_PK]) VALUES (@MEDCDF_MED_CODE_FK_PK, @MEDCD"& _ 
                "F_CDF_NUMERO_FK_PK, @MEDCDF_CDF_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MEDCDF_MED_CODE_FK_PK, MEDC"& _ 
                "DF_CDF_NUMERO_FK_PK, MEDCDF_CDF_CODE_FK_PK FROM THERIAQUE.MEDCDF_MEDRA_CODIF WHE"& _ 
                "RE (MEDCDF_CDF_CODE_FK_PK = @MEDCDF_CDF_CODE_FK_PK) AND (MEDCDF_CDF_NUMERO_FK_PK"& _ 
                " = @MEDCDF_CDF_NUMERO_FK_PK) AND (MEDCDF_MED_CODE_FK_PK = @MEDCDF_MED_CODE_FK_PK"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_MED_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_MED_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[MEDCDF_MEDRA_CODIF] SET [MEDCDF_MED_CODE_FK_PK] = @MEDCDF_MED"& _ 
                "_CODE_FK_PK, [MEDCDF_CDF_NUMERO_FK_PK] = @MEDCDF_CDF_NUMERO_FK_PK, [MEDCDF_CDF_C"& _ 
                "ODE_FK_PK] = @MEDCDF_CDF_CODE_FK_PK WHERE (([MEDCDF_MED_CODE_FK_PK] = @Original_"& _ 
                "MEDCDF_MED_CODE_FK_PK) AND ([MEDCDF_CDF_NUMERO_FK_PK] = @Original_MEDCDF_CDF_NUM"& _ 
                "ERO_FK_PK) AND ([MEDCDF_CDF_CODE_FK_PK] = @Original_MEDCDF_CDF_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT MEDCDF_MED_CODE_FK_PK, MEDCDF_CDF_NUMERO_FK_PK, MEDCDF_CDF_CODE_FK_PK FROM "& _ 
                "THERIAQUE.MEDCDF_MEDRA_CODIF WHERE (MEDCDF_CDF_CODE_FK_PK = @MEDCDF_CDF_CODE_FK_"& _ 
                "PK) AND (MEDCDF_CDF_NUMERO_FK_PK = @MEDCDF_CDF_NUMERO_FK_PK) AND (MEDCDF_MED_COD"& _ 
                "E_FK_PK = @MEDCDF_MED_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_MED_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_MED_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MEDCDF_MED_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_MED_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MEDCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MEDCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MEDCDF_MED_CODE_FK_PK, MEDCDF_CDF_NUMERO_FK_PK, MEDCDF_CDF_CODE_FK_PK FROM" & _
                " THERIAQUE.MEDCDF_MEDRA_CODIF"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MEDCDF_MED_CODE_FK_PK, MEDCDF_CDF_NUMERO_FK_PK, MEDCDF_CDF_CODE_FK_PK FROM" & _
                " THERIAQUE.MEDCDF_MEDRA_CODIF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " MEDCDF_CDF_NUMERO_FK_PK = @MEDCDF_CDF_NUM" & _
                "ERO_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "MEDCDF_CDF_CODE_FK_PK = @MEDCDF_CDF_CODE_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_CDF_NUMERO_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_NUMERO_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@MEDCDF_CDF_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "MEDCDF_CDF_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable = New dsTheriaque.MEDCDF_MEDRA_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable, ByVal MEDCDF_CDF_NUMERO_FK_PK As String, ByVal MEDCDF_CDF_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MEDCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MEDCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (MEDCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MEDCDF_CDF_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal MEDCDF_CDF_NUMERO_FK_PK As String, ByVal MEDCDF_CDF_CODE_FK_PK As String) As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MEDCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MEDCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (MEDCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MEDCDF_CDF_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable = New dsTheriaque.MEDCDF_MEDRA_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.MEDCDF_MEDRA_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "MEDCDF_MEDRA_CODIF")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MEDCDF_MED_CODE_FK_PK As String, ByVal Original_MEDCDF_CDF_NUMERO_FK_PK As String, ByVal Original_MEDCDF_CDF_CODE_FK_PK As String) As Integer
            If (Original_MEDCDF_MED_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_MEDCDF_MED_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MEDCDF_MED_CODE_FK_PK, String)
            End If
            If (Original_MEDCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_MEDCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MEDCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_MEDCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_MEDCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MEDCDF_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MEDCDF_MED_CODE_FK_PK As String, ByVal MEDCDF_CDF_NUMERO_FK_PK As String, ByVal MEDCDF_CDF_CODE_FK_PK As String) As Integer
            If (MEDCDF_MED_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_MED_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MEDCDF_MED_CODE_FK_PK, String)
            End If
            If (MEDCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MEDCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (MEDCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MEDCDF_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MEDCDF_MED_CODE_FK_PK As String, ByVal MEDCDF_CDF_NUMERO_FK_PK As String, ByVal MEDCDF_CDF_CODE_FK_PK As String, ByVal Original_MEDCDF_MED_CODE_FK_PK As String, ByVal Original_MEDCDF_CDF_NUMERO_FK_PK As String, ByVal Original_MEDCDF_CDF_CODE_FK_PK As String) As Integer
            If (MEDCDF_MED_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_MED_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MEDCDF_MED_CODE_FK_PK, String)
            End If
            If (MEDCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MEDCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (MEDCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("MEDCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MEDCDF_CDF_CODE_FK_PK, String)
            End If
            If (Original_MEDCDF_MED_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_MEDCDF_MED_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MEDCDF_MED_CODE_FK_PK, String)
            End If
            If (Original_MEDCDF_CDF_NUMERO_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_MEDCDF_CDF_NUMERO_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_MEDCDF_CDF_NUMERO_FK_PK, String)
            End If
            If (Original_MEDCDF_CDF_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_MEDCDF_CDF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_MEDCDF_CDF_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CDFPF_LIEN_CDF_PERE_FILSTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFPF_LIEN_CDF_PERE_FILS"
            tableMapping.ColumnMappings.Add("CDFPF_NUMEROP_FK_PK", "CDFPF_NUMEROP_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_CODEP_FK_PK", "CDFPF_CODEP_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_NUMEROF_FK_PK", "CDFPF_NUMEROF_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_CODEF_FK_PK", "CDFPF_CODEF_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_NUMORD", "CDFPF_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CDFPF_LIEN_CDF_PERE_FILS] WHERE (([CDFPF_NUMEROP_FK_PK] " & _
                "= @Original_CDFPF_NUMEROP_FK_PK) AND ([CDFPF_CODEP_FK_PK] = @Original_CDFPF_CODE" & _
                "P_FK_PK) AND ([CDFPF_NUMEROF_FK_PK] = @Original_CDFPF_NUMEROF_FK_PK) AND ([CDFPF" & _
                "_CODEF_FK_PK] = @Original_CDFPF_CODEF_FK_PK) AND ((@IsNull_CDFPF_NUMORD = 1 AND " & _
                "[CDFPF_NUMORD] IS NULL) OR ([CDFPF_NUMORD] = @Original_CDFPF_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFPF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CDFPF_LIEN_CDF_PERE_FILS] ([CDFPF_NUMEROP_FK_PK], [CDFPF" & _
                "_CODEP_FK_PK], [CDFPF_NUMEROF_FK_PK], [CDFPF_CODEF_FK_PK], [CDFPF_NUMORD]) VALUE" & _
                "S (@CDFPF_NUMEROP_FK_PK, @CDFPF_CODEP_FK_PK, @CDFPF_NUMEROF_FK_PK, @CDFPF_CODEF_" & _
                "FK_PK, @CDFPF_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUM" & _
                "EROF_FK_PK, CDFPF_CODEF_FK_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_LIEN_CDF_PERE_F" & _
                "ILS WHERE (CDFPF_CODEF_FK_PK = @CDFPF_CODEF_FK_PK) AND (CDFPF_CODEP_FK_PK = @CDF" & _
                "PF_CODEP_FK_PK) AND (CDFPF_NUMEROF_FK_PK = @CDFPF_NUMEROF_FK_PK) AND (CDFPF_NUME" & _
                "ROP_FK_PK = @CDFPF_NUMEROP_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CDFPF_LIEN_CDF_PERE_FILS] SET [CDFPF_NUMEROP_FK_PK] = @CDFPF_" & _
                "NUMEROP_FK_PK, [CDFPF_CODEP_FK_PK] = @CDFPF_CODEP_FK_PK, [CDFPF_NUMEROF_FK_PK] =" & _
                " @CDFPF_NUMEROF_FK_PK, [CDFPF_CODEF_FK_PK] = @CDFPF_CODEF_FK_PK, [CDFPF_NUMORD] " & _
                "= @CDFPF_NUMORD WHERE (([CDFPF_NUMEROP_FK_PK] = @Original_CDFPF_NUMEROP_FK_PK) A" & _
                "ND ([CDFPF_CODEP_FK_PK] = @Original_CDFPF_CODEP_FK_PK) AND ([CDFPF_NUMEROF_FK_PK" & _
                "] = @Original_CDFPF_NUMEROF_FK_PK) AND ([CDFPF_CODEF_FK_PK] = @Original_CDFPF_CO" & _
                "DEF_FK_PK) AND ((@IsNull_CDFPF_NUMORD = 1 AND [CDFPF_NUMORD] IS NULL) OR ([CDFPF" & _
                "_NUMORD] = @Original_CDFPF_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_F" & _
                "K_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_FK_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_" & _
                "LIEN_CDF_PERE_FILS WHERE (CDFPF_CODEF_FK_PK = @CDFPF_CODEF_FK_PK) AND (CDFPF_COD" & _
                "EP_FK_PK = @CDFPF_CODEP_FK_PK) AND (CDFPF_NUMEROF_FK_PK = @CDFPF_NUMEROF_FK_PK) " & _
                "AND (CDFPF_NUMEROP_FK_PK = @CDFPF_NUMEROP_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFPF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_F" & _
                "K_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_LIEN_CDF_PERE_FILS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_F" & _
                "K_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_LIEN_CDF_PERE_FILS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CDFPF_NUMEROP" & _
                "_FK_PK = @CDFPF_NUMEROP_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "and " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "CDFPF_CODEP_FK_PK = @CDFPF_CODEP_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable = New dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable, ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String) As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable = New dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CDFPF_LIEN_CDF_PERE_FILS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDFPF_NUMEROP_FK_PK As String, ByVal Original_CDFPF_CODEP_FK_PK As String, ByVal Original_CDFPF_NUMEROF_FK_PK As String, ByVal Original_CDFPF_CODEF_FK_PK As String, ByVal Original_CDFPF_NUMORD As System.Nullable(Of Short)) As Integer
            If (Original_CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDFPF_NUMEROP_FK_PK, String)
            End If
            If (Original_CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDFPF_CODEP_FK_PK, String)
            End If
            If (Original_CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CDFPF_NUMEROF_FK_PK, String)
            End If
            If (Original_CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDFPF_CODEF_FK_PK, String)
            End If
            If (Original_CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String, ByVal CDFPF_NUMORD As System.Nullable(Of Short)) As Integer
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            If (CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFPF_NUMEROF_FK_PK, String)
            End If
            If (CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDFPF_CODEF_FK_PK, String)
            End If
            If (CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String, ByVal CDFPF_NUMORD As System.Nullable(Of Short), ByVal Original_CDFPF_NUMEROP_FK_PK As String, ByVal Original_CDFPF_CODEP_FK_PK As String, ByVal Original_CDFPF_NUMEROF_FK_PK As String, ByVal Original_CDFPF_CODEF_FK_PK As String, ByVal Original_CDFPF_NUMORD As System.Nullable(Of Short)) As Integer
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            If (CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDFPF_NUMEROF_FK_PK, String)
            End If
            If (CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDFPF_CODEF_FK_PK, String)
            End If
            If (CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CDFPF_NUMEROP_FK_PK, String)
            End If
            If (Original_CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CDFPF_CODEP_FK_PK, String)
            End If
            If (Original_CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CDFPF_NUMEROF_FK_PK, String)
            End If
            If (Original_CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CDFPF_CODEF_FK_PK, String)
            End If
            If (Original_CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CDFPF_LIEN_CDF_PERE_FILS_2TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDFPF_LIEN_CDF_PERE_FILS_2"
            tableMapping.ColumnMappings.Add("CDFPF_NUMEROP_FK_PK", "CDFPF_NUMEROP_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_CODEP_FK_PK", "CDFPF_CODEP_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_NUMEROF_FK_PK", "CDFPF_NUMEROF_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_CODEF_FK_PK", "CDFPF_CODEF_FK_PK")
            tableMapping.ColumnMappings.Add("CDFPF_NUMORD", "CDFPF_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CDFPF_LIEN_CDF_PERE_FILS] WHERE (([CDFPF_NUMEROP_FK_PK] "& _ 
                "= @Original_CDFPF_NUMEROP_FK_PK) AND ([CDFPF_CODEP_FK_PK] = @Original_CDFPF_CODE"& _ 
                "P_FK_PK) AND ([CDFPF_NUMEROF_FK_PK] = @Original_CDFPF_NUMEROF_FK_PK) AND ([CDFPF"& _ 
                "_CODEF_FK_PK] = @Original_CDFPF_CODEF_FK_PK) AND ((@IsNull_CDFPF_NUMORD = 1 AND "& _ 
                "[CDFPF_NUMORD] IS NULL) OR ([CDFPF_NUMORD] = @Original_CDFPF_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFPF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CDFPF_LIEN_CDF_PERE_FILS] ([CDFPF_NUMEROP_FK_PK], [CDFPF"& _ 
                "_CODEP_FK_PK], [CDFPF_NUMEROF_FK_PK], [CDFPF_CODEF_FK_PK], [CDFPF_NUMORD]) VALUE"& _ 
                "S (@CDFPF_NUMEROP_FK_PK, @CDFPF_CODEP_FK_PK, @CDFPF_NUMEROF_FK_PK, @CDFPF_CODEF_"& _ 
                "FK_PK, @CDFPF_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUM"& _ 
                "EROF_FK_PK, CDFPF_CODEF_FK_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_LIEN_CDF_PERE_F"& _ 
                "ILS WHERE (CDFPF_CODEF_FK_PK = @CDFPF_CODEF_FK_PK) AND (CDFPF_CODEP_FK_PK = @CDF"& _ 
                "PF_CODEP_FK_PK) AND (CDFPF_NUMEROF_FK_PK = @CDFPF_NUMEROF_FK_PK) AND (CDFPF_NUME"& _ 
                "ROP_FK_PK = @CDFPF_NUMEROP_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CDFPF_LIEN_CDF_PERE_FILS] SET [CDFPF_NUMEROP_FK_PK] = @CDFPF_"& _ 
                "NUMEROP_FK_PK, [CDFPF_CODEP_FK_PK] = @CDFPF_CODEP_FK_PK, [CDFPF_NUMEROF_FK_PK] ="& _ 
                " @CDFPF_NUMEROF_FK_PK, [CDFPF_CODEF_FK_PK] = @CDFPF_CODEF_FK_PK, [CDFPF_NUMORD] "& _ 
                "= @CDFPF_NUMORD WHERE (([CDFPF_NUMEROP_FK_PK] = @Original_CDFPF_NUMEROP_FK_PK) A"& _ 
                "ND ([CDFPF_CODEP_FK_PK] = @Original_CDFPF_CODEP_FK_PK) AND ([CDFPF_NUMEROF_FK_PK"& _ 
                "] = @Original_CDFPF_NUMEROF_FK_PK) AND ([CDFPF_CODEF_FK_PK] = @Original_CDFPF_CO"& _ 
                "DEF_FK_PK) AND ((@IsNull_CDFPF_NUMORD = 1 AND [CDFPF_NUMORD] IS NULL) OR ([CDFPF"& _ 
                "_NUMORD] = @Original_CDFPF_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_F"& _ 
                "K_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_FK_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_"& _ 
                "LIEN_CDF_PERE_FILS WHERE (CDFPF_CODEF_FK_PK = @CDFPF_CODEF_FK_PK) AND (CDFPF_COD"& _ 
                "EP_FK_PK = @CDFPF_CODEP_FK_PK) AND (CDFPF_NUMEROF_FK_PK = @CDFPF_NUMEROF_FK_PK) "& _ 
                "AND (CDFPF_NUMEROP_FK_PK = @CDFPF_NUMEROP_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMEROF_FK_PK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROF_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_CODEF_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEF_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CDFPF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CDFPF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDFPF_NUMEROP_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_CODEF_F" & _
                "K_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_LIEN_CDF_PERE_FILS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CDFPF_CODEF_FK_PK, CDFPF_CODEP_FK_PK, CDFPF_NUMEROF_FK_PK, CDFPF_NUMEROP_F" & _
                "K_PK, CDFPF_NUMORD FROM THERIAQUE.CDFPF_LIEN_CDF_PERE_FILS WHERE (CDFPF_NUMEROP_" & _
                "FK_PK = @CDFPF_NUMEROP_FK_PK) AND (CDFPF_CODEP_FK_PK = @CDFPF_CODEP_FK_PK)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_NUMEROP_FK_PK", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_NUMEROP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CDFPF_CODEP_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CDFPF_CODEP_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable = New dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable, ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String) As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable = New dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.CDFPF_LIEN_CDF_PERE_FILS_2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "CDFPF_LIEN_CDF_PERE_FILS_2")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CDFPF_NUMEROP_FK_PK As String, ByVal Original_CDFPF_CODEP_FK_PK As String, ByVal Original_CDFPF_NUMEROF_FK_PK As String, ByVal Original_CDFPF_CODEF_FK_PK As String, ByVal Original_CDFPF_NUMORD As System.Nullable(Of Short)) As Integer
            If (Original_CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDFPF_NUMEROP_FK_PK, String)
            End If
            If (Original_CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDFPF_CODEP_FK_PK, String)
            End If
            If (Original_CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CDFPF_NUMEROF_FK_PK, String)
            End If
            If (Original_CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDFPF_CODEF_FK_PK, String)
            End If
            If (Original_CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String, ByVal CDFPF_NUMORD As System.Nullable(Of Short)) As Integer
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            If (CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDFPF_NUMEROF_FK_PK, String)
            End If
            If (CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDFPF_CODEF_FK_PK, String)
            End If
            If (CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CDFPF_NUMEROP_FK_PK As String, ByVal CDFPF_CODEP_FK_PK As String, ByVal CDFPF_NUMEROF_FK_PK As String, ByVal CDFPF_CODEF_FK_PK As String, ByVal CDFPF_NUMORD As System.Nullable(Of Short), ByVal Original_CDFPF_NUMEROP_FK_PK As String, ByVal Original_CDFPF_CODEP_FK_PK As String, ByVal Original_CDFPF_NUMEROF_FK_PK As String, ByVal Original_CDFPF_CODEF_FK_PK As String, ByVal Original_CDFPF_NUMORD As System.Nullable(Of Short)) As Integer
            If (CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDFPF_NUMEROP_FK_PK, String)
            End If
            If (CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDFPF_CODEP_FK_PK, String)
            End If
            If (CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDFPF_NUMEROF_FK_PK, String)
            End If
            If (CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDFPF_CODEF_FK_PK, String)
            End If
            If (CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_CDFPF_NUMEROP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CDFPF_NUMEROP_FK_PK, String)
            End If
            If (Original_CDFPF_CODEP_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CDFPF_CODEP_FK_PK, String)
            End If
            If (Original_CDFPF_NUMEROF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_NUMEROF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CDFPF_NUMEROF_FK_PK, String)
            End If
            If (Original_CDFPF_CODEF_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CDFPF_CODEF_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CDFPF_CODEF_FK_PK, String)
            End If
            If (Original_CDFPF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDFPF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RUBCDF_RUBRIQUE_CODIFICATIONTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RUBCDF_RUBRIQUE_CODIFICATION"
            tableMapping.ColumnMappings.Add("RUBCDF_NUMERO_PK", "RUBCDF_NUMERO_PK")
            tableMapping.ColumnMappings.Add("RUBCDF_NOM", "RUBCDF_NOM")
            tableMapping.ColumnMappings.Add("RUBCDF_SYN", "RUBCDF_SYN")
            tableMapping.ColumnMappings.Add("RUBCDF_DATECR", "RUBCDF_DATECR")
            tableMapping.ColumnMappings.Add("RUBCDF_DATEMJ", "RUBCDF_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[RUBCDF_RUBRIQUE_CODIFICATION] WHERE (([RUBCDF_NUMERO_PK]" & _
                " = @Original_RUBCDF_NUMERO_PK) AND ([RUBCDF_NOM] = @Original_RUBCDF_NOM) AND ((@" & _
                "IsNull_RUBCDF_SYN = 1 AND [RUBCDF_SYN] IS NULL) OR ([RUBCDF_SYN] = @Original_RUB" & _
                "CDF_SYN)) AND ([RUBCDF_DATECR] = @Original_RUBCDF_DATECR) AND ((@IsNull_RUBCDF_D" & _
                "ATEMJ = 1 AND [RUBCDF_DATEMJ] IS NULL) OR ([RUBCDF_DATEMJ] = @Original_RUBCDF_DA" & _
                "TEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NUMERO_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_RUBCDF_SYN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_SYN", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_SYN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_SYN", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_RUBCDF_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[RUBCDF_RUBRIQUE_CODIFICATION] ([RUBCDF_NUMERO_PK], [RUBC" & _
                "DF_NOM], [RUBCDF_SYN], [RUBCDF_DATECR], [RUBCDF_DATEMJ]) VALUES (@RUBCDF_NUMERO_" & _
                "PK, @RUBCDF_NOM, @RUBCDF_SYN, @RUBCDF_DATECR, @RUBCDF_DATEMJ);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT RUBCDF_NU" & _
                "MERO_PK, RUBCDF_NOM, RUBCDF_SYN, RUBCDF_DATECR, RUBCDF_DATEMJ FROM THERIAQUE.RUB" & _
                "CDF_RUBRIQUE_CODIFICATION WHERE (RUBCDF_NUMERO_PK = @RUBCDF_NUMERO_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_SYN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_SYN", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[RUBCDF_RUBRIQUE_CODIFICATION] SET [RUBCDF_NUMERO_PK] = @RUBCD" & _
                "F_NUMERO_PK, [RUBCDF_NOM] = @RUBCDF_NOM, [RUBCDF_SYN] = @RUBCDF_SYN, [RUBCDF_DAT" & _
                "ECR] = @RUBCDF_DATECR, [RUBCDF_DATEMJ] = @RUBCDF_DATEMJ WHERE (([RUBCDF_NUMERO_P" & _
                "K] = @Original_RUBCDF_NUMERO_PK) AND ([RUBCDF_NOM] = @Original_RUBCDF_NOM) AND (" & _
                "(@IsNull_RUBCDF_SYN = 1 AND [RUBCDF_SYN] IS NULL) OR ([RUBCDF_SYN] = @Original_R" & _
                "UBCDF_SYN)) AND ([RUBCDF_DATECR] = @Original_RUBCDF_DATECR) AND ((@IsNull_RUBCDF" & _
                "_DATEMJ = 1 AND [RUBCDF_DATEMJ] IS NULL) OR ([RUBCDF_DATEMJ] = @Original_RUBCDF_" & _
                "DATEMJ)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT RUBCDF_NUMERO_PK, RUBCDF_NOM, RUBCDF_SYN, RUBCDF_DATECR, RUBC" & _
                "DF_DATEMJ FROM THERIAQUE.RUBCDF_RUBRIQUE_CODIFICATION WHERE (RUBCDF_NUMERO_PK = " & _
                "@RUBCDF_NUMERO_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_SYN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_SYN", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_NUMERO_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NUMERO_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_RUBCDF_SYN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_SYN", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_SYN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_SYN", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_RUBCDF_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_RUBCDF_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RUBCDF_NUMERO_PK, RUBCDF_NOM, RUBCDF_SYN, RUBCDF_DATECR, RUBCDF_DATEMJ FRO" & _
                "M THERIAQUE.RUBCDF_RUBRIQUE_CODIFICATION"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT RUBCDF_NUMERO_PK, RUBCDF_NOM, RUBCDF_SYN, RUBCDF_DATECR, RUBCDF_DATEMJ FRO" & _
                "M THERIAQUE.RUBCDF_RUBRIQUE_CODIFICATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where RUBCDF_NUMERO_PK = @RUBCDF_NUMER" & _
                "O_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RUBCDF_NUMERO_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RUBCDF_NUMERO_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable = New dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable, ByVal RUBCDF_NUMERO_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RUBCDF_NUMERO_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal RUBCDF_NUMERO_PK As String) As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RUBCDF_NUMERO_PK, String)
            End If
            Dim dataTable As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable = New dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque.RUBCDF_RUBRIQUE_CODIFICATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque) As Integer
            Return Me.Adapter.Update(dataSet, "RUBCDF_RUBRIQUE_CODIFICATION")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_RUBCDF_NUMERO_PK As String, ByVal Original_RUBCDF_NOM As String, ByVal Original_RUBCDF_SYN As String, ByVal Original_RUBCDF_DATECR As Date, ByVal Original_RUBCDF_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RUBCDF_NUMERO_PK, String)
            End If
            If (Original_RUBCDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_RUBCDF_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RUBCDF_NOM, String)
            End If
            If (Original_RUBCDF_SYN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_RUBCDF_SYN, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_RUBCDF_DATECR, Date)
            If (Original_RUBCDF_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RUBCDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal RUBCDF_NUMERO_PK As String, ByVal RUBCDF_NOM As String, ByVal RUBCDF_SYN As String, ByVal RUBCDF_DATECR As Date, ByVal RUBCDF_DATEMJ As System.Nullable(Of Date)) As Integer
            If (RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RUBCDF_NUMERO_PK, String)
            End If
            If (RUBCDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("RUBCDF_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RUBCDF_NOM, String)
            End If
            If (RUBCDF_SYN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(RUBCDF_SYN, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(RUBCDF_DATECR, Date)
            If (RUBCDF_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RUBCDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal RUBCDF_NUMERO_PK As String, ByVal RUBCDF_NOM As String, ByVal RUBCDF_SYN As String, ByVal RUBCDF_DATECR As Date, ByVal RUBCDF_DATEMJ As System.Nullable(Of Date), ByVal Original_RUBCDF_NUMERO_PK As String, ByVal Original_RUBCDF_NOM As String, ByVal Original_RUBCDF_SYN As String, ByVal Original_RUBCDF_DATECR As Date, ByVal Original_RUBCDF_DATEMJ As System.Nullable(Of Date)) As Integer
            If (RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RUBCDF_NUMERO_PK, String)
            End If
            If (RUBCDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("RUBCDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RUBCDF_NOM, String)
            End If
            If (RUBCDF_SYN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RUBCDF_SYN, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RUBCDF_DATECR, Date)
            If (RUBCDF_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RUBCDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_RUBCDF_NUMERO_PK, String)
            End If
            If (Original_RUBCDF_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_RUBCDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_RUBCDF_NOM, String)
            End If
            If (Original_RUBCDF_SYN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_RUBCDF_SYN, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_RUBCDF_DATECR, Date)
            If (Original_RUBCDF_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RUBCDF_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
