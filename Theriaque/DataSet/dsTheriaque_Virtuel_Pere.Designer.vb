'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Virtuel_Pere"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Virtuel_Pere
    Inherits Global.System.Data.DataSet
    
    Private tableMVPF_MED_VIR_PERE_FORME As MVPF_MED_VIR_PERE_FORMEDataTable
    
    Private tableMVPSDU_MED_VIR_PERE_SA As MVPSDU_MED_VIR_PERE_SADataTable
    
    Private tableGSP_GENERIQUE_SPECIALITE As GSP_GENERIQUE_SPECIALITEDataTable
    
    Private tableSAV_SUBSTANCE_VIRTUELLE As SAV_SUBSTANCE_VIRTUELLEDataTable
    
    Private tableFOV_FORME_VIRTUELLE As FOV_FORME_VIRTUELLEDataTable
    
    Private tableSAVSAC_SUBVIRT_SUBAC As SAVSAC_SUBVIRT_SUBACDataTable
    
    Private tableFOVCFO_FORMEVIRT_COMPFORME As FOVCFO_FORMEVIRT_COMPFORMEDataTable
    
    Private tableSYSAV_SYNONYME_SUBST_VIRT As SYSAV_SYNONYME_SUBST_VIRTDataTable
    
    Private tableSYFOV_SYNONYME_FORME_VIRT As SYFOV_SYNONYME_FORME_VIRTDataTable
    
    Private relationFK_GSP1 As Global.System.Data.DataRelation
    
    Private relationFK_GSP As Global.System.Data.DataRelation
    
    Private relationFK_SAV As Global.System.Data.DataRelation
    
    Private relationSAV_SUBVIRT_PK As Global.System.Data.DataRelation
    
    Private relationFK__SYSAV_SYN__SYSAV__5AC46587 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MVPF_MED_VIR_PERE_FORME")) Is Nothing) Then
                MyBase.Tables.Add(New MVPF_MED_VIR_PERE_FORMEDataTable(ds.Tables("MVPF_MED_VIR_PERE_FORME")))
            End If
            If (Not (ds.Tables("MVPSDU_MED_VIR_PERE_SA")) Is Nothing) Then
                MyBase.Tables.Add(New MVPSDU_MED_VIR_PERE_SADataTable(ds.Tables("MVPSDU_MED_VIR_PERE_SA")))
            End If
            If (Not (ds.Tables("GSP_GENERIQUE_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New GSP_GENERIQUE_SPECIALITEDataTable(ds.Tables("GSP_GENERIQUE_SPECIALITE")))
            End If
            If (Not (ds.Tables("SAV_SUBSTANCE_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New SAV_SUBSTANCE_VIRTUELLEDataTable(ds.Tables("SAV_SUBSTANCE_VIRTUELLE")))
            End If
            If (Not (ds.Tables("FOV_FORME_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New FOV_FORME_VIRTUELLEDataTable(ds.Tables("FOV_FORME_VIRTUELLE")))
            End If
            If (Not (ds.Tables("SAVSAC_SUBVIRT_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New SAVSAC_SUBVIRT_SUBACDataTable(ds.Tables("SAVSAC_SUBVIRT_SUBAC")))
            End If
            If (Not (ds.Tables("FOVCFO_FORMEVIRT_COMPFORME")) Is Nothing) Then
                MyBase.Tables.Add(New FOVCFO_FORMEVIRT_COMPFORMEDataTable(ds.Tables("FOVCFO_FORMEVIRT_COMPFORME")))
            End If
            If (Not (ds.Tables("SYSAV_SYNONYME_SUBST_VIRT")) Is Nothing) Then
                MyBase.Tables.Add(New SYSAV_SYNONYME_SUBST_VIRTDataTable(ds.Tables("SYSAV_SYNONYME_SUBST_VIRT")))
            End If
            If (Not (ds.Tables("SYFOV_SYNONYME_FORME_VIRT")) Is Nothing) Then
                MyBase.Tables.Add(New SYFOV_SYNONYME_FORME_VIRTDataTable(ds.Tables("SYFOV_SYNONYME_FORME_VIRT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPF_MED_VIR_PERE_FORME() As MVPF_MED_VIR_PERE_FORMEDataTable
        Get
            Return Me.tableMVPF_MED_VIR_PERE_FORME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MVPSDU_MED_VIR_PERE_SA() As MVPSDU_MED_VIR_PERE_SADataTable
        Get
            Return Me.tableMVPSDU_MED_VIR_PERE_SA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GSP_GENERIQUE_SPECIALITE() As GSP_GENERIQUE_SPECIALITEDataTable
        Get
            Return Me.tableGSP_GENERIQUE_SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAV_SUBSTANCE_VIRTUELLE() As SAV_SUBSTANCE_VIRTUELLEDataTable
        Get
            Return Me.tableSAV_SUBSTANCE_VIRTUELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FOV_FORME_VIRTUELLE() As FOV_FORME_VIRTUELLEDataTable
        Get
            Return Me.tableFOV_FORME_VIRTUELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAVSAC_SUBVIRT_SUBAC() As SAVSAC_SUBVIRT_SUBACDataTable
        Get
            Return Me.tableSAVSAC_SUBVIRT_SUBAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FOVCFO_FORMEVIRT_COMPFORME() As FOVCFO_FORMEVIRT_COMPFORMEDataTable
        Get
            Return Me.tableFOVCFO_FORMEVIRT_COMPFORME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYSAV_SYNONYME_SUBST_VIRT() As SYSAV_SYNONYME_SUBST_VIRTDataTable
        Get
            Return Me.tableSYSAV_SYNONYME_SUBST_VIRT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYFOV_SYNONYME_FORME_VIRT() As SYFOV_SYNONYME_FORME_VIRTDataTable
        Get
            Return Me.tableSYFOV_SYNONYME_FORME_VIRT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Virtuel_Pere = CType(MyBase.Clone,dsTheriaque_Virtuel_Pere)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MVPF_MED_VIR_PERE_FORME")) Is Nothing) Then
                MyBase.Tables.Add(New MVPF_MED_VIR_PERE_FORMEDataTable(ds.Tables("MVPF_MED_VIR_PERE_FORME")))
            End If
            If (Not (ds.Tables("MVPSDU_MED_VIR_PERE_SA")) Is Nothing) Then
                MyBase.Tables.Add(New MVPSDU_MED_VIR_PERE_SADataTable(ds.Tables("MVPSDU_MED_VIR_PERE_SA")))
            End If
            If (Not (ds.Tables("GSP_GENERIQUE_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New GSP_GENERIQUE_SPECIALITEDataTable(ds.Tables("GSP_GENERIQUE_SPECIALITE")))
            End If
            If (Not (ds.Tables("SAV_SUBSTANCE_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New SAV_SUBSTANCE_VIRTUELLEDataTable(ds.Tables("SAV_SUBSTANCE_VIRTUELLE")))
            End If
            If (Not (ds.Tables("FOV_FORME_VIRTUELLE")) Is Nothing) Then
                MyBase.Tables.Add(New FOV_FORME_VIRTUELLEDataTable(ds.Tables("FOV_FORME_VIRTUELLE")))
            End If
            If (Not (ds.Tables("SAVSAC_SUBVIRT_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New SAVSAC_SUBVIRT_SUBACDataTable(ds.Tables("SAVSAC_SUBVIRT_SUBAC")))
            End If
            If (Not (ds.Tables("FOVCFO_FORMEVIRT_COMPFORME")) Is Nothing) Then
                MyBase.Tables.Add(New FOVCFO_FORMEVIRT_COMPFORMEDataTable(ds.Tables("FOVCFO_FORMEVIRT_COMPFORME")))
            End If
            If (Not (ds.Tables("SYSAV_SYNONYME_SUBST_VIRT")) Is Nothing) Then
                MyBase.Tables.Add(New SYSAV_SYNONYME_SUBST_VIRTDataTable(ds.Tables("SYSAV_SYNONYME_SUBST_VIRT")))
            End If
            If (Not (ds.Tables("SYFOV_SYNONYME_FORME_VIRT")) Is Nothing) Then
                MyBase.Tables.Add(New SYFOV_SYNONYME_FORME_VIRTDataTable(ds.Tables("SYFOV_SYNONYME_FORME_VIRT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMVPF_MED_VIR_PERE_FORME = CType(MyBase.Tables("MVPF_MED_VIR_PERE_FORME"),MVPF_MED_VIR_PERE_FORMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPF_MED_VIR_PERE_FORME) Is Nothing) Then
                Me.tableMVPF_MED_VIR_PERE_FORME.InitVars
            End If
        End If
        Me.tableMVPSDU_MED_VIR_PERE_SA = CType(MyBase.Tables("MVPSDU_MED_VIR_PERE_SA"),MVPSDU_MED_VIR_PERE_SADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMVPSDU_MED_VIR_PERE_SA) Is Nothing) Then
                Me.tableMVPSDU_MED_VIR_PERE_SA.InitVars
            End If
        End If
        Me.tableGSP_GENERIQUE_SPECIALITE = CType(MyBase.Tables("GSP_GENERIQUE_SPECIALITE"),GSP_GENERIQUE_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGSP_GENERIQUE_SPECIALITE) Is Nothing) Then
                Me.tableGSP_GENERIQUE_SPECIALITE.InitVars
            End If
        End If
        Me.tableSAV_SUBSTANCE_VIRTUELLE = CType(MyBase.Tables("SAV_SUBSTANCE_VIRTUELLE"),SAV_SUBSTANCE_VIRTUELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAV_SUBSTANCE_VIRTUELLE) Is Nothing) Then
                Me.tableSAV_SUBSTANCE_VIRTUELLE.InitVars
            End If
        End If
        Me.tableFOV_FORME_VIRTUELLE = CType(MyBase.Tables("FOV_FORME_VIRTUELLE"),FOV_FORME_VIRTUELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFOV_FORME_VIRTUELLE) Is Nothing) Then
                Me.tableFOV_FORME_VIRTUELLE.InitVars
            End If
        End If
        Me.tableSAVSAC_SUBVIRT_SUBAC = CType(MyBase.Tables("SAVSAC_SUBVIRT_SUBAC"),SAVSAC_SUBVIRT_SUBACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAVSAC_SUBVIRT_SUBAC) Is Nothing) Then
                Me.tableSAVSAC_SUBVIRT_SUBAC.InitVars
            End If
        End If
        Me.tableFOVCFO_FORMEVIRT_COMPFORME = CType(MyBase.Tables("FOVCFO_FORMEVIRT_COMPFORME"),FOVCFO_FORMEVIRT_COMPFORMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFOVCFO_FORMEVIRT_COMPFORME) Is Nothing) Then
                Me.tableFOVCFO_FORMEVIRT_COMPFORME.InitVars
            End If
        End If
        Me.tableSYSAV_SYNONYME_SUBST_VIRT = CType(MyBase.Tables("SYSAV_SYNONYME_SUBST_VIRT"),SYSAV_SYNONYME_SUBST_VIRTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYSAV_SYNONYME_SUBST_VIRT) Is Nothing) Then
                Me.tableSYSAV_SYNONYME_SUBST_VIRT.InitVars
            End If
        End If
        Me.tableSYFOV_SYNONYME_FORME_VIRT = CType(MyBase.Tables("SYFOV_SYNONYME_FORME_VIRT"),SYFOV_SYNONYME_FORME_VIRTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYFOV_SYNONYME_FORME_VIRT) Is Nothing) Then
                Me.tableSYFOV_SYNONYME_FORME_VIRT.InitVars
            End If
        End If
        Me.relationFK_GSP1 = Me.Relations("FK_GSP1")
        Me.relationFK_GSP = Me.Relations("FK_GSP")
        Me.relationFK_SAV = Me.Relations("FK_SAV")
        Me.relationSAV_SUBVIRT_PK = Me.Relations("SAV_SUBVIRT_PK")
        Me.relationFK__SYSAV_SYN__SYSAV__5AC46587 = Me.Relations("FK__SYSAV_SYN__SYSAV__5AC46587")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Virtuel_Pere"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Virtuel_Pere.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMVPF_MED_VIR_PERE_FORME = New MVPF_MED_VIR_PERE_FORMEDataTable
        MyBase.Tables.Add(Me.tableMVPF_MED_VIR_PERE_FORME)
        Me.tableMVPSDU_MED_VIR_PERE_SA = New MVPSDU_MED_VIR_PERE_SADataTable
        MyBase.Tables.Add(Me.tableMVPSDU_MED_VIR_PERE_SA)
        Me.tableGSP_GENERIQUE_SPECIALITE = New GSP_GENERIQUE_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableGSP_GENERIQUE_SPECIALITE)
        Me.tableSAV_SUBSTANCE_VIRTUELLE = New SAV_SUBSTANCE_VIRTUELLEDataTable
        MyBase.Tables.Add(Me.tableSAV_SUBSTANCE_VIRTUELLE)
        Me.tableFOV_FORME_VIRTUELLE = New FOV_FORME_VIRTUELLEDataTable
        MyBase.Tables.Add(Me.tableFOV_FORME_VIRTUELLE)
        Me.tableSAVSAC_SUBVIRT_SUBAC = New SAVSAC_SUBVIRT_SUBACDataTable
        MyBase.Tables.Add(Me.tableSAVSAC_SUBVIRT_SUBAC)
        Me.tableFOVCFO_FORMEVIRT_COMPFORME = New FOVCFO_FORMEVIRT_COMPFORMEDataTable
        MyBase.Tables.Add(Me.tableFOVCFO_FORMEVIRT_COMPFORME)
        Me.tableSYSAV_SYNONYME_SUBST_VIRT = New SYSAV_SYNONYME_SUBST_VIRTDataTable
        MyBase.Tables.Add(Me.tableSYSAV_SYNONYME_SUBST_VIRT)
        Me.tableSYFOV_SYNONYME_FORME_VIRT = New SYFOV_SYNONYME_FORME_VIRTDataTable
        MyBase.Tables.Add(Me.tableSYFOV_SYNONYME_FORME_VIRT)
        Me.relationFK_GSP1 = New Global.System.Data.DataRelation("FK_GSP1", New Global.System.Data.DataColumn() {Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_GSP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_GSP1)
        Me.relationFK_GSP = New Global.System.Data.DataRelation("FK_GSP", New Global.System.Data.DataColumn() {Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_GSP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_GSP)
        Me.relationFK_SAV = New Global.System.Data.DataRelation("FK_SAV", New Global.System.Data.DataColumn() {Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_SAV_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_SAV)
        Me.relationSAV_SUBVIRT_PK = New Global.System.Data.DataRelation("SAV_SUBVIRT_PK", New Global.System.Data.DataColumn() {Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableSAVSAC_SUBVIRT_SUBAC.SAVSAC_SAC_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationSAV_SUBVIRT_PK)
        Me.relationFK__SYSAV_SYN__SYSAV__5AC46587 = New Global.System.Data.DataRelation("FK__SYSAV_SYN__SYSAV__5AC46587", New Global.System.Data.DataColumn() {Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_SAV_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK__SYSAV_SYN__SYSAV__5AC46587)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPF_MED_VIR_PERE_FORME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMVPSDU_MED_VIR_PERE_SA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGSP_GENERIQUE_SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAV_SUBSTANCE_VIRTUELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFOV_FORME_VIRTUELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAVSAC_SUBVIRT_SUBAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFOVCFO_FORMEVIRT_COMPFORME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYSAV_SYNONYME_SUBST_VIRT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYFOV_SYNONYME_FORME_VIRT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MVPF_MED_VIR_PERE_FORMERowChangeEventHandler(ByVal sender As Object, ByVal e As MVPF_MED_VIR_PERE_FORMERowChangeEvent)
    
    Public Delegate Sub MVPSDU_MED_VIR_PERE_SARowChangeEventHandler(ByVal sender As Object, ByVal e As MVPSDU_MED_VIR_PERE_SARowChangeEvent)
    
    Public Delegate Sub GSP_GENERIQUE_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As GSP_GENERIQUE_SPECIALITERowChangeEvent)
    
    Public Delegate Sub SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler(ByVal sender As Object, ByVal e As SAV_SUBSTANCE_VIRTUELLERowChangeEvent)
    
    Public Delegate Sub FOV_FORME_VIRTUELLERowChangeEventHandler(ByVal sender As Object, ByVal e As FOV_FORME_VIRTUELLERowChangeEvent)
    
    Public Delegate Sub SAVSAC_SUBVIRT_SUBACRowChangeEventHandler(ByVal sender As Object, ByVal e As SAVSAC_SUBVIRT_SUBACRowChangeEvent)
    
    Public Delegate Sub FOVCFO_FORMEVIRT_COMPFORMERowChangeEventHandler(ByVal sender As Object, ByVal e As FOVCFO_FORMEVIRT_COMPFORMERowChangeEvent)
    
    Public Delegate Sub SYSAV_SYNONYME_SUBST_VIRTRowChangeEventHandler(ByVal sender As Object, ByVal e As SYSAV_SYNONYME_SUBST_VIRTRowChangeEvent)
    
    Public Delegate Sub SYFOV_SYNONYME_FORME_VIRTRowChangeEventHandler(ByVal sender As Object, ByVal e As SYFOV_SYNONYME_FORME_VIRTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPF_MED_VIR_PERE_FORMEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPF_GSP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPF_FOV_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPF_MED_VIR_PERE_FORME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPF_GSP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPF_GSP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPF_FOV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPF_FOV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPF_MED_VIR_PERE_FORMERow
            Get
                Return CType(Me.Rows(index),MVPF_MED_VIR_PERE_FORMERow)
            End Get
        End Property
        
        Public Event MVPF_MED_VIR_PERE_FORMERowChanging As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        Public Event MVPF_MED_VIR_PERE_FORMERowChanged As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        Public Event MVPF_MED_VIR_PERE_FORMERowDeleting As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        Public Event MVPF_MED_VIR_PERE_FORMERowDeleted As MVPF_MED_VIR_PERE_FORMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPF_MED_VIR_PERE_FORMERow(ByVal row As MVPF_MED_VIR_PERE_FORMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPF_MED_VIR_PERE_FORMERow(ByVal parentGSP_GENERIQUE_SPECIALITERowByFK_GSP1 As GSP_GENERIQUE_SPECIALITERow, ByVal MVPF_FOV_CODE_FK_PK As Integer) As MVPF_MED_VIR_PERE_FORMERow
            Dim rowMVPF_MED_VIR_PERE_FORMERow As MVPF_MED_VIR_PERE_FORMERow = CType(Me.NewRow,MVPF_MED_VIR_PERE_FORMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MVPF_FOV_CODE_FK_PK}
            If (Not (parentGSP_GENERIQUE_SPECIALITERowByFK_GSP1) Is Nothing) Then
                columnValuesArray(0) = parentGSP_GENERIQUE_SPECIALITERowByFK_GSP1(0)
            End If
            rowMVPF_MED_VIR_PERE_FORMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPF_MED_VIR_PERE_FORMERow)
            Return rowMVPF_MED_VIR_PERE_FORMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPF_GSP_CODE_FK_PKMVPF_FOV_CODE_FK_PK(ByVal MVPF_GSP_CODE_FK_PK As Integer, ByVal MVPF_FOV_CODE_FK_PK As Integer) As MVPF_MED_VIR_PERE_FORMERow
            Return CType(Me.Rows.Find(New Object() {MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK}),MVPF_MED_VIR_PERE_FORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPF_MED_VIR_PERE_FORMEDataTable = CType(MyBase.Clone,MVPF_MED_VIR_PERE_FORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPF_MED_VIR_PERE_FORMEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPF_GSP_CODE_FK_PK = MyBase.Columns("MVPF_GSP_CODE_FK_PK")
            Me.columnMVPF_FOV_CODE_FK_PK = MyBase.Columns("MVPF_FOV_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPF_GSP_CODE_FK_PK = New Global.System.Data.DataColumn("MVPF_GSP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPF_GSP_CODE_FK_PK)
            Me.columnMVPF_FOV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPF_FOV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPF_FOV_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPF_GSP_CODE_FK_PK, Me.columnMVPF_FOV_CODE_FK_PK}, true))
            Me.columnMVPF_GSP_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPF_FOV_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPF_MED_VIR_PERE_FORMERow() As MVPF_MED_VIR_PERE_FORMERow
            Return CType(Me.NewRow,MVPF_MED_VIR_PERE_FORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPF_MED_VIR_PERE_FORMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPF_MED_VIR_PERE_FORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowChangedEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowChanged(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowChangingEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowChanging(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowDeleted(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPF_MED_VIR_PERE_FORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPF_MED_VIR_PERE_FORMERowDeleting(Me, New MVPF_MED_VIR_PERE_FORMERowChangeEvent(CType(e.Row,MVPF_MED_VIR_PERE_FORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPF_MED_VIR_PERE_FORMERow(ByVal row As MVPF_MED_VIR_PERE_FORMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPF_MED_VIR_PERE_FORMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MVPSDU_MED_VIR_PERE_SADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMVPSDU_GSP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPSDU_SAV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnMVPSDU_DOSAGE As Global.System.Data.DataColumn
        
        Private columnMVPSDU_CDF_UNITE As Global.System.Data.DataColumn
        
        Private columnMVPSDU_NUM_ORD As Global.System.Data.DataColumn
        
        Private columnMVPSDU_CODE_ANSM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MVPSDU_MED_VIR_PERE_SA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_GSP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_GSP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_SAV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_SAV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_DOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_CDF_UNITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_CDF_UNITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_NUM_ORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_NUM_ORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVPSDU_CODE_ANSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVPSDU_CODE_ANSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MVPSDU_MED_VIR_PERE_SARow
            Get
                Return CType(Me.Rows(index),MVPSDU_MED_VIR_PERE_SARow)
            End Get
        End Property
        
        Public Event MVPSDU_MED_VIR_PERE_SARowChanging As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        Public Event MVPSDU_MED_VIR_PERE_SARowChanged As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        Public Event MVPSDU_MED_VIR_PERE_SARowDeleting As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        Public Event MVPSDU_MED_VIR_PERE_SARowDeleted As MVPSDU_MED_VIR_PERE_SARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMVPSDU_MED_VIR_PERE_SARow(ByVal row As MVPSDU_MED_VIR_PERE_SARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMVPSDU_MED_VIR_PERE_SARow(ByVal parentGSP_GENERIQUE_SPECIALITERowByFK_GSP As GSP_GENERIQUE_SPECIALITERow, ByVal parentSAV_SUBSTANCE_VIRTUELLERowByFK_SAV As SAV_SUBSTANCE_VIRTUELLERow, ByVal MVPSDU_DOSAGE As Integer, ByVal MVPSDU_CDF_UNITE As Integer, ByVal MVPSDU_CODE_ANSM As String) As MVPSDU_MED_VIR_PERE_SARow
            Dim rowMVPSDU_MED_VIR_PERE_SARow As MVPSDU_MED_VIR_PERE_SARow = CType(Me.NewRow,MVPSDU_MED_VIR_PERE_SARow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, Nothing, MVPSDU_CODE_ANSM}
            If (Not (parentGSP_GENERIQUE_SPECIALITERowByFK_GSP) Is Nothing) Then
                columnValuesArray(0) = parentGSP_GENERIQUE_SPECIALITERowByFK_GSP(0)
            End If
            If (Not (parentSAV_SUBSTANCE_VIRTUELLERowByFK_SAV) Is Nothing) Then
                columnValuesArray(1) = parentSAV_SUBSTANCE_VIRTUELLERowByFK_SAV(0)
            End If
            rowMVPSDU_MED_VIR_PERE_SARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMVPSDU_MED_VIR_PERE_SARow)
            Return rowMVPSDU_MED_VIR_PERE_SARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVPSDU_GSP_CODE_FK_PKMVPSDU_SAV_CODE_FK_PK(ByVal MVPSDU_GSP_CODE_FK_PK As Integer, ByVal MVPSDU_SAV_CODE_FK_PK As Integer) As MVPSDU_MED_VIR_PERE_SARow
            Return CType(Me.Rows.Find(New Object() {MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK}),MVPSDU_MED_VIR_PERE_SARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MVPSDU_MED_VIR_PERE_SADataTable = CType(MyBase.Clone,MVPSDU_MED_VIR_PERE_SADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MVPSDU_MED_VIR_PERE_SADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVPSDU_GSP_CODE_FK_PK = MyBase.Columns("MVPSDU_GSP_CODE_FK_PK")
            Me.columnMVPSDU_SAV_CODE_FK_PK = MyBase.Columns("MVPSDU_SAV_CODE_FK_PK")
            Me.columnMVPSDU_DOSAGE = MyBase.Columns("MVPSDU_DOSAGE")
            Me.columnMVPSDU_CDF_UNITE = MyBase.Columns("MVPSDU_CDF_UNITE")
            Me.columnMVPSDU_NUM_ORD = MyBase.Columns("MVPSDU_NUM_ORD")
            Me.columnMVPSDU_CODE_ANSM = MyBase.Columns("MVPSDU_CODE_ANSM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVPSDU_GSP_CODE_FK_PK = New Global.System.Data.DataColumn("MVPSDU_GSP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_GSP_CODE_FK_PK)
            Me.columnMVPSDU_SAV_CODE_FK_PK = New Global.System.Data.DataColumn("MVPSDU_SAV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_SAV_CODE_FK_PK)
            Me.columnMVPSDU_DOSAGE = New Global.System.Data.DataColumn("MVPSDU_DOSAGE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_DOSAGE)
            Me.columnMVPSDU_CDF_UNITE = New Global.System.Data.DataColumn("MVPSDU_CDF_UNITE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_CDF_UNITE)
            Me.columnMVPSDU_NUM_ORD = New Global.System.Data.DataColumn("MVPSDU_NUM_ORD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_NUM_ORD)
            Me.columnMVPSDU_CODE_ANSM = New Global.System.Data.DataColumn("MVPSDU_CODE_ANSM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVPSDU_CODE_ANSM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVPSDU_GSP_CODE_FK_PK, Me.columnMVPSDU_SAV_CODE_FK_PK}, true))
            Me.columnMVPSDU_GSP_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPSDU_SAV_CODE_FK_PK.AllowDBNull = false
            Me.columnMVPSDU_NUM_ORD.AutoIncrement = true
            Me.columnMVPSDU_NUM_ORD.AllowDBNull = false
            Me.columnMVPSDU_NUM_ORD.ReadOnly = true
            Me.columnMVPSDU_CODE_ANSM.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMVPSDU_MED_VIR_PERE_SARow() As MVPSDU_MED_VIR_PERE_SARow
            Return CType(Me.NewRow,MVPSDU_MED_VIR_PERE_SARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MVPSDU_MED_VIR_PERE_SARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MVPSDU_MED_VIR_PERE_SARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowChangedEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowChanged(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowChangingEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowChanging(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowDeletedEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowDeleted(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MVPSDU_MED_VIR_PERE_SARowDeletingEvent) Is Nothing) Then
                RaiseEvent MVPSDU_MED_VIR_PERE_SARowDeleting(Me, New MVPSDU_MED_VIR_PERE_SARowChangeEvent(CType(e.Row,MVPSDU_MED_VIR_PERE_SARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMVPSDU_MED_VIR_PERE_SARow(ByVal row As MVPSDU_MED_VIR_PERE_SARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MVPSDU_MED_VIR_PERE_SADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GSP_GENERIQUE_SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGSP_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnGSP_NOM As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_VIRTUEL As Global.System.Data.DataColumn
        
        Private columnGSP_DATECR As Global.System.Data.DataColumn
        
        Private columnGSP_DATEMJ As Global.System.Data.DataColumn
        
        Private columnGSP_PRESCRIPTION_DC As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_SP_REFERENCE As Global.System.Data.DataColumn
        
        Private columnGSP_INFO_GENERAL_TEXTE As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_VIRTUEL13 As Global.System.Data.DataColumn
        
        Private columnGSP_CODE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GSP_GENERIQUE_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_VIRTUELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_VIRTUEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_PRESCRIPTION_DCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_PRESCRIPTION_DC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_SP_REFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_SP_REFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_INFO_GENERAL_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_INFO_GENERAL_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_VIRTUEL13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_VIRTUEL13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSP_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSP_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GSP_GENERIQUE_SPECIALITERow
            Get
                Return CType(Me.Rows(index),GSP_GENERIQUE_SPECIALITERow)
            End Get
        End Property
        
        Public Event GSP_GENERIQUE_SPECIALITERowChanging As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        Public Event GSP_GENERIQUE_SPECIALITERowChanged As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        Public Event GSP_GENERIQUE_SPECIALITERowDeleting As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        Public Event GSP_GENERIQUE_SPECIALITERowDeleted As GSP_GENERIQUE_SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGSP_GENERIQUE_SPECIALITERow(ByVal row As GSP_GENERIQUE_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGSP_GENERIQUE_SPECIALITERow(ByVal GSP_CODE_SQ_PK As Integer, ByVal GSP_NOM As String, ByVal GSP_CODE_VIRTUEL As String, ByVal GSP_DATECR As Date, ByVal GSP_DATEMJ As Date, ByVal GSP_PRESCRIPTION_DC As Boolean, ByVal GSP_CODE_SP_REFERENCE As Integer, ByVal GSP_INFO_GENERAL_TEXTE As String, ByVal GSP_CODE_VIRTUEL13 As String, ByVal GSP_CODE_REF As String) As GSP_GENERIQUE_SPECIALITERow
            Dim rowGSP_GENERIQUE_SPECIALITERow As GSP_GENERIQUE_SPECIALITERow = CType(Me.NewRow,GSP_GENERIQUE_SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_REF}
            rowGSP_GENERIQUE_SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGSP_GENERIQUE_SPECIALITERow)
            Return rowGSP_GENERIQUE_SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGSP_CODE_SQ_PK(ByVal GSP_CODE_SQ_PK As Integer) As GSP_GENERIQUE_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {GSP_CODE_SQ_PK}),GSP_GENERIQUE_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GSP_GENERIQUE_SPECIALITEDataTable = CType(MyBase.Clone,GSP_GENERIQUE_SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GSP_GENERIQUE_SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGSP_CODE_SQ_PK = MyBase.Columns("GSP_CODE_SQ_PK")
            Me.columnGSP_NOM = MyBase.Columns("GSP_NOM")
            Me.columnGSP_CODE_VIRTUEL = MyBase.Columns("GSP_CODE_VIRTUEL")
            Me.columnGSP_DATECR = MyBase.Columns("GSP_DATECR")
            Me.columnGSP_DATEMJ = MyBase.Columns("GSP_DATEMJ")
            Me.columnGSP_PRESCRIPTION_DC = MyBase.Columns("GSP_PRESCRIPTION_DC")
            Me.columnGSP_CODE_SP_REFERENCE = MyBase.Columns("GSP_CODE_SP_REFERENCE")
            Me.columnGSP_INFO_GENERAL_TEXTE = MyBase.Columns("GSP_INFO_GENERAL_TEXTE")
            Me.columnGSP_CODE_VIRTUEL13 = MyBase.Columns("GSP_CODE_VIRTUEL13")
            Me.columnGSP_CODE_REF = MyBase.Columns("GSP_CODE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGSP_CODE_SQ_PK = New Global.System.Data.DataColumn("GSP_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_SQ_PK)
            Me.columnGSP_NOM = New Global.System.Data.DataColumn("GSP_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_NOM)
            Me.columnGSP_CODE_VIRTUEL = New Global.System.Data.DataColumn("GSP_CODE_VIRTUEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_VIRTUEL)
            Me.columnGSP_DATECR = New Global.System.Data.DataColumn("GSP_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_DATECR)
            Me.columnGSP_DATEMJ = New Global.System.Data.DataColumn("GSP_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_DATEMJ)
            Me.columnGSP_PRESCRIPTION_DC = New Global.System.Data.DataColumn("GSP_PRESCRIPTION_DC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_PRESCRIPTION_DC)
            Me.columnGSP_CODE_SP_REFERENCE = New Global.System.Data.DataColumn("GSP_CODE_SP_REFERENCE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_SP_REFERENCE)
            Me.columnGSP_INFO_GENERAL_TEXTE = New Global.System.Data.DataColumn("GSP_INFO_GENERAL_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_INFO_GENERAL_TEXTE)
            Me.columnGSP_CODE_VIRTUEL13 = New Global.System.Data.DataColumn("GSP_CODE_VIRTUEL13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_VIRTUEL13)
            Me.columnGSP_CODE_REF = New Global.System.Data.DataColumn("GSP_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSP_CODE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGSP_CODE_SQ_PK}, true))
            Me.columnGSP_CODE_SQ_PK.AllowDBNull = false
            Me.columnGSP_CODE_SQ_PK.Unique = true
            Me.columnGSP_NOM.AllowDBNull = false
            Me.columnGSP_NOM.MaxLength = 255
            Me.columnGSP_CODE_VIRTUEL.MaxLength = 7
            Me.columnGSP_DATECR.AllowDBNull = false
            Me.columnGSP_INFO_GENERAL_TEXTE.MaxLength = 4000
            Me.columnGSP_CODE_VIRTUEL13.MaxLength = 13
            Me.columnGSP_CODE_REF.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGSP_GENERIQUE_SPECIALITERow() As GSP_GENERIQUE_SPECIALITERow
            Return CType(Me.NewRow,GSP_GENERIQUE_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GSP_GENERIQUE_SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GSP_GENERIQUE_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowChanged(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowChanging(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowDeleted(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GSP_GENERIQUE_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent GSP_GENERIQUE_SPECIALITERowDeleting(Me, New GSP_GENERIQUE_SPECIALITERowChangeEvent(CType(e.Row,GSP_GENERIQUE_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGSP_GENERIQUE_SPECIALITERow(ByVal row As GSP_GENERIQUE_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GSP_GENERIQUE_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAV_SUBSTANCE_VIRTUELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSAV_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSAV_LIBELLE As Global.System.Data.DataColumn
        
        Private columnSAV_CODE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAV_SUBSTANCE_VIRTUELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAV_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAV_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAV_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAV_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAV_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAV_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.Rows(index),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
        End Property
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowChanging As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowChanged As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowDeleting As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        Public Event SAV_SUBSTANCE_VIRTUELLERowDeleted As SAV_SUBSTANCE_VIRTUELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAV_SUBSTANCE_VIRTUELLERow(ByVal row As SAV_SUBSTANCE_VIRTUELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAV_SUBSTANCE_VIRTUELLERow(ByVal SAV_CODE_SQ_PK As Integer, ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String) As SAV_SUBSTANCE_VIRTUELLERow
            Dim rowSAV_SUBSTANCE_VIRTUELLERow As SAV_SUBSTANCE_VIRTUELLERow = CType(Me.NewRow,SAV_SUBSTANCE_VIRTUELLERow)
            Dim columnValuesArray() As Object = New Object() {SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF}
            rowSAV_SUBSTANCE_VIRTUELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAV_SUBSTANCE_VIRTUELLERow)
            Return rowSAV_SUBSTANCE_VIRTUELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAV_CODE_SQ_PK(ByVal SAV_CODE_SQ_PK As Integer) As SAV_SUBSTANCE_VIRTUELLERow
            Return CType(Me.Rows.Find(New Object() {SAV_CODE_SQ_PK}),SAV_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAV_SUBSTANCE_VIRTUELLEDataTable = CType(MyBase.Clone,SAV_SUBSTANCE_VIRTUELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAV_SUBSTANCE_VIRTUELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAV_CODE_SQ_PK = MyBase.Columns("SAV_CODE_SQ_PK")
            Me.columnSAV_LIBELLE = MyBase.Columns("SAV_LIBELLE")
            Me.columnSAV_CODE_REF = MyBase.Columns("SAV_CODE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAV_CODE_SQ_PK = New Global.System.Data.DataColumn("SAV_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAV_CODE_SQ_PK)
            Me.columnSAV_LIBELLE = New Global.System.Data.DataColumn("SAV_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAV_LIBELLE)
            Me.columnSAV_CODE_REF = New Global.System.Data.DataColumn("SAV_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAV_CODE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSAV_CODE_SQ_PK}, true))
            Me.columnSAV_CODE_SQ_PK.AllowDBNull = false
            Me.columnSAV_CODE_SQ_PK.Unique = true
            Me.columnSAV_LIBELLE.MaxLength = 50
            Me.columnSAV_CODE_REF.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Return CType(Me.NewRow,SAV_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAV_SUBSTANCE_VIRTUELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAV_SUBSTANCE_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowChangedEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowChanged(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowChangingEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowChanging(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowDeleted(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAV_SUBSTANCE_VIRTUELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent SAV_SUBSTANCE_VIRTUELLERowDeleting(Me, New SAV_SUBSTANCE_VIRTUELLERowChangeEvent(CType(e.Row,SAV_SUBSTANCE_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAV_SUBSTANCE_VIRTUELLERow(ByVal row As SAV_SUBSTANCE_VIRTUELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAV_SUBSTANCE_VIRTUELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FOV_FORME_VIRTUELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFOV_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFOV_LIBELLE As Global.System.Data.DataColumn
        
        Private columnFOV_CODE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FOV_FORME_VIRTUELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOV_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOV_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOV_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOV_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOV_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOV_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FOV_FORME_VIRTUELLERow
            Get
                Return CType(Me.Rows(index),FOV_FORME_VIRTUELLERow)
            End Get
        End Property
        
        Public Event FOV_FORME_VIRTUELLERowChanging As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event FOV_FORME_VIRTUELLERowChanged As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event FOV_FORME_VIRTUELLERowDeleting As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        Public Event FOV_FORME_VIRTUELLERowDeleted As FOV_FORME_VIRTUELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFOV_FORME_VIRTUELLERow(ByVal row As FOV_FORME_VIRTUELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFOV_FORME_VIRTUELLERow(ByVal FOV_CODE_SQ_PK As Integer, ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String) As FOV_FORME_VIRTUELLERow
            Dim rowFOV_FORME_VIRTUELLERow As FOV_FORME_VIRTUELLERow = CType(Me.NewRow,FOV_FORME_VIRTUELLERow)
            Dim columnValuesArray() As Object = New Object() {FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF}
            rowFOV_FORME_VIRTUELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFOV_FORME_VIRTUELLERow)
            Return rowFOV_FORME_VIRTUELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFOV_CODE_SQ_PK(ByVal FOV_CODE_SQ_PK As Integer) As FOV_FORME_VIRTUELLERow
            Return CType(Me.Rows.Find(New Object() {FOV_CODE_SQ_PK}),FOV_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FOV_FORME_VIRTUELLEDataTable = CType(MyBase.Clone,FOV_FORME_VIRTUELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FOV_FORME_VIRTUELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFOV_CODE_SQ_PK = MyBase.Columns("FOV_CODE_SQ_PK")
            Me.columnFOV_LIBELLE = MyBase.Columns("FOV_LIBELLE")
            Me.columnFOV_CODE_REF = MyBase.Columns("FOV_CODE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFOV_CODE_SQ_PK = New Global.System.Data.DataColumn("FOV_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOV_CODE_SQ_PK)
            Me.columnFOV_LIBELLE = New Global.System.Data.DataColumn("FOV_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOV_LIBELLE)
            Me.columnFOV_CODE_REF = New Global.System.Data.DataColumn("FOV_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOV_CODE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFOV_CODE_SQ_PK}, true))
            Me.columnFOV_CODE_SQ_PK.AllowDBNull = false
            Me.columnFOV_CODE_SQ_PK.Unique = true
            Me.columnFOV_LIBELLE.MaxLength = 50
            Me.columnFOV_CODE_REF.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFOV_FORME_VIRTUELLERow() As FOV_FORME_VIRTUELLERow
            Return CType(Me.NewRow,FOV_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FOV_FORME_VIRTUELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FOV_FORME_VIRTUELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowChangedEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowChanged(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowChangingEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowChanging(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowDeleted(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FOV_FORME_VIRTUELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent FOV_FORME_VIRTUELLERowDeleting(Me, New FOV_FORME_VIRTUELLERowChangeEvent(CType(e.Row,FOV_FORME_VIRTUELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFOV_FORME_VIRTUELLERow(ByVal row As FOV_FORME_VIRTUELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FOV_FORME_VIRTUELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAVSAC_SUBVIRT_SUBACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSAVSAC_SAV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSAVSAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAVSAC_SUBVIRT_SUBAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAVSAC_SAV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAVSAC_SAV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAVSAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAVSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAVSAC_SUBVIRT_SUBACRow
            Get
                Return CType(Me.Rows(index),SAVSAC_SUBVIRT_SUBACRow)
            End Get
        End Property
        
        Public Event SAVSAC_SUBVIRT_SUBACRowChanging As SAVSAC_SUBVIRT_SUBACRowChangeEventHandler
        
        Public Event SAVSAC_SUBVIRT_SUBACRowChanged As SAVSAC_SUBVIRT_SUBACRowChangeEventHandler
        
        Public Event SAVSAC_SUBVIRT_SUBACRowDeleting As SAVSAC_SUBVIRT_SUBACRowChangeEventHandler
        
        Public Event SAVSAC_SUBVIRT_SUBACRowDeleted As SAVSAC_SUBVIRT_SUBACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAVSAC_SUBVIRT_SUBACRow(ByVal row As SAVSAC_SUBVIRT_SUBACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAVSAC_SUBVIRT_SUBACRow(ByVal SAVSAC_SAV_CODE_FK_PK As Integer, ByVal parentSAV_SUBSTANCE_VIRTUELLERowBySAV_SUBVIRT_PK As SAV_SUBSTANCE_VIRTUELLERow) As SAVSAC_SUBVIRT_SUBACRow
            Dim rowSAVSAC_SUBVIRT_SUBACRow As SAVSAC_SUBVIRT_SUBACRow = CType(Me.NewRow,SAVSAC_SUBVIRT_SUBACRow)
            Dim columnValuesArray() As Object = New Object() {SAVSAC_SAV_CODE_FK_PK, Nothing}
            If (Not (parentSAV_SUBSTANCE_VIRTUELLERowBySAV_SUBVIRT_PK) Is Nothing) Then
                columnValuesArray(1) = parentSAV_SUBSTANCE_VIRTUELLERowBySAV_SUBVIRT_PK(0)
            End If
            rowSAVSAC_SUBVIRT_SUBACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAVSAC_SUBVIRT_SUBACRow)
            Return rowSAVSAC_SUBVIRT_SUBACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAVSAC_SAV_CODE_FK_PKSAVSAC_SAC_CODE_FK_PK(ByVal SAVSAC_SAV_CODE_FK_PK As Integer, ByVal SAVSAC_SAC_CODE_FK_PK As Integer) As SAVSAC_SUBVIRT_SUBACRow
            Return CType(Me.Rows.Find(New Object() {SAVSAC_SAV_CODE_FK_PK, SAVSAC_SAC_CODE_FK_PK}),SAVSAC_SUBVIRT_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAVSAC_SUBVIRT_SUBACDataTable = CType(MyBase.Clone,SAVSAC_SUBVIRT_SUBACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAVSAC_SUBVIRT_SUBACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAVSAC_SAV_CODE_FK_PK = MyBase.Columns("SAVSAC_SAV_CODE_FK_PK")
            Me.columnSAVSAC_SAC_CODE_FK_PK = MyBase.Columns("SAVSAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAVSAC_SAV_CODE_FK_PK = New Global.System.Data.DataColumn("SAVSAC_SAV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAVSAC_SAV_CODE_FK_PK)
            Me.columnSAVSAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("SAVSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAVSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSAVSAC_SAV_CODE_FK_PK, Me.columnSAVSAC_SAC_CODE_FK_PK}, true))
            Me.columnSAVSAC_SAV_CODE_FK_PK.AllowDBNull = false
            Me.columnSAVSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAVSAC_SUBVIRT_SUBACRow() As SAVSAC_SUBVIRT_SUBACRow
            Return CType(Me.NewRow,SAVSAC_SUBVIRT_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAVSAC_SUBVIRT_SUBACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAVSAC_SUBVIRT_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAVSAC_SUBVIRT_SUBACRowChangedEvent) Is Nothing) Then
                RaiseEvent SAVSAC_SUBVIRT_SUBACRowChanged(Me, New SAVSAC_SUBVIRT_SUBACRowChangeEvent(CType(e.Row,SAVSAC_SUBVIRT_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAVSAC_SUBVIRT_SUBACRowChangingEvent) Is Nothing) Then
                RaiseEvent SAVSAC_SUBVIRT_SUBACRowChanging(Me, New SAVSAC_SUBVIRT_SUBACRowChangeEvent(CType(e.Row,SAVSAC_SUBVIRT_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAVSAC_SUBVIRT_SUBACRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAVSAC_SUBVIRT_SUBACRowDeleted(Me, New SAVSAC_SUBVIRT_SUBACRowChangeEvent(CType(e.Row,SAVSAC_SUBVIRT_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAVSAC_SUBVIRT_SUBACRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAVSAC_SUBVIRT_SUBACRowDeleting(Me, New SAVSAC_SUBVIRT_SUBACRowChangeEvent(CType(e.Row,SAVSAC_SUBVIRT_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAVSAC_SUBVIRT_SUBACRow(ByVal row As SAVSAC_SUBVIRT_SUBACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAVSAC_SUBVIRT_SUBACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FOVCFO_FORMEVIRT_COMPFORMEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFOVCFO_FOV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFOVCFO_CDF_CFO_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FOVCFO_FORMEVIRT_COMPFORME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOVCFO_FOV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOVCFO_FOV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOVCFO_CDF_CFO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOVCFO_CDF_CFO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FOVCFO_FORMEVIRT_COMPFORMERow
            Get
                Return CType(Me.Rows(index),FOVCFO_FORMEVIRT_COMPFORMERow)
            End Get
        End Property
        
        Public Event FOVCFO_FORMEVIRT_COMPFORMERowChanging As FOVCFO_FORMEVIRT_COMPFORMERowChangeEventHandler
        
        Public Event FOVCFO_FORMEVIRT_COMPFORMERowChanged As FOVCFO_FORMEVIRT_COMPFORMERowChangeEventHandler
        
        Public Event FOVCFO_FORMEVIRT_COMPFORMERowDeleting As FOVCFO_FORMEVIRT_COMPFORMERowChangeEventHandler
        
        Public Event FOVCFO_FORMEVIRT_COMPFORMERowDeleted As FOVCFO_FORMEVIRT_COMPFORMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFOVCFO_FORMEVIRT_COMPFORMERow(ByVal row As FOVCFO_FORMEVIRT_COMPFORMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFOVCFO_FORMEVIRT_COMPFORMERow(ByVal FOVCFO_FOV_CODE_FK_PK As Integer, ByVal FOVCFO_CDF_CFO_CODE_FK_PK As Integer) As FOVCFO_FORMEVIRT_COMPFORMERow
            Dim rowFOVCFO_FORMEVIRT_COMPFORMERow As FOVCFO_FORMEVIRT_COMPFORMERow = CType(Me.NewRow,FOVCFO_FORMEVIRT_COMPFORMERow)
            Dim columnValuesArray() As Object = New Object() {FOVCFO_FOV_CODE_FK_PK, FOVCFO_CDF_CFO_CODE_FK_PK}
            rowFOVCFO_FORMEVIRT_COMPFORMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFOVCFO_FORMEVIRT_COMPFORMERow)
            Return rowFOVCFO_FORMEVIRT_COMPFORMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFOVCFO_FOV_CODE_FK_PKFOVCFO_CDF_CFO_CODE_FK_PK(ByVal FOVCFO_FOV_CODE_FK_PK As Integer, ByVal FOVCFO_CDF_CFO_CODE_FK_PK As Integer) As FOVCFO_FORMEVIRT_COMPFORMERow
            Return CType(Me.Rows.Find(New Object() {FOVCFO_FOV_CODE_FK_PK, FOVCFO_CDF_CFO_CODE_FK_PK}),FOVCFO_FORMEVIRT_COMPFORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FOVCFO_FORMEVIRT_COMPFORMEDataTable = CType(MyBase.Clone,FOVCFO_FORMEVIRT_COMPFORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FOVCFO_FORMEVIRT_COMPFORMEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFOVCFO_FOV_CODE_FK_PK = MyBase.Columns("FOVCFO_FOV_CODE_FK_PK")
            Me.columnFOVCFO_CDF_CFO_CODE_FK_PK = MyBase.Columns("FOVCFO_CDF_CFO_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFOVCFO_FOV_CODE_FK_PK = New Global.System.Data.DataColumn("FOVCFO_FOV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOVCFO_FOV_CODE_FK_PK)
            Me.columnFOVCFO_CDF_CFO_CODE_FK_PK = New Global.System.Data.DataColumn("FOVCFO_CDF_CFO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOVCFO_CDF_CFO_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFOVCFO_FOV_CODE_FK_PK, Me.columnFOVCFO_CDF_CFO_CODE_FK_PK}, true))
            Me.columnFOVCFO_FOV_CODE_FK_PK.AllowDBNull = false
            Me.columnFOVCFO_CDF_CFO_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFOVCFO_FORMEVIRT_COMPFORMERow() As FOVCFO_FORMEVIRT_COMPFORMERow
            Return CType(Me.NewRow,FOVCFO_FORMEVIRT_COMPFORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FOVCFO_FORMEVIRT_COMPFORMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FOVCFO_FORMEVIRT_COMPFORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FOVCFO_FORMEVIRT_COMPFORMERowChangedEvent) Is Nothing) Then
                RaiseEvent FOVCFO_FORMEVIRT_COMPFORMERowChanged(Me, New FOVCFO_FORMEVIRT_COMPFORMERowChangeEvent(CType(e.Row,FOVCFO_FORMEVIRT_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FOVCFO_FORMEVIRT_COMPFORMERowChangingEvent) Is Nothing) Then
                RaiseEvent FOVCFO_FORMEVIRT_COMPFORMERowChanging(Me, New FOVCFO_FORMEVIRT_COMPFORMERowChangeEvent(CType(e.Row,FOVCFO_FORMEVIRT_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FOVCFO_FORMEVIRT_COMPFORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent FOVCFO_FORMEVIRT_COMPFORMERowDeleted(Me, New FOVCFO_FORMEVIRT_COMPFORMERowChangeEvent(CType(e.Row,FOVCFO_FORMEVIRT_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FOVCFO_FORMEVIRT_COMPFORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent FOVCFO_FORMEVIRT_COMPFORMERowDeleting(Me, New FOVCFO_FORMEVIRT_COMPFORMERowChangeEvent(CType(e.Row,FOVCFO_FORMEVIRT_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFOVCFO_FORMEVIRT_COMPFORMERow(ByVal row As FOVCFO_FORMEVIRT_COMPFORMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FOVCFO_FORMEVIRT_COMPFORMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYSAV_SYNONYME_SUBST_VIRTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYSAV_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSYSAV_SAV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSYSAV_LIBELLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYSAV_SYNONYME_SUBST_VIRT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAV_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSAV_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAV_SAV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSAV_SAV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAV_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSAV_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYSAV_SYNONYME_SUBST_VIRTRow
            Get
                Return CType(Me.Rows(index),SYSAV_SYNONYME_SUBST_VIRTRow)
            End Get
        End Property
        
        Public Event SYSAV_SYNONYME_SUBST_VIRTRowChanging As SYSAV_SYNONYME_SUBST_VIRTRowChangeEventHandler
        
        Public Event SYSAV_SYNONYME_SUBST_VIRTRowChanged As SYSAV_SYNONYME_SUBST_VIRTRowChangeEventHandler
        
        Public Event SYSAV_SYNONYME_SUBST_VIRTRowDeleting As SYSAV_SYNONYME_SUBST_VIRTRowChangeEventHandler
        
        Public Event SYSAV_SYNONYME_SUBST_VIRTRowDeleted As SYSAV_SYNONYME_SUBST_VIRTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYSAV_SYNONYME_SUBST_VIRTRow(ByVal row As SYSAV_SYNONYME_SUBST_VIRTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYSAV_SYNONYME_SUBST_VIRTRow(ByVal parentSAV_SUBSTANCE_VIRTUELLERowByFK__SYSAV_SYN__SYSAV__5AC46587 As SAV_SUBSTANCE_VIRTUELLERow, ByVal SYSAV_LIBELLE As String) As SYSAV_SYNONYME_SUBST_VIRTRow
            Dim rowSYSAV_SYNONYME_SUBST_VIRTRow As SYSAV_SYNONYME_SUBST_VIRTRow = CType(Me.NewRow,SYSAV_SYNONYME_SUBST_VIRTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, SYSAV_LIBELLE}
            If (Not (parentSAV_SUBSTANCE_VIRTUELLERowByFK__SYSAV_SYN__SYSAV__5AC46587) Is Nothing) Then
                columnValuesArray(1) = parentSAV_SUBSTANCE_VIRTUELLERowByFK__SYSAV_SYN__SYSAV__5AC46587(0)
            End If
            rowSYSAV_SYNONYME_SUBST_VIRTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYSAV_SYNONYME_SUBST_VIRTRow)
            Return rowSYSAV_SYNONYME_SUBST_VIRTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYSAV_CODE_SQ_PKSYSAV_SAV_CODE_FK_PK(ByVal SYSAV_CODE_SQ_PK As Integer, ByVal SYSAV_SAV_CODE_FK_PK As Integer) As SYSAV_SYNONYME_SUBST_VIRTRow
            Return CType(Me.Rows.Find(New Object() {SYSAV_CODE_SQ_PK, SYSAV_SAV_CODE_FK_PK}),SYSAV_SYNONYME_SUBST_VIRTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYSAV_SYNONYME_SUBST_VIRTDataTable = CType(MyBase.Clone,SYSAV_SYNONYME_SUBST_VIRTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYSAV_SYNONYME_SUBST_VIRTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYSAV_CODE_SQ_PK = MyBase.Columns("SYSAV_CODE_SQ_PK")
            Me.columnSYSAV_SAV_CODE_FK_PK = MyBase.Columns("SYSAV_SAV_CODE_FK_PK")
            Me.columnSYSAV_LIBELLE = MyBase.Columns("SYSAV_LIBELLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYSAV_CODE_SQ_PK = New Global.System.Data.DataColumn("SYSAV_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAV_CODE_SQ_PK)
            Me.columnSYSAV_SAV_CODE_FK_PK = New Global.System.Data.DataColumn("SYSAV_SAV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAV_SAV_CODE_FK_PK)
            Me.columnSYSAV_LIBELLE = New Global.System.Data.DataColumn("SYSAV_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAV_LIBELLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYSAV_CODE_SQ_PK, Me.columnSYSAV_SAV_CODE_FK_PK}, true))
            Me.columnSYSAV_CODE_SQ_PK.AutoIncrement = true
            Me.columnSYSAV_CODE_SQ_PK.AllowDBNull = false
            Me.columnSYSAV_CODE_SQ_PK.ReadOnly = true
            Me.columnSYSAV_SAV_CODE_FK_PK.AllowDBNull = false
            Me.columnSYSAV_LIBELLE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYSAV_SYNONYME_SUBST_VIRTRow() As SYSAV_SYNONYME_SUBST_VIRTRow
            Return CType(Me.NewRow,SYSAV_SYNONYME_SUBST_VIRTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYSAV_SYNONYME_SUBST_VIRTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYSAV_SYNONYME_SUBST_VIRTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYSAV_SYNONYME_SUBST_VIRTRowChangedEvent) Is Nothing) Then
                RaiseEvent SYSAV_SYNONYME_SUBST_VIRTRowChanged(Me, New SYSAV_SYNONYME_SUBST_VIRTRowChangeEvent(CType(e.Row,SYSAV_SYNONYME_SUBST_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYSAV_SYNONYME_SUBST_VIRTRowChangingEvent) Is Nothing) Then
                RaiseEvent SYSAV_SYNONYME_SUBST_VIRTRowChanging(Me, New SYSAV_SYNONYME_SUBST_VIRTRowChangeEvent(CType(e.Row,SYSAV_SYNONYME_SUBST_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYSAV_SYNONYME_SUBST_VIRTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYSAV_SYNONYME_SUBST_VIRTRowDeleted(Me, New SYSAV_SYNONYME_SUBST_VIRTRowChangeEvent(CType(e.Row,SYSAV_SYNONYME_SUBST_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYSAV_SYNONYME_SUBST_VIRTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYSAV_SYNONYME_SUBST_VIRTRowDeleting(Me, New SYSAV_SYNONYME_SUBST_VIRTRowChangeEvent(CType(e.Row,SYSAV_SYNONYME_SUBST_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYSAV_SYNONYME_SUBST_VIRTRow(ByVal row As SYSAV_SYNONYME_SUBST_VIRTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYSAV_SYNONYME_SUBST_VIRTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYFOV_SYNONYME_FORME_VIRTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSYFOV_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSYFOV_FOV_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSYFOV_LIBELLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYFOV_SYNONYME_FORME_VIRT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFOV_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYFOV_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFOV_FOV_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYFOV_FOV_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFOV_LIBELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYFOV_LIBELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYFOV_SYNONYME_FORME_VIRTRow
            Get
                Return CType(Me.Rows(index),SYFOV_SYNONYME_FORME_VIRTRow)
            End Get
        End Property
        
        Public Event SYFOV_SYNONYME_FORME_VIRTRowChanging As SYFOV_SYNONYME_FORME_VIRTRowChangeEventHandler
        
        Public Event SYFOV_SYNONYME_FORME_VIRTRowChanged As SYFOV_SYNONYME_FORME_VIRTRowChangeEventHandler
        
        Public Event SYFOV_SYNONYME_FORME_VIRTRowDeleting As SYFOV_SYNONYME_FORME_VIRTRowChangeEventHandler
        
        Public Event SYFOV_SYNONYME_FORME_VIRTRowDeleted As SYFOV_SYNONYME_FORME_VIRTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYFOV_SYNONYME_FORME_VIRTRow(ByVal row As SYFOV_SYNONYME_FORME_VIRTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYFOV_SYNONYME_FORME_VIRTRow(ByVal SYFOV_FOV_CODE_FK_PK As Integer, ByVal SYFOV_LIBELLE As String) As SYFOV_SYNONYME_FORME_VIRTRow
            Dim rowSYFOV_SYNONYME_FORME_VIRTRow As SYFOV_SYNONYME_FORME_VIRTRow = CType(Me.NewRow,SYFOV_SYNONYME_FORME_VIRTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SYFOV_FOV_CODE_FK_PK, SYFOV_LIBELLE}
            rowSYFOV_SYNONYME_FORME_VIRTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYFOV_SYNONYME_FORME_VIRTRow)
            Return rowSYFOV_SYNONYME_FORME_VIRTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYFOV_CODE_SQ_PKSYFOV_FOV_CODE_FK_PK(ByVal SYFOV_CODE_SQ_PK As Integer, ByVal SYFOV_FOV_CODE_FK_PK As Integer) As SYFOV_SYNONYME_FORME_VIRTRow
            Return CType(Me.Rows.Find(New Object() {SYFOV_CODE_SQ_PK, SYFOV_FOV_CODE_FK_PK}),SYFOV_SYNONYME_FORME_VIRTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYFOV_SYNONYME_FORME_VIRTDataTable = CType(MyBase.Clone,SYFOV_SYNONYME_FORME_VIRTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYFOV_SYNONYME_FORME_VIRTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYFOV_CODE_SQ_PK = MyBase.Columns("SYFOV_CODE_SQ_PK")
            Me.columnSYFOV_FOV_CODE_FK_PK = MyBase.Columns("SYFOV_FOV_CODE_FK_PK")
            Me.columnSYFOV_LIBELLE = MyBase.Columns("SYFOV_LIBELLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYFOV_CODE_SQ_PK = New Global.System.Data.DataColumn("SYFOV_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFOV_CODE_SQ_PK)
            Me.columnSYFOV_FOV_CODE_FK_PK = New Global.System.Data.DataColumn("SYFOV_FOV_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFOV_FOV_CODE_FK_PK)
            Me.columnSYFOV_LIBELLE = New Global.System.Data.DataColumn("SYFOV_LIBELLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFOV_LIBELLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYFOV_CODE_SQ_PK, Me.columnSYFOV_FOV_CODE_FK_PK}, true))
            Me.columnSYFOV_CODE_SQ_PK.AutoIncrement = true
            Me.columnSYFOV_CODE_SQ_PK.AllowDBNull = false
            Me.columnSYFOV_CODE_SQ_PK.ReadOnly = true
            Me.columnSYFOV_FOV_CODE_FK_PK.AllowDBNull = false
            Me.columnSYFOV_LIBELLE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYFOV_SYNONYME_FORME_VIRTRow() As SYFOV_SYNONYME_FORME_VIRTRow
            Return CType(Me.NewRow,SYFOV_SYNONYME_FORME_VIRTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYFOV_SYNONYME_FORME_VIRTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYFOV_SYNONYME_FORME_VIRTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYFOV_SYNONYME_FORME_VIRTRowChangedEvent) Is Nothing) Then
                RaiseEvent SYFOV_SYNONYME_FORME_VIRTRowChanged(Me, New SYFOV_SYNONYME_FORME_VIRTRowChangeEvent(CType(e.Row,SYFOV_SYNONYME_FORME_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYFOV_SYNONYME_FORME_VIRTRowChangingEvent) Is Nothing) Then
                RaiseEvent SYFOV_SYNONYME_FORME_VIRTRowChanging(Me, New SYFOV_SYNONYME_FORME_VIRTRowChangeEvent(CType(e.Row,SYFOV_SYNONYME_FORME_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYFOV_SYNONYME_FORME_VIRTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYFOV_SYNONYME_FORME_VIRTRowDeleted(Me, New SYFOV_SYNONYME_FORME_VIRTRowChangeEvent(CType(e.Row,SYFOV_SYNONYME_FORME_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYFOV_SYNONYME_FORME_VIRTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYFOV_SYNONYME_FORME_VIRTRowDeleting(Me, New SYFOV_SYNONYME_FORME_VIRTRowChangeEvent(CType(e.Row,SYFOV_SYNONYME_FORME_VIRTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYFOV_SYNONYME_FORME_VIRTRow(ByVal row As SYFOV_SYNONYME_FORME_VIRTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Virtuel_Pere = New dsTheriaque_Virtuel_Pere
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYFOV_SYNONYME_FORME_VIRTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPF_MED_VIR_PERE_FORMERow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPF_MED_VIR_PERE_FORME As MVPF_MED_VIR_PERE_FORMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPF_MED_VIR_PERE_FORME = CType(Me.Table,MVPF_MED_VIR_PERE_FORMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPF_GSP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_GSP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_GSP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPF_FOV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_FOV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPF_MED_VIR_PERE_FORME.MVPF_FOV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_GENERIQUE_SPECIALITERow() As GSP_GENERIQUE_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_GSP1")),GSP_GENERIQUE_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_GSP1"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MVPSDU_MED_VIR_PERE_SARow
        Inherits Global.System.Data.DataRow
        
        Private tableMVPSDU_MED_VIR_PERE_SA As MVPSDU_MED_VIR_PERE_SADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMVPSDU_MED_VIR_PERE_SA = CType(Me.Table,MVPSDU_MED_VIR_PERE_SADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_GSP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_GSP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_GSP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_SAV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_SAV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_SAV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_DOSAGE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPSDU_DOSAGE' dans la table 'MVPSDU_MED_VIR_PERE_SA' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_CDF_UNITE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPSDU_CDF_UNITE' dans la table 'MVPSDU_MED_VIR_PERE_S"& _ 
                            "A' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_NUM_ORD() As Integer
            Get
                Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_NUM_ORDColumn),Integer)
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_NUM_ORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVPSDU_CODE_ANSM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'MVPSDU_CODE_ANSM' dans la table 'MVPSDU_MED_VIR_PERE_S"& _ 
                            "A' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_GENERIQUE_SPECIALITERow() As GSP_GENERIQUE_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_GSP")),GSP_GENERIQUE_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_GSP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SAV")),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SAV"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPSDU_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPSDU_DOSAGENull()
            Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_DOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPSDU_CDF_UNITENull() As Boolean
            Return Me.IsNull(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPSDU_CDF_UNITENull()
            Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CDF_UNITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVPSDU_CODE_ANSMNull() As Boolean
            Return Me.IsNull(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVPSDU_CODE_ANSMNull()
            Me(Me.tableMVPSDU_MED_VIR_PERE_SA.MVPSDU_CODE_ANSMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GSP_GENERIQUE_SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableGSP_GENERIQUE_SPECIALITE As GSP_GENERIQUE_SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGSP_GENERIQUE_SPECIALITE = CType(Me.Table,GSP_GENERIQUE_SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_NOM() As String
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_NOMColumn),String)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_VIRTUEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_VIRTUEL' dans la table 'GSP_GENERIQUE_SPECIAL"& _ 
                            "ITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_DATECR() As Date
            Get
                Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_DATEMJ' dans la table 'GSP_GENERIQUE_SPECIALITE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_PRESCRIPTION_DC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_PRESCRIPTION_DC' dans la table 'GSP_GENERIQUE_SPEC"& _ 
                            "IALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_SP_REFERENCE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_SP_REFERENCE' dans la table 'GSP_GENERIQUE_SP"& _ 
                            "ECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_INFO_GENERAL_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_INFO_GENERAL_TEXTE' dans la table 'GSP_GENERIQUE_S"& _ 
                            "PECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_VIRTUEL13() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_VIRTUEL13' dans la table 'GSP_GENERIQUE_SPECI"& _ 
                            "ALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSP_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'GSP_CODE_REF' dans la table 'GSP_GENERIQUE_SPECIALITE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_VIRTUELNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_VIRTUELNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_DATEMJNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_PRESCRIPTION_DCNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_PRESCRIPTION_DCNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_PRESCRIPTION_DCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_SP_REFERENCENull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_SP_REFERENCENull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_SP_REFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_INFO_GENERAL_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_INFO_GENERAL_TEXTENull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_INFO_GENERAL_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_VIRTUEL13Null() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_VIRTUEL13Null()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_VIRTUEL13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSP_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSP_CODE_REFNull()
            Me(Me.tableGSP_GENERIQUE_SPECIALITE.GSP_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPF_MED_VIR_PERE_FORMERows() As MVPF_MED_VIR_PERE_FORMERow()
            If (Me.Table.ChildRelations("FK_GSP1") Is Nothing) Then
                Return New MVPF_MED_VIR_PERE_FORMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_GSP1")),MVPF_MED_VIR_PERE_FORMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPSDU_MED_VIR_PERE_SARows() As MVPSDU_MED_VIR_PERE_SARow()
            If (Me.Table.ChildRelations("FK_GSP") Is Nothing) Then
                Return New MVPSDU_MED_VIR_PERE_SARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_GSP")),MVPSDU_MED_VIR_PERE_SARow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAV_SUBSTANCE_VIRTUELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableSAV_SUBSTANCE_VIRTUELLE As SAV_SUBSTANCE_VIRTUELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAV_SUBSTANCE_VIRTUELLE = CType(Me.Table,SAV_SUBSTANCE_VIRTUELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAV_LIBELLE' dans la table 'SAV_SUBSTANCE_VIRTUELLE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAV_CODE_REF' dans la table 'SAV_SUBSTANCE_VIRTUELLE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAV_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAV_LIBELLENull()
            Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAV_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAV_CODE_REFNull()
            Me(Me.tableSAV_SUBSTANCE_VIRTUELLE.SAV_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMVPSDU_MED_VIR_PERE_SARows() As MVPSDU_MED_VIR_PERE_SARow()
            If (Me.Table.ChildRelations("FK_SAV") Is Nothing) Then
                Return New MVPSDU_MED_VIR_PERE_SARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SAV")),MVPSDU_MED_VIR_PERE_SARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSAVSAC_SUBVIRT_SUBACRows() As SAVSAC_SUBVIRT_SUBACRow()
            If (Me.Table.ChildRelations("SAV_SUBVIRT_PK") Is Nothing) Then
                Return New SAVSAC_SUBVIRT_SUBACRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SAV_SUBVIRT_PK")),SAVSAC_SUBVIRT_SUBACRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYSAV_SYNONYME_SUBST_VIRTRows() As SYSAV_SYNONYME_SUBST_VIRTRow()
            If (Me.Table.ChildRelations("FK__SYSAV_SYN__SYSAV__5AC46587") Is Nothing) Then
                Return New SYSAV_SYNONYME_SUBST_VIRTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__SYSAV_SYN__SYSAV__5AC46587")),SYSAV_SYNONYME_SUBST_VIRTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FOV_FORME_VIRTUELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableFOV_FORME_VIRTUELLE As FOV_FORME_VIRTUELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFOV_FORME_VIRTUELLE = CType(Me.Table,FOV_FORME_VIRTUELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FOV_LIBELLE' dans la table 'FOV_FORME_VIRTUELLE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOV_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FOV_CODE_REF' dans la table 'FOV_FORME_VIRTUELLE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOV_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOV_LIBELLENull()
            Me(Me.tableFOV_FORME_VIRTUELLE.FOV_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOV_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOV_CODE_REFNull()
            Me(Me.tableFOV_FORME_VIRTUELLE.FOV_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAVSAC_SUBVIRT_SUBACRow
        Inherits Global.System.Data.DataRow
        
        Private tableSAVSAC_SUBVIRT_SUBAC As SAVSAC_SUBVIRT_SUBACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAVSAC_SUBVIRT_SUBAC = CType(Me.Table,SAVSAC_SUBVIRT_SUBACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAVSAC_SAV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAVSAC_SUBVIRT_SUBAC.SAVSAC_SAV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAVSAC_SUBVIRT_SUBAC.SAVSAC_SAV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAVSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAVSAC_SUBVIRT_SUBAC.SAVSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAVSAC_SUBVIRT_SUBAC.SAVSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SAV_SUBVIRT_PK")),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SAV_SUBVIRT_PK"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FOVCFO_FORMEVIRT_COMPFORMERow
        Inherits Global.System.Data.DataRow
        
        Private tableFOVCFO_FORMEVIRT_COMPFORME As FOVCFO_FORMEVIRT_COMPFORMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFOVCFO_FORMEVIRT_COMPFORME = CType(Me.Table,FOVCFO_FORMEVIRT_COMPFORMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOVCFO_FOV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFOVCFO_FORMEVIRT_COMPFORME.FOVCFO_FOV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFOVCFO_FORMEVIRT_COMPFORME.FOVCFO_FOV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOVCFO_CDF_CFO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFOVCFO_FORMEVIRT_COMPFORME.FOVCFO_CDF_CFO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFOVCFO_FORMEVIRT_COMPFORME.FOVCFO_CDF_CFO_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYSAV_SYNONYME_SUBST_VIRTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYSAV_SYNONYME_SUBST_VIRT As SYSAV_SYNONYME_SUBST_VIRTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYSAV_SYNONYME_SUBST_VIRT = CType(Me.Table,SYSAV_SYNONYME_SUBST_VIRTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAV_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAV_SAV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_SAV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_SAV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAV_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SYSAV_LIBELLE' dans la table 'SYSAV_SYNONYME_SUBST_VIR"& _ 
                            "T' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAV_SUBSTANCE_VIRTUELLERow() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__SYSAV_SYN__SYSAV__5AC46587")),SAV_SUBSTANCE_VIRTUELLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__SYSAV_SYN__SYSAV__5AC46587"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYSAV_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYSAV_LIBELLENull()
            Me(Me.tableSYSAV_SYNONYME_SUBST_VIRT.SYSAV_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYFOV_SYNONYME_FORME_VIRTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYFOV_SYNONYME_FORME_VIRT As SYFOV_SYNONYME_FORME_VIRTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYFOV_SYNONYME_FORME_VIRT = CType(Me.Table,SYFOV_SYNONYME_FORME_VIRTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFOV_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFOV_FOV_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_FOV_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_FOV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFOV_LIBELLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_LIBELLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SYFOV_LIBELLE' dans la table 'SYFOV_SYNONYME_FORME_VIR"& _ 
                            "T' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_LIBELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYFOV_LIBELLENull() As Boolean
            Return Me.IsNull(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_LIBELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYFOV_LIBELLENull()
            Me(Me.tableSYFOV_SYNONYME_FORME_VIRT.SYFOV_LIBELLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPF_MED_VIR_PERE_FORMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPF_MED_VIR_PERE_FORMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPF_MED_VIR_PERE_FORMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPF_MED_VIR_PERE_FORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MVPSDU_MED_VIR_PERE_SARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MVPSDU_MED_VIR_PERE_SARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MVPSDU_MED_VIR_PERE_SARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MVPSDU_MED_VIR_PERE_SARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GSP_GENERIQUE_SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GSP_GENERIQUE_SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GSP_GENERIQUE_SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GSP_GENERIQUE_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAV_SUBSTANCE_VIRTUELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAV_SUBSTANCE_VIRTUELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAV_SUBSTANCE_VIRTUELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAV_SUBSTANCE_VIRTUELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FOV_FORME_VIRTUELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FOV_FORME_VIRTUELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FOV_FORME_VIRTUELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FOV_FORME_VIRTUELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAVSAC_SUBVIRT_SUBACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAVSAC_SUBVIRT_SUBACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAVSAC_SUBVIRT_SUBACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAVSAC_SUBVIRT_SUBACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FOVCFO_FORMEVIRT_COMPFORMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FOVCFO_FORMEVIRT_COMPFORMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FOVCFO_FORMEVIRT_COMPFORMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FOVCFO_FORMEVIRT_COMPFORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYSAV_SYNONYME_SUBST_VIRTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYSAV_SYNONYME_SUBST_VIRTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYSAV_SYNONYME_SUBST_VIRTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYSAV_SYNONYME_SUBST_VIRTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYFOV_SYNONYME_FORME_VIRTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYFOV_SYNONYME_FORME_VIRTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYFOV_SYNONYME_FORME_VIRTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYFOV_SYNONYME_FORME_VIRTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Virtuel_PereTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MVPF_MED_VIR_PERE_FORMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPF_MED_VIR_PERE_FORME"
            tableMapping.ColumnMappings.Add("MVPF_GSP_CODE_FK_PK", "MVPF_GSP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPF_FOV_CODE_FK_PK", "MVPF_FOV_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPF_MED_VIR_PERE_FORME] WHERE (([MVPF_GSP_CODE_FK_PK] ="& _ 
                " @Original_MVPF_GSP_CODE_FK_PK) AND ([MVPF_FOV_CODE_FK_PK] = @Original_MVPF_FOV_"& _ 
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPF_MED_VIR_PERE_FORME] ([MVPF_GSP_CODE_FK_PK], [MVPF_F"& _ 
                "OV_CODE_FK_PK]) VALUES (@MVPF_GSP_CODE_FK_PK, @MVPF_FOV_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVP"& _ 
                "F_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM theriaque.MVPF_MED_VIR_PERE_FORME WHE"& _ 
                "RE (MVPF_FOV_CODE_FK_PK = @MVPF_FOV_CODE_FK_PK) AND (MVPF_GSP_CODE_FK_PK = @MVPF"& _ 
                "_GSP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPF_MED_VIR_PERE_FORME] SET [MVPF_GSP_CODE_FK_PK] = @MVPF_GS"& _ 
                "P_CODE_FK_PK, [MVPF_FOV_CODE_FK_PK] = @MVPF_FOV_CODE_FK_PK WHERE (([MVPF_GSP_COD"& _ 
                "E_FK_PK] = @Original_MVPF_GSP_CODE_FK_PK) AND ([MVPF_FOV_CODE_FK_PK] = @Original"& _ 
                "_MVPF_FOV_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM th"& _ 
                "eriaque.MVPF_MED_VIR_PERE_FORME WHERE (MVPF_FOV_CODE_FK_PK = @MVPF_FOV_CODE_FK_P"& _ 
                "K) AND (MVPF_GSP_CODE_FK_PK = @MVPF_GSP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPF_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPF_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPF_GSP_CODE_FK_PK, MVPF_FOV_CODE_FK_PK FROM theriaque.MVPF_MED_VIR_PERE_" & _
                "FORME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.MVPF_MED_VIR_PERE_FORMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.MVPF_MED_VIR_PERE_FORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.MVPF_MED_VIR_PERE_FORMEDataTable = New dsTheriaque_Virtuel_Pere.MVPF_MED_VIR_PERE_FORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.MVPF_MED_VIR_PERE_FORMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "MVPF_MED_VIR_PERE_FORME")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPF_GSP_CODE_FK_PK As Integer, ByVal Original_MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPF_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPF_GSP_CODE_FK_PK As Integer, ByVal MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPF_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPF_GSP_CODE_FK_PK As Integer, ByVal MVPF_FOV_CODE_FK_PK As Integer, ByVal Original_MVPF_GSP_CODE_FK_PK As Integer, ByVal Original_MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPF_FOV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MVPF_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MVPF_FOV_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_MVPF_GSP_CODE_FK_PK As Integer, ByVal Original_MVPF_FOV_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_MVPF_GSP_CODE_FK_PK, Original_MVPF_FOV_CODE_FK_PK, Original_MVPF_GSP_CODE_FK_PK, Original_MVPF_FOV_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class MVPSDU_MED_VIR_PERE_SATableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MVPSDU_MED_VIR_PERE_SA"
            tableMapping.ColumnMappings.Add("MVPSDU_GSP_CODE_FK_PK", "MVPSDU_GSP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPSDU_SAV_CODE_FK_PK", "MVPSDU_SAV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("MVPSDU_DOSAGE", "MVPSDU_DOSAGE")
            tableMapping.ColumnMappings.Add("MVPSDU_CDF_UNITE", "MVPSDU_CDF_UNITE")
            tableMapping.ColumnMappings.Add("MVPSDU_NUM_ORD", "MVPSDU_NUM_ORD")
            tableMapping.ColumnMappings.Add("MVPSDU_CODE_ANSM", "MVPSDU_CODE_ANSM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[MVPSDU_MED_VIR_PERE_SA] WHERE (([MVPSDU_GSP_CODE_FK_PK] " & _
                "= @Original_MVPSDU_GSP_CODE_FK_PK) AND ([MVPSDU_SAV_CODE_FK_PK] = @Original_MVPS" & _
                "DU_SAV_CODE_FK_PK) AND ((@IsNull_MVPSDU_DOSAGE = 1 AND [MVPSDU_DOSAGE] IS NULL) " & _
                "OR ([MVPSDU_DOSAGE] = @Original_MVPSDU_DOSAGE)) AND ((@IsNull_MVPSDU_CDF_UNITE =" & _
                " 1 AND [MVPSDU_CDF_UNITE] IS NULL) OR ([MVPSDU_CDF_UNITE] = @Original_MVPSDU_CDF" & _
                "_UNITE)) AND ([MVPSDU_NUM_ORD] = @Original_MVPSDU_NUM_ORD) AND ((@IsNull_MVPSDU_" & _
                "CODE_ANSM = 1 AND [MVPSDU_CODE_ANSM] IS NULL) OR ([MVPSDU_CODE_ANSM] = @Original" & _
                "_MVPSDU_CODE_ANSM)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[MVPSDU_MED_VIR_PERE_SA] ([MVPSDU_GSP_CODE_FK_PK], [MVPSD" & _
                "U_SAV_CODE_FK_PK], [MVPSDU_DOSAGE], [MVPSDU_CDF_UNITE], [MVPSDU_CODE_ANSM]) VALU" & _
                "ES (@MVPSDU_GSP_CODE_FK_PK, @MVPSDU_SAV_CODE_FK_PK, @MVPSDU_DOSAGE, @MVPSDU_CDF_" & _
                "UNITE, @MVPSDU_CODE_ANSM);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK," & _
                " MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, MVPSDU_NUM_ORD, MVPSDU_CODE_ANSM FROM theriaqu" & _
                "e.MVPSDU_MED_VIR_PERE_SA WHERE (MVPSDU_GSP_CODE_FK_PK = @MVPSDU_GSP_CODE_FK_PK) " & _
                "AND (MVPSDU_SAV_CODE_FK_PK = @MVPSDU_SAV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[MVPSDU_MED_VIR_PERE_SA] SET [MVPSDU_GSP_CODE_FK_PK] = @MVPSDU" & _
                "_GSP_CODE_FK_PK, [MVPSDU_SAV_CODE_FK_PK] = @MVPSDU_SAV_CODE_FK_PK, [MVPSDU_DOSAG" & _
                "E] = @MVPSDU_DOSAGE, [MVPSDU_CDF_UNITE] = @MVPSDU_CDF_UNITE, [MVPSDU_CODE_ANSM] " & _
                "= @MVPSDU_CODE_ANSM WHERE (([MVPSDU_GSP_CODE_FK_PK] = @Original_MVPSDU_GSP_CODE_" & _
                "FK_PK) AND ([MVPSDU_SAV_CODE_FK_PK] = @Original_MVPSDU_SAV_CODE_FK_PK) AND ((@Is" & _
                "Null_MVPSDU_DOSAGE = 1 AND [MVPSDU_DOSAGE] IS NULL) OR ([MVPSDU_DOSAGE] = @Origi" & _
                "nal_MVPSDU_DOSAGE)) AND ((@IsNull_MVPSDU_CDF_UNITE = 1 AND [MVPSDU_CDF_UNITE] IS" & _
                " NULL) OR ([MVPSDU_CDF_UNITE] = @Original_MVPSDU_CDF_UNITE)) AND ([MVPSDU_NUM_OR" & _
                "D] = @Original_MVPSDU_NUM_ORD) AND ((@IsNull_MVPSDU_CODE_ANSM = 1 AND [MVPSDU_CO" & _
                "DE_ANSM] IS NULL) OR ([MVPSDU_CODE_ANSM] = @Original_MVPSDU_CODE_ANSM)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE," & _
                " MVPSDU_NUM_ORD, MVPSDU_CODE_ANSM FROM theriaque.MVPSDU_MED_VIR_PERE_SA WHERE (M" & _
                "VPSDU_GSP_CODE_FK_PK = @MVPSDU_GSP_CODE_FK_PK) AND (MVPSDU_SAV_CODE_FK_PK = @MVP" & _
                "SDU_SAV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_GSP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_GSP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_DOSAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_DOSAGE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CDF_UNITE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CDF_UNITE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_NUM_ORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_NUM_ORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MVPSDU_CODE_ANSM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MVPSDU_CODE_ANSM", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MVPSDU_GSP_CODE_FK_PK, MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UN" & _
                "ITE, MVPSDU_NUM_ORD, MVPSDU_CODE_ANSM FROM theriaque.MVPSDU_MED_VIR_PERE_SA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.MVPSDU_MED_VIR_PERE_SADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.MVPSDU_MED_VIR_PERE_SADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.MVPSDU_MED_VIR_PERE_SADataTable = New dsTheriaque_Virtuel_Pere.MVPSDU_MED_VIR_PERE_SADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.MVPSDU_MED_VIR_PERE_SADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "MVPSDU_MED_VIR_PERE_SA")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_MVPSDU_GSP_CODE_FK_PK As Integer, ByVal Original_MVPSDU_SAV_CODE_FK_PK As Integer, ByVal Original_MVPSDU_DOSAGE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_NUM_ORD As Integer, ByVal Original_MVPSDU_CODE_ANSM As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MVPSDU_SAV_CODE_FK_PK, Integer)
            If (Original_MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MVPSDU_DOSAGE.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MVPSDU_NUM_ORD, Integer)
            If (Original_MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MVPSDU_CODE_ANSM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal MVPSDU_GSP_CODE_FK_PK As Integer, ByVal MVPSDU_SAV_CODE_FK_PK As Integer, ByVal MVPSDU_DOSAGE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CODE_ANSM As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MVPSDU_SAV_CODE_FK_PK, Integer)
            If (MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MVPSDU_DOSAGE.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MVPSDU_CODE_ANSM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPSDU_GSP_CODE_FK_PK As Integer, ByVal MVPSDU_SAV_CODE_FK_PK As Integer, ByVal MVPSDU_DOSAGE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CODE_ANSM As String, ByVal Original_MVPSDU_GSP_CODE_FK_PK As Integer, ByVal Original_MVPSDU_SAV_CODE_FK_PK As Integer, ByVal Original_MVPSDU_DOSAGE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_NUM_ORD As Integer, ByVal Original_MVPSDU_CODE_ANSM As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MVPSDU_SAV_CODE_FK_PK, Integer)
            If (MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MVPSDU_DOSAGE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MVPSDU_CODE_ANSM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_MVPSDU_GSP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MVPSDU_SAV_CODE_FK_PK, Integer)
            If (Original_MVPSDU_DOSAGE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MVPSDU_DOSAGE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_MVPSDU_CDF_UNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_MVPSDU_CDF_UNITE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MVPSDU_NUM_ORD, Integer)
            If (Original_MVPSDU_CODE_ANSM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MVPSDU_CODE_ANSM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal MVPSDU_DOSAGE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal MVPSDU_CODE_ANSM As String, ByVal Original_MVPSDU_GSP_CODE_FK_PK As Integer, ByVal Original_MVPSDU_SAV_CODE_FK_PK As Integer, ByVal Original_MVPSDU_DOSAGE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_CDF_UNITE As Global.System.Nullable(Of Integer), ByVal Original_MVPSDU_NUM_ORD As Integer, ByVal Original_MVPSDU_CODE_ANSM As String) As Integer
            Return Me.Update(Original_MVPSDU_GSP_CODE_FK_PK, Original_MVPSDU_SAV_CODE_FK_PK, MVPSDU_DOSAGE, MVPSDU_CDF_UNITE, MVPSDU_CODE_ANSM, Original_MVPSDU_GSP_CODE_FK_PK, Original_MVPSDU_SAV_CODE_FK_PK, Original_MVPSDU_DOSAGE, Original_MVPSDU_CDF_UNITE, Original_MVPSDU_NUM_ORD, Original_MVPSDU_CODE_ANSM)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GSP_GENERIQUE_SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GSP_GENERIQUE_SPECIALITE"
            tableMapping.ColumnMappings.Add("GSP_CODE_SQ_PK", "GSP_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("GSP_NOM", "GSP_NOM")
            tableMapping.ColumnMappings.Add("GSP_CODE_VIRTUEL", "GSP_CODE_VIRTUEL")
            tableMapping.ColumnMappings.Add("GSP_DATECR", "GSP_DATECR")
            tableMapping.ColumnMappings.Add("GSP_DATEMJ", "GSP_DATEMJ")
            tableMapping.ColumnMappings.Add("GSP_PRESCRIPTION_DC", "GSP_PRESCRIPTION_DC")
            tableMapping.ColumnMappings.Add("GSP_CODE_SP_REFERENCE", "GSP_CODE_SP_REFERENCE")
            tableMapping.ColumnMappings.Add("GSP_INFO_GENERAL_TEXTE", "GSP_INFO_GENERAL_TEXTE")
            tableMapping.ColumnMappings.Add("GSP_CODE_VIRTUEL13", "GSP_CODE_VIRTUEL13")
            tableMapping.ColumnMappings.Add("GSP_CODE_REF", "GSP_CODE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[GSP_GENERIQUE_SPECIALITE] WHERE (([GSP_CODE_SQ_PK] = @Or"& _ 
                "iginal_GSP_CODE_SQ_PK) AND ([GSP_NOM] = @Original_GSP_NOM) AND ((@IsNull_GSP_COD"& _ 
                "E_VIRTUEL = 1 AND [GSP_CODE_VIRTUEL] IS NULL) OR ([GSP_CODE_VIRTUEL] = @Original"& _ 
                "_GSP_CODE_VIRTUEL)) AND ([GSP_DATECR] = @Original_GSP_DATECR) AND ((@IsNull_GSP_"& _ 
                "DATEMJ = 1 AND [GSP_DATEMJ] IS NULL) OR ([GSP_DATEMJ] = @Original_GSP_DATEMJ)) A"& _ 
                "ND ((@IsNull_GSP_PRESCRIPTION_DC = 1 AND [GSP_PRESCRIPTION_DC] IS NULL) OR ([GSP"& _ 
                "_PRESCRIPTION_DC] = @Original_GSP_PRESCRIPTION_DC)) AND ((@IsNull_GSP_CODE_SP_RE"& _ 
                "FERENCE = 1 AND [GSP_CODE_SP_REFERENCE] IS NULL) OR ([GSP_CODE_SP_REFERENCE] = @"& _ 
                "Original_GSP_CODE_SP_REFERENCE)) AND ((@IsNull_GSP_INFO_GENERAL_TEXTE = 1 AND [G"& _ 
                "SP_INFO_GENERAL_TEXTE] IS NULL) OR ([GSP_INFO_GENERAL_TEXTE] = @Original_GSP_INF"& _ 
                "O_GENERAL_TEXTE)) AND ((@IsNull_GSP_CODE_VIRTUEL13 = 1 AND [GSP_CODE_VIRTUEL13] "& _ 
                "IS NULL) OR ([GSP_CODE_VIRTUEL13] = @Original_GSP_CODE_VIRTUEL13)) AND ((@IsNull"& _ 
                "_GSP_CODE_REF = 1 AND [GSP_CODE_REF] IS NULL) OR ([GSP_CODE_REF] = @Original_GSP"& _ 
                "_CODE_REF)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[GSP_GENERIQUE_SPECIALITE] ([GSP_CODE_SQ_PK], [GSP_NOM], "& _ 
                "[GSP_CODE_VIRTUEL], [GSP_DATECR], [GSP_DATEMJ], [GSP_PRESCRIPTION_DC], [GSP_CODE"& _ 
                "_SP_REFERENCE], [GSP_INFO_GENERAL_TEXTE], [GSP_CODE_VIRTUEL13], [GSP_CODE_REF]) "& _ 
                "VALUES (@GSP_CODE_SQ_PK, @GSP_NOM, @GSP_CODE_VIRTUEL, @GSP_DATECR, @GSP_DATEMJ, "& _ 
                "@GSP_PRESCRIPTION_DC, @GSP_CODE_SP_REFERENCE, @GSP_INFO_GENERAL_TEXTE, @GSP_CODE"& _ 
                "_VIRTUEL13, @GSP_CODE_REF);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, G"& _ 
                "SP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENE"& _ 
                "RAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_REF FROM theriaque.GSP_GENERIQUE_SPECIAL"& _ 
                "ITE WHERE (GSP_CODE_SQ_PK = @GSP_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[GSP_GENERIQUE_SPECIALITE] SET [GSP_CODE_SQ_PK] = @GSP_CODE_SQ"& _ 
                "_PK, [GSP_NOM] = @GSP_NOM, [GSP_CODE_VIRTUEL] = @GSP_CODE_VIRTUEL, [GSP_DATECR] "& _ 
                "= @GSP_DATECR, [GSP_DATEMJ] = @GSP_DATEMJ, [GSP_PRESCRIPTION_DC] = @GSP_PRESCRIP"& _ 
                "TION_DC, [GSP_CODE_SP_REFERENCE] = @GSP_CODE_SP_REFERENCE, [GSP_INFO_GENERAL_TEX"& _ 
                "TE] = @GSP_INFO_GENERAL_TEXTE, [GSP_CODE_VIRTUEL13] = @GSP_CODE_VIRTUEL13, [GSP_"& _ 
                "CODE_REF] = @GSP_CODE_REF WHERE (([GSP_CODE_SQ_PK] = @Original_GSP_CODE_SQ_PK) A"& _ 
                "ND ([GSP_NOM] = @Original_GSP_NOM) AND ((@IsNull_GSP_CODE_VIRTUEL = 1 AND [GSP_C"& _ 
                "ODE_VIRTUEL] IS NULL) OR ([GSP_CODE_VIRTUEL] = @Original_GSP_CODE_VIRTUEL)) AND "& _ 
                "([GSP_DATECR] = @Original_GSP_DATECR) AND ((@IsNull_GSP_DATEMJ = 1 AND [GSP_DATE"& _ 
                "MJ] IS NULL) OR ([GSP_DATEMJ] = @Original_GSP_DATEMJ)) AND ((@IsNull_GSP_PRESCRI"& _ 
                "PTION_DC = 1 AND [GSP_PRESCRIPTION_DC] IS NULL) OR ([GSP_PRESCRIPTION_DC] = @Ori"& _ 
                "ginal_GSP_PRESCRIPTION_DC)) AND ((@IsNull_GSP_CODE_SP_REFERENCE = 1 AND [GSP_COD"& _ 
                "E_SP_REFERENCE] IS NULL) OR ([GSP_CODE_SP_REFERENCE] = @Original_GSP_CODE_SP_REF"& _ 
                "ERENCE)) AND ((@IsNull_GSP_INFO_GENERAL_TEXTE = 1 AND [GSP_INFO_GENERAL_TEXTE] I"& _ 
                "S NULL) OR ([GSP_INFO_GENERAL_TEXTE] = @Original_GSP_INFO_GENERAL_TEXTE)) AND (("& _ 
                "@IsNull_GSP_CODE_VIRTUEL13 = 1 AND [GSP_CODE_VIRTUEL13] IS NULL) OR ([GSP_CODE_V"& _ 
                "IRTUEL13] = @Original_GSP_CODE_VIRTUEL13)) AND ((@IsNull_GSP_CODE_REF = 1 AND [G"& _ 
                "SP_CODE_REF] IS NULL) OR ([GSP_CODE_REF] = @Original_GSP_CODE_REF)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT GS"& _ 
                "P_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTIO"& _ 
                "N_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_COD"& _ 
                "E_REF FROM theriaque.GSP_GENERIQUE_SPECIALITE WHERE (GSP_CODE_SQ_PK = @GSP_CODE_"& _ 
                "SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_PRESCRIPTION_DC", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_PRESCRIPTION_DC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_SP_REFERENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_SP_REFERENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_INFO_GENERAL_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_INFO_GENERAL_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_VIRTUEL13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_VIRTUEL13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GSP_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GSP_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GSP_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRE" & _
                "SCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13," & _
                " GSP_CODE_REF FROM theriaque.GSP_GENERIQUE_SPECIALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.GSP_GENERIQUE_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.GSP_GENERIQUE_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.GSP_GENERIQUE_SPECIALITEDataTable = New dsTheriaque_Virtuel_Pere.GSP_GENERIQUE_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.GSP_GENERIQUE_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "GSP_GENERIQUE_SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GSP_CODE_SQ_PK As Integer, ByVal Original_GSP_NOM As String, ByVal Original_GSP_CODE_VIRTUEL As String, ByVal Original_GSP_DATECR As Date, ByVal Original_GSP_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), ByVal Original_GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), ByVal Original_GSP_INFO_GENERAL_TEXTE As String, ByVal Original_GSP_CODE_VIRTUEL13 As String, ByVal Original_GSP_CODE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GSP_CODE_SQ_PK, Integer)
            If (Original_GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSP_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GSP_NOM, String)
            End If
            If (Original_GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_GSP_DATECR, Date)
            If (Original_GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (Original_GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_GSP_CODE_VIRTUEL13, String)
            End If
            If (Original_GSP_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_GSP_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GSP_CODE_SQ_PK As Integer, ByVal GSP_NOM As String, ByVal GSP_CODE_VIRTUEL As String, ByVal GSP_DATECR As Date, ByVal GSP_DATEMJ As Global.System.Nullable(Of Date), ByVal GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), ByVal GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), ByVal GSP_INFO_GENERAL_TEXTE As String, ByVal GSP_CODE_VIRTUEL13 As String, ByVal GSP_CODE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GSP_CODE_SQ_PK, Integer)
            If (GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSP_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GSP_NOM, String)
            End If
            If (GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(GSP_DATECR, Date)
            If (GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(GSP_CODE_VIRTUEL13, String)
            End If
            If (GSP_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(GSP_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal GSP_CODE_SQ_PK As Integer, _
                    ByVal GSP_NOM As String, _
                    ByVal GSP_CODE_VIRTUEL As String, _
                    ByVal GSP_DATECR As Date, _
                    ByVal GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal GSP_CODE_VIRTUEL13 As String, _
                    ByVal GSP_CODE_REF As String, _
                    ByVal Original_GSP_CODE_SQ_PK As Integer, _
                    ByVal Original_GSP_NOM As String, _
                    ByVal Original_GSP_CODE_VIRTUEL As String, _
                    ByVal Original_GSP_DATECR As Date, _
                    ByVal Original_GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal Original_GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal Original_GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal Original_GSP_CODE_VIRTUEL13 As String, _
                    ByVal Original_GSP_CODE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GSP_CODE_SQ_PK, Integer)
            If (GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GSP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GSP_NOM, String)
            End If
            If (GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(GSP_DATECR, Date)
            If (GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(GSP_CODE_VIRTUEL13, String)
            End If
            If (GSP_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(GSP_CODE_REF, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_GSP_CODE_SQ_PK, Integer)
            If (Original_GSP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GSP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_GSP_NOM, String)
            End If
            If (Original_GSP_CODE_VIRTUEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_GSP_CODE_VIRTUEL, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_GSP_DATECR, Date)
            If (Original_GSP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_GSP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_PRESCRIPTION_DC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_GSP_PRESCRIPTION_DC.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_CODE_SP_REFERENCE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_GSP_CODE_SP_REFERENCE.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_GSP_INFO_GENERAL_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_GSP_INFO_GENERAL_TEXTE, String)
            End If
            If (Original_GSP_CODE_VIRTUEL13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_GSP_CODE_VIRTUEL13, String)
            End If
            If (Original_GSP_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_GSP_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal GSP_NOM As String, _
                    ByVal GSP_CODE_VIRTUEL As String, _
                    ByVal GSP_DATECR As Date, _
                    ByVal GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal GSP_CODE_VIRTUEL13 As String, _
                    ByVal GSP_CODE_REF As String, _
                    ByVal Original_GSP_CODE_SQ_PK As Integer, _
                    ByVal Original_GSP_NOM As String, _
                    ByVal Original_GSP_CODE_VIRTUEL As String, _
                    ByVal Original_GSP_DATECR As Date, _
                    ByVal Original_GSP_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_GSP_PRESCRIPTION_DC As Global.System.Nullable(Of Boolean), _
                    ByVal Original_GSP_CODE_SP_REFERENCE As Global.System.Nullable(Of Integer), _
                    ByVal Original_GSP_INFO_GENERAL_TEXTE As String, _
                    ByVal Original_GSP_CODE_VIRTUEL13 As String, _
                    ByVal Original_GSP_CODE_REF As String) As Integer
            Return Me.Update(Original_GSP_CODE_SQ_PK, GSP_NOM, GSP_CODE_VIRTUEL, GSP_DATECR, GSP_DATEMJ, GSP_PRESCRIPTION_DC, GSP_CODE_SP_REFERENCE, GSP_INFO_GENERAL_TEXTE, GSP_CODE_VIRTUEL13, GSP_CODE_REF, Original_GSP_CODE_SQ_PK, Original_GSP_NOM, Original_GSP_CODE_VIRTUEL, Original_GSP_DATECR, Original_GSP_DATEMJ, Original_GSP_PRESCRIPTION_DC, Original_GSP_CODE_SP_REFERENCE, Original_GSP_INFO_GENERAL_TEXTE, Original_GSP_CODE_VIRTUEL13, Original_GSP_CODE_REF)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SAV_SUBSTANCE_VIRTUELLETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAV_SUBSTANCE_VIRTUELLE"
            tableMapping.ColumnMappings.Add("SAV_CODE_SQ_PK", "SAV_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SAV_LIBELLE", "SAV_LIBELLE")
            tableMapping.ColumnMappings.Add("SAV_CODE_REF", "SAV_CODE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SAV_SUBSTANCE_VIRTUELLE] WHERE (([SAV_CODE_SQ_PK] = @Ori" & _
                "ginal_SAV_CODE_SQ_PK) AND ((@IsNull_SAV_LIBELLE = 1 AND [SAV_LIBELLE] IS NULL) O" & _
                "R ([SAV_LIBELLE] = @Original_SAV_LIBELLE)) AND ((@IsNull_SAV_CODE_REF = 1 AND [S" & _
                "AV_CODE_REF] IS NULL) OR ([SAV_CODE_REF] = @Original_SAV_CODE_REF)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SAV_SUBSTANCE_VIRTUELLE] ([SAV_CODE_SQ_PK], [SAV_LIBELLE" & _
                "], [SAV_CODE_REF]) VALUES (@SAV_CODE_SQ_PK, @SAV_LIBELLE, @SAV_CODE_REF);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBSTANCE_VIRTUEL" & _
                "LE WHERE (SAV_CODE_SQ_PK = @SAV_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SAV_SUBSTANCE_VIRTUELLE] SET [SAV_CODE_SQ_PK] = @SAV_CODE_SQ_" & _
                "PK, [SAV_LIBELLE] = @SAV_LIBELLE, [SAV_CODE_REF] = @SAV_CODE_REF WHERE (([SAV_CO" & _
                "DE_SQ_PK] = @Original_SAV_CODE_SQ_PK) AND ((@IsNull_SAV_LIBELLE = 1 AND [SAV_LIB" & _
                "ELLE] IS NULL) OR ([SAV_LIBELLE] = @Original_SAV_LIBELLE)) AND ((@IsNull_SAV_COD" & _
                "E_REF = 1 AND [SAV_CODE_REF] IS NULL) OR ([SAV_CODE_REF] = @Original_SAV_CODE_RE" & _
                "F)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBST" & _
                "ANCE_VIRTUELLE WHERE (SAV_CODE_SQ_PK = @SAV_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_REF", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBSTANCE_VIR" & _
                "TUELLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF FROM theriaque.SAV_SUBSTANCE_VIR" & _
                "TUELLE where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SAV_CODE_SQ_PK=@SAV_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable = New dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable, ByVal SAV_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAV_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAV_CODE_SQ_PK As Integer) As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAV_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable = New dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.SAV_SUBSTANCE_VIRTUELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "SAV_SUBSTANCE_VIRTUELLE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAV_CODE_SQ_PK As Integer, ByVal Original_SAV_LIBELLE As String, ByVal Original_SAV_CODE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAV_CODE_SQ_PK, Integer)
            If (Original_SAV_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAV_LIBELLE, String)
            End If
            If (Original_SAV_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SAV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAV_CODE_SQ_PK As Integer, ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAV_CODE_SQ_PK, Integer)
            If (SAV_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAV_LIBELLE, String)
            End If
            If (SAV_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAV_CODE_SQ_PK As Integer, ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String, ByVal Original_SAV_CODE_SQ_PK As Integer, ByVal Original_SAV_LIBELLE As String, ByVal Original_SAV_CODE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAV_CODE_SQ_PK, Integer)
            If (SAV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAV_LIBELLE, String)
            End If
            If (SAV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAV_CODE_REF, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAV_CODE_SQ_PK, Integer)
            If (Original_SAV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SAV_LIBELLE, String)
            End If
            If (Original_SAV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SAV_CODE_REF, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAV_LIBELLE As String, ByVal SAV_CODE_REF As String, ByVal Original_SAV_CODE_SQ_PK As Integer, ByVal Original_SAV_LIBELLE As String, ByVal Original_SAV_CODE_REF As String) As Integer
            Return Me.Update(Original_SAV_CODE_SQ_PK, SAV_LIBELLE, SAV_CODE_REF, Original_SAV_CODE_SQ_PK, Original_SAV_LIBELLE, Original_SAV_CODE_REF)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FOV_FORME_VIRTUELLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FOV_FORME_VIRTUELLE"
            tableMapping.ColumnMappings.Add("FOV_CODE_SQ_PK", "FOV_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FOV_LIBELLE", "FOV_LIBELLE")
            tableMapping.ColumnMappings.Add("FOV_CODE_REF", "FOV_CODE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FOV_FORME_VIRTUELLE] WHERE (([FOV_CODE_SQ_PK] = @Origina"& _ 
                "l_FOV_CODE_SQ_PK) AND ((@IsNull_FOV_LIBELLE = 1 AND [FOV_LIBELLE] IS NULL) OR (["& _ 
                "FOV_LIBELLE] = @Original_FOV_LIBELLE)) AND ((@IsNull_FOV_CODE_REF = 1 AND [FOV_C"& _ 
                "ODE_REF] IS NULL) OR ([FOV_CODE_REF] = @Original_FOV_CODE_REF)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FOV_FORME_VIRTUELLE] ([FOV_CODE_SQ_PK], [FOV_LIBELLE], ["& _ 
                "FOV_CODE_REF]) VALUES (@FOV_CODE_SQ_PK, @FOV_LIBELLE, @FOV_CODE_REF);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FO"& _ 
                "V_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF FROM theriaque.FOV_FORME_VIRTUELLE WHERE"& _ 
                " (FOV_CODE_SQ_PK = @FOV_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FOV_FORME_VIRTUELLE] SET [FOV_CODE_SQ_PK] = @FOV_CODE_SQ_PK, "& _ 
                "[FOV_LIBELLE] = @FOV_LIBELLE, [FOV_CODE_REF] = @FOV_CODE_REF WHERE (([FOV_CODE_S"& _ 
                "Q_PK] = @Original_FOV_CODE_SQ_PK) AND ((@IsNull_FOV_LIBELLE = 1 AND [FOV_LIBELLE"& _ 
                "] IS NULL) OR ([FOV_LIBELLE] = @Original_FOV_LIBELLE)) AND ((@IsNull_FOV_CODE_RE"& _ 
                "F = 1 AND [FOV_CODE_REF] IS NULL) OR ([FOV_CODE_REF] = @Original_FOV_CODE_REF)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF FROM theriaque.FOV_FORME_VIR"& _ 
                "TUELLE WHERE (FOV_CODE_SQ_PK = @FOV_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOV_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOV_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF FROM theriaque.FOV_FORME_VIRTUEL"& _ 
                "LE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FOV_CODE_SQ_PK=@FOV_CODE_SQ_PK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Virtuel_Pere.FOV_FORME_VIRTUELLEDataTable, ByVal FOV_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FOV_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FOV_CODE_SQ_PK As Integer) As dsTheriaque_Virtuel_Pere.FOV_FORME_VIRTUELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FOV_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Virtuel_Pere.FOV_FORME_VIRTUELLEDataTable = New dsTheriaque_Virtuel_Pere.FOV_FORME_VIRTUELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.FOV_FORME_VIRTUELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "FOV_FORME_VIRTUELLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FOV_CODE_SQ_PK As Integer, ByVal Original_FOV_LIBELLE As String, ByVal Original_FOV_CODE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FOV_CODE_SQ_PK,Integer)
            If (Original_FOV_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FOV_LIBELLE,String)
            End If
            If (Original_FOV_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FOV_CODE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FOV_CODE_SQ_PK As Integer, ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FOV_CODE_SQ_PK,Integer)
            If (FOV_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FOV_LIBELLE,String)
            End If
            If (FOV_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FOV_CODE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FOV_CODE_SQ_PK As Integer, ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String, ByVal Original_FOV_CODE_SQ_PK As Integer, ByVal Original_FOV_LIBELLE As String, ByVal Original_FOV_CODE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FOV_CODE_SQ_PK,Integer)
            If (FOV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FOV_LIBELLE,String)
            End If
            If (FOV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FOV_CODE_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FOV_CODE_SQ_PK,Integer)
            If (Original_FOV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FOV_LIBELLE,String)
            End If
            If (Original_FOV_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FOV_CODE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FOV_LIBELLE As String, ByVal FOV_CODE_REF As String, ByVal Original_FOV_CODE_SQ_PK As Integer, ByVal Original_FOV_LIBELLE As String, ByVal Original_FOV_CODE_REF As String) As Integer
            Return Me.Update(Original_FOV_CODE_SQ_PK, FOV_LIBELLE, FOV_CODE_REF, Original_FOV_CODE_SQ_PK, Original_FOV_LIBELLE, Original_FOV_CODE_REF)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAVSAC_SUBVIRT_SUBACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAVSAC_SUBVIRT_SUBAC"
            tableMapping.ColumnMappings.Add("SAVSAC_SAV_CODE_FK_PK", "SAVSAC_SAV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAVSAC_SAC_CODE_FK_PK", "SAVSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SAVSAC_SUBVIRT_SUBAC] WHERE (([SAVSAC_SAV_CODE_FK_PK] = "& _ 
                "@Original_SAVSAC_SAV_CODE_FK_PK) AND ([SAVSAC_SAC_CODE_FK_PK] = @Original_SAVSAC"& _ 
                "_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAVSAC_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAVSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SAVSAC_SUBVIRT_SUBAC] ([SAVSAC_SAV_CODE_FK_PK], [SAVSAC_"& _ 
                "SAC_CODE_FK_PK]) VALUES (@SAVSAC_SAV_CODE_FK_PK, @SAVSAC_SAC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T SAVSAC_SAV_CODE_FK_PK, SAVSAC_SAC_CODE_FK_PK FROM theriaque.SAVSAC_SUBVIRT_SUB"& _ 
                "AC WHERE (SAVSAC_SAC_CODE_FK_PK = @SAVSAC_SAC_CODE_FK_PK) AND (SAVSAC_SAV_CODE_F"& _ 
                "K_PK = @SAVSAC_SAV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAVSAC_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAVSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SAVSAC_SUBVIRT_SUBAC] SET [SAVSAC_SAV_CODE_FK_PK] = @SAVSAC_S"& _ 
                "AV_CODE_FK_PK, [SAVSAC_SAC_CODE_FK_PK] = @SAVSAC_SAC_CODE_FK_PK WHERE (([SAVSAC_"& _ 
                "SAV_CODE_FK_PK] = @Original_SAVSAC_SAV_CODE_FK_PK) AND ([SAVSAC_SAC_CODE_FK_PK] "& _ 
                "= @Original_SAVSAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAVSAC_SAV_CODE_FK_PK, SAVSAC_SAC_C"& _ 
                "ODE_FK_PK FROM theriaque.SAVSAC_SUBVIRT_SUBAC WHERE (SAVSAC_SAC_CODE_FK_PK = @SA"& _ 
                "VSAC_SAC_CODE_FK_PK) AND (SAVSAC_SAV_CODE_FK_PK = @SAVSAC_SAV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAVSAC_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAVSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAVSAC_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAVSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAVSAC_SAV_CODE_FK_PK, SAVSAC_SAC_CODE_FK_PK FROM theriaque.SAVSAC_SUBVIRT" & _
                "_SUBAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAVSAC_SAV_CODE_FK_PK, SAVSAC_SAC_CODE_FK_PK FROM theriaque.SAVSAC_SUBVIRT" & _
                "_SUBAC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SAVSAC_SAV_CODE_FK_PK = @SAVSAC_SAV_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAVSAC_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SAVSAC_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable = New dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable, ByVal SAVSAC_SAV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAVSAC_SAV_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAVSAC_SAV_CODE_FK_PK As Integer) As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAVSAC_SAV_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable = New dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.SAVSAC_SUBVIRT_SUBACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "SAVSAC_SUBVIRT_SUBAC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAVSAC_SAV_CODE_FK_PK As Integer, ByVal Original_SAVSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAVSAC_SAV_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAVSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAVSAC_SAV_CODE_FK_PK As Integer, ByVal SAVSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAVSAC_SAV_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAVSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAVSAC_SAV_CODE_FK_PK As Integer, ByVal SAVSAC_SAC_CODE_FK_PK As Integer, ByVal Original_SAVSAC_SAV_CODE_FK_PK As Integer, ByVal Original_SAVSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAVSAC_SAV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAVSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SAVSAC_SAV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAVSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_SAVSAC_SAV_CODE_FK_PK As Integer, ByVal Original_SAVSAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_SAVSAC_SAV_CODE_FK_PK, Original_SAVSAC_SAC_CODE_FK_PK, Original_SAVSAC_SAV_CODE_FK_PK, Original_SAVSAC_SAC_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FOVCFO_FORMEVIRT_COMPFORMETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FOVCFO_FORMEVIRT_COMPFORME"
            tableMapping.ColumnMappings.Add("FOVCFO_FOV_CODE_FK_PK", "FOVCFO_FOV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FOVCFO_CDF_CFO_CODE_FK_PK", "FOVCFO_CDF_CFO_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FOVCFO_FORMEVIRT_COMPFORME] WHERE (([FOVCFO_FOV_CODE_FK_" & _
                "PK] = @Original_FOVCFO_FOV_CODE_FK_PK) AND ([FOVCFO_CDF_CFO_CODE_FK_PK] = @Origi" & _
                "nal_FOVCFO_CDF_CFO_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOVCFO_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FOVCFO_FORMEVIRT_COMPFORME] ([FOVCFO_FOV_CODE_FK_PK], [F" & _
                "OVCFO_CDF_CFO_CODE_FK_PK]) VALUES (@FOVCFO_FOV_CODE_FK_PK, @FOVCFO_CDF_CFO_CODE_" & _
                "FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FOVCFO_FOV_CODE_FK_PK, FOVCFO_CDF_CFO_CODE_FK_PK FROM theriaque." & _
                "FOVCFO_FORMEVIRT_COMPFORME WHERE (FOVCFO_CDF_CFO_CODE_FK_PK = @FOVCFO_CDF_CFO_CO" & _
                "DE_FK_PK) AND (FOVCFO_FOV_CODE_FK_PK = @FOVCFO_FOV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOVCFO_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FOVCFO_FORMEVIRT_COMPFORME] SET [FOVCFO_FOV_CODE_FK_PK] = @FO" & _
                "VCFO_FOV_CODE_FK_PK, [FOVCFO_CDF_CFO_CODE_FK_PK] = @FOVCFO_CDF_CFO_CODE_FK_PK WH" & _
                "ERE (([FOVCFO_FOV_CODE_FK_PK] = @Original_FOVCFO_FOV_CODE_FK_PK) AND ([FOVCFO_CD" & _
                "F_CFO_CODE_FK_PK] = @Original_FOVCFO_CDF_CFO_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FOVCFO_FOV_CO" & _
                "DE_FK_PK, FOVCFO_CDF_CFO_CODE_FK_PK FROM theriaque.FOVCFO_FORMEVIRT_COMPFORME WH" & _
                "ERE (FOVCFO_CDF_CFO_CODE_FK_PK = @FOVCFO_CDF_CFO_CODE_FK_PK) AND (FOVCFO_FOV_COD" & _
                "E_FK_PK = @FOVCFO_FOV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOVCFO_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOVCFO_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_CDF_CFO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FOVCFO_FOV_CODE_FK_PK, FOVCFO_CDF_CFO_CODE_FK_PK FROM theriaque.FOVCFO_FOR" & _
                "MEVIRT_COMPFORME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FOVCFO_FOV_CODE_FK_PK, FOVCFO_CDF_CFO_CODE_FK_PK FROM theriaque.FOVCFO_FOR" & _
                "MEVIRT_COMPFORME" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where FOVCFO_FOV_CODE_FK_PK = @FOVCFO_FOV_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOVCFO_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FOVCFO_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable = New dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable, ByVal FOVCFO_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FOVCFO_FOV_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FOVCFO_FOV_CODE_FK_PK As Integer) As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FOVCFO_FOV_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable = New dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.FOVCFO_FORMEVIRT_COMPFORMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "FOVCFO_FORMEVIRT_COMPFORME")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FOVCFO_FOV_CODE_FK_PK As Integer, ByVal Original_FOVCFO_CDF_CFO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FOVCFO_FOV_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FOVCFO_CDF_CFO_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FOVCFO_FOV_CODE_FK_PK As Integer, ByVal FOVCFO_CDF_CFO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FOVCFO_FOV_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FOVCFO_CDF_CFO_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FOVCFO_FOV_CODE_FK_PK As Integer, ByVal FOVCFO_CDF_CFO_CODE_FK_PK As Integer, ByVal Original_FOVCFO_FOV_CODE_FK_PK As Integer, ByVal Original_FOVCFO_CDF_CFO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FOVCFO_FOV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FOVCFO_CDF_CFO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FOVCFO_FOV_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FOVCFO_CDF_CFO_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FOVCFO_FOV_CODE_FK_PK As Integer, ByVal Original_FOVCFO_CDF_CFO_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FOVCFO_FOV_CODE_FK_PK, Original_FOVCFO_CDF_CFO_CODE_FK_PK, Original_FOVCFO_FOV_CODE_FK_PK, Original_FOVCFO_CDF_CFO_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYSAV_SYNONYME_SUBST_VIRTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYSAV_SYNONYME_SUBST_VIRT"
            tableMapping.ColumnMappings.Add("SYSAV_CODE_SQ_PK", "SYSAV_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SYSAV_SAV_CODE_FK_PK", "SYSAV_SAV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SYSAV_LIBELLE", "SYSAV_LIBELLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SYSAV_SYNONYME_SUBST_VIRT] WHERE (([SYSAV_CODE_SQ_PK] = "& _ 
                "@Original_SYSAV_CODE_SQ_PK) AND ([SYSAV_SAV_CODE_FK_PK] = @Original_SYSAV_SAV_CO"& _ 
                "DE_FK_PK) AND ((@IsNull_SYSAV_LIBELLE = 1 AND [SYSAV_LIBELLE] IS NULL) OR ([SYSA"& _ 
                "V_LIBELLE] = @Original_SYSAV_LIBELLE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYSAV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SYSAV_SYNONYME_SUBST_VIRT] ([SYSAV_SAV_CODE_FK_PK], [SYS"& _ 
                "AV_LIBELLE]) VALUES (@SYSAV_SAV_CODE_FK_PK, @SYSAV_LIBELLE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYSAV_CODE_"& _ 
                "SQ_PK, SYSAV_SAV_CODE_FK_PK, SYSAV_LIBELLE FROM theriaque.SYSAV_SYNONYME_SUBST_V"& _ 
                "IRT WHERE (SYSAV_CODE_SQ_PK = SCOPE_IDENTITY()) AND (SYSAV_SAV_CODE_FK_PK = @SYS"& _ 
                "AV_SAV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SYSAV_SYNONYME_SUBST_VIRT] SET [SYSAV_SAV_CODE_FK_PK] = @SYSA"& _ 
                "V_SAV_CODE_FK_PK, [SYSAV_LIBELLE] = @SYSAV_LIBELLE WHERE (([SYSAV_CODE_SQ_PK] = "& _ 
                "@Original_SYSAV_CODE_SQ_PK) AND ([SYSAV_SAV_CODE_FK_PK] = @Original_SYSAV_SAV_CO"& _ 
                "DE_FK_PK) AND ((@IsNull_SYSAV_LIBELLE = 1 AND [SYSAV_LIBELLE] IS NULL) OR ([SYSA"& _ 
                "V_LIBELLE] = @Original_SYSAV_LIBELLE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYSAV_CODE_SQ_PK, SYSAV_SAV_COD"& _ 
                "E_FK_PK, SYSAV_LIBELLE FROM theriaque.SYSAV_SYNONYME_SUBST_VIRT WHERE (SYSAV_COD"& _ 
                "E_SQ_PK = @SYSAV_CODE_SQ_PK) AND (SYSAV_SAV_CODE_FK_PK = @SYSAV_SAV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_LIBELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYSAV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_LIBELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSAV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_LIBELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYSAV_CODE_SQ_PK, SYSAV_SAV_CODE_FK_PK, SYSAV_LIBELLE FROM theriaque.SYSAV" & _
                "_SYNONYME_SUBST_VIRT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYSAV_CODE_SQ_PK, SYSAV_SAV_CODE_FK_PK, SYSAV_LIBELLE FROM theriaque.SYSAV" & _
                "_SYNONYME_SUBST_VIRT " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYSAV_SAV_CODE_FK_PK=@SYSAV_SAV_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSAV_SAV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSAV_SAV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable = New dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable, ByVal SYSAV_SAV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYSAV_SAV_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYSAV_SAV_CODE_FK_PK As Integer) As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYSAV_SAV_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable = New dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.SYSAV_SYNONYME_SUBST_VIRTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "SYSAV_SYNONYME_SUBST_VIRT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYSAV_CODE_SQ_PK As Integer, ByVal Original_SYSAV_SAV_CODE_FK_PK As Integer, ByVal Original_SYSAV_LIBELLE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYSAV_CODE_SQ_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYSAV_SAV_CODE_FK_PK, Integer)
            If (Original_SYSAV_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SYSAV_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYSAV_SAV_CODE_FK_PK As Integer, ByVal SYSAV_LIBELLE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYSAV_SAV_CODE_FK_PK, Integer)
            If (SYSAV_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYSAV_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYSAV_SAV_CODE_FK_PK As Integer, ByVal SYSAV_LIBELLE As String, ByVal Original_SYSAV_CODE_SQ_PK As Integer, ByVal Original_SYSAV_SAV_CODE_FK_PK As Integer, ByVal Original_SYSAV_LIBELLE As String, ByVal SYSAV_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYSAV_SAV_CODE_FK_PK, Integer)
            If (SYSAV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYSAV_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYSAV_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYSAV_SAV_CODE_FK_PK, Integer)
            If (Original_SYSAV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SYSAV_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SYSAV_CODE_SQ_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYSAV_LIBELLE As String, ByVal Original_SYSAV_CODE_SQ_PK As Integer, ByVal Original_SYSAV_SAV_CODE_FK_PK As Integer, ByVal Original_SYSAV_LIBELLE As String) As Integer
            Return Me.Update(Original_SYSAV_SAV_CODE_FK_PK, SYSAV_LIBELLE, Original_SYSAV_CODE_SQ_PK, Original_SYSAV_SAV_CODE_FK_PK, Original_SYSAV_LIBELLE, Original_SYSAV_CODE_SQ_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYFOV_SYNONYME_FORME_VIRTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYFOV_SYNONYME_FORME_VIRT"
            tableMapping.ColumnMappings.Add("SYFOV_CODE_SQ_PK", "SYFOV_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SYFOV_FOV_CODE_FK_PK", "SYFOV_FOV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SYFOV_LIBELLE", "SYFOV_LIBELLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SYFOV_SYNONYME_FORME_VIRT] WHERE (([SYFOV_CODE_SQ_PK] = " & _
                "@Original_SYFOV_CODE_SQ_PK) AND ([SYFOV_FOV_CODE_FK_PK] = @Original_SYFOV_FOV_CO" & _
                "DE_FK_PK) AND ((@IsNull_SYFOV_LIBELLE = 1 AND [SYFOV_LIBELLE] IS NULL) OR ([SYFO" & _
                "V_LIBELLE] = @Original_SYFOV_LIBELLE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYFOV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SYFOV_SYNONYME_FORME_VIRT] ([SYFOV_FOV_CODE_FK_PK], [SYF" & _
                "OV_LIBELLE]) VALUES (@SYFOV_FOV_CODE_FK_PK, @SYFOV_LIBELLE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYFOV_CODE_" & _
                "SQ_PK, SYFOV_FOV_CODE_FK_PK, SYFOV_LIBELLE FROM theriaque.SYFOV_SYNONYME_FORME_V" & _
                "IRT WHERE (SYFOV_CODE_SQ_PK = SCOPE_IDENTITY()) AND (SYFOV_FOV_CODE_FK_PK = @SYF" & _
                "OV_FOV_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SYFOV_SYNONYME_FORME_VIRT] SET [SYFOV_FOV_CODE_FK_PK] = @SYFO" & _
                "V_FOV_CODE_FK_PK, [SYFOV_LIBELLE] = @SYFOV_LIBELLE WHERE (([SYFOV_CODE_SQ_PK] = " & _
                "@Original_SYFOV_CODE_SQ_PK) AND ([SYFOV_FOV_CODE_FK_PK] = @Original_SYFOV_FOV_CO" & _
                "DE_FK_PK) AND ((@IsNull_SYFOV_LIBELLE = 1 AND [SYFOV_LIBELLE] IS NULL) OR ([SYFO" & _
                "V_LIBELLE] = @Original_SYFOV_LIBELLE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYFOV_CODE_SQ_PK, SYFOV_FOV_COD" & _
                "E_FK_PK, SYFOV_LIBELLE FROM theriaque.SYFOV_SYNONYME_FORME_VIRT WHERE (SYFOV_COD" & _
                "E_SQ_PK = @SYFOV_CODE_SQ_PK) AND (SYFOV_FOV_CODE_FK_PK = @SYFOV_FOV_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_LIBELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYFOV_LIBELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_LIBELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYFOV_LIBELLE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_LIBELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFOV_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYFOV_CODE_SQ_PK, SYFOV_FOV_CODE_FK_PK, SYFOV_LIBELLE FROM theriaque.SYFOV" & _
                "_SYNONYME_FORME_VIRT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYFOV_CODE_SQ_PK, SYFOV_FOV_CODE_FK_PK, SYFOV_LIBELLE FROM theriaque.SYFOV" & _
                "_SYNONYME_FORME_VIRT " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SYFOV_FOV_CODE_FK_PK=@SYFOV_FOV_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYFOV_FOV_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYFOV_FOV_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable = New dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable, ByVal SYFOV_FOV_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFOV_FOV_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYFOV_FOV_CODE_FK_PK As Integer) As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFOV_FOV_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable = New dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Virtuel_Pere.SYFOV_SYNONYME_FORME_VIRTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Virtuel_Pere) As Integer
            Return Me.Adapter.Update(dataSet, "SYFOV_SYNONYME_FORME_VIRT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYFOV_CODE_SQ_PK As Integer, ByVal Original_SYFOV_FOV_CODE_FK_PK As Integer, ByVal Original_SYFOV_LIBELLE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYFOV_CODE_SQ_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYFOV_FOV_CODE_FK_PK, Integer)
            If (Original_SYFOV_LIBELLE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SYFOV_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYFOV_FOV_CODE_FK_PK As Integer, ByVal SYFOV_LIBELLE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYFOV_FOV_CODE_FK_PK, Integer)
            If (SYFOV_LIBELLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYFOV_LIBELLE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYFOV_FOV_CODE_FK_PK As Integer, ByVal SYFOV_LIBELLE As String, ByVal Original_SYFOV_CODE_SQ_PK As Integer, ByVal Original_SYFOV_FOV_CODE_FK_PK As Integer, ByVal Original_SYFOV_LIBELLE As String, ByVal SYFOV_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYFOV_FOV_CODE_FK_PK, Integer)
            If (SYFOV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYFOV_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYFOV_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYFOV_FOV_CODE_FK_PK, Integer)
            If (Original_SYFOV_LIBELLE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SYFOV_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SYFOV_CODE_SQ_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYFOV_LIBELLE As String, ByVal Original_SYFOV_CODE_SQ_PK As Integer, ByVal Original_SYFOV_FOV_CODE_FK_PK As Integer, ByVal Original_SYFOV_LIBELLE As String) As Integer
            Return Me.Update(Original_SYFOV_FOV_CODE_FK_PK, SYFOV_LIBELLE, Original_SYFOV_CODE_SQ_PK, Original_SYFOV_FOV_CODE_FK_PK, Original_SYFOV_LIBELLE, Original_SYFOV_CODE_SQ_PK)
        End Function
    End Class
End Namespace
