'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.312
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Nomenclature3"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Nomenclature3
    Inherits System.Data.DataSet
    
    Private tableFPRCL_SECPRECLIN As FPRCL_SECPRECLINDataTable
    
    Private tableFPRCLCPH_FPRCL_CLPH As FPRCLCPH_FPRCL_CLPHDataTable
    
    Private relationFK_FPRCLCPH_PRCL As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FPRCL_SECPRECLIN")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCL_SECPRECLINDataTable(ds.Tables("FPRCL_SECPRECLIN")))
            End If
            If (Not (ds.Tables("FPRCLCPH_FPRCL_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLCPH_FPRCL_CLPHDataTable(ds.Tables("FPRCLCPH_FPRCL_CLPH")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCL_SECPRECLIN() As FPRCL_SECPRECLINDataTable
        Get
            Return Me.tableFPRCL_SECPRECLIN
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPRCLCPH_FPRCL_CLPH() As FPRCLCPH_FPRCL_CLPHDataTable
        Get
            Return Me.tableFPRCLCPH_FPRCL_CLPH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Nomenclature3 = CType(MyBase.Clone,dsTheriaque_Nomenclature3)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FPRCL_SECPRECLIN")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCL_SECPRECLINDataTable(ds.Tables("FPRCL_SECPRECLIN")))
            End If
            If (Not (ds.Tables("FPRCLCPH_FPRCL_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPRCLCPH_FPRCL_CLPHDataTable(ds.Tables("FPRCLCPH_FPRCL_CLPH")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFPRCL_SECPRECLIN = CType(MyBase.Tables("FPRCL_SECPRECLIN"),FPRCL_SECPRECLINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCL_SECPRECLIN) Is Nothing) Then
                Me.tableFPRCL_SECPRECLIN.InitVars
            End If
        End If
        Me.tableFPRCLCPH_FPRCL_CLPH = CType(MyBase.Tables("FPRCLCPH_FPRCL_CLPH"),FPRCLCPH_FPRCL_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPRCLCPH_FPRCL_CLPH) Is Nothing) Then
                Me.tableFPRCLCPH_FPRCL_CLPH.InitVars
            End If
        End If
        Me.relationFK_FPRCLCPH_PRCL = Me.Relations("FK_FPRCLCPH_PRCL")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Nomenclature3"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Nomenclature3.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFPRCL_SECPRECLIN = New FPRCL_SECPRECLINDataTable
        MyBase.Tables.Add(Me.tableFPRCL_SECPRECLIN)
        Me.tableFPRCLCPH_FPRCL_CLPH = New FPRCLCPH_FPRCL_CLPHDataTable
        MyBase.Tables.Add(Me.tableFPRCLCPH_FPRCL_CLPH)
        Me.relationFK_FPRCLCPH_PRCL = New System.Data.DataRelation("FK_FPRCLCPH_PRCL", New System.Data.DataColumn() {Me.tableFPRCL_SECPRECLIN.FPRCL_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_FPRCL_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_FPRCLCPH_PRCL)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCL_SECPRECLIN() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPRCLCPH_FPRCL_CLPH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Nomenclature3 = New dsTheriaque_Nomenclature3
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub FPRCL_SECPRECLINRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCL_SECPRECLINRowChangeEvent)
    
    Public Delegate Sub FPRCLCPH_FPRCL_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPRCLCPH_FPRCL_CLPHRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCL_SECPRECLINDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCL_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnFPRCL_TXT As System.Data.DataColumn
        
        Private columnFPRCL_DATECR As System.Data.DataColumn
        
        Private columnFPRCL_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCL_SECPRECLIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_TXTColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_TXT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCL_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCL_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCL_SECPRECLINRow
            Get
                Return CType(Me.Rows(index),FPRCL_SECPRECLINRow)
            End Get
        End Property
        
        Public Event FPRCL_SECPRECLINRowChanging As FPRCL_SECPRECLINRowChangeEventHandler
        
        Public Event FPRCL_SECPRECLINRowChanged As FPRCL_SECPRECLINRowChangeEventHandler
        
        Public Event FPRCL_SECPRECLINRowDeleting As FPRCL_SECPRECLINRowChangeEventHandler
        
        Public Event FPRCL_SECPRECLINRowDeleted As FPRCL_SECPRECLINRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCL_SECPRECLINRow(ByVal row As FPRCL_SECPRECLINRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCL_SECPRECLINRow(ByVal FPRCL_CODE_SQ_PK As Integer, ByVal FPRCL_TXT As String, ByVal FPRCL_DATECR As Date, ByVal FPRCL_DATEMJ As Date) As FPRCL_SECPRECLINRow
            Dim rowFPRCL_SECPRECLINRow As FPRCL_SECPRECLINRow = CType(Me.NewRow,FPRCL_SECPRECLINRow)
            rowFPRCL_SECPRECLINRow.ItemArray = New Object() {FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEMJ}
            Me.Rows.Add(rowFPRCL_SECPRECLINRow)
            Return rowFPRCL_SECPRECLINRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCL_CODE_SQ_PK(ByVal FPRCL_CODE_SQ_PK As Integer) As FPRCL_SECPRECLINRow
            Return CType(Me.Rows.Find(New Object() {FPRCL_CODE_SQ_PK}),FPRCL_SECPRECLINRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCL_SECPRECLINDataTable = CType(MyBase.Clone,FPRCL_SECPRECLINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCL_SECPRECLINDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCL_CODE_SQ_PK = MyBase.Columns("FPRCL_CODE_SQ_PK")
            Me.columnFPRCL_TXT = MyBase.Columns("FPRCL_TXT")
            Me.columnFPRCL_DATECR = MyBase.Columns("FPRCL_DATECR")
            Me.columnFPRCL_DATEMJ = MyBase.Columns("FPRCL_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCL_CODE_SQ_PK = New System.Data.DataColumn("FPRCL_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_CODE_SQ_PK)
            Me.columnFPRCL_TXT = New System.Data.DataColumn("FPRCL_TXT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_TXT)
            Me.columnFPRCL_DATECR = New System.Data.DataColumn("FPRCL_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_DATECR)
            Me.columnFPRCL_DATEMJ = New System.Data.DataColumn("FPRCL_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCL_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCL_CODE_SQ_PK}, true))
            Me.columnFPRCL_CODE_SQ_PK.AllowDBNull = false
            Me.columnFPRCL_CODE_SQ_PK.Unique = true
            Me.columnFPRCL_TXT.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCL_SECPRECLINRow() As FPRCL_SECPRECLINRow
            Return CType(Me.NewRow,FPRCL_SECPRECLINRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCL_SECPRECLINRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCL_SECPRECLINRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCL_SECPRECLINRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowChanged(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCL_SECPRECLINRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowChanging(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCL_SECPRECLINRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowDeleted(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCL_SECPRECLINRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCL_SECPRECLINRowDeleting(Me, New FPRCL_SECPRECLINRowChangeEvent(CType(e.Row,FPRCL_SECPRECLINRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCL_SECPRECLINRow(ByVal row As FPRCL_SECPRECLINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature3 = New dsTheriaque_Nomenclature3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCL_SECPRECLINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPRCLCPH_FPRCL_CLPHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFPRCLCPH_FPRCL_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFPRCLCPH_CPH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPRCLCPH_FPRCL_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLCPH_FPRCL_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLCPH_FPRCL_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPRCLCPH_CPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFPRCLCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPRCLCPH_FPRCL_CLPHRow
            Get
                Return CType(Me.Rows(index),FPRCLCPH_FPRCL_CLPHRow)
            End Get
        End Property
        
        Public Event FPRCLCPH_FPRCL_CLPHRowChanging As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        Public Event FPRCLCPH_FPRCL_CLPHRowChanged As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        Public Event FPRCLCPH_FPRCL_CLPHRowDeleting As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        Public Event FPRCLCPH_FPRCL_CLPHRowDeleted As FPRCLCPH_FPRCL_CLPHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPRCLCPH_FPRCL_CLPHRow(ByVal row As FPRCLCPH_FPRCL_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPRCLCPH_FPRCL_CLPHRow(ByVal parentFPRCL_SECPRECLINRowByFK_FPRCLCPH_PRCL As FPRCL_SECPRECLINRow, ByVal FPRCLCPH_CPH_CODE_FK_PK As String) As FPRCLCPH_FPRCL_CLPHRow
            Dim rowFPRCLCPH_FPRCL_CLPHRow As FPRCLCPH_FPRCL_CLPHRow = CType(Me.NewRow,FPRCLCPH_FPRCL_CLPHRow)
            rowFPRCLCPH_FPRCL_CLPHRow.ItemArray = New Object() {parentFPRCL_SECPRECLINRowByFK_FPRCLCPH_PRCL(0), FPRCLCPH_CPH_CODE_FK_PK}
            Me.Rows.Add(rowFPRCLCPH_FPRCL_CLPHRow)
            Return rowFPRCLCPH_FPRCL_CLPHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPRCLCPH_FPRCL_CODE_FK_PKFPRCLCPH_CPH_CODE_FK_PK(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String) As FPRCLCPH_FPRCL_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK}),FPRCLCPH_FPRCL_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FPRCLCPH_FPRCL_CLPHDataTable = CType(MyBase.Clone,FPRCLCPH_FPRCL_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FPRCLCPH_FPRCL_CLPHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPRCLCPH_FPRCL_CODE_FK_PK = MyBase.Columns("FPRCLCPH_FPRCL_CODE_FK_PK")
            Me.columnFPRCLCPH_CPH_CODE_FK_PK = MyBase.Columns("FPRCLCPH_CPH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPRCLCPH_FPRCL_CODE_FK_PK = New System.Data.DataColumn("FPRCLCPH_FPRCL_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLCPH_FPRCL_CODE_FK_PK)
            Me.columnFPRCLCPH_CPH_CODE_FK_PK = New System.Data.DataColumn("FPRCLCPH_CPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPRCLCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFPRCLCPH_FPRCL_CODE_FK_PK, Me.columnFPRCLCPH_CPH_CODE_FK_PK}, true))
            Me.columnFPRCLCPH_FPRCL_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPRCLCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPRCLCPH_FPRCL_CLPHRow() As FPRCLCPH_FPRCL_CLPHRow
            Return CType(Me.NewRow,FPRCLCPH_FPRCL_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FPRCLCPH_FPRCL_CLPHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FPRCLCPH_FPRCL_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowChanged(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowChanging(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowDeleted(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPRCLCPH_FPRCL_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPRCLCPH_FPRCL_CLPHRowDeleting(Me, New FPRCLCPH_FPRCL_CLPHRowChangeEvent(CType(e.Row,FPRCLCPH_FPRCL_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPRCLCPH_FPRCL_CLPHRow(ByVal row As FPRCLCPH_FPRCL_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature3 = New dsTheriaque_Nomenclature3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPRCLCPH_FPRCL_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCL_SECPRECLINRow
        Inherits System.Data.DataRow
        
        Private tableFPRCL_SECPRECLIN As FPRCL_SECPRECLINDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCL_SECPRECLIN = CType(Me.Table,FPRCL_SECPRECLINDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_TXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FPRCL_TXT' dans la table 'FPRCL_SECPRECLIN' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_DATECR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FPRCL_DATECR' dans la table 'FPRCL_SECPRECLIN' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FPRCL_DATEMJ' dans la table 'FPRCL_SECPRECLIN' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPRCL_TXTNull() As Boolean
            Return Me.IsNull(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPRCL_TXTNull()
            Me(Me.tableFPRCL_SECPRECLIN.FPRCL_TXTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPRCL_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPRCL_DATECRNull()
            Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATECRColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPRCL_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPRCL_DATEMJNull()
            Me(Me.tableFPRCL_SECPRECLIN.FPRCL_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFPRCLCPH_FPRCL_CLPHRows() As FPRCLCPH_FPRCL_CLPHRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FPRCLCPH_PRCL")),FPRCLCPH_FPRCL_CLPHRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPRCLCPH_FPRCL_CLPHRow
        Inherits System.Data.DataRow
        
        Private tableFPRCLCPH_FPRCL_CLPH As FPRCLCPH_FPRCL_CLPHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPRCLCPH_FPRCL_CLPH = CType(Me.Table,FPRCLCPH_FPRCL_CLPHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLCPH_FPRCL_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_FPRCL_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_FPRCL_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCLCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPRCLCPH_FPRCL_CLPH.FPRCLCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPRCL_SECPRECLINRow() As FPRCL_SECPRECLINRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FPRCLCPH_PRCL")),FPRCL_SECPRECLINRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FPRCLCPH_PRCL"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCL_SECPRECLINRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCL_SECPRECLINRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCL_SECPRECLINRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCL_SECPRECLINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPRCLCPH_FPRCL_CLPHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FPRCLCPH_FPRCL_CLPHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPRCLCPH_FPRCL_CLPHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPRCLCPH_FPRCL_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Nomenclature3TableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPRCL_SECPRECLINTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCL_SECPRECLIN"
            tableMapping.ColumnMappings.Add("FPRCL_CODE_SQ_PK", "FPRCL_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FPRCL_TXT", "FPRCL_TXT")
            tableMapping.ColumnMappings.Add("FPRCL_DATECR", "FPRCL_DATECR")
            tableMapping.ColumnMappings.Add("FPRCL_DATEMJ", "FPRCL_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCL_SECPRECLIN] WHERE (([FPRCL_CODE_SQ_PK] = @Original"& _ 
                "_FPRCL_CODE_SQ_PK) AND ((@IsNull_FPRCL_DATECR = 1 AND [FPRCL_DATECR] IS NULL) OR"& _ 
                " ([FPRCL_DATECR] = @Original_FPRCL_DATECR)) AND ((@IsNull_FPRCL_DATEMJ = 1 AND ["& _ 
                "FPRCL_DATEMJ] IS NULL) OR ([FPRCL_DATEMJ] = @Original_FPRCL_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCL_SECPRECLIN] ([FPRCL_CODE_SQ_PK], [FPRCL_TXT], [FPR"& _ 
                "CL_DATECR], [FPRCL_DATEMJ]) VALUES (@FPRCL_CODE_SQ_PK, @FPRCL_TXT, @FPRCL_DATECR"& _ 
                ", @FPRCL_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEM"& _ 
                "J FROM THERIAQUE.FPRCL_SECPRECLIN WHERE (FPRCL_CODE_SQ_PK = @FPRCL_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_TXT", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_TXT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCL_SECPRECLIN] SET [FPRCL_CODE_SQ_PK] = @FPRCL_CODE_SQ_PK,"& _ 
                " [FPRCL_TXT] = @FPRCL_TXT, [FPRCL_DATECR] = @FPRCL_DATECR, [FPRCL_DATEMJ] = @FPR"& _ 
                "CL_DATEMJ WHERE (([FPRCL_CODE_SQ_PK] = @Original_FPRCL_CODE_SQ_PK) AND ((@IsNull"& _ 
                "_FPRCL_DATECR = 1 AND [FPRCL_DATECR] IS NULL) OR ([FPRCL_DATECR] = @Original_FPR"& _ 
                "CL_DATECR)) AND ((@IsNull_FPRCL_DATEMJ = 1 AND [FPRCL_DATEMJ] IS NULL) OR ([FPRC"& _ 
                "L_DATEMJ] = @Original_FPRCL_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRC"& _ 
                "L_DATECR, FPRCL_DATEMJ FROM THERIAQUE.FPRCL_SECPRECLIN WHERE (FPRCL_CODE_SQ_PK ="& _ 
                " @FPRCL_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_TXT", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_TXT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FPRCL_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCL_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEMJ FROM THERIAQUE.FPR" & _
                "CL_SECPRECLIN"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCL_CODE_SQ_PK, FPRCL_TXT, FPRCL_DATECR, FPRCL_DATEMJ FROM THERIAQUE.FPR" & _
                "CL_SECPRECLIN " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCL_CODE_SQ_PK = @FPRCL_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCL_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCL_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable = New dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable, ByVal FPRCL_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCL_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable = New dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature3.FPRCL_SECPRECLINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature3) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCL_SECPRECLIN")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCL_CODE_SQ_PK As Integer, ByVal Original_FPRCL_DATECR As System.Nullable(Of Date), ByVal Original_FPRCL_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCL_CODE_SQ_PK, Integer)
            If (Original_FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCL_CODE_SQ_PK As Integer, ByVal FPRCL_TXT As String, ByVal FPRCL_DATECR As System.Nullable(Of Date), ByVal FPRCL_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            If (FPRCL_TXT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCL_TXT, String)
            End If
            If (FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCL_CODE_SQ_PK As Integer, ByVal FPRCL_TXT As String, ByVal FPRCL_DATECR As System.Nullable(Of Date), ByVal FPRCL_DATEMJ As System.Nullable(Of Date), ByVal Original_FPRCL_CODE_SQ_PK As Integer, ByVal Original_FPRCL_DATECR As System.Nullable(Of Date), ByVal Original_FPRCL_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCL_CODE_SQ_PK, Integer)
            If (FPRCL_TXT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCL_TXT, String)
            End If
            If (FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPRCL_CODE_SQ_PK, Integer)
            If (Original_FPRCL_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPRCL_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_FPRCL_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FPRCL_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FPRCLCPH_FPRCL_CLPHTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPRCLCPH_FPRCL_CLPH"
            tableMapping.ColumnMappings.Add("FPRCLCPH_FPRCL_CODE_FK_PK", "FPRCLCPH_FPRCL_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPRCLCPH_CPH_CODE_FK_PK", "FPRCLCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPRCLCPH_FPRCL_CLPH] WHERE (([FPRCLCPH_FPRCL_CODE_FK_PK]" & _
                " = @Original_FPRCLCPH_FPRCL_CODE_FK_PK) AND ([FPRCLCPH_CPH_CODE_FK_PK] = @Origin" & _
                "al_FPRCLCPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPRCLCPH_FPRCL_CLPH] ([FPRCLCPH_FPRCL_CODE_FK_PK], [FPRC" & _
                "LCPH_CPH_CODE_FK_PK]) VALUES (@FPRCLCPH_FPRCL_CODE_FK_PK, @FPRCLCPH_CPH_CODE_FK_" & _
                "PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.F" & _
                "PRCLCPH_FPRCL_CLPH WHERE (FPRCLCPH_CPH_CODE_FK_PK = @FPRCLCPH_CPH_CODE_FK_PK) AN" & _
                "D (FPRCLCPH_FPRCL_CODE_FK_PK = @FPRCLCPH_FPRCL_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPRCLCPH_FPRCL_CLPH] SET [FPRCLCPH_FPRCL_CODE_FK_PK] = @FPRCL" & _
                "CPH_FPRCL_CODE_FK_PK, [FPRCLCPH_CPH_CODE_FK_PK] = @FPRCLCPH_CPH_CODE_FK_PK WHERE" & _
                " (([FPRCLCPH_FPRCL_CODE_FK_PK] = @Original_FPRCLCPH_FPRCL_CODE_FK_PK) AND ([FPRC" & _
                "LCPH_CPH_CODE_FK_PK] = @Original_FPRCLCPH_CPH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FPRCLCPH_FPR" & _
                "CL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPRCLCPH_FPRCL_CLPH WHERE " & _
                "(FPRCLCPH_CPH_CODE_FK_PK = @FPRCLCPH_CPH_CODE_FK_PK) AND (FPRCLCPH_FPRCL_CODE_FK" & _
                "_PK = @FPRCLCPH_FPRCL_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FPRCLCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPRCLCPH" & _
                "_FPRCL_CLPH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPRCLCPH_FPRCL_CODE_FK_PK, FPRCLCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPRCLCPH" & _
                "_FPRCL_CLPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FPRCLCPH_FPRCL_CODE_FK_PK = @FPRCLCPH_FPRCL_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FPRCLCPH_FPRCL_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable = New dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable, ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable = New dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature3.FPRCLCPH_FPRCL_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature3) As Integer
            Return Me.Adapter.Update(dataSet, "FPRCLCPH_FPRCL_CLPH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (Original_FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal FPRCLCPH_CPH_CODE_FK_PK As String, ByVal Original_FPRCLCPH_FPRCL_CODE_FK_PK As Integer, ByVal Original_FPRCLCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPRCLCPH_FPRCL_CODE_FK_PK, Integer)
            If (Original_FPRCLCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FPRCLCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPRCLCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
