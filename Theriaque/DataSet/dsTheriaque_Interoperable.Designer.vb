'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.1433
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Interoperable"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Interoperable
    Inherits Global.System.Data.DataSet
    
    Private tableDEXTR_DATE_EXTRACTION As DEXTR_DATE_EXTRACTIONDataTable
    
    Private tableINTER_INTEROPERABLE As INTER_INTEROPERABLEDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DEXTR_DATE_EXTRACTION")) Is Nothing) Then
                MyBase.Tables.Add(New DEXTR_DATE_EXTRACTIONDataTable(ds.Tables("DEXTR_DATE_EXTRACTION")))
            End If
            If (Not (ds.Tables("INTER_INTEROPERABLE")) Is Nothing) Then
                MyBase.Tables.Add(New INTER_INTEROPERABLEDataTable(ds.Tables("INTER_INTEROPERABLE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DEXTR_DATE_EXTRACTION() As DEXTR_DATE_EXTRACTIONDataTable
        Get
            Return Me.tableDEXTR_DATE_EXTRACTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INTER_INTEROPERABLE() As INTER_INTEROPERABLEDataTable
        Get
            Return Me.tableINTER_INTEROPERABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Interoperable = CType(MyBase.Clone,dsTheriaque_Interoperable)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DEXTR_DATE_EXTRACTION")) Is Nothing) Then
                MyBase.Tables.Add(New DEXTR_DATE_EXTRACTIONDataTable(ds.Tables("DEXTR_DATE_EXTRACTION")))
            End If
            If (Not (ds.Tables("INTER_INTEROPERABLE")) Is Nothing) Then
                MyBase.Tables.Add(New INTER_INTEROPERABLEDataTable(ds.Tables("INTER_INTEROPERABLE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDEXTR_DATE_EXTRACTION = CType(MyBase.Tables("DEXTR_DATE_EXTRACTION"),DEXTR_DATE_EXTRACTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDEXTR_DATE_EXTRACTION) Is Nothing) Then
                Me.tableDEXTR_DATE_EXTRACTION.InitVars
            End If
        End If
        Me.tableINTER_INTEROPERABLE = CType(MyBase.Tables("INTER_INTEROPERABLE"),INTER_INTEROPERABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINTER_INTEROPERABLE) Is Nothing) Then
                Me.tableINTER_INTEROPERABLE.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Interoperable"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Interoperable.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDEXTR_DATE_EXTRACTION = New DEXTR_DATE_EXTRACTIONDataTable
        MyBase.Tables.Add(Me.tableDEXTR_DATE_EXTRACTION)
        Me.tableINTER_INTEROPERABLE = New INTER_INTEROPERABLEDataTable
        MyBase.Tables.Add(Me.tableINTER_INTEROPERABLE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDEXTR_DATE_EXTRACTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINTER_INTEROPERABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Interoperable = New dsTheriaque_Interoperable
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DEXTR_DATE_EXTRACTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As DEXTR_DATE_EXTRACTIONRowChangeEvent)
    
    Public Delegate Sub INTER_INTEROPERABLERowChangeEventHandler(ByVal sender As Object, ByVal e As INTER_INTEROPERABLERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DEXTR_DATE_EXTRACTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDEXTR_VER_THER_PK As Global.System.Data.DataColumn
        
        Private columnDEXTR_DATE_EXTR_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DEXTR_DATE_EXTRACTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEXTR_VER_THER_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEXTR_VER_THER_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEXTR_DATE_EXTR_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEXTR_DATE_EXTR_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DEXTR_DATE_EXTRACTIONRow
            Get
                Return CType(Me.Rows(index),DEXTR_DATE_EXTRACTIONRow)
            End Get
        End Property
        
        Public Event DEXTR_DATE_EXTRACTIONRowChanging As DEXTR_DATE_EXTRACTIONRowChangeEventHandler
        
        Public Event DEXTR_DATE_EXTRACTIONRowChanged As DEXTR_DATE_EXTRACTIONRowChangeEventHandler
        
        Public Event DEXTR_DATE_EXTRACTIONRowDeleting As DEXTR_DATE_EXTRACTIONRowChangeEventHandler
        
        Public Event DEXTR_DATE_EXTRACTIONRowDeleted As DEXTR_DATE_EXTRACTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDEXTR_DATE_EXTRACTIONRow(ByVal row As DEXTR_DATE_EXTRACTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDEXTR_DATE_EXTRACTIONRow(ByVal DEXTR_VER_THER_PK As String, ByVal DEXTR_DATE_EXTR_PK As Date) As DEXTR_DATE_EXTRACTIONRow
            Dim rowDEXTR_DATE_EXTRACTIONRow As DEXTR_DATE_EXTRACTIONRow = CType(Me.NewRow,DEXTR_DATE_EXTRACTIONRow)
            Dim columnValuesArray() As Object = New Object() {DEXTR_VER_THER_PK, DEXTR_DATE_EXTR_PK}
            rowDEXTR_DATE_EXTRACTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDEXTR_DATE_EXTRACTIONRow)
            Return rowDEXTR_DATE_EXTRACTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDEXTR_VER_THER_PKDEXTR_DATE_EXTR_PK(ByVal DEXTR_VER_THER_PK As String, ByVal DEXTR_DATE_EXTR_PK As Date) As DEXTR_DATE_EXTRACTIONRow
            Return CType(Me.Rows.Find(New Object() {DEXTR_VER_THER_PK, DEXTR_DATE_EXTR_PK}),DEXTR_DATE_EXTRACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DEXTR_DATE_EXTRACTIONDataTable = CType(MyBase.Clone,DEXTR_DATE_EXTRACTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DEXTR_DATE_EXTRACTIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDEXTR_VER_THER_PK = MyBase.Columns("DEXTR_VER_THER_PK")
            Me.columnDEXTR_DATE_EXTR_PK = MyBase.Columns("DEXTR_DATE_EXTR_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDEXTR_VER_THER_PK = New Global.System.Data.DataColumn("DEXTR_VER_THER_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEXTR_VER_THER_PK)
            Me.columnDEXTR_DATE_EXTR_PK = New Global.System.Data.DataColumn("DEXTR_DATE_EXTR_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEXTR_DATE_EXTR_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDEXTR_VER_THER_PK, Me.columnDEXTR_DATE_EXTR_PK}, true))
            Me.columnDEXTR_VER_THER_PK.AllowDBNull = false
            Me.columnDEXTR_VER_THER_PK.MaxLength = 10
            Me.columnDEXTR_DATE_EXTR_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDEXTR_DATE_EXTRACTIONRow() As DEXTR_DATE_EXTRACTIONRow
            Return CType(Me.NewRow,DEXTR_DATE_EXTRACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DEXTR_DATE_EXTRACTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DEXTR_DATE_EXTRACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DEXTR_DATE_EXTRACTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent DEXTR_DATE_EXTRACTIONRowChanged(Me, New DEXTR_DATE_EXTRACTIONRowChangeEvent(CType(e.Row,DEXTR_DATE_EXTRACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DEXTR_DATE_EXTRACTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent DEXTR_DATE_EXTRACTIONRowChanging(Me, New DEXTR_DATE_EXTRACTIONRowChangeEvent(CType(e.Row,DEXTR_DATE_EXTRACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DEXTR_DATE_EXTRACTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent DEXTR_DATE_EXTRACTIONRowDeleted(Me, New DEXTR_DATE_EXTRACTIONRowChangeEvent(CType(e.Row,DEXTR_DATE_EXTRACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DEXTR_DATE_EXTRACTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent DEXTR_DATE_EXTRACTIONRowDeleting(Me, New DEXTR_DATE_EXTRACTIONRowChangeEvent(CType(e.Row,DEXTR_DATE_EXTRACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDEXTR_DATE_EXTRACTIONRow(ByVal row As DEXTR_DATE_EXTRACTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Interoperable = New dsTheriaque_Interoperable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DEXTR_DATE_EXTRACTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INTER_INTEROPERABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINTER_SP_CODE As Global.System.Data.DataColumn
        
        Private columnINTER_SP_NOM As Global.System.Data.DataColumn
        
        Private columnINTER_SP_NL As Global.System.Data.DataColumn
        
        Private columnINTER_PRE_CODE As Global.System.Data.DataColumn
        
        Private columnINTER_SP_CIPUCD As Global.System.Data.DataColumn
        
        Private columnINTER_SP_NOMLONG As Global.System.Data.DataColumn
        
        Private columnINTER_PRE_ADMIN As Global.System.Data.DataColumn
        
        Private columnINTER_PRE_ETAT_COMMER As Global.System.Data.DataColumn
        
        Private columnINTER_SP_CIPUCD13 As Global.System.Data.DataColumn
        
        Private columnINTER_PRE_EAN_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INTER_INTEROPERABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_SP_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_SP_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_SP_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_SP_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_SP_NLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_SP_NL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_PRE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_PRE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_SP_CIPUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_SP_CIPUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_SP_NOMLONGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_SP_NOMLONG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_PRE_ADMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_PRE_ADMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_PRE_ETAT_COMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_PRE_ETAT_COMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_SP_CIPUCD13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_SP_CIPUCD13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTER_PRE_EAN_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTER_PRE_EAN_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INTER_INTEROPERABLERow
            Get
                Return CType(Me.Rows(index),INTER_INTEROPERABLERow)
            End Get
        End Property
        
        Public Event INTER_INTEROPERABLERowChanging As INTER_INTEROPERABLERowChangeEventHandler
        
        Public Event INTER_INTEROPERABLERowChanged As INTER_INTEROPERABLERowChangeEventHandler
        
        Public Event INTER_INTEROPERABLERowDeleting As INTER_INTEROPERABLERowChangeEventHandler
        
        Public Event INTER_INTEROPERABLERowDeleted As INTER_INTEROPERABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINTER_INTEROPERABLERow(ByVal row As INTER_INTEROPERABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINTER_INTEROPERABLERow(ByVal INTER_SP_CODE As Integer, ByVal INTER_SP_NOM As String, ByVal INTER_SP_NL As String, ByVal INTER_PRE_CODE As String, ByVal INTER_SP_CIPUCD As String, ByVal INTER_SP_NOMLONG As String, ByVal INTER_PRE_ADMIN As String, ByVal INTER_PRE_ETAT_COMMER As String, ByVal INTER_SP_CIPUCD13 As String, ByVal INTER_PRE_EAN_REF As String) As INTER_INTEROPERABLERow
            Dim rowINTER_INTEROPERABLERow As INTER_INTEROPERABLERow = CType(Me.NewRow,INTER_INTEROPERABLERow)
            Dim columnValuesArray() As Object = New Object() {INTER_SP_CODE, INTER_SP_NOM, INTER_SP_NL, INTER_PRE_CODE, INTER_SP_CIPUCD, INTER_SP_NOMLONG, INTER_PRE_ADMIN, INTER_PRE_ETAT_COMMER, INTER_SP_CIPUCD13, INTER_PRE_EAN_REF}
            rowINTER_INTEROPERABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINTER_INTEROPERABLERow)
            Return rowINTER_INTEROPERABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INTER_INTEROPERABLEDataTable = CType(MyBase.Clone,INTER_INTEROPERABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INTER_INTEROPERABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINTER_SP_CODE = MyBase.Columns("INTER_SP_CODE")
            Me.columnINTER_SP_NOM = MyBase.Columns("INTER_SP_NOM")
            Me.columnINTER_SP_NL = MyBase.Columns("INTER_SP_NL")
            Me.columnINTER_PRE_CODE = MyBase.Columns("INTER_PRE_CODE")
            Me.columnINTER_SP_CIPUCD = MyBase.Columns("INTER_SP_CIPUCD")
            Me.columnINTER_SP_NOMLONG = MyBase.Columns("INTER_SP_NOMLONG")
            Me.columnINTER_PRE_ADMIN = MyBase.Columns("INTER_PRE_ADMIN")
            Me.columnINTER_PRE_ETAT_COMMER = MyBase.Columns("INTER_PRE_ETAT_COMMER")
            Me.columnINTER_SP_CIPUCD13 = MyBase.Columns("INTER_SP_CIPUCD13")
            Me.columnINTER_PRE_EAN_REF = MyBase.Columns("INTER_PRE_EAN_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINTER_SP_CODE = New Global.System.Data.DataColumn("INTER_SP_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_SP_CODE)
            Me.columnINTER_SP_NOM = New Global.System.Data.DataColumn("INTER_SP_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_SP_NOM)
            Me.columnINTER_SP_NL = New Global.System.Data.DataColumn("INTER_SP_NL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_SP_NL)
            Me.columnINTER_PRE_CODE = New Global.System.Data.DataColumn("INTER_PRE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_PRE_CODE)
            Me.columnINTER_SP_CIPUCD = New Global.System.Data.DataColumn("INTER_SP_CIPUCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_SP_CIPUCD)
            Me.columnINTER_SP_NOMLONG = New Global.System.Data.DataColumn("INTER_SP_NOMLONG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_SP_NOMLONG)
            Me.columnINTER_PRE_ADMIN = New Global.System.Data.DataColumn("INTER_PRE_ADMIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_PRE_ADMIN)
            Me.columnINTER_PRE_ETAT_COMMER = New Global.System.Data.DataColumn("INTER_PRE_ETAT_COMMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_PRE_ETAT_COMMER)
            Me.columnINTER_SP_CIPUCD13 = New Global.System.Data.DataColumn("INTER_SP_CIPUCD13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_SP_CIPUCD13)
            Me.columnINTER_PRE_EAN_REF = New Global.System.Data.DataColumn("INTER_PRE_EAN_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTER_PRE_EAN_REF)
            Me.columnINTER_SP_NOM.MaxLength = 36
            Me.columnINTER_SP_NL.MaxLength = 13
            Me.columnINTER_PRE_CODE.MaxLength = 50
            Me.columnINTER_SP_CIPUCD.MaxLength = 7
            Me.columnINTER_SP_NOMLONG.MaxLength = 255
            Me.columnINTER_PRE_ADMIN.MaxLength = 600
            Me.columnINTER_PRE_ETAT_COMMER.MaxLength = 2
            Me.columnINTER_SP_CIPUCD13.MaxLength = 13
            Me.columnINTER_PRE_EAN_REF.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINTER_INTEROPERABLERow() As INTER_INTEROPERABLERow
            Return CType(Me.NewRow,INTER_INTEROPERABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INTER_INTEROPERABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INTER_INTEROPERABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INTER_INTEROPERABLERowChangedEvent) Is Nothing) Then
                RaiseEvent INTER_INTEROPERABLERowChanged(Me, New INTER_INTEROPERABLERowChangeEvent(CType(e.Row,INTER_INTEROPERABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INTER_INTEROPERABLERowChangingEvent) Is Nothing) Then
                RaiseEvent INTER_INTEROPERABLERowChanging(Me, New INTER_INTEROPERABLERowChangeEvent(CType(e.Row,INTER_INTEROPERABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INTER_INTEROPERABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent INTER_INTEROPERABLERowDeleted(Me, New INTER_INTEROPERABLERowChangeEvent(CType(e.Row,INTER_INTEROPERABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INTER_INTEROPERABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent INTER_INTEROPERABLERowDeleting(Me, New INTER_INTEROPERABLERowChangeEvent(CType(e.Row,INTER_INTEROPERABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINTER_INTEROPERABLERow(ByVal row As INTER_INTEROPERABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Interoperable = New dsTheriaque_Interoperable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INTER_INTEROPERABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DEXTR_DATE_EXTRACTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableDEXTR_DATE_EXTRACTION As DEXTR_DATE_EXTRACTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDEXTR_DATE_EXTRACTION = CType(Me.Table,DEXTR_DATE_EXTRACTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEXTR_VER_THER_PK() As String
            Get
                Return CType(Me(Me.tableDEXTR_DATE_EXTRACTION.DEXTR_VER_THER_PKColumn),String)
            End Get
            Set
                Me(Me.tableDEXTR_DATE_EXTRACTION.DEXTR_VER_THER_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEXTR_DATE_EXTR_PK() As Date
            Get
                Return CType(Me(Me.tableDEXTR_DATE_EXTRACTION.DEXTR_DATE_EXTR_PKColumn),Date)
            End Get
            Set
                Me(Me.tableDEXTR_DATE_EXTRACTION.DEXTR_DATE_EXTR_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INTER_INTEROPERABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableINTER_INTEROPERABLE As INTER_INTEROPERABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINTER_INTEROPERABLE = CType(Me.Table,INTER_INTEROPERABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_SP_CODE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CODEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_SP_CODE' dans la table 'INTER_INTEROPERABLE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_SP_NOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_SP_NOM' dans la table 'INTER_INTEROPERABLE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_SP_NL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_SP_NL' dans la table 'INTER_INTEROPERABLE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_PRE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_PRE_CODE' dans la table 'INTER_INTEROPERABLE' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_SP_CIPUCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_SP_CIPUCD' dans la table 'INTER_INTEROPERABLE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_SP_NOMLONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMLONGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_SP_NOMLONG' dans la table 'INTER_INTEROPERABLE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMLONGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_PRE_ADMIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_ADMINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_PRE_ADMIN' dans la table 'INTER_INTEROPERABLE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_ADMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_PRE_ETAT_COMMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_ETAT_COMMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_PRE_ETAT_COMMER' dans la table 'INTER_INTEROPERA"& _ 
                            "BLE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_ETAT_COMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_SP_CIPUCD13() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCD13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_SP_CIPUCD13' dans la table 'INTER_INTEROPERABLE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCD13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTER_PRE_EAN_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_EAN_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'INTER_PRE_EAN_REF' dans la table 'INTER_INTEROPERABLE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_EAN_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_SP_CODENull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_SP_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_SP_CODENull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_SP_NOMNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_SP_NOMNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_SP_NLNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_SP_NLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_SP_NLNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_PRE_CODENull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_PRE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_PRE_CODENull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_SP_CIPUCDNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_SP_CIPUCDNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_SP_NOMLONGNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMLONGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_SP_NOMLONGNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_SP_NOMLONGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_PRE_ADMINNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_PRE_ADMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_PRE_ADMINNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_ADMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_PRE_ETAT_COMMERNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_PRE_ETAT_COMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_PRE_ETAT_COMMERNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_ETAT_COMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_SP_CIPUCD13Null() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCD13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_SP_CIPUCD13Null()
            Me(Me.tableINTER_INTEROPERABLE.INTER_SP_CIPUCD13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTER_PRE_EAN_REFNull() As Boolean
            Return Me.IsNull(Me.tableINTER_INTEROPERABLE.INTER_PRE_EAN_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTER_PRE_EAN_REFNull()
            Me(Me.tableINTER_INTEROPERABLE.INTER_PRE_EAN_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DEXTR_DATE_EXTRACTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DEXTR_DATE_EXTRACTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DEXTR_DATE_EXTRACTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DEXTR_DATE_EXTRACTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INTER_INTEROPERABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INTER_INTEROPERABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INTER_INTEROPERABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INTER_INTEROPERABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_InteroperableTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DEXTR_DATE_EXTRACTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DEXTR_DATE_EXTRACTION"
            tableMapping.ColumnMappings.Add("DEXTR_VER_THER_PK", "DEXTR_VER_THER_PK")
            tableMapping.ColumnMappings.Add("DEXTR_DATE_EXTR_PK", "DEXTR_DATE_EXTR_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[DEXTR_DATE_EXTRACTION] WHERE (([DEXTR_VER_THER_PK] = @Or"& _ 
                "iginal_DEXTR_VER_THER_PK) AND ([DEXTR_DATE_EXTR_PK] = @Original_DEXTR_DATE_EXTR_"& _ 
                "PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEXTR_VER_THER_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_VER_THER_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEXTR_DATE_EXTR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_DATE_EXTR_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[DEXTR_DATE_EXTRACTION] ([DEXTR_VER_THER_PK], [DEXTR_DATE"& _ 
                "_EXTR_PK]) VALUES (@DEXTR_VER_THER_PK, @DEXTR_DATE_EXTR_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DEXTR_VER_T"& _ 
                "HER_PK, DEXTR_DATE_EXTR_PK FROM theriaque.DEXTR_DATE_EXTRACTION WHERE (DEXTR_DAT"& _ 
                "E_EXTR_PK = @DEXTR_DATE_EXTR_PK) AND (DEXTR_VER_THER_PK = @DEXTR_VER_THER_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEXTR_VER_THER_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_VER_THER_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEXTR_DATE_EXTR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_DATE_EXTR_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[DEXTR_DATE_EXTRACTION] SET [DEXTR_VER_THER_PK] = @DEXTR_VER_T"& _ 
                "HER_PK, [DEXTR_DATE_EXTR_PK] = @DEXTR_DATE_EXTR_PK WHERE (([DEXTR_VER_THER_PK] ="& _ 
                " @Original_DEXTR_VER_THER_PK) AND ([DEXTR_DATE_EXTR_PK] = @Original_DEXTR_DATE_E"& _ 
                "XTR_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DEXTR_VER_THER_PK, DEXTR_DATE_EXTR_PK FROM theriaque.DEXTR_DAT"& _ 
                "E_EXTRACTION WHERE (DEXTR_DATE_EXTR_PK = @DEXTR_DATE_EXTR_PK) AND (DEXTR_VER_THE"& _ 
                "R_PK = @DEXTR_VER_THER_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEXTR_VER_THER_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_VER_THER_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEXTR_DATE_EXTR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_DATE_EXTR_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEXTR_VER_THER_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_VER_THER_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEXTR_DATE_EXTR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEXTR_DATE_EXTR_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DEXTR_VER_THER_PK, DEXTR_DATE_EXTR_PK FROM theriaque.DEXTR_DATE_EXTRACTION"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Interoperable.DEXTR_DATE_EXTRACTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Interoperable.DEXTR_DATE_EXTRACTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Interoperable.DEXTR_DATE_EXTRACTIONDataTable = New dsTheriaque_Interoperable.DEXTR_DATE_EXTRACTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Interoperable.DEXTR_DATE_EXTRACTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Interoperable) As Integer
            Return Me.Adapter.Update(dataSet, "DEXTR_DATE_EXTRACTION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DEXTR_VER_THER_PK As String, ByVal Original_DEXTR_DATE_EXTR_PK As Date) As Integer
            If (Original_DEXTR_VER_THER_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEXTR_VER_THER_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DEXTR_VER_THER_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DEXTR_DATE_EXTR_PK,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DEXTR_VER_THER_PK As String, ByVal DEXTR_DATE_EXTR_PK As Date) As Integer
            If (DEXTR_VER_THER_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEXTR_VER_THER_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DEXTR_VER_THER_PK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DEXTR_DATE_EXTR_PK,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DEXTR_VER_THER_PK As String, ByVal DEXTR_DATE_EXTR_PK As Date, ByVal Original_DEXTR_VER_THER_PK As String, ByVal Original_DEXTR_DATE_EXTR_PK As Date) As Integer
            If (DEXTR_VER_THER_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEXTR_VER_THER_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DEXTR_VER_THER_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DEXTR_DATE_EXTR_PK,Date)
            If (Original_DEXTR_VER_THER_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEXTR_VER_THER_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_DEXTR_VER_THER_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_DEXTR_DATE_EXTR_PK,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_DEXTR_VER_THER_PK As String, ByVal Original_DEXTR_DATE_EXTR_PK As Date) As Integer
            Return Me.Update(Original_DEXTR_VER_THER_PK, Original_DEXTR_DATE_EXTR_PK, Original_DEXTR_VER_THER_PK, Original_DEXTR_DATE_EXTR_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class INTER_INTEROPERABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "INTER_INTEROPERABLE"
            tableMapping.ColumnMappings.Add("INTER_SP_CODE", "INTER_SP_CODE")
            tableMapping.ColumnMappings.Add("INTER_SP_NOM", "INTER_SP_NOM")
            tableMapping.ColumnMappings.Add("INTER_SP_NL", "INTER_SP_NL")
            tableMapping.ColumnMappings.Add("INTER_PRE_CODE", "INTER_PRE_CODE")
            tableMapping.ColumnMappings.Add("INTER_SP_CIPUCD", "INTER_SP_CIPUCD")
            tableMapping.ColumnMappings.Add("INTER_SP_NOMLONG", "INTER_SP_NOMLONG")
            tableMapping.ColumnMappings.Add("INTER_PRE_ADMIN", "INTER_PRE_ADMIN")
            tableMapping.ColumnMappings.Add("INTER_PRE_ETAT_COMMER", "INTER_PRE_ETAT_COMMER")
            tableMapping.ColumnMappings.Add("INTER_SP_CIPUCD13", "INTER_SP_CIPUCD13")
            tableMapping.ColumnMappings.Add("INTER_PRE_EAN_REF", "INTER_PRE_EAN_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[INTER_INTEROPERABLE] ([INTER_SP_CODE], [INTER_SP_NOM], ["& _ 
                "INTER_SP_NL], [INTER_PRE_CODE], [INTER_SP_CIPUCD], [INTER_SP_NOMLONG], [INTER_PR"& _ 
                "E_ADMIN], [INTER_PRE_ETAT_COMMER], [INTER_SP_CIPUCD13], [INTER_PRE_EAN_REF]) VAL"& _ 
                "UES (@INTER_SP_CODE, @INTER_SP_NOM, @INTER_SP_NL, @INTER_PRE_CODE, @INTER_SP_CIP"& _ 
                "UCD, @INTER_SP_NOMLONG, @INTER_PRE_ADMIN, @INTER_PRE_ETAT_COMMER, @INTER_SP_CIPU"& _ 
                "CD13, @INTER_PRE_EAN_REF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_NL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_PRE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_PRE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_CIPUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_NOMLONG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_PRE_ADMIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_PRE_ADMIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_PRE_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_PRE_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_CIPUCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_CIPUCD13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_PRE_EAN_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_PRE_EAN_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT INTER_SP_CODE, INTER_SP_NOM, INTER_SP_NL, INTER_PRE_CODE, INTER_SP_CIPUCD,"& _ 
                " INTER_SP_NOMLONG, INTER_PRE_ADMIN, INTER_PRE_ETAT_COMMER, INTER_SP_CIPUCD13, IN"& _ 
                "TER_PRE_EAN_REF FROM theriaque.INTER_INTEROPERABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT INTER_SP_CODE, INTER_SP_NOM, INTER_SP_NL, INTER_PRE_CODE, INTER_SP_CIPUCD,"& _ 
                " INTER_SP_NOMLONG, INTER_PRE_ADMIN, INTER_PRE_ETAT_COMMER,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INTER_SP_CIPUCD13, I"& _ 
                "NTER_PRE_EAN_REF FROM theriaque.INTER_INTEROPERABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE INTER_PRE_CODE = @INT"& _ 
                "ER_PRE_CODE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_PRE_CODE", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_PRE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT INTER_SP_CODE, INTER_SP_NOM, INTER_SP_NL, INTER_PRE_CODE, INTER_SP_CIPUCD,"& _ 
                " INTER_SP_NOMLONG, INTER_PRE_ADMIN, INTER_PRE_ETAT_COMMER,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INTER_SP_CIPUCD13, I"& _ 
                "NTER_PRE_EAN_REF FROM theriaque.INTER_INTEROPERABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE INTER_SP_NL = @INTER_"& _ 
                "SP_NL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_NL", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_NL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT INTER_SP_CODE, INTER_SP_NOM, INTER_SP_NL, INTER_PRE_CODE, INTER_SP_CIPUCD,"& _ 
                " INTER_SP_NOMLONG, INTER_PRE_ADMIN, INTER_PRE_ETAT_COMMER,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INTER_SP_CIPUCD13, I"& _ 
                "NTER_PRE_EAN_REF FROM theriaque.INTER_INTEROPERABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE INTER_SP_CODE = @INTE"& _ 
                "R_SP_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTER_SP_CODE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "INTER_SP_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable = New dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeCIP(ByVal dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable, ByVal INTER_PRE_CODE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (INTER_PRE_CODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INTER_PRE_CODE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCIP(ByVal INTER_PRE_CODE As String) As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (INTER_PRE_CODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INTER_PRE_CODE,String)
            End If
            Dim dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable = New dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeCIS(ByVal dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable, ByVal INTER_SP_NL As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (INTER_SP_NL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INTER_SP_NL,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeCIS(ByVal INTER_SP_NL As String) As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (INTER_SP_NL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INTER_SP_NL,String)
            End If
            Dim dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable = New dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeSP(ByVal dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable, ByVal INTER_SP_CODE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (INTER_SP_CODE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INTER_SP_CODE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeSP(ByVal INTER_SP_CODE As Global.System.Nullable(Of Integer)) As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (INTER_SP_CODE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INTER_SP_CODE.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable = New dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Interoperable.INTER_INTEROPERABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Interoperable) As Integer
            Return Me.Adapter.Update(dataSet, "INTER_INTEROPERABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal INTER_SP_CODE As Global.System.Nullable(Of Integer), ByVal INTER_SP_NOM As String, ByVal INTER_SP_NL As String, ByVal INTER_PRE_CODE As String, ByVal INTER_SP_CIPUCD As String, ByVal INTER_SP_NOMLONG As String, ByVal INTER_PRE_ADMIN As String, ByVal INTER_PRE_ETAT_COMMER As String, ByVal INTER_SP_CIPUCD13 As String, ByVal INTER_PRE_EAN_REF As String) As Integer
            If (INTER_SP_CODE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(INTER_SP_CODE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (INTER_SP_NOM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(INTER_SP_NOM,String)
            End If
            If (INTER_SP_NL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(INTER_SP_NL,String)
            End If
            If (INTER_PRE_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(INTER_PRE_CODE,String)
            End If
            If (INTER_SP_CIPUCD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(INTER_SP_CIPUCD,String)
            End If
            If (INTER_SP_NOMLONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(INTER_SP_NOMLONG,String)
            End If
            If (INTER_PRE_ADMIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(INTER_PRE_ADMIN,String)
            End If
            If (INTER_PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(INTER_PRE_ETAT_COMMER,String)
            End If
            If (INTER_SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(INTER_SP_CIPUCD13,String)
            End If
            If (INTER_PRE_EAN_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(INTER_PRE_EAN_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
